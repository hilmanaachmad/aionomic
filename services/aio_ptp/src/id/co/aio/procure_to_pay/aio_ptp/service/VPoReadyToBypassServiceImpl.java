/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoReadyToBypass;


/**
 * ServiceImpl object for domain model class VPoReadyToBypass.
 *
 * @see VPoReadyToBypass
 */
@Service("aio_ptp.VPoReadyToBypassService")
@Validated
@EntityService(entityClass = VPoReadyToBypass.class, serviceId = "aio_ptp")
public class VPoReadyToBypassServiceImpl implements VPoReadyToBypassService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoReadyToBypassServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPoReadyToBypassDao")
    private WMGenericDao<VPoReadyToBypass, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPoReadyToBypass, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToBypass create(VPoReadyToBypass vpoReadyToBypass) {
        LOGGER.debug("Creating a new VPoReadyToBypass with information: {}", vpoReadyToBypass);

        VPoReadyToBypass vpoReadyToBypassCreated = this.wmGenericDao.create(vpoReadyToBypass);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpoReadyToBypassCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToBypass getById(Integer vporeadytobypassId) {
        LOGGER.debug("Finding VPoReadyToBypass by id: {}", vporeadytobypassId);
        return this.wmGenericDao.findById(vporeadytobypassId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToBypass findById(Integer vporeadytobypassId) {
        LOGGER.debug("Finding VPoReadyToBypass by id: {}", vporeadytobypassId);
        try {
            return this.wmGenericDao.findById(vporeadytobypassId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPoReadyToBypass found with id: {}", vporeadytobypassId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPoReadyToBypass> findByMultipleIds(List<Integer> vporeadytobypassIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPoReadyToBypasses by ids: {}", vporeadytobypassIds);

        return this.wmGenericDao.findByMultipleIds(vporeadytobypassIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToBypass update(VPoReadyToBypass vpoReadyToBypass) {
        LOGGER.debug("Updating VPoReadyToBypass with information: {}", vpoReadyToBypass);

        this.wmGenericDao.update(vpoReadyToBypass);
        this.wmGenericDao.refresh(vpoReadyToBypass);

        return vpoReadyToBypass;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToBypass partialUpdate(Integer vporeadytobypassId, Map<String, Object>vpoReadyToBypassPatch) {
        LOGGER.debug("Partially Updating the VPoReadyToBypass with id: {}", vporeadytobypassId);

        VPoReadyToBypass vpoReadyToBypass = getById(vporeadytobypassId);

        try {
            ObjectReader vpoReadyToBypassReader = this.objectMapper.reader().forType(VPoReadyToBypass.class).withValueToUpdate(vpoReadyToBypass);
            vpoReadyToBypass = vpoReadyToBypassReader.readValue(this.objectMapper.writeValueAsString(vpoReadyToBypassPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpoReadyToBypassPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpoReadyToBypass = update(vpoReadyToBypass);

        return vpoReadyToBypass;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToBypass delete(Integer vporeadytobypassId) {
        LOGGER.debug("Deleting VPoReadyToBypass with id: {}", vporeadytobypassId);
        VPoReadyToBypass deleted = this.wmGenericDao.findById(vporeadytobypassId);
        if (deleted == null) {
            LOGGER.debug("No VPoReadyToBypass found with id: {}", vporeadytobypassId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPoReadyToBypass.class.getSimpleName(), vporeadytobypassId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPoReadyToBypass vpoReadyToBypass) {
        LOGGER.debug("Deleting VPoReadyToBypass with {}", vpoReadyToBypass);
        this.wmGenericDao.delete(vpoReadyToBypass);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoReadyToBypass> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPoReadyToBypasses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoReadyToBypass> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPoReadyToBypasses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoReadyToBypass to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoReadyToBypass to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}