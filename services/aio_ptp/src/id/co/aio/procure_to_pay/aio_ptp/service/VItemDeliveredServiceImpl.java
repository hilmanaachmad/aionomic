/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VItemDelivered;


/**
 * ServiceImpl object for domain model class VItemDelivered.
 *
 * @see VItemDelivered
 */
@Service("aio_ptp.VItemDeliveredService")
@Validated
@EntityService(entityClass = VItemDelivered.class, serviceId = "aio_ptp")
public class VItemDeliveredServiceImpl implements VItemDeliveredService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VItemDeliveredServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VItemDeliveredDao")
    private WMGenericDao<VItemDelivered, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VItemDelivered, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VItemDelivered create(VItemDelivered vitemDelivered) {
        LOGGER.debug("Creating a new VItemDelivered with information: {}", vitemDelivered);

        VItemDelivered vitemDeliveredCreated = this.wmGenericDao.create(vitemDelivered);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vitemDeliveredCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VItemDelivered getById(Integer vitemdeliveredId) {
        LOGGER.debug("Finding VItemDelivered by id: {}", vitemdeliveredId);
        return this.wmGenericDao.findById(vitemdeliveredId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VItemDelivered findById(Integer vitemdeliveredId) {
        LOGGER.debug("Finding VItemDelivered by id: {}", vitemdeliveredId);
        try {
            return this.wmGenericDao.findById(vitemdeliveredId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VItemDelivered found with id: {}", vitemdeliveredId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VItemDelivered> findByMultipleIds(List<Integer> vitemdeliveredIds, boolean orderedReturn) {
        LOGGER.debug("Finding VItemDelivereds by ids: {}", vitemdeliveredIds);

        return this.wmGenericDao.findByMultipleIds(vitemdeliveredIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VItemDelivered update(VItemDelivered vitemDelivered) {
        LOGGER.debug("Updating VItemDelivered with information: {}", vitemDelivered);

        this.wmGenericDao.update(vitemDelivered);
        this.wmGenericDao.refresh(vitemDelivered);

        return vitemDelivered;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VItemDelivered partialUpdate(Integer vitemdeliveredId, Map<String, Object>vitemDeliveredPatch) {
        LOGGER.debug("Partially Updating the VItemDelivered with id: {}", vitemdeliveredId);

        VItemDelivered vitemDelivered = getById(vitemdeliveredId);

        try {
            ObjectReader vitemDeliveredReader = this.objectMapper.reader().forType(VItemDelivered.class).withValueToUpdate(vitemDelivered);
            vitemDelivered = vitemDeliveredReader.readValue(this.objectMapper.writeValueAsString(vitemDeliveredPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vitemDeliveredPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vitemDelivered = update(vitemDelivered);

        return vitemDelivered;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VItemDelivered delete(Integer vitemdeliveredId) {
        LOGGER.debug("Deleting VItemDelivered with id: {}", vitemdeliveredId);
        VItemDelivered deleted = this.wmGenericDao.findById(vitemdeliveredId);
        if (deleted == null) {
            LOGGER.debug("No VItemDelivered found with id: {}", vitemdeliveredId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VItemDelivered.class.getSimpleName(), vitemdeliveredId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VItemDelivered vitemDelivered) {
        LOGGER.debug("Deleting VItemDelivered with {}", vitemDelivered);
        this.wmGenericDao.delete(vitemDelivered);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VItemDelivered> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VItemDelivereds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VItemDelivered> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VItemDelivereds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VItemDelivered to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VItemDelivered to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}