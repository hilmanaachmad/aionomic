/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserRole;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMUserRoleService;


/**
 * Controller object for domain model class TblMUserRole.
 * @see TblMUserRole
 */
@RestController("aio_ptp.TblMUserRoleController")
@Api(value = "TblMUserRoleController", description = "Exposes APIs to work with TblMUserRole resource.")
@RequestMapping("/aio_ptp/TblMUserRole")
public class TblMUserRoleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserRoleController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMUserRoleService")
	private TblMUserRoleService tblMUserRoleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMUserRole instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserRole createTblMUserRole(@RequestBody TblMUserRole tblMuserRole) {
		LOGGER.debug("Create TblMUserRole with information: {}" , tblMuserRole);

		tblMuserRole = tblMUserRoleService.create(tblMuserRole);
		LOGGER.debug("Created TblMUserRole with information: {}" , tblMuserRole);

	    return tblMuserRole;
	}

    @ApiOperation(value = "Returns the TblMUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserRole getTblMUserRole(@PathVariable("urId") Integer urId) {
        LOGGER.debug("Getting TblMUserRole with id: {}" , urId);

        TblMUserRole foundTblMUserRole = tblMUserRoleService.getById(urId);
        LOGGER.debug("TblMUserRole details with id: {}" , foundTblMUserRole);

        return foundTblMUserRole;
    }

    @ApiOperation(value = "Updates the TblMUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserRole editTblMUserRole(@PathVariable("urId") Integer urId, @RequestBody TblMUserRole tblMuserRole) {
        LOGGER.debug("Editing TblMUserRole with id: {}" , tblMuserRole.getUrId());

        tblMuserRole.setUrId(urId);
        tblMuserRole = tblMUserRoleService.update(tblMuserRole);
        LOGGER.debug("TblMUserRole details with id: {}" , tblMuserRole);

        return tblMuserRole;
    }
    
    @ApiOperation(value = "Partially updates the TblMUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserRole patchTblMUserRole(@PathVariable("urId") Integer urId, @RequestBody @MapTo(TblMUserRole.class) Map<String, Object> tblMuserRolePatch) {
        LOGGER.debug("Partially updating TblMUserRole with id: {}" , urId);

        TblMUserRole tblMuserRole = tblMUserRoleService.partialUpdate(urId, tblMuserRolePatch);
        LOGGER.debug("TblMUserRole details after partial update: {}" , tblMuserRole);

        return tblMuserRole;
    }

    @ApiOperation(value = "Deletes the TblMUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMUserRole(@PathVariable("urId") Integer urId) {
        LOGGER.debug("Deleting TblMUserRole with id: {}" , urId);

        TblMUserRole deletedTblMUserRole = tblMUserRoleService.delete(urId);

        return deletedTblMUserRole != null;
    }

    /**
     * @deprecated Use {@link #findTblMUserRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMUserRole instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserRole> searchTblMUserRolesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMUserRoles list by query filter:{}", (Object) queryFilters);
        return tblMUserRoleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMUserRole instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserRole> findTblMUserRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMUserRoles list by filter:", query);
        return tblMUserRoleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMUserRole instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserRole> filterTblMUserRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMUserRoles list by filter", query);
        return tblMUserRoleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMUserRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMUserRoleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMUserRolesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMUserRole.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMUserRoleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMUserRole instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMUserRoles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMUserRoles");
		return tblMUserRoleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMUserRoleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMUserRoleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMUserRoleService instance
	 */
	protected void setTblMUserRoleService(TblMUserRoleService service) {
		this.tblMUserRoleService = service;
	}

}