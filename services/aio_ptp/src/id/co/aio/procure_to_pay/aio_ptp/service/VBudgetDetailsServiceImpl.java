/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetDetails;


/**
 * ServiceImpl object for domain model class VBudgetDetails.
 *
 * @see VBudgetDetails
 */
@Service("aio_ptp.VBudgetDetailsService")
@Validated
@EntityService(entityClass = VBudgetDetails.class, serviceId = "aio_ptp")
public class VBudgetDetailsServiceImpl implements VBudgetDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBudgetDetailsServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VBudgetDetailsDao")
    private WMGenericDao<VBudgetDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VBudgetDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetails create(VBudgetDetails vbudgetDetails) {
        LOGGER.debug("Creating a new VBudgetDetails with information: {}", vbudgetDetails);

        VBudgetDetails vbudgetDetailsCreated = this.wmGenericDao.create(vbudgetDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vbudgetDetailsCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetails getById(Integer vbudgetdetailsId) {
        LOGGER.debug("Finding VBudgetDetails by id: {}", vbudgetdetailsId);
        return this.wmGenericDao.findById(vbudgetdetailsId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetails findById(Integer vbudgetdetailsId) {
        LOGGER.debug("Finding VBudgetDetails by id: {}", vbudgetdetailsId);
        try {
            return this.wmGenericDao.findById(vbudgetdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VBudgetDetails found with id: {}", vbudgetdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VBudgetDetails> findByMultipleIds(List<Integer> vbudgetdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding VBudgetDetails by ids: {}", vbudgetdetailsIds);

        return this.wmGenericDao.findByMultipleIds(vbudgetdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetails update(VBudgetDetails vbudgetDetails) {
        LOGGER.debug("Updating VBudgetDetails with information: {}", vbudgetDetails);

        this.wmGenericDao.update(vbudgetDetails);
        this.wmGenericDao.refresh(vbudgetDetails);

        return vbudgetDetails;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetails partialUpdate(Integer vbudgetdetailsId, Map<String, Object>vbudgetDetailsPatch) {
        LOGGER.debug("Partially Updating the VBudgetDetails with id: {}", vbudgetdetailsId);

        VBudgetDetails vbudgetDetails = getById(vbudgetdetailsId);

        try {
            ObjectReader vbudgetDetailsReader = this.objectMapper.reader().forType(VBudgetDetails.class).withValueToUpdate(vbudgetDetails);
            vbudgetDetails = vbudgetDetailsReader.readValue(this.objectMapper.writeValueAsString(vbudgetDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vbudgetDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vbudgetDetails = update(vbudgetDetails);

        return vbudgetDetails;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetails delete(Integer vbudgetdetailsId) {
        LOGGER.debug("Deleting VBudgetDetails with id: {}", vbudgetdetailsId);
        VBudgetDetails deleted = this.wmGenericDao.findById(vbudgetdetailsId);
        if (deleted == null) {
            LOGGER.debug("No VBudgetDetails found with id: {}", vbudgetdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VBudgetDetails.class.getSimpleName(), vbudgetdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VBudgetDetails vbudgetDetails) {
        LOGGER.debug("Deleting VBudgetDetails with {}", vbudgetDetails);
        this.wmGenericDao.delete(vbudgetDetails);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VBudgetDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VBudgetDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VBudgetDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VBudgetDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VBudgetDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VBudgetDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}