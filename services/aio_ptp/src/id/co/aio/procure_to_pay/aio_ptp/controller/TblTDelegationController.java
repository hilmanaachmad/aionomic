/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.RelDelAuth;
import id.co.aio.procure_to_pay.aio_ptp.TblTDelegation;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTDelegationService;


/**
 * Controller object for domain model class TblTDelegation.
 * @see TblTDelegation
 */
@RestController("aio_ptp.TblTDelegationController")
@Api(value = "TblTDelegationController", description = "Exposes APIs to work with TblTDelegation resource.")
@RequestMapping("/aio_ptp/TblTDelegation")
public class TblTDelegationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTDelegationController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTDelegationService")
	private TblTDelegationService tblTDelegationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTDelegation instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTDelegation createTblTDelegation(@RequestBody TblTDelegation tblTdelegation) {
		LOGGER.debug("Create TblTDelegation with information: {}" , tblTdelegation);

		tblTdelegation = tblTDelegationService.create(tblTdelegation);
		LOGGER.debug("Created TblTDelegation with information: {}" , tblTdelegation);

	    return tblTdelegation;
	}

    @ApiOperation(value = "Returns the TblTDelegation instance associated with the given id.")
    @RequestMapping(value = "/{delId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTDelegation getTblTDelegation(@PathVariable("delId") Integer delId) {
        LOGGER.debug("Getting TblTDelegation with id: {}" , delId);

        TblTDelegation foundTblTDelegation = tblTDelegationService.getById(delId);
        LOGGER.debug("TblTDelegation details with id: {}" , foundTblTDelegation);

        return foundTblTDelegation;
    }

    @ApiOperation(value = "Updates the TblTDelegation instance associated with the given id.")
    @RequestMapping(value = "/{delId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTDelegation editTblTDelegation(@PathVariable("delId") Integer delId, @RequestBody TblTDelegation tblTdelegation) {
        LOGGER.debug("Editing TblTDelegation with id: {}" , tblTdelegation.getDelId());

        tblTdelegation.setDelId(delId);
        tblTdelegation = tblTDelegationService.update(tblTdelegation);
        LOGGER.debug("TblTDelegation details with id: {}" , tblTdelegation);

        return tblTdelegation;
    }
    
    @ApiOperation(value = "Partially updates the TblTDelegation instance associated with the given id.")
    @RequestMapping(value = "/{delId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTDelegation patchTblTDelegation(@PathVariable("delId") Integer delId, @RequestBody @MapTo(TblTDelegation.class) Map<String, Object> tblTdelegationPatch) {
        LOGGER.debug("Partially updating TblTDelegation with id: {}" , delId);

        TblTDelegation tblTdelegation = tblTDelegationService.partialUpdate(delId, tblTdelegationPatch);
        LOGGER.debug("TblTDelegation details after partial update: {}" , tblTdelegation);

        return tblTdelegation;
    }

    @ApiOperation(value = "Deletes the TblTDelegation instance associated with the given id.")
    @RequestMapping(value = "/{delId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTDelegation(@PathVariable("delId") Integer delId) {
        LOGGER.debug("Deleting TblTDelegation with id: {}" , delId);

        TblTDelegation deletedTblTDelegation = tblTDelegationService.delete(delId);

        return deletedTblTDelegation != null;
    }

    /**
     * @deprecated Use {@link #findTblTDelegations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTDelegation instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTDelegation> searchTblTDelegationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTDelegations list by query filter:{}", (Object) queryFilters);
        return tblTDelegationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTDelegation instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTDelegation> findTblTDelegations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTDelegations list by filter:", query);
        return tblTDelegationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTDelegation instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTDelegation> filterTblTDelegations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTDelegations list by filter", query);
        return tblTDelegationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTDelegations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTDelegationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTDelegationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTDelegation.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTDelegationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTDelegation instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTDelegations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTDelegations");
		return tblTDelegationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTDelegationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTDelegationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{delId:.+}/relDelAuths", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the relDelAuths instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelDelAuth> findAssociatedRelDelAuths(@PathVariable("delId") Integer delId, Pageable pageable) {

        LOGGER.debug("Fetching all associated relDelAuths");
        return tblTDelegationService.findAssociatedRelDelAuths(delId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTDelegationService instance
	 */
	protected void setTblTDelegationService(TblTDelegationService service) {
		this.tblTDelegationService = service;
	}

}