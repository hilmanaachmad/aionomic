/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTGrLineItem;


/**
 * ServiceImpl object for domain model class TblTGrLineItem.
 *
 * @see TblTGrLineItem
 */
@Service("aio_ptp.TblTGrLineItemService")
@Validated
@EntityService(entityClass = TblTGrLineItem.class, serviceId = "aio_ptp")
public class TblTGrLineItemServiceImpl implements TblTGrLineItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTGrLineItemServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTGrLineItemDao")
    private WMGenericDao<TblTGrLineItem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTGrLineItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTGrLineItem create(TblTGrLineItem tblTgrLineItem) {
        LOGGER.debug("Creating a new TblTGrLineItem with information: {}", tblTgrLineItem);

        TblTGrLineItem tblTgrLineItemCreated = this.wmGenericDao.create(tblTgrLineItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTgrLineItemCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTGrLineItem getById(Integer tbltgrlineitemId) {
        LOGGER.debug("Finding TblTGrLineItem by id: {}", tbltgrlineitemId);
        return this.wmGenericDao.findById(tbltgrlineitemId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTGrLineItem findById(Integer tbltgrlineitemId) {
        LOGGER.debug("Finding TblTGrLineItem by id: {}", tbltgrlineitemId);
        try {
            return this.wmGenericDao.findById(tbltgrlineitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTGrLineItem found with id: {}", tbltgrlineitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTGrLineItem> findByMultipleIds(List<Integer> tbltgrlineitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTGrLineItems by ids: {}", tbltgrlineitemIds);

        return this.wmGenericDao.findByMultipleIds(tbltgrlineitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTGrLineItem update(TblTGrLineItem tblTgrLineItem) {
        LOGGER.debug("Updating TblTGrLineItem with information: {}", tblTgrLineItem);

        this.wmGenericDao.update(tblTgrLineItem);
        this.wmGenericDao.refresh(tblTgrLineItem);

        return tblTgrLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTGrLineItem partialUpdate(Integer tbltgrlineitemId, Map<String, Object>tblTgrLineItemPatch) {
        LOGGER.debug("Partially Updating the TblTGrLineItem with id: {}", tbltgrlineitemId);

        TblTGrLineItem tblTgrLineItem = getById(tbltgrlineitemId);

        try {
            ObjectReader tblTgrLineItemReader = this.objectMapper.reader().forType(TblTGrLineItem.class).withValueToUpdate(tblTgrLineItem);
            tblTgrLineItem = tblTgrLineItemReader.readValue(this.objectMapper.writeValueAsString(tblTgrLineItemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTgrLineItemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTgrLineItem = update(tblTgrLineItem);

        return tblTgrLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTGrLineItem delete(Integer tbltgrlineitemId) {
        LOGGER.debug("Deleting TblTGrLineItem with id: {}", tbltgrlineitemId);
        TblTGrLineItem deleted = this.wmGenericDao.findById(tbltgrlineitemId);
        if (deleted == null) {
            LOGGER.debug("No TblTGrLineItem found with id: {}", tbltgrlineitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTGrLineItem.class.getSimpleName(), tbltgrlineitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTGrLineItem tblTgrLineItem) {
        LOGGER.debug("Deleting TblTGrLineItem with {}", tblTgrLineItem);
        this.wmGenericDao.delete(tblTgrLineItem);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTGrLineItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTGrLineItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTGrLineItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTGrLineItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTGrLineItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTGrLineItem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}