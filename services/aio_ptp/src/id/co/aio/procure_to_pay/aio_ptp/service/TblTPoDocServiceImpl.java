/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPoDoc;


/**
 * ServiceImpl object for domain model class TblTPoDoc.
 *
 * @see TblTPoDoc
 */
@Service("aio_ptp.TblTPoDocService")
@Validated
@EntityService(entityClass = TblTPoDoc.class, serviceId = "aio_ptp")
public class TblTPoDocServiceImpl implements TblTPoDocService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPoDocServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTPoDocDao")
    private WMGenericDao<TblTPoDoc, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTPoDoc, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoDoc create(TblTPoDoc tblTpoDoc) {
        LOGGER.debug("Creating a new TblTPoDoc with information: {}", tblTpoDoc);

        TblTPoDoc tblTpoDocCreated = this.wmGenericDao.create(tblTpoDoc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTpoDocCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoDoc getById(Integer tbltpodocId) {
        LOGGER.debug("Finding TblTPoDoc by id: {}", tbltpodocId);
        return this.wmGenericDao.findById(tbltpodocId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoDoc findById(Integer tbltpodocId) {
        LOGGER.debug("Finding TblTPoDoc by id: {}", tbltpodocId);
        try {
            return this.wmGenericDao.findById(tbltpodocId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTPoDoc found with id: {}", tbltpodocId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTPoDoc> findByMultipleIds(List<Integer> tbltpodocIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTPoDocs by ids: {}", tbltpodocIds);

        return this.wmGenericDao.findByMultipleIds(tbltpodocIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoDoc update(TblTPoDoc tblTpoDoc) {
        LOGGER.debug("Updating TblTPoDoc with information: {}", tblTpoDoc);

        this.wmGenericDao.update(tblTpoDoc);
        this.wmGenericDao.refresh(tblTpoDoc);

        return tblTpoDoc;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoDoc partialUpdate(Integer tbltpodocId, Map<String, Object>tblTpoDocPatch) {
        LOGGER.debug("Partially Updating the TblTPoDoc with id: {}", tbltpodocId);

        TblTPoDoc tblTpoDoc = getById(tbltpodocId);

        try {
            ObjectReader tblTpoDocReader = this.objectMapper.reader().forType(TblTPoDoc.class).withValueToUpdate(tblTpoDoc);
            tblTpoDoc = tblTpoDocReader.readValue(this.objectMapper.writeValueAsString(tblTpoDocPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTpoDocPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTpoDoc = update(tblTpoDoc);

        return tblTpoDoc;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoDoc delete(Integer tbltpodocId) {
        LOGGER.debug("Deleting TblTPoDoc with id: {}", tbltpodocId);
        TblTPoDoc deleted = this.wmGenericDao.findById(tbltpodocId);
        if (deleted == null) {
            LOGGER.debug("No TblTPoDoc found with id: {}", tbltpodocId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTPoDoc.class.getSimpleName(), tbltpodocId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTPoDoc tblTpoDoc) {
        LOGGER.debug("Deleting TblTPoDoc with {}", tblTpoDoc);
        this.wmGenericDao.delete(tblTpoDoc);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPoDoc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTPoDocs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPoDoc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTPoDocs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPoDoc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPoDoc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}