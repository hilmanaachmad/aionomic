/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTAdditionalAttachment;


/**
 * ServiceImpl object for domain model class TblTAdditionalAttachment.
 *
 * @see TblTAdditionalAttachment
 */
@Service("aio_ptp.TblTAdditionalAttachmentService")
@Validated
@EntityService(entityClass = TblTAdditionalAttachment.class, serviceId = "aio_ptp")
public class TblTAdditionalAttachmentServiceImpl implements TblTAdditionalAttachmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTAdditionalAttachmentServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTAdditionalAttachmentDao")
    private WMGenericDao<TblTAdditionalAttachment, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTAdditionalAttachment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalAttachment create(TblTAdditionalAttachment tblTadditionalAttachment) {
        LOGGER.debug("Creating a new TblTAdditionalAttachment with information: {}", tblTadditionalAttachment);

        TblTAdditionalAttachment tblTadditionalAttachmentCreated = this.wmGenericDao.create(tblTadditionalAttachment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTadditionalAttachmentCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalAttachment getById(Integer tbltadditionalattachmentId) {
        LOGGER.debug("Finding TblTAdditionalAttachment by id: {}", tbltadditionalattachmentId);
        return this.wmGenericDao.findById(tbltadditionalattachmentId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalAttachment findById(Integer tbltadditionalattachmentId) {
        LOGGER.debug("Finding TblTAdditionalAttachment by id: {}", tbltadditionalattachmentId);
        try {
            return this.wmGenericDao.findById(tbltadditionalattachmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTAdditionalAttachment found with id: {}", tbltadditionalattachmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTAdditionalAttachment> findByMultipleIds(List<Integer> tbltadditionalattachmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTAdditionalAttachments by ids: {}", tbltadditionalattachmentIds);

        return this.wmGenericDao.findByMultipleIds(tbltadditionalattachmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalAttachment update(TblTAdditionalAttachment tblTadditionalAttachment) {
        LOGGER.debug("Updating TblTAdditionalAttachment with information: {}", tblTadditionalAttachment);

        this.wmGenericDao.update(tblTadditionalAttachment);
        this.wmGenericDao.refresh(tblTadditionalAttachment);

        return tblTadditionalAttachment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalAttachment partialUpdate(Integer tbltadditionalattachmentId, Map<String, Object>tblTadditionalAttachmentPatch) {
        LOGGER.debug("Partially Updating the TblTAdditionalAttachment with id: {}", tbltadditionalattachmentId);

        TblTAdditionalAttachment tblTadditionalAttachment = getById(tbltadditionalattachmentId);

        try {
            ObjectReader tblTadditionalAttachmentReader = this.objectMapper.reader().forType(TblTAdditionalAttachment.class).withValueToUpdate(tblTadditionalAttachment);
            tblTadditionalAttachment = tblTadditionalAttachmentReader.readValue(this.objectMapper.writeValueAsString(tblTadditionalAttachmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTadditionalAttachmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTadditionalAttachment = update(tblTadditionalAttachment);

        return tblTadditionalAttachment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalAttachment delete(Integer tbltadditionalattachmentId) {
        LOGGER.debug("Deleting TblTAdditionalAttachment with id: {}", tbltadditionalattachmentId);
        TblTAdditionalAttachment deleted = this.wmGenericDao.findById(tbltadditionalattachmentId);
        if (deleted == null) {
            LOGGER.debug("No TblTAdditionalAttachment found with id: {}", tbltadditionalattachmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTAdditionalAttachment.class.getSimpleName(), tbltadditionalattachmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTAdditionalAttachment tblTadditionalAttachment) {
        LOGGER.debug("Deleting TblTAdditionalAttachment with {}", tblTadditionalAttachment);
        this.wmGenericDao.delete(tblTadditionalAttachment);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTAdditionalAttachment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTAdditionalAttachments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTAdditionalAttachment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTAdditionalAttachments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTAdditionalAttachment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTAdditionalAttachment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}