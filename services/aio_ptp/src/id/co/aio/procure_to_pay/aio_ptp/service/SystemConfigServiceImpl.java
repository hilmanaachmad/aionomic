/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.SystemConfig;


/**
 * ServiceImpl object for domain model class SystemConfig.
 *
 * @see SystemConfig
 */
@Service("aio_ptp.SystemConfigService")
@Validated
@EntityService(entityClass = SystemConfig.class, serviceId = "aio_ptp")
public class SystemConfigServiceImpl implements SystemConfigService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SystemConfigServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.SystemConfigDao")
    private WMGenericDao<SystemConfig, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SystemConfig, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SystemConfig create(SystemConfig systemConfig) {
        LOGGER.debug("Creating a new SystemConfig with information: {}", systemConfig);

        SystemConfig systemConfigCreated = this.wmGenericDao.create(systemConfig);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(systemConfigCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public SystemConfig getById(Integer systemconfigId) {
        LOGGER.debug("Finding SystemConfig by id: {}", systemconfigId);
        return this.wmGenericDao.findById(systemconfigId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public SystemConfig findById(Integer systemconfigId) {
        LOGGER.debug("Finding SystemConfig by id: {}", systemconfigId);
        try {
            return this.wmGenericDao.findById(systemconfigId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SystemConfig found with id: {}", systemconfigId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<SystemConfig> findByMultipleIds(List<Integer> systemconfigIds, boolean orderedReturn) {
        LOGGER.debug("Finding SystemConfigs by ids: {}", systemconfigIds);

        return this.wmGenericDao.findByMultipleIds(systemconfigIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public SystemConfig update(SystemConfig systemConfig) {
        LOGGER.debug("Updating SystemConfig with information: {}", systemConfig);

        this.wmGenericDao.update(systemConfig);
        this.wmGenericDao.refresh(systemConfig);

        return systemConfig;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SystemConfig partialUpdate(Integer systemconfigId, Map<String, Object>systemConfigPatch) {
        LOGGER.debug("Partially Updating the SystemConfig with id: {}", systemconfigId);

        SystemConfig systemConfig = getById(systemconfigId);

        try {
            ObjectReader systemConfigReader = this.objectMapper.reader().forType(SystemConfig.class).withValueToUpdate(systemConfig);
            systemConfig = systemConfigReader.readValue(this.objectMapper.writeValueAsString(systemConfigPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", systemConfigPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        systemConfig = update(systemConfig);

        return systemConfig;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SystemConfig delete(Integer systemconfigId) {
        LOGGER.debug("Deleting SystemConfig with id: {}", systemconfigId);
        SystemConfig deleted = this.wmGenericDao.findById(systemconfigId);
        if (deleted == null) {
            LOGGER.debug("No SystemConfig found with id: {}", systemconfigId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SystemConfig.class.getSimpleName(), systemconfigId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(SystemConfig systemConfig) {
        LOGGER.debug("Deleting SystemConfig with {}", systemConfig);
        this.wmGenericDao.delete(systemConfig);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<SystemConfig> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SystemConfigs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<SystemConfig> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SystemConfigs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table SystemConfig to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table SystemConfig to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}