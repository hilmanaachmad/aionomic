/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTAnnouncement;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTAnnouncementService;


/**
 * Controller object for domain model class TblTAnnouncement.
 * @see TblTAnnouncement
 */
@RestController("aio_ptp.TblTAnnouncementController")
@Api(value = "TblTAnnouncementController", description = "Exposes APIs to work with TblTAnnouncement resource.")
@RequestMapping("/aio_ptp/TblTAnnouncement")
public class TblTAnnouncementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTAnnouncementController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTAnnouncementService")
	private TblTAnnouncementService tblTAnnouncementService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTAnnouncement instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTAnnouncement createTblTAnnouncement(@RequestBody TblTAnnouncement tblTannouncement) {
		LOGGER.debug("Create TblTAnnouncement with information: {}" , tblTannouncement);

		tblTannouncement = tblTAnnouncementService.create(tblTannouncement);
		LOGGER.debug("Created TblTAnnouncement with information: {}" , tblTannouncement);

	    return tblTannouncement;
	}

    @ApiOperation(value = "Returns the TblTAnnouncement instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTAnnouncement getTblTAnnouncement(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TblTAnnouncement with id: {}" , id);

        TblTAnnouncement foundTblTAnnouncement = tblTAnnouncementService.getById(id);
        LOGGER.debug("TblTAnnouncement details with id: {}" , foundTblTAnnouncement);

        return foundTblTAnnouncement;
    }

    @ApiOperation(value = "Updates the TblTAnnouncement instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTAnnouncement editTblTAnnouncement(@PathVariable("id") Integer id, @RequestBody TblTAnnouncement tblTannouncement) {
        LOGGER.debug("Editing TblTAnnouncement with id: {}" , tblTannouncement.getId());

        tblTannouncement.setId(id);
        tblTannouncement = tblTAnnouncementService.update(tblTannouncement);
        LOGGER.debug("TblTAnnouncement details with id: {}" , tblTannouncement);

        return tblTannouncement;
    }
    
    @ApiOperation(value = "Partially updates the TblTAnnouncement instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTAnnouncement patchTblTAnnouncement(@PathVariable("id") Integer id, @RequestBody @MapTo(TblTAnnouncement.class) Map<String, Object> tblTannouncementPatch) {
        LOGGER.debug("Partially updating TblTAnnouncement with id: {}" , id);

        TblTAnnouncement tblTannouncement = tblTAnnouncementService.partialUpdate(id, tblTannouncementPatch);
        LOGGER.debug("TblTAnnouncement details after partial update: {}" , tblTannouncement);

        return tblTannouncement;
    }

    @ApiOperation(value = "Deletes the TblTAnnouncement instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTAnnouncement(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TblTAnnouncement with id: {}" , id);

        TblTAnnouncement deletedTblTAnnouncement = tblTAnnouncementService.delete(id);

        return deletedTblTAnnouncement != null;
    }

    /**
     * @deprecated Use {@link #findTblTAnnouncements(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTAnnouncement instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTAnnouncement> searchTblTAnnouncementsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTAnnouncements list by query filter:{}", (Object) queryFilters);
        return tblTAnnouncementService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTAnnouncement instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTAnnouncement> findTblTAnnouncements(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTAnnouncements list by filter:", query);
        return tblTAnnouncementService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTAnnouncement instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTAnnouncement> filterTblTAnnouncements(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTAnnouncements list by filter", query);
        return tblTAnnouncementService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTAnnouncements(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTAnnouncementService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTAnnouncementsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTAnnouncement.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTAnnouncementService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTAnnouncement instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTAnnouncements( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTAnnouncements");
		return tblTAnnouncementService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTAnnouncementAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTAnnouncementService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTAnnouncementService instance
	 */
	protected void setTblTAnnouncementService(TblTAnnouncementService service) {
		this.tblTAnnouncementService = service;
	}

}