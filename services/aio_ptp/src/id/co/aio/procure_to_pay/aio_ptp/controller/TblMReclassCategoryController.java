/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMReclassCategory;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetDetails;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetReclass;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMReclassCategoryService;


/**
 * Controller object for domain model class TblMReclassCategory.
 * @see TblMReclassCategory
 */
@RestController("aio_ptp.TblMReclassCategoryController")
@Api(value = "TblMReclassCategoryController", description = "Exposes APIs to work with TblMReclassCategory resource.")
@RequestMapping("/aio_ptp/TblMReclassCategory")
public class TblMReclassCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMReclassCategoryController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMReclassCategoryService")
	private TblMReclassCategoryService tblMReclassCategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMReclassCategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMReclassCategory createTblMReclassCategory(@RequestBody TblMReclassCategory tblMreclassCategory) {
		LOGGER.debug("Create TblMReclassCategory with information: {}" , tblMreclassCategory);

		tblMreclassCategory = tblMReclassCategoryService.create(tblMreclassCategory);
		LOGGER.debug("Created TblMReclassCategory with information: {}" , tblMreclassCategory);

	    return tblMreclassCategory;
	}

    @ApiOperation(value = "Returns the TblMReclassCategory instance associated with the given id.")
    @RequestMapping(value = "/{rcatId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMReclassCategory getTblMReclassCategory(@PathVariable("rcatId") Integer rcatId) {
        LOGGER.debug("Getting TblMReclassCategory with id: {}" , rcatId);

        TblMReclassCategory foundTblMReclassCategory = tblMReclassCategoryService.getById(rcatId);
        LOGGER.debug("TblMReclassCategory details with id: {}" , foundTblMReclassCategory);

        return foundTblMReclassCategory;
    }

    @ApiOperation(value = "Updates the TblMReclassCategory instance associated with the given id.")
    @RequestMapping(value = "/{rcatId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMReclassCategory editTblMReclassCategory(@PathVariable("rcatId") Integer rcatId, @RequestBody TblMReclassCategory tblMreclassCategory) {
        LOGGER.debug("Editing TblMReclassCategory with id: {}" , tblMreclassCategory.getRcatId());

        tblMreclassCategory.setRcatId(rcatId);
        tblMreclassCategory = tblMReclassCategoryService.update(tblMreclassCategory);
        LOGGER.debug("TblMReclassCategory details with id: {}" , tblMreclassCategory);

        return tblMreclassCategory;
    }
    
    @ApiOperation(value = "Partially updates the TblMReclassCategory instance associated with the given id.")
    @RequestMapping(value = "/{rcatId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMReclassCategory patchTblMReclassCategory(@PathVariable("rcatId") Integer rcatId, @RequestBody @MapTo(TblMReclassCategory.class) Map<String, Object> tblMreclassCategoryPatch) {
        LOGGER.debug("Partially updating TblMReclassCategory with id: {}" , rcatId);

        TblMReclassCategory tblMreclassCategory = tblMReclassCategoryService.partialUpdate(rcatId, tblMreclassCategoryPatch);
        LOGGER.debug("TblMReclassCategory details after partial update: {}" , tblMreclassCategory);

        return tblMreclassCategory;
    }

    @ApiOperation(value = "Deletes the TblMReclassCategory instance associated with the given id.")
    @RequestMapping(value = "/{rcatId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMReclassCategory(@PathVariable("rcatId") Integer rcatId) {
        LOGGER.debug("Deleting TblMReclassCategory with id: {}" , rcatId);

        TblMReclassCategory deletedTblMReclassCategory = tblMReclassCategoryService.delete(rcatId);

        return deletedTblMReclassCategory != null;
    }

    /**
     * @deprecated Use {@link #findTblMReclassCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMReclassCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMReclassCategory> searchTblMReclassCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMReclassCategories list by query filter:{}", (Object) queryFilters);
        return tblMReclassCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMReclassCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMReclassCategory> findTblMReclassCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMReclassCategories list by filter:", query);
        return tblMReclassCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMReclassCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMReclassCategory> filterTblMReclassCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMReclassCategories list by filter", query);
        return tblMReclassCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMReclassCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMReclassCategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMReclassCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMReclassCategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMReclassCategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMReclassCategory instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMReclassCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMReclassCategories");
		return tblMReclassCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMReclassCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMReclassCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{rcatId:.+}/tblTbudgetDetailses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTbudgetDetailses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetDetails> findAssociatedTblTbudgetDetailses(@PathVariable("rcatId") Integer rcatId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTbudgetDetailses");
        return tblMReclassCategoryService.findAssociatedTblTbudgetDetailses(rcatId, pageable);
    }

    @RequestMapping(value="/{rcatId:.+}/tblTbudgetReclasses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTbudgetReclasses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetReclass> findAssociatedTblTbudgetReclasses(@PathVariable("rcatId") Integer rcatId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTbudgetReclasses");
        return tblMReclassCategoryService.findAssociatedTblTbudgetReclasses(rcatId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMReclassCategoryService instance
	 */
	protected void setTblMReclassCategoryService(TblMReclassCategoryService service) {
		this.tblMReclassCategoryService = service;
	}

}