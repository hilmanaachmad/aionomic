/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPoVendorAddress;
import id.co.aio.procure_to_pay.aio_ptp.service.VPoVendorAddressService;


/**
 * Controller object for domain model class VPoVendorAddress.
 * @see VPoVendorAddress
 */
@RestController("aio_ptp.VPoVendorAddressController")
@Api(value = "VPoVendorAddressController", description = "Exposes APIs to work with VPoVendorAddress resource.")
@RequestMapping("/aio_ptp/VPoVendorAddress")
public class VPoVendorAddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoVendorAddressController.class);

    @Autowired
	@Qualifier("aio_ptp.VPoVendorAddressService")
	private VPoVendorAddressService vPoVendorAddressService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPoVendorAddress instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoVendorAddress createVPoVendorAddress(@RequestBody VPoVendorAddress vpoVendorAddress) {
		LOGGER.debug("Create VPoVendorAddress with information: {}" , vpoVendorAddress);

		vpoVendorAddress = vPoVendorAddressService.create(vpoVendorAddress);
		LOGGER.debug("Created VPoVendorAddress with information: {}" , vpoVendorAddress);

	    return vpoVendorAddress;
	}

    @ApiOperation(value = "Returns the VPoVendorAddress instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoVendorAddress getVPoVendorAddress(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VPoVendorAddress with id: {}" , id);

        VPoVendorAddress foundVPoVendorAddress = vPoVendorAddressService.getById(id);
        LOGGER.debug("VPoVendorAddress details with id: {}" , foundVPoVendorAddress);

        return foundVPoVendorAddress;
    }

    @ApiOperation(value = "Updates the VPoVendorAddress instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoVendorAddress editVPoVendorAddress(@PathVariable("id") Integer id, @RequestBody VPoVendorAddress vpoVendorAddress) {
        LOGGER.debug("Editing VPoVendorAddress with id: {}" , vpoVendorAddress.getId());

        vpoVendorAddress.setId(id);
        vpoVendorAddress = vPoVendorAddressService.update(vpoVendorAddress);
        LOGGER.debug("VPoVendorAddress details with id: {}" , vpoVendorAddress);

        return vpoVendorAddress;
    }
    
    @ApiOperation(value = "Partially updates the VPoVendorAddress instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoVendorAddress patchVPoVendorAddress(@PathVariable("id") Integer id, @RequestBody @MapTo(VPoVendorAddress.class) Map<String, Object> vpoVendorAddressPatch) {
        LOGGER.debug("Partially updating VPoVendorAddress with id: {}" , id);

        VPoVendorAddress vpoVendorAddress = vPoVendorAddressService.partialUpdate(id, vpoVendorAddressPatch);
        LOGGER.debug("VPoVendorAddress details after partial update: {}" , vpoVendorAddress);

        return vpoVendorAddress;
    }

    @ApiOperation(value = "Deletes the VPoVendorAddress instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPoVendorAddress(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VPoVendorAddress with id: {}" , id);

        VPoVendorAddress deletedVPoVendorAddress = vPoVendorAddressService.delete(id);

        return deletedVPoVendorAddress != null;
    }

    /**
     * @deprecated Use {@link #findVPoVendorAddresses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPoVendorAddress instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoVendorAddress> searchVPoVendorAddressesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPoVendorAddresses list by query filter:{}", (Object) queryFilters);
        return vPoVendorAddressService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoVendorAddress instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoVendorAddress> findVPoVendorAddresses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoVendorAddresses list by filter:", query);
        return vPoVendorAddressService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoVendorAddress instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoVendorAddress> filterVPoVendorAddresses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoVendorAddresses list by filter", query);
        return vPoVendorAddressService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPoVendorAddresses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPoVendorAddressService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPoVendorAddressesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPoVendorAddress.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPoVendorAddressService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPoVendorAddress instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPoVendorAddresses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPoVendorAddresses");
		return vPoVendorAddressService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPoVendorAddressAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPoVendorAddressService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPoVendorAddressService instance
	 */
	protected void setVPoVendorAddressService(VPoVendorAddressService service) {
		this.vPoVendorAddressService = service;
	}

}