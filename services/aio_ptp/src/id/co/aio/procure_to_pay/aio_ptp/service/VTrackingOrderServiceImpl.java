/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VTrackingOrder;


/**
 * ServiceImpl object for domain model class VTrackingOrder.
 *
 * @see VTrackingOrder
 */
@Service("aio_ptp.VTrackingOrderService")
@Validated
@EntityService(entityClass = VTrackingOrder.class, serviceId = "aio_ptp")
public class VTrackingOrderServiceImpl implements VTrackingOrderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VTrackingOrderServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VTrackingOrderDao")
    private WMGenericDao<VTrackingOrder, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VTrackingOrder, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VTrackingOrder create(VTrackingOrder vtrackingOrder) {
        LOGGER.debug("Creating a new VTrackingOrder with information: {}", vtrackingOrder);

        VTrackingOrder vtrackingOrderCreated = this.wmGenericDao.create(vtrackingOrder);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vtrackingOrderCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VTrackingOrder getById(String vtrackingorderId) {
        LOGGER.debug("Finding VTrackingOrder by id: {}", vtrackingorderId);
        return this.wmGenericDao.findById(vtrackingorderId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VTrackingOrder findById(String vtrackingorderId) {
        LOGGER.debug("Finding VTrackingOrder by id: {}", vtrackingorderId);
        try {
            return this.wmGenericDao.findById(vtrackingorderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VTrackingOrder found with id: {}", vtrackingorderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VTrackingOrder> findByMultipleIds(List<String> vtrackingorderIds, boolean orderedReturn) {
        LOGGER.debug("Finding VTrackingOrders by ids: {}", vtrackingorderIds);

        return this.wmGenericDao.findByMultipleIds(vtrackingorderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VTrackingOrder update(VTrackingOrder vtrackingOrder) {
        LOGGER.debug("Updating VTrackingOrder with information: {}", vtrackingOrder);

        this.wmGenericDao.update(vtrackingOrder);
        this.wmGenericDao.refresh(vtrackingOrder);

        return vtrackingOrder;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VTrackingOrder partialUpdate(String vtrackingorderId, Map<String, Object>vtrackingOrderPatch) {
        LOGGER.debug("Partially Updating the VTrackingOrder with id: {}", vtrackingorderId);

        VTrackingOrder vtrackingOrder = getById(vtrackingorderId);

        try {
            ObjectReader vtrackingOrderReader = this.objectMapper.reader().forType(VTrackingOrder.class).withValueToUpdate(vtrackingOrder);
            vtrackingOrder = vtrackingOrderReader.readValue(this.objectMapper.writeValueAsString(vtrackingOrderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vtrackingOrderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vtrackingOrder = update(vtrackingOrder);

        return vtrackingOrder;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VTrackingOrder delete(String vtrackingorderId) {
        LOGGER.debug("Deleting VTrackingOrder with id: {}", vtrackingorderId);
        VTrackingOrder deleted = this.wmGenericDao.findById(vtrackingorderId);
        if (deleted == null) {
            LOGGER.debug("No VTrackingOrder found with id: {}", vtrackingorderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VTrackingOrder.class.getSimpleName(), vtrackingorderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VTrackingOrder vtrackingOrder) {
        LOGGER.debug("Deleting VTrackingOrder with {}", vtrackingOrder);
        this.wmGenericDao.delete(vtrackingOrder);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VTrackingOrder> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VTrackingOrders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VTrackingOrder> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VTrackingOrders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VTrackingOrder to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VTrackingOrder to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}