/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqQuotationHeader;


/**
 * ServiceImpl object for domain model class VRfqQuotationHeader.
 *
 * @see VRfqQuotationHeader
 */
@Service("aio_ptp.VRfqQuotationHeaderService")
@Validated
@EntityService(entityClass = VRfqQuotationHeader.class, serviceId = "aio_ptp")
public class VRfqQuotationHeaderServiceImpl implements VRfqQuotationHeaderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqQuotationHeaderServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqQuotationHeaderDao")
    private WMGenericDao<VRfqQuotationHeader, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqQuotationHeader, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqQuotationHeader create(VRfqQuotationHeader vrfqQuotationHeader) {
        LOGGER.debug("Creating a new VRfqQuotationHeader with information: {}", vrfqQuotationHeader);

        VRfqQuotationHeader vrfqQuotationHeaderCreated = this.wmGenericDao.create(vrfqQuotationHeader);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqQuotationHeaderCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqQuotationHeader getById(Integer vrfqquotationheaderId) {
        LOGGER.debug("Finding VRfqQuotationHeader by id: {}", vrfqquotationheaderId);
        return this.wmGenericDao.findById(vrfqquotationheaderId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqQuotationHeader findById(Integer vrfqquotationheaderId) {
        LOGGER.debug("Finding VRfqQuotationHeader by id: {}", vrfqquotationheaderId);
        try {
            return this.wmGenericDao.findById(vrfqquotationheaderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqQuotationHeader found with id: {}", vrfqquotationheaderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqQuotationHeader> findByMultipleIds(List<Integer> vrfqquotationheaderIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqQuotationHeaders by ids: {}", vrfqquotationheaderIds);

        return this.wmGenericDao.findByMultipleIds(vrfqquotationheaderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqQuotationHeader update(VRfqQuotationHeader vrfqQuotationHeader) {
        LOGGER.debug("Updating VRfqQuotationHeader with information: {}", vrfqQuotationHeader);

        this.wmGenericDao.update(vrfqQuotationHeader);
        this.wmGenericDao.refresh(vrfqQuotationHeader);

        return vrfqQuotationHeader;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqQuotationHeader partialUpdate(Integer vrfqquotationheaderId, Map<String, Object>vrfqQuotationHeaderPatch) {
        LOGGER.debug("Partially Updating the VRfqQuotationHeader with id: {}", vrfqquotationheaderId);

        VRfqQuotationHeader vrfqQuotationHeader = getById(vrfqquotationheaderId);

        try {
            ObjectReader vrfqQuotationHeaderReader = this.objectMapper.reader().forType(VRfqQuotationHeader.class).withValueToUpdate(vrfqQuotationHeader);
            vrfqQuotationHeader = vrfqQuotationHeaderReader.readValue(this.objectMapper.writeValueAsString(vrfqQuotationHeaderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqQuotationHeaderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqQuotationHeader = update(vrfqQuotationHeader);

        return vrfqQuotationHeader;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqQuotationHeader delete(Integer vrfqquotationheaderId) {
        LOGGER.debug("Deleting VRfqQuotationHeader with id: {}", vrfqquotationheaderId);
        VRfqQuotationHeader deleted = this.wmGenericDao.findById(vrfqquotationheaderId);
        if (deleted == null) {
            LOGGER.debug("No VRfqQuotationHeader found with id: {}", vrfqquotationheaderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqQuotationHeader.class.getSimpleName(), vrfqquotationheaderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqQuotationHeader vrfqQuotationHeader) {
        LOGGER.debug("Deleting VRfqQuotationHeader with {}", vrfqQuotationHeader);
        this.wmGenericDao.delete(vrfqQuotationHeader);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqQuotationHeader> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqQuotationHeaders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqQuotationHeader> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqQuotationHeaders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqQuotationHeader to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqQuotationHeader to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}