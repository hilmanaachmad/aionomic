/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetDetails;

/**
 * Service object for domain model class {@link VBudgetDetails}.
 */
public interface VBudgetDetailsService {

    /**
     * Creates a new VBudgetDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VBudgetDetails if any.
     *
     * @param vbudgetDetails Details of the VBudgetDetails to be created; value cannot be null.
     * @return The newly created VBudgetDetails.
     */
    VBudgetDetails create(@Valid VBudgetDetails vbudgetDetails);


	/**
     * Returns VBudgetDetails by given id if exists.
     *
     * @param vbudgetdetailsId The id of the VBudgetDetails to get; value cannot be null.
     * @return VBudgetDetails associated with the given vbudgetdetailsId.
	 * @throws EntityNotFoundException If no VBudgetDetails is found.
     */
    VBudgetDetails getById(Integer vbudgetdetailsId);

    /**
     * Find and return the VBudgetDetails by given id if exists, returns null otherwise.
     *
     * @param vbudgetdetailsId The id of the VBudgetDetails to get; value cannot be null.
     * @return VBudgetDetails associated with the given vbudgetdetailsId.
     */
    VBudgetDetails findById(Integer vbudgetdetailsId);

	/**
     * Find and return the list of VBudgetDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vbudgetdetailsIds The id's of the VBudgetDetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VBudgetDetails associated with the given vbudgetdetailsIds.
     */
    List<VBudgetDetails> findByMultipleIds(List<Integer> vbudgetdetailsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VBudgetDetails. It replaces all fields of the existing VBudgetDetails with the given vbudgetDetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VBudgetDetails if any.
     *
     * @param vbudgetDetails The details of the VBudgetDetails to be updated; value cannot be null.
     * @return The updated VBudgetDetails.
     * @throws EntityNotFoundException if no VBudgetDetails is found with given input.
     */
    VBudgetDetails update(@Valid VBudgetDetails vbudgetDetails);


    /**
     * Partially updates the details of an existing VBudgetDetails. It updates only the
     * fields of the existing VBudgetDetails which are passed in the vbudgetDetailsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VBudgetDetails if any.
     *
     * @param vbudgetdetailsId The id of the VBudgetDetails to be deleted; value cannot be null.
     * @param vbudgetDetailsPatch The partial data of VBudgetDetails which is supposed to be updated; value cannot be null.
     * @return The updated VBudgetDetails.
     * @throws EntityNotFoundException if no VBudgetDetails is found with given input.
     */
    VBudgetDetails partialUpdate(Integer vbudgetdetailsId, Map<String, Object> vbudgetDetailsPatch);

    /**
     * Deletes an existing VBudgetDetails with the given id.
     *
     * @param vbudgetdetailsId The id of the VBudgetDetails to be deleted; value cannot be null.
     * @return The deleted VBudgetDetails.
     * @throws EntityNotFoundException if no VBudgetDetails found with the given id.
     */
    VBudgetDetails delete(Integer vbudgetdetailsId);

    /**
     * Deletes an existing VBudgetDetails with the given object.
     *
     * @param vbudgetDetails The instance of the VBudgetDetails to be deleted; value cannot be null.
     */
    void delete(VBudgetDetails vbudgetDetails);

    /**
     * Find all VBudgetDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VBudgetDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VBudgetDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VBudgetDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VBudgetDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<VBudgetDetails> findAll(String query, Pageable pageable);

    /**
     * Exports all VBudgetDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VBudgetDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VBudgetDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VBudgetDetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}