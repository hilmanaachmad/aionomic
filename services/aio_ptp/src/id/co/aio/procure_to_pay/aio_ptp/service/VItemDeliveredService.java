/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VItemDelivered;

/**
 * Service object for domain model class {@link VItemDelivered}.
 */
public interface VItemDeliveredService {

    /**
     * Creates a new VItemDelivered. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VItemDelivered if any.
     *
     * @param vitemDelivered Details of the VItemDelivered to be created; value cannot be null.
     * @return The newly created VItemDelivered.
     */
    VItemDelivered create(@Valid VItemDelivered vitemDelivered);


	/**
     * Returns VItemDelivered by given id if exists.
     *
     * @param vitemdeliveredId The id of the VItemDelivered to get; value cannot be null.
     * @return VItemDelivered associated with the given vitemdeliveredId.
	 * @throws EntityNotFoundException If no VItemDelivered is found.
     */
    VItemDelivered getById(Integer vitemdeliveredId);

    /**
     * Find and return the VItemDelivered by given id if exists, returns null otherwise.
     *
     * @param vitemdeliveredId The id of the VItemDelivered to get; value cannot be null.
     * @return VItemDelivered associated with the given vitemdeliveredId.
     */
    VItemDelivered findById(Integer vitemdeliveredId);

	/**
     * Find and return the list of VItemDelivereds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vitemdeliveredIds The id's of the VItemDelivered to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VItemDelivereds associated with the given vitemdeliveredIds.
     */
    List<VItemDelivered> findByMultipleIds(List<Integer> vitemdeliveredIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VItemDelivered. It replaces all fields of the existing VItemDelivered with the given vitemDelivered.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VItemDelivered if any.
     *
     * @param vitemDelivered The details of the VItemDelivered to be updated; value cannot be null.
     * @return The updated VItemDelivered.
     * @throws EntityNotFoundException if no VItemDelivered is found with given input.
     */
    VItemDelivered update(@Valid VItemDelivered vitemDelivered);


    /**
     * Partially updates the details of an existing VItemDelivered. It updates only the
     * fields of the existing VItemDelivered which are passed in the vitemDeliveredPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VItemDelivered if any.
     *
     * @param vitemdeliveredId The id of the VItemDelivered to be deleted; value cannot be null.
     * @param vitemDeliveredPatch The partial data of VItemDelivered which is supposed to be updated; value cannot be null.
     * @return The updated VItemDelivered.
     * @throws EntityNotFoundException if no VItemDelivered is found with given input.
     */
    VItemDelivered partialUpdate(Integer vitemdeliveredId, Map<String, Object> vitemDeliveredPatch);

    /**
     * Deletes an existing VItemDelivered with the given id.
     *
     * @param vitemdeliveredId The id of the VItemDelivered to be deleted; value cannot be null.
     * @return The deleted VItemDelivered.
     * @throws EntityNotFoundException if no VItemDelivered found with the given id.
     */
    VItemDelivered delete(Integer vitemdeliveredId);

    /**
     * Deletes an existing VItemDelivered with the given object.
     *
     * @param vitemDelivered The instance of the VItemDelivered to be deleted; value cannot be null.
     */
    void delete(VItemDelivered vitemDelivered);

    /**
     * Find all VItemDelivereds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VItemDelivereds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VItemDelivered> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VItemDelivereds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VItemDelivereds.
     *
     * @see Pageable
     * @see Page
     */
    Page<VItemDelivered> findAll(String query, Pageable pageable);

    /**
     * Exports all VItemDelivereds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VItemDelivereds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VItemDelivereds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VItemDelivered.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}