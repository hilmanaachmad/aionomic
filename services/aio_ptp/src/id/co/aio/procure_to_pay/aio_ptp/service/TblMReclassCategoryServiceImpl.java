/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMReclassCategory;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetDetails;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetReclass;


/**
 * ServiceImpl object for domain model class TblMReclassCategory.
 *
 * @see TblMReclassCategory
 */
@Service("aio_ptp.TblMReclassCategoryService")
@Validated
@EntityService(entityClass = TblMReclassCategory.class, serviceId = "aio_ptp")
public class TblMReclassCategoryServiceImpl implements TblMReclassCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMReclassCategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTBudgetDetailsService")
    private TblTBudgetDetailsService tblTBudgetDetailsService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTBudgetReclassService")
    private TblTBudgetReclassService tblTBudgetReclassService;

    @Autowired
    @Qualifier("aio_ptp.TblMReclassCategoryDao")
    private WMGenericDao<TblMReclassCategory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMReclassCategory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMReclassCategory create(TblMReclassCategory tblMreclassCategory) {
        LOGGER.debug("Creating a new TblMReclassCategory with information: {}", tblMreclassCategory);

        TblMReclassCategory tblMreclassCategoryCreated = this.wmGenericDao.create(tblMreclassCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMreclassCategoryCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMReclassCategory getById(Integer tblmreclasscategoryId) {
        LOGGER.debug("Finding TblMReclassCategory by id: {}", tblmreclasscategoryId);
        return this.wmGenericDao.findById(tblmreclasscategoryId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMReclassCategory findById(Integer tblmreclasscategoryId) {
        LOGGER.debug("Finding TblMReclassCategory by id: {}", tblmreclasscategoryId);
        try {
            return this.wmGenericDao.findById(tblmreclasscategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMReclassCategory found with id: {}", tblmreclasscategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMReclassCategory> findByMultipleIds(List<Integer> tblmreclasscategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMReclassCategories by ids: {}", tblmreclasscategoryIds);

        return this.wmGenericDao.findByMultipleIds(tblmreclasscategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMReclassCategory update(TblMReclassCategory tblMreclassCategory) {
        LOGGER.debug("Updating TblMReclassCategory with information: {}", tblMreclassCategory);

        this.wmGenericDao.update(tblMreclassCategory);
        this.wmGenericDao.refresh(tblMreclassCategory);

        return tblMreclassCategory;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMReclassCategory partialUpdate(Integer tblmreclasscategoryId, Map<String, Object>tblMreclassCategoryPatch) {
        LOGGER.debug("Partially Updating the TblMReclassCategory with id: {}", tblmreclasscategoryId);

        TblMReclassCategory tblMreclassCategory = getById(tblmreclasscategoryId);

        try {
            ObjectReader tblMreclassCategoryReader = this.objectMapper.reader().forType(TblMReclassCategory.class).withValueToUpdate(tblMreclassCategory);
            tblMreclassCategory = tblMreclassCategoryReader.readValue(this.objectMapper.writeValueAsString(tblMreclassCategoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMreclassCategoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMreclassCategory = update(tblMreclassCategory);

        return tblMreclassCategory;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMReclassCategory delete(Integer tblmreclasscategoryId) {
        LOGGER.debug("Deleting TblMReclassCategory with id: {}", tblmreclasscategoryId);
        TblMReclassCategory deleted = this.wmGenericDao.findById(tblmreclasscategoryId);
        if (deleted == null) {
            LOGGER.debug("No TblMReclassCategory found with id: {}", tblmreclasscategoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMReclassCategory.class.getSimpleName(), tblmreclasscategoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMReclassCategory tblMreclassCategory) {
        LOGGER.debug("Deleting TblMReclassCategory with {}", tblMreclassCategory);
        this.wmGenericDao.delete(tblMreclassCategory);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMReclassCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMReclassCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMReclassCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMReclassCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMReclassCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMReclassCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetDetails> findAssociatedTblTbudgetDetailses(Integer rcatId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTbudgetDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMreclassCategory.rcatId = '" + rcatId + "'");

        return tblTBudgetDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetReclass> findAssociatedTblTbudgetReclasses(Integer rcatId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTbudgetReclasses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMreclassCategory.rcatId = '" + rcatId + "'");

        return tblTBudgetReclassService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTBudgetDetailsService instance
     */
    protected void setTblTBudgetDetailsService(TblTBudgetDetailsService service) {
        this.tblTBudgetDetailsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTBudgetReclassService instance
     */
    protected void setTblTBudgetReclassService(TblTBudgetReclassService service) {
        this.tblTBudgetReclassService = service;
    }

}