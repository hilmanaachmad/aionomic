/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserDep;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMUserDepService;


/**
 * Controller object for domain model class TblMUserDep.
 * @see TblMUserDep
 */
@RestController("aio_ptp.TblMUserDepController")
@Api(value = "TblMUserDepController", description = "Exposes APIs to work with TblMUserDep resource.")
@RequestMapping("/aio_ptp/TblMUserDep")
public class TblMUserDepController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserDepController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMUserDepService")
	private TblMUserDepService tblMUserDepService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMUserDep instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserDep createTblMUserDep(@RequestBody TblMUserDep tblMuserDep) {
		LOGGER.debug("Create TblMUserDep with information: {}" , tblMuserDep);

		tblMuserDep = tblMUserDepService.create(tblMuserDep);
		LOGGER.debug("Created TblMUserDep with information: {}" , tblMuserDep);

	    return tblMuserDep;
	}

    @ApiOperation(value = "Returns the TblMUserDep instance associated with the given id.")
    @RequestMapping(value = "/{udepId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserDep getTblMUserDep(@PathVariable("udepId") Integer udepId) {
        LOGGER.debug("Getting TblMUserDep with id: {}" , udepId);

        TblMUserDep foundTblMUserDep = tblMUserDepService.getById(udepId);
        LOGGER.debug("TblMUserDep details with id: {}" , foundTblMUserDep);

        return foundTblMUserDep;
    }

    @ApiOperation(value = "Updates the TblMUserDep instance associated with the given id.")
    @RequestMapping(value = "/{udepId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserDep editTblMUserDep(@PathVariable("udepId") Integer udepId, @RequestBody TblMUserDep tblMuserDep) {
        LOGGER.debug("Editing TblMUserDep with id: {}" , tblMuserDep.getUdepId());

        tblMuserDep.setUdepId(udepId);
        tblMuserDep = tblMUserDepService.update(tblMuserDep);
        LOGGER.debug("TblMUserDep details with id: {}" , tblMuserDep);

        return tblMuserDep;
    }
    
    @ApiOperation(value = "Partially updates the TblMUserDep instance associated with the given id.")
    @RequestMapping(value = "/{udepId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserDep patchTblMUserDep(@PathVariable("udepId") Integer udepId, @RequestBody @MapTo(TblMUserDep.class) Map<String, Object> tblMuserDepPatch) {
        LOGGER.debug("Partially updating TblMUserDep with id: {}" , udepId);

        TblMUserDep tblMuserDep = tblMUserDepService.partialUpdate(udepId, tblMuserDepPatch);
        LOGGER.debug("TblMUserDep details after partial update: {}" , tblMuserDep);

        return tblMuserDep;
    }

    @ApiOperation(value = "Deletes the TblMUserDep instance associated with the given id.")
    @RequestMapping(value = "/{udepId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMUserDep(@PathVariable("udepId") Integer udepId) {
        LOGGER.debug("Deleting TblMUserDep with id: {}" , udepId);

        TblMUserDep deletedTblMUserDep = tblMUserDepService.delete(udepId);

        return deletedTblMUserDep != null;
    }

    /**
     * @deprecated Use {@link #findTblMUserDeps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMUserDep instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserDep> searchTblMUserDepsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMUserDeps list by query filter:{}", (Object) queryFilters);
        return tblMUserDepService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMUserDep instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserDep> findTblMUserDeps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMUserDeps list by filter:", query);
        return tblMUserDepService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMUserDep instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserDep> filterTblMUserDeps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMUserDeps list by filter", query);
        return tblMUserDepService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMUserDeps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMUserDepService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMUserDepsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMUserDep.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMUserDepService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMUserDep instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMUserDeps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMUserDeps");
		return tblMUserDepService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMUserDepAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMUserDepService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMUserDepService instance
	 */
	protected void setTblMUserDepService(TblMUserDepService service) {
		this.tblMUserDepService = service;
	}

}