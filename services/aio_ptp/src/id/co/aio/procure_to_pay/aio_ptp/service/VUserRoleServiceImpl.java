/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VUserRole;


/**
 * ServiceImpl object for domain model class VUserRole.
 *
 * @see VUserRole
 */
@Service("aio_ptp.VUserRoleService")
@Validated
@EntityService(entityClass = VUserRole.class, serviceId = "aio_ptp")
public class VUserRoleServiceImpl implements VUserRoleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VUserRoleServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VUserRoleDao")
    private WMGenericDao<VUserRole, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VUserRole, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VUserRole create(VUserRole vuserRole) {
        LOGGER.debug("Creating a new VUserRole with information: {}", vuserRole);

        VUserRole vuserRoleCreated = this.wmGenericDao.create(vuserRole);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vuserRoleCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VUserRole getById(Integer vuserroleId) {
        LOGGER.debug("Finding VUserRole by id: {}", vuserroleId);
        return this.wmGenericDao.findById(vuserroleId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VUserRole findById(Integer vuserroleId) {
        LOGGER.debug("Finding VUserRole by id: {}", vuserroleId);
        try {
            return this.wmGenericDao.findById(vuserroleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VUserRole found with id: {}", vuserroleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VUserRole> findByMultipleIds(List<Integer> vuserroleIds, boolean orderedReturn) {
        LOGGER.debug("Finding VUserRoles by ids: {}", vuserroleIds);

        return this.wmGenericDao.findByMultipleIds(vuserroleIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VUserRole update(VUserRole vuserRole) {
        LOGGER.debug("Updating VUserRole with information: {}", vuserRole);

        this.wmGenericDao.update(vuserRole);
        this.wmGenericDao.refresh(vuserRole);

        return vuserRole;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VUserRole partialUpdate(Integer vuserroleId, Map<String, Object>vuserRolePatch) {
        LOGGER.debug("Partially Updating the VUserRole with id: {}", vuserroleId);

        VUserRole vuserRole = getById(vuserroleId);

        try {
            ObjectReader vuserRoleReader = this.objectMapper.reader().forType(VUserRole.class).withValueToUpdate(vuserRole);
            vuserRole = vuserRoleReader.readValue(this.objectMapper.writeValueAsString(vuserRolePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vuserRolePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vuserRole = update(vuserRole);

        return vuserRole;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VUserRole delete(Integer vuserroleId) {
        LOGGER.debug("Deleting VUserRole with id: {}", vuserroleId);
        VUserRole deleted = this.wmGenericDao.findById(vuserroleId);
        if (deleted == null) {
            LOGGER.debug("No VUserRole found with id: {}", vuserroleId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VUserRole.class.getSimpleName(), vuserroleId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VUserRole vuserRole) {
        LOGGER.debug("Deleting VUserRole with {}", vuserRole);
        this.wmGenericDao.delete(vuserRole);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VUserRole> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VUserRoles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VUserRole> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VUserRoles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VUserRole to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VUserRole to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}