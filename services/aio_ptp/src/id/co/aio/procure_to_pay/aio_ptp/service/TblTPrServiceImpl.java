/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPr;
import id.co.aio.procure_to_pay.aio_ptp.TblTPrHistory;
import id.co.aio.procure_to_pay.aio_ptp.TblTPrLineItem;


/**
 * ServiceImpl object for domain model class TblTPr.
 *
 * @see TblTPr
 */
@Service("aio_ptp.TblTPrService")
@Validated
@EntityService(entityClass = TblTPr.class, serviceId = "aio_ptp")
public class TblTPrServiceImpl implements TblTPrService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPrServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTPrLineItemService")
    private TblTPrLineItemService tblTPrLineItemService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTPrHistoryService")
    private TblTPrHistoryService tblTPrHistoryService;

    @Autowired
    @Qualifier("aio_ptp.TblTPrDao")
    private WMGenericDao<TblTPr, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTPr, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPr create(TblTPr tblTpr) {
        LOGGER.debug("Creating a new TblTPr with information: {}", tblTpr);

        TblTPr tblTprCreated = this.wmGenericDao.create(tblTpr);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTprCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPr getById(Integer tbltprId) {
        LOGGER.debug("Finding TblTPr by id: {}", tbltprId);
        return this.wmGenericDao.findById(tbltprId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPr findById(Integer tbltprId) {
        LOGGER.debug("Finding TblTPr by id: {}", tbltprId);
        try {
            return this.wmGenericDao.findById(tbltprId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTPr found with id: {}", tbltprId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTPr> findByMultipleIds(List<Integer> tbltprIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTPrs by ids: {}", tbltprIds);

        return this.wmGenericDao.findByMultipleIds(tbltprIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTPr update(TblTPr tblTpr) {
        LOGGER.debug("Updating TblTPr with information: {}", tblTpr);

        this.wmGenericDao.update(tblTpr);
        this.wmGenericDao.refresh(tblTpr);

        return tblTpr;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPr partialUpdate(Integer tbltprId, Map<String, Object>tblTprPatch) {
        LOGGER.debug("Partially Updating the TblTPr with id: {}", tbltprId);

        TblTPr tblTpr = getById(tbltprId);

        try {
            ObjectReader tblTprReader = this.objectMapper.reader().forType(TblTPr.class).withValueToUpdate(tblTpr);
            tblTpr = tblTprReader.readValue(this.objectMapper.writeValueAsString(tblTprPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTprPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTpr = update(tblTpr);

        return tblTpr;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPr delete(Integer tbltprId) {
        LOGGER.debug("Deleting TblTPr with id: {}", tbltprId);
        TblTPr deleted = this.wmGenericDao.findById(tbltprId);
        if (deleted == null) {
            LOGGER.debug("No TblTPr found with id: {}", tbltprId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTPr.class.getSimpleName(), tbltprId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTPr tblTpr) {
        LOGGER.debug("Deleting TblTPr with {}", tblTpr);
        this.wmGenericDao.delete(tblTpr);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPr> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTPrs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPr> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTPrs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPr to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPr to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPrHistory> findAssociatedTblTprHistories(Integer prId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTprHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTpr.prId = '" + prId + "'");

        return tblTPrHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPrLineItem> findAssociatedTblTprLineItems(Integer prId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTprLineItems");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTpr.prId = '" + prId + "'");

        return tblTPrLineItemService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTPrLineItemService instance
     */
    protected void setTblTPrLineItemService(TblTPrLineItemService service) {
        this.tblTPrLineItemService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTPrHistoryService instance
     */
    protected void setTblTPrHistoryService(TblTPrHistoryService service) {
        this.tblTPrHistoryService = service;
    }

}