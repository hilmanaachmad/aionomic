/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoHeaderToGr;


/**
 * ServiceImpl object for domain model class VPoHeaderToGr.
 *
 * @see VPoHeaderToGr
 */
@Service("aio_ptp.VPoHeaderToGrService")
@Validated
@EntityService(entityClass = VPoHeaderToGr.class, serviceId = "aio_ptp")
public class VPoHeaderToGrServiceImpl implements VPoHeaderToGrService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoHeaderToGrServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPoHeaderToGrDao")
    private WMGenericDao<VPoHeaderToGr, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPoHeaderToGr, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoHeaderToGr create(VPoHeaderToGr vpoHeaderToGr) {
        LOGGER.debug("Creating a new VPoHeaderToGr with information: {}", vpoHeaderToGr);

        VPoHeaderToGr vpoHeaderToGrCreated = this.wmGenericDao.create(vpoHeaderToGr);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpoHeaderToGrCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoHeaderToGr getById(Integer vpoheadertogrId) {
        LOGGER.debug("Finding VPoHeaderToGr by id: {}", vpoheadertogrId);
        return this.wmGenericDao.findById(vpoheadertogrId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoHeaderToGr findById(Integer vpoheadertogrId) {
        LOGGER.debug("Finding VPoHeaderToGr by id: {}", vpoheadertogrId);
        try {
            return this.wmGenericDao.findById(vpoheadertogrId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPoHeaderToGr found with id: {}", vpoheadertogrId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPoHeaderToGr> findByMultipleIds(List<Integer> vpoheadertogrIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPoHeaderToGrs by ids: {}", vpoheadertogrIds);

        return this.wmGenericDao.findByMultipleIds(vpoheadertogrIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPoHeaderToGr update(VPoHeaderToGr vpoHeaderToGr) {
        LOGGER.debug("Updating VPoHeaderToGr with information: {}", vpoHeaderToGr);

        this.wmGenericDao.update(vpoHeaderToGr);
        this.wmGenericDao.refresh(vpoHeaderToGr);

        return vpoHeaderToGr;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoHeaderToGr partialUpdate(Integer vpoheadertogrId, Map<String, Object>vpoHeaderToGrPatch) {
        LOGGER.debug("Partially Updating the VPoHeaderToGr with id: {}", vpoheadertogrId);

        VPoHeaderToGr vpoHeaderToGr = getById(vpoheadertogrId);

        try {
            ObjectReader vpoHeaderToGrReader = this.objectMapper.reader().forType(VPoHeaderToGr.class).withValueToUpdate(vpoHeaderToGr);
            vpoHeaderToGr = vpoHeaderToGrReader.readValue(this.objectMapper.writeValueAsString(vpoHeaderToGrPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpoHeaderToGrPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpoHeaderToGr = update(vpoHeaderToGr);

        return vpoHeaderToGr;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoHeaderToGr delete(Integer vpoheadertogrId) {
        LOGGER.debug("Deleting VPoHeaderToGr with id: {}", vpoheadertogrId);
        VPoHeaderToGr deleted = this.wmGenericDao.findById(vpoheadertogrId);
        if (deleted == null) {
            LOGGER.debug("No VPoHeaderToGr found with id: {}", vpoheadertogrId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPoHeaderToGr.class.getSimpleName(), vpoheadertogrId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPoHeaderToGr vpoHeaderToGr) {
        LOGGER.debug("Deleting VPoHeaderToGr with {}", vpoHeaderToGr);
        this.wmGenericDao.delete(vpoHeaderToGr);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoHeaderToGr> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPoHeaderToGrs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoHeaderToGr> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPoHeaderToGrs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoHeaderToGr to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoHeaderToGr to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}