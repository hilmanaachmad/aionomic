/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VGrTracking;

/**
 * Service object for domain model class {@link VGrTracking}.
 */
public interface VGrTrackingService {

    /**
     * Creates a new VGrTracking. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VGrTracking if any.
     *
     * @param vgrTracking Details of the VGrTracking to be created; value cannot be null.
     * @return The newly created VGrTracking.
     */
    VGrTracking create(@Valid VGrTracking vgrTracking);


	/**
     * Returns VGrTracking by given id if exists.
     *
     * @param vgrtrackingId The id of the VGrTracking to get; value cannot be null.
     * @return VGrTracking associated with the given vgrtrackingId.
	 * @throws EntityNotFoundException If no VGrTracking is found.
     */
    VGrTracking getById(Integer vgrtrackingId);

    /**
     * Find and return the VGrTracking by given id if exists, returns null otherwise.
     *
     * @param vgrtrackingId The id of the VGrTracking to get; value cannot be null.
     * @return VGrTracking associated with the given vgrtrackingId.
     */
    VGrTracking findById(Integer vgrtrackingId);

	/**
     * Find and return the list of VGrTrackings by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vgrtrackingIds The id's of the VGrTracking to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VGrTrackings associated with the given vgrtrackingIds.
     */
    List<VGrTracking> findByMultipleIds(List<Integer> vgrtrackingIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VGrTracking. It replaces all fields of the existing VGrTracking with the given vgrTracking.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VGrTracking if any.
     *
     * @param vgrTracking The details of the VGrTracking to be updated; value cannot be null.
     * @return The updated VGrTracking.
     * @throws EntityNotFoundException if no VGrTracking is found with given input.
     */
    VGrTracking update(@Valid VGrTracking vgrTracking);


    /**
     * Partially updates the details of an existing VGrTracking. It updates only the
     * fields of the existing VGrTracking which are passed in the vgrTrackingPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VGrTracking if any.
     *
     * @param vgrtrackingId The id of the VGrTracking to be deleted; value cannot be null.
     * @param vgrTrackingPatch The partial data of VGrTracking which is supposed to be updated; value cannot be null.
     * @return The updated VGrTracking.
     * @throws EntityNotFoundException if no VGrTracking is found with given input.
     */
    VGrTracking partialUpdate(Integer vgrtrackingId, Map<String, Object> vgrTrackingPatch);

    /**
     * Deletes an existing VGrTracking with the given id.
     *
     * @param vgrtrackingId The id of the VGrTracking to be deleted; value cannot be null.
     * @return The deleted VGrTracking.
     * @throws EntityNotFoundException if no VGrTracking found with the given id.
     */
    VGrTracking delete(Integer vgrtrackingId);

    /**
     * Deletes an existing VGrTracking with the given object.
     *
     * @param vgrTracking The instance of the VGrTracking to be deleted; value cannot be null.
     */
    void delete(VGrTracking vgrTracking);

    /**
     * Find all VGrTrackings matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VGrTrackings.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VGrTracking> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VGrTrackings matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VGrTrackings.
     *
     * @see Pageable
     * @see Page
     */
    Page<VGrTracking> findAll(String query, Pageable pageable);

    /**
     * Exports all VGrTrackings matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VGrTrackings matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VGrTrackings in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VGrTracking.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}