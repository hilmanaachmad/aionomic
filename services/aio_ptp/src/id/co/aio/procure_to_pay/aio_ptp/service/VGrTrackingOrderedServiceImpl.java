/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VGrTrackingOrdered;


/**
 * ServiceImpl object for domain model class VGrTrackingOrdered.
 *
 * @see VGrTrackingOrdered
 */
@Service("aio_ptp.VGrTrackingOrderedService")
@Validated
@EntityService(entityClass = VGrTrackingOrdered.class, serviceId = "aio_ptp")
public class VGrTrackingOrderedServiceImpl implements VGrTrackingOrderedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrTrackingOrderedServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VGrTrackingOrderedDao")
    private WMGenericDao<VGrTrackingOrdered, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VGrTrackingOrdered, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingOrdered create(VGrTrackingOrdered vgrTrackingOrdered) {
        LOGGER.debug("Creating a new VGrTrackingOrdered with information: {}", vgrTrackingOrdered);

        VGrTrackingOrdered vgrTrackingOrderedCreated = this.wmGenericDao.create(vgrTrackingOrdered);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vgrTrackingOrderedCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingOrdered getById(Integer vgrtrackingorderedId) {
        LOGGER.debug("Finding VGrTrackingOrdered by id: {}", vgrtrackingorderedId);
        return this.wmGenericDao.findById(vgrtrackingorderedId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingOrdered findById(Integer vgrtrackingorderedId) {
        LOGGER.debug("Finding VGrTrackingOrdered by id: {}", vgrtrackingorderedId);
        try {
            return this.wmGenericDao.findById(vgrtrackingorderedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VGrTrackingOrdered found with id: {}", vgrtrackingorderedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VGrTrackingOrdered> findByMultipleIds(List<Integer> vgrtrackingorderedIds, boolean orderedReturn) {
        LOGGER.debug("Finding VGrTrackingOrdereds by ids: {}", vgrtrackingorderedIds);

        return this.wmGenericDao.findByMultipleIds(vgrtrackingorderedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingOrdered update(VGrTrackingOrdered vgrTrackingOrdered) {
        LOGGER.debug("Updating VGrTrackingOrdered with information: {}", vgrTrackingOrdered);

        this.wmGenericDao.update(vgrTrackingOrdered);
        this.wmGenericDao.refresh(vgrTrackingOrdered);

        return vgrTrackingOrdered;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingOrdered partialUpdate(Integer vgrtrackingorderedId, Map<String, Object>vgrTrackingOrderedPatch) {
        LOGGER.debug("Partially Updating the VGrTrackingOrdered with id: {}", vgrtrackingorderedId);

        VGrTrackingOrdered vgrTrackingOrdered = getById(vgrtrackingorderedId);

        try {
            ObjectReader vgrTrackingOrderedReader = this.objectMapper.reader().forType(VGrTrackingOrdered.class).withValueToUpdate(vgrTrackingOrdered);
            vgrTrackingOrdered = vgrTrackingOrderedReader.readValue(this.objectMapper.writeValueAsString(vgrTrackingOrderedPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vgrTrackingOrderedPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vgrTrackingOrdered = update(vgrTrackingOrdered);

        return vgrTrackingOrdered;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingOrdered delete(Integer vgrtrackingorderedId) {
        LOGGER.debug("Deleting VGrTrackingOrdered with id: {}", vgrtrackingorderedId);
        VGrTrackingOrdered deleted = this.wmGenericDao.findById(vgrtrackingorderedId);
        if (deleted == null) {
            LOGGER.debug("No VGrTrackingOrdered found with id: {}", vgrtrackingorderedId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VGrTrackingOrdered.class.getSimpleName(), vgrtrackingorderedId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VGrTrackingOrdered vgrTrackingOrdered) {
        LOGGER.debug("Deleting VGrTrackingOrdered with {}", vgrTrackingOrdered);
        this.wmGenericDao.delete(vgrTrackingOrdered);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrTrackingOrdered> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VGrTrackingOrdereds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrTrackingOrdered> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VGrTrackingOrdereds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrTrackingOrdered to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrTrackingOrdered to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}