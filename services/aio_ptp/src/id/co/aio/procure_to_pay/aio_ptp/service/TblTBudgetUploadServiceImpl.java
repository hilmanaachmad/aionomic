/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetHeader;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetUpload;


/**
 * ServiceImpl object for domain model class TblTBudgetUpload.
 *
 * @see TblTBudgetUpload
 */
@Service("aio_ptp.TblTBudgetUploadService")
@Validated
@EntityService(entityClass = TblTBudgetUpload.class, serviceId = "aio_ptp")
public class TblTBudgetUploadServiceImpl implements TblTBudgetUploadService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTBudgetUploadServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTBudgetHeaderService")
    private TblTBudgetHeaderService tblTBudgetHeaderService;

    @Autowired
    @Qualifier("aio_ptp.TblTBudgetUploadDao")
    private WMGenericDao<TblTBudgetUpload, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTBudgetUpload, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUpload create(TblTBudgetUpload tblTbudgetUpload) {
        LOGGER.debug("Creating a new TblTBudgetUpload with information: {}", tblTbudgetUpload);

        TblTBudgetUpload tblTbudgetUploadCreated = this.wmGenericDao.create(tblTbudgetUpload);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTbudgetUploadCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUpload getById(Integer tbltbudgetuploadId) {
        LOGGER.debug("Finding TblTBudgetUpload by id: {}", tbltbudgetuploadId);
        return this.wmGenericDao.findById(tbltbudgetuploadId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUpload findById(Integer tbltbudgetuploadId) {
        LOGGER.debug("Finding TblTBudgetUpload by id: {}", tbltbudgetuploadId);
        try {
            return this.wmGenericDao.findById(tbltbudgetuploadId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTBudgetUpload found with id: {}", tbltbudgetuploadId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTBudgetUpload> findByMultipleIds(List<Integer> tbltbudgetuploadIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTBudgetUploads by ids: {}", tbltbudgetuploadIds);

        return this.wmGenericDao.findByMultipleIds(tbltbudgetuploadIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUpload update(TblTBudgetUpload tblTbudgetUpload) {
        LOGGER.debug("Updating TblTBudgetUpload with information: {}", tblTbudgetUpload);

        this.wmGenericDao.update(tblTbudgetUpload);
        this.wmGenericDao.refresh(tblTbudgetUpload);

        return tblTbudgetUpload;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUpload partialUpdate(Integer tbltbudgetuploadId, Map<String, Object>tblTbudgetUploadPatch) {
        LOGGER.debug("Partially Updating the TblTBudgetUpload with id: {}", tbltbudgetuploadId);

        TblTBudgetUpload tblTbudgetUpload = getById(tbltbudgetuploadId);

        try {
            ObjectReader tblTbudgetUploadReader = this.objectMapper.reader().forType(TblTBudgetUpload.class).withValueToUpdate(tblTbudgetUpload);
            tblTbudgetUpload = tblTbudgetUploadReader.readValue(this.objectMapper.writeValueAsString(tblTbudgetUploadPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTbudgetUploadPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTbudgetUpload = update(tblTbudgetUpload);

        return tblTbudgetUpload;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUpload delete(Integer tbltbudgetuploadId) {
        LOGGER.debug("Deleting TblTBudgetUpload with id: {}", tbltbudgetuploadId);
        TblTBudgetUpload deleted = this.wmGenericDao.findById(tbltbudgetuploadId);
        if (deleted == null) {
            LOGGER.debug("No TblTBudgetUpload found with id: {}", tbltbudgetuploadId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTBudgetUpload.class.getSimpleName(), tbltbudgetuploadId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTBudgetUpload tblTbudgetUpload) {
        LOGGER.debug("Deleting TblTBudgetUpload with {}", tblTbudgetUpload);
        this.wmGenericDao.delete(tblTbudgetUpload);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetUpload> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetUploads");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetUpload> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetUploads");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetUpload to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetUpload to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetHeader> findAssociatedTblTbudgetHeaders(Integer buId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTbudgetHeaders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTbudgetUpload.buId = '" + buId + "'");

        return tblTBudgetHeaderService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTBudgetHeaderService instance
     */
    protected void setTblTBudgetHeaderService(TblTBudgetHeaderService service) {
        this.tblTBudgetHeaderService = service;
    }

}