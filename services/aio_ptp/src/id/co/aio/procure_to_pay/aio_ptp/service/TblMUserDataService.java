/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserData;

/**
 * Service object for domain model class {@link TblMUserData}.
 */
public interface TblMUserDataService {

    /**
     * Creates a new TblMUserData. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMUserData if any.
     *
     * @param tblMuserData Details of the TblMUserData to be created; value cannot be null.
     * @return The newly created TblMUserData.
     */
    TblMUserData create(@Valid TblMUserData tblMuserData);


	/**
     * Returns TblMUserData by given id if exists.
     *
     * @param tblmuserdataId The id of the TblMUserData to get; value cannot be null.
     * @return TblMUserData associated with the given tblmuserdataId.
	 * @throws EntityNotFoundException If no TblMUserData is found.
     */
    TblMUserData getById(Integer tblmuserdataId);

    /**
     * Find and return the TblMUserData by given id if exists, returns null otherwise.
     *
     * @param tblmuserdataId The id of the TblMUserData to get; value cannot be null.
     * @return TblMUserData associated with the given tblmuserdataId.
     */
    TblMUserData findById(Integer tblmuserdataId);

	/**
     * Find and return the list of TblMUserDatas by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmuserdataIds The id's of the TblMUserData to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMUserDatas associated with the given tblmuserdataIds.
     */
    List<TblMUserData> findByMultipleIds(List<Integer> tblmuserdataIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMUserData. It replaces all fields of the existing TblMUserData with the given tblMuserData.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMUserData if any.
     *
     * @param tblMuserData The details of the TblMUserData to be updated; value cannot be null.
     * @return The updated TblMUserData.
     * @throws EntityNotFoundException if no TblMUserData is found with given input.
     */
    TblMUserData update(@Valid TblMUserData tblMuserData);


    /**
     * Partially updates the details of an existing TblMUserData. It updates only the
     * fields of the existing TblMUserData which are passed in the tblMuserDataPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMUserData if any.
     *
     * @param tblmuserdataId The id of the TblMUserData to be deleted; value cannot be null.
     * @param tblMuserDataPatch The partial data of TblMUserData which is supposed to be updated; value cannot be null.
     * @return The updated TblMUserData.
     * @throws EntityNotFoundException if no TblMUserData is found with given input.
     */
    TblMUserData partialUpdate(Integer tblmuserdataId, Map<String, Object> tblMuserDataPatch);

    /**
     * Deletes an existing TblMUserData with the given id.
     *
     * @param tblmuserdataId The id of the TblMUserData to be deleted; value cannot be null.
     * @return The deleted TblMUserData.
     * @throws EntityNotFoundException if no TblMUserData found with the given id.
     */
    TblMUserData delete(Integer tblmuserdataId);

    /**
     * Deletes an existing TblMUserData with the given object.
     *
     * @param tblMuserData The instance of the TblMUserData to be deleted; value cannot be null.
     */
    void delete(TblMUserData tblMuserData);

    /**
     * Find all TblMUserDatas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMUserDatas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMUserData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMUserDatas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMUserDatas.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMUserData> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMUserDatas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMUserDatas matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMUserDatas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMUserData.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}