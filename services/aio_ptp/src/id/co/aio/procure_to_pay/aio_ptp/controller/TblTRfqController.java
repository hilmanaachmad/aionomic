/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTRfq;
import id.co.aio.procure_to_pay.aio_ptp.TblTRfqVendor;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTRfqService;


/**
 * Controller object for domain model class TblTRfq.
 * @see TblTRfq
 */
@RestController("aio_ptp.TblTRfqController")
@Api(value = "TblTRfqController", description = "Exposes APIs to work with TblTRfq resource.")
@RequestMapping("/aio_ptp/TblTRfq")
public class TblTRfqController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTRfqController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTRfqService")
	private TblTRfqService tblTRfqService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTRfq instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTRfq createTblTRfq(@RequestBody TblTRfq tblTrfq) {
		LOGGER.debug("Create TblTRfq with information: {}" , tblTrfq);

		tblTrfq = tblTRfqService.create(tblTrfq);
		LOGGER.debug("Created TblTRfq with information: {}" , tblTrfq);

	    return tblTrfq;
	}

    @ApiOperation(value = "Returns the TblTRfq instance associated with the given id.")
    @RequestMapping(value = "/{rfqId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTRfq getTblTRfq(@PathVariable("rfqId") Integer rfqId) {
        LOGGER.debug("Getting TblTRfq with id: {}" , rfqId);

        TblTRfq foundTblTRfq = tblTRfqService.getById(rfqId);
        LOGGER.debug("TblTRfq details with id: {}" , foundTblTRfq);

        return foundTblTRfq;
    }

    @ApiOperation(value = "Updates the TblTRfq instance associated with the given id.")
    @RequestMapping(value = "/{rfqId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTRfq editTblTRfq(@PathVariable("rfqId") Integer rfqId, @RequestBody TblTRfq tblTrfq) {
        LOGGER.debug("Editing TblTRfq with id: {}" , tblTrfq.getRfqId());

        tblTrfq.setRfqId(rfqId);
        tblTrfq = tblTRfqService.update(tblTrfq);
        LOGGER.debug("TblTRfq details with id: {}" , tblTrfq);

        return tblTrfq;
    }
    
    @ApiOperation(value = "Partially updates the TblTRfq instance associated with the given id.")
    @RequestMapping(value = "/{rfqId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTRfq patchTblTRfq(@PathVariable("rfqId") Integer rfqId, @RequestBody @MapTo(TblTRfq.class) Map<String, Object> tblTrfqPatch) {
        LOGGER.debug("Partially updating TblTRfq with id: {}" , rfqId);

        TblTRfq tblTrfq = tblTRfqService.partialUpdate(rfqId, tblTrfqPatch);
        LOGGER.debug("TblTRfq details after partial update: {}" , tblTrfq);

        return tblTrfq;
    }

    @ApiOperation(value = "Deletes the TblTRfq instance associated with the given id.")
    @RequestMapping(value = "/{rfqId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTRfq(@PathVariable("rfqId") Integer rfqId) {
        LOGGER.debug("Deleting TblTRfq with id: {}" , rfqId);

        TblTRfq deletedTblTRfq = tblTRfqService.delete(rfqId);

        return deletedTblTRfq != null;
    }

    /**
     * @deprecated Use {@link #findTblTRfqs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTRfq instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTRfq> searchTblTRfqsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTRfqs list by query filter:{}", (Object) queryFilters);
        return tblTRfqService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTRfq instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTRfq> findTblTRfqs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTRfqs list by filter:", query);
        return tblTRfqService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTRfq instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTRfq> filterTblTRfqs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTRfqs list by filter", query);
        return tblTRfqService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTRfqs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTRfqService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTRfqsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTRfq.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTRfqService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTRfq instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTRfqs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTRfqs");
		return tblTRfqService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTRfqAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTRfqService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{rfqId:.+}/tblTrfqVendors", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTrfqVendors instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTRfqVendor> findAssociatedTblTrfqVendors(@PathVariable("rfqId") Integer rfqId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTrfqVendors");
        return tblTRfqService.findAssociatedTblTrfqVendors(rfqId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTRfqService instance
	 */
	protected void setTblTRfqService(TblTRfqService service) {
		this.tblTRfqService = service;
	}

}