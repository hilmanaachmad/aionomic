/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTGrConfirmLineItem;


/**
 * ServiceImpl object for domain model class TblTGrConfirmLineItem.
 *
 * @see TblTGrConfirmLineItem
 */
@Service("aio_ptp.TblTGrConfirmLineItemService")
@Validated
@EntityService(entityClass = TblTGrConfirmLineItem.class, serviceId = "aio_ptp")
public class TblTGrConfirmLineItemServiceImpl implements TblTGrConfirmLineItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTGrConfirmLineItemServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTGrConfirmLineItemDao")
    private WMGenericDao<TblTGrConfirmLineItem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTGrConfirmLineItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTGrConfirmLineItem create(TblTGrConfirmLineItem tblTgrConfirmLineItem) {
        LOGGER.debug("Creating a new TblTGrConfirmLineItem with information: {}", tblTgrConfirmLineItem);

        TblTGrConfirmLineItem tblTgrConfirmLineItemCreated = this.wmGenericDao.create(tblTgrConfirmLineItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTgrConfirmLineItemCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTGrConfirmLineItem getById(Integer tbltgrconfirmlineitemId) {
        LOGGER.debug("Finding TblTGrConfirmLineItem by id: {}", tbltgrconfirmlineitemId);
        return this.wmGenericDao.findById(tbltgrconfirmlineitemId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTGrConfirmLineItem findById(Integer tbltgrconfirmlineitemId) {
        LOGGER.debug("Finding TblTGrConfirmLineItem by id: {}", tbltgrconfirmlineitemId);
        try {
            return this.wmGenericDao.findById(tbltgrconfirmlineitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTGrConfirmLineItem found with id: {}", tbltgrconfirmlineitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTGrConfirmLineItem> findByMultipleIds(List<Integer> tbltgrconfirmlineitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTGrConfirmLineItems by ids: {}", tbltgrconfirmlineitemIds);

        return this.wmGenericDao.findByMultipleIds(tbltgrconfirmlineitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTGrConfirmLineItem update(TblTGrConfirmLineItem tblTgrConfirmLineItem) {
        LOGGER.debug("Updating TblTGrConfirmLineItem with information: {}", tblTgrConfirmLineItem);

        this.wmGenericDao.update(tblTgrConfirmLineItem);
        this.wmGenericDao.refresh(tblTgrConfirmLineItem);

        return tblTgrConfirmLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTGrConfirmLineItem partialUpdate(Integer tbltgrconfirmlineitemId, Map<String, Object>tblTgrConfirmLineItemPatch) {
        LOGGER.debug("Partially Updating the TblTGrConfirmLineItem with id: {}", tbltgrconfirmlineitemId);

        TblTGrConfirmLineItem tblTgrConfirmLineItem = getById(tbltgrconfirmlineitemId);

        try {
            ObjectReader tblTgrConfirmLineItemReader = this.objectMapper.reader().forType(TblTGrConfirmLineItem.class).withValueToUpdate(tblTgrConfirmLineItem);
            tblTgrConfirmLineItem = tblTgrConfirmLineItemReader.readValue(this.objectMapper.writeValueAsString(tblTgrConfirmLineItemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTgrConfirmLineItemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTgrConfirmLineItem = update(tblTgrConfirmLineItem);

        return tblTgrConfirmLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTGrConfirmLineItem delete(Integer tbltgrconfirmlineitemId) {
        LOGGER.debug("Deleting TblTGrConfirmLineItem with id: {}", tbltgrconfirmlineitemId);
        TblTGrConfirmLineItem deleted = this.wmGenericDao.findById(tbltgrconfirmlineitemId);
        if (deleted == null) {
            LOGGER.debug("No TblTGrConfirmLineItem found with id: {}", tbltgrconfirmlineitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTGrConfirmLineItem.class.getSimpleName(), tbltgrconfirmlineitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTGrConfirmLineItem tblTgrConfirmLineItem) {
        LOGGER.debug("Deleting TblTGrConfirmLineItem with {}", tblTgrConfirmLineItem);
        this.wmGenericDao.delete(tblTgrConfirmLineItem);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTGrConfirmLineItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTGrConfirmLineItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTGrConfirmLineItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTGrConfirmLineItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTGrConfirmLineItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTGrConfirmLineItem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}