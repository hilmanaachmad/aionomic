/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTTasklist;


/**
 * ServiceImpl object for domain model class TblTTasklist.
 *
 * @see TblTTasklist
 */
@Service("aio_ptp.TblTTasklistService")
@Validated
@EntityService(entityClass = TblTTasklist.class, serviceId = "aio_ptp")
public class TblTTasklistServiceImpl implements TblTTasklistService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTTasklistServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTTasklistDao")
    private WMGenericDao<TblTTasklist, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTTasklist, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTTasklist create(TblTTasklist tblTtasklist) {
        LOGGER.debug("Creating a new TblTTasklist with information: {}", tblTtasklist);

        TblTTasklist tblTtasklistCreated = this.wmGenericDao.create(tblTtasklist);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTtasklistCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTTasklist getById(Integer tblttasklistId) {
        LOGGER.debug("Finding TblTTasklist by id: {}", tblttasklistId);
        return this.wmGenericDao.findById(tblttasklistId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTTasklist findById(Integer tblttasklistId) {
        LOGGER.debug("Finding TblTTasklist by id: {}", tblttasklistId);
        try {
            return this.wmGenericDao.findById(tblttasklistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTTasklist found with id: {}", tblttasklistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTTasklist> findByMultipleIds(List<Integer> tblttasklistIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTTasklists by ids: {}", tblttasklistIds);

        return this.wmGenericDao.findByMultipleIds(tblttasklistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTTasklist update(TblTTasklist tblTtasklist) {
        LOGGER.debug("Updating TblTTasklist with information: {}", tblTtasklist);

        this.wmGenericDao.update(tblTtasklist);
        this.wmGenericDao.refresh(tblTtasklist);

        return tblTtasklist;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTTasklist partialUpdate(Integer tblttasklistId, Map<String, Object>tblTtasklistPatch) {
        LOGGER.debug("Partially Updating the TblTTasklist with id: {}", tblttasklistId);

        TblTTasklist tblTtasklist = getById(tblttasklistId);

        try {
            ObjectReader tblTtasklistReader = this.objectMapper.reader().forType(TblTTasklist.class).withValueToUpdate(tblTtasklist);
            tblTtasklist = tblTtasklistReader.readValue(this.objectMapper.writeValueAsString(tblTtasklistPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTtasklistPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTtasklist = update(tblTtasklist);

        return tblTtasklist;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTTasklist delete(Integer tblttasklistId) {
        LOGGER.debug("Deleting TblTTasklist with id: {}", tblttasklistId);
        TblTTasklist deleted = this.wmGenericDao.findById(tblttasklistId);
        if (deleted == null) {
            LOGGER.debug("No TblTTasklist found with id: {}", tblttasklistId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTTasklist.class.getSimpleName(), tblttasklistId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTTasklist tblTtasklist) {
        LOGGER.debug("Deleting TblTTasklist with {}", tblTtasklist);
        this.wmGenericDao.delete(tblTtasklist);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTTasklist> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTTasklists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTTasklist> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTTasklists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTTasklist to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTTasklist to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}