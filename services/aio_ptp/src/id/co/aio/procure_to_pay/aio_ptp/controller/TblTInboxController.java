/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTInbox;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTInboxService;


/**
 * Controller object for domain model class TblTInbox.
 * @see TblTInbox
 */
@RestController("aio_ptp.TblTInboxController")
@Api(value = "TblTInboxController", description = "Exposes APIs to work with TblTInbox resource.")
@RequestMapping("/aio_ptp/TblTInbox")
public class TblTInboxController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTInboxController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTInboxService")
	private TblTInboxService tblTInboxService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTInbox instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTInbox createTblTInbox(@RequestBody TblTInbox tblTinbox) {
		LOGGER.debug("Create TblTInbox with information: {}" , tblTinbox);

		tblTinbox = tblTInboxService.create(tblTinbox);
		LOGGER.debug("Created TblTInbox with information: {}" , tblTinbox);

	    return tblTinbox;
	}

    @ApiOperation(value = "Returns the TblTInbox instance associated with the given id.")
    @RequestMapping(value = "/{inbId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTInbox getTblTInbox(@PathVariable("inbId") Integer inbId) {
        LOGGER.debug("Getting TblTInbox with id: {}" , inbId);

        TblTInbox foundTblTInbox = tblTInboxService.getById(inbId);
        LOGGER.debug("TblTInbox details with id: {}" , foundTblTInbox);

        return foundTblTInbox;
    }

    @ApiOperation(value = "Updates the TblTInbox instance associated with the given id.")
    @RequestMapping(value = "/{inbId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTInbox editTblTInbox(@PathVariable("inbId") Integer inbId, @RequestBody TblTInbox tblTinbox) {
        LOGGER.debug("Editing TblTInbox with id: {}" , tblTinbox.getInbId());

        tblTinbox.setInbId(inbId);
        tblTinbox = tblTInboxService.update(tblTinbox);
        LOGGER.debug("TblTInbox details with id: {}" , tblTinbox);

        return tblTinbox;
    }
    
    @ApiOperation(value = "Partially updates the TblTInbox instance associated with the given id.")
    @RequestMapping(value = "/{inbId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTInbox patchTblTInbox(@PathVariable("inbId") Integer inbId, @RequestBody @MapTo(TblTInbox.class) Map<String, Object> tblTinboxPatch) {
        LOGGER.debug("Partially updating TblTInbox with id: {}" , inbId);

        TblTInbox tblTinbox = tblTInboxService.partialUpdate(inbId, tblTinboxPatch);
        LOGGER.debug("TblTInbox details after partial update: {}" , tblTinbox);

        return tblTinbox;
    }

    @ApiOperation(value = "Deletes the TblTInbox instance associated with the given id.")
    @RequestMapping(value = "/{inbId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTInbox(@PathVariable("inbId") Integer inbId) {
        LOGGER.debug("Deleting TblTInbox with id: {}" , inbId);

        TblTInbox deletedTblTInbox = tblTInboxService.delete(inbId);

        return deletedTblTInbox != null;
    }

    /**
     * @deprecated Use {@link #findTblTInboxes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTInbox instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTInbox> searchTblTInboxesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTInboxes list by query filter:{}", (Object) queryFilters);
        return tblTInboxService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTInbox instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTInbox> findTblTInboxes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTInboxes list by filter:", query);
        return tblTInboxService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTInbox instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTInbox> filterTblTInboxes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTInboxes list by filter", query);
        return tblTInboxService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTInboxes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTInboxService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTInboxesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTInbox.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTInboxService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTInbox instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTInboxes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTInboxes");
		return tblTInboxService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTInboxAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTInboxService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTInboxService instance
	 */
	protected void setTblTInboxService(TblTInboxService service) {
		this.tblTInboxService = service;
	}

}