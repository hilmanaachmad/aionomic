/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseRequestHeader;

/**
 * Service object for domain model class {@link VPurchaseRequestHeader}.
 */
public interface VPurchaseRequestHeaderService {

    /**
     * Creates a new VPurchaseRequestHeader. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPurchaseRequestHeader if any.
     *
     * @param vpurchaseRequestHeader Details of the VPurchaseRequestHeader to be created; value cannot be null.
     * @return The newly created VPurchaseRequestHeader.
     */
    VPurchaseRequestHeader create(@Valid VPurchaseRequestHeader vpurchaseRequestHeader);


	/**
     * Returns VPurchaseRequestHeader by given id if exists.
     *
     * @param vpurchaserequestheaderId The id of the VPurchaseRequestHeader to get; value cannot be null.
     * @return VPurchaseRequestHeader associated with the given vpurchaserequestheaderId.
	 * @throws EntityNotFoundException If no VPurchaseRequestHeader is found.
     */
    VPurchaseRequestHeader getById(Integer vpurchaserequestheaderId);

    /**
     * Find and return the VPurchaseRequestHeader by given id if exists, returns null otherwise.
     *
     * @param vpurchaserequestheaderId The id of the VPurchaseRequestHeader to get; value cannot be null.
     * @return VPurchaseRequestHeader associated with the given vpurchaserequestheaderId.
     */
    VPurchaseRequestHeader findById(Integer vpurchaserequestheaderId);

	/**
     * Find and return the list of VPurchaseRequestHeaders by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vpurchaserequestheaderIds The id's of the VPurchaseRequestHeader to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPurchaseRequestHeaders associated with the given vpurchaserequestheaderIds.
     */
    List<VPurchaseRequestHeader> findByMultipleIds(List<Integer> vpurchaserequestheaderIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPurchaseRequestHeader. It replaces all fields of the existing VPurchaseRequestHeader with the given vpurchaseRequestHeader.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPurchaseRequestHeader if any.
     *
     * @param vpurchaseRequestHeader The details of the VPurchaseRequestHeader to be updated; value cannot be null.
     * @return The updated VPurchaseRequestHeader.
     * @throws EntityNotFoundException if no VPurchaseRequestHeader is found with given input.
     */
    VPurchaseRequestHeader update(@Valid VPurchaseRequestHeader vpurchaseRequestHeader);


    /**
     * Partially updates the details of an existing VPurchaseRequestHeader. It updates only the
     * fields of the existing VPurchaseRequestHeader which are passed in the vpurchaseRequestHeaderPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPurchaseRequestHeader if any.
     *
     * @param vpurchaserequestheaderId The id of the VPurchaseRequestHeader to be deleted; value cannot be null.
     * @param vpurchaseRequestHeaderPatch The partial data of VPurchaseRequestHeader which is supposed to be updated; value cannot be null.
     * @return The updated VPurchaseRequestHeader.
     * @throws EntityNotFoundException if no VPurchaseRequestHeader is found with given input.
     */
    VPurchaseRequestHeader partialUpdate(Integer vpurchaserequestheaderId, Map<String, Object> vpurchaseRequestHeaderPatch);

    /**
     * Deletes an existing VPurchaseRequestHeader with the given id.
     *
     * @param vpurchaserequestheaderId The id of the VPurchaseRequestHeader to be deleted; value cannot be null.
     * @return The deleted VPurchaseRequestHeader.
     * @throws EntityNotFoundException if no VPurchaseRequestHeader found with the given id.
     */
    VPurchaseRequestHeader delete(Integer vpurchaserequestheaderId);

    /**
     * Deletes an existing VPurchaseRequestHeader with the given object.
     *
     * @param vpurchaseRequestHeader The instance of the VPurchaseRequestHeader to be deleted; value cannot be null.
     */
    void delete(VPurchaseRequestHeader vpurchaseRequestHeader);

    /**
     * Find all VPurchaseRequestHeaders matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPurchaseRequestHeaders.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPurchaseRequestHeader> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPurchaseRequestHeaders matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPurchaseRequestHeaders.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPurchaseRequestHeader> findAll(String query, Pageable pageable);

    /**
     * Exports all VPurchaseRequestHeaders matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPurchaseRequestHeaders matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPurchaseRequestHeaders in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPurchaseRequestHeader.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}