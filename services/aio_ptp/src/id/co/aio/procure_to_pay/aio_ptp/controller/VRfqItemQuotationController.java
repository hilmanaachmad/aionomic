/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VRfqItemQuotation;
import id.co.aio.procure_to_pay.aio_ptp.service.VRfqItemQuotationService;


/**
 * Controller object for domain model class VRfqItemQuotation.
 * @see VRfqItemQuotation
 */
@RestController("aio_ptp.VRfqItemQuotationController")
@Api(value = "VRfqItemQuotationController", description = "Exposes APIs to work with VRfqItemQuotation resource.")
@RequestMapping("/aio_ptp/VRfqItemQuotation")
public class VRfqItemQuotationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqItemQuotationController.class);

    @Autowired
	@Qualifier("aio_ptp.VRfqItemQuotationService")
	private VRfqItemQuotationService vRfqItemQuotationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VRfqItemQuotation instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqItemQuotation createVRfqItemQuotation(@RequestBody VRfqItemQuotation vrfqItemQuotation) {
		LOGGER.debug("Create VRfqItemQuotation with information: {}" , vrfqItemQuotation);

		vrfqItemQuotation = vRfqItemQuotationService.create(vrfqItemQuotation);
		LOGGER.debug("Created VRfqItemQuotation with information: {}" , vrfqItemQuotation);

	    return vrfqItemQuotation;
	}

    @ApiOperation(value = "Returns the VRfqItemQuotation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqItemQuotation getVRfqItemQuotation(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VRfqItemQuotation with id: {}" , id);

        VRfqItemQuotation foundVRfqItemQuotation = vRfqItemQuotationService.getById(id);
        LOGGER.debug("VRfqItemQuotation details with id: {}" , foundVRfqItemQuotation);

        return foundVRfqItemQuotation;
    }

    @ApiOperation(value = "Updates the VRfqItemQuotation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqItemQuotation editVRfqItemQuotation(@PathVariable("id") Integer id, @RequestBody VRfqItemQuotation vrfqItemQuotation) {
        LOGGER.debug("Editing VRfqItemQuotation with id: {}" , vrfqItemQuotation.getId());

        vrfqItemQuotation.setId(id);
        vrfqItemQuotation = vRfqItemQuotationService.update(vrfqItemQuotation);
        LOGGER.debug("VRfqItemQuotation details with id: {}" , vrfqItemQuotation);

        return vrfqItemQuotation;
    }
    
    @ApiOperation(value = "Partially updates the VRfqItemQuotation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqItemQuotation patchVRfqItemQuotation(@PathVariable("id") Integer id, @RequestBody @MapTo(VRfqItemQuotation.class) Map<String, Object> vrfqItemQuotationPatch) {
        LOGGER.debug("Partially updating VRfqItemQuotation with id: {}" , id);

        VRfqItemQuotation vrfqItemQuotation = vRfqItemQuotationService.partialUpdate(id, vrfqItemQuotationPatch);
        LOGGER.debug("VRfqItemQuotation details after partial update: {}" , vrfqItemQuotation);

        return vrfqItemQuotation;
    }

    @ApiOperation(value = "Deletes the VRfqItemQuotation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVRfqItemQuotation(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VRfqItemQuotation with id: {}" , id);

        VRfqItemQuotation deletedVRfqItemQuotation = vRfqItemQuotationService.delete(id);

        return deletedVRfqItemQuotation != null;
    }

    /**
     * @deprecated Use {@link #findVRfqItemQuotations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VRfqItemQuotation instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VRfqItemQuotation> searchVRfqItemQuotationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VRfqItemQuotations list by query filter:{}", (Object) queryFilters);
        return vRfqItemQuotationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VRfqItemQuotation instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VRfqItemQuotation> findVRfqItemQuotations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VRfqItemQuotations list by filter:", query);
        return vRfqItemQuotationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VRfqItemQuotation instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VRfqItemQuotation> filterVRfqItemQuotations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VRfqItemQuotations list by filter", query);
        return vRfqItemQuotationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVRfqItemQuotations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vRfqItemQuotationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVRfqItemQuotationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VRfqItemQuotation.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vRfqItemQuotationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VRfqItemQuotation instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVRfqItemQuotations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VRfqItemQuotations");
		return vRfqItemQuotationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVRfqItemQuotationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vRfqItemQuotationService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VRfqItemQuotationService instance
	 */
	protected void setVRfqItemQuotationService(VRfqItemQuotationService service) {
		this.vRfqItemQuotationService = service;
	}

}