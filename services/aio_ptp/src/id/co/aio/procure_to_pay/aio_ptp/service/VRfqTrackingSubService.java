/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqTrackingSub;

/**
 * Service object for domain model class {@link VRfqTrackingSub}.
 */
public interface VRfqTrackingSubService {

    /**
     * Creates a new VRfqTrackingSub. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRfqTrackingSub if any.
     *
     * @param vrfqTrackingSub Details of the VRfqTrackingSub to be created; value cannot be null.
     * @return The newly created VRfqTrackingSub.
     */
    VRfqTrackingSub create(@Valid VRfqTrackingSub vrfqTrackingSub);


	/**
     * Returns VRfqTrackingSub by given id if exists.
     *
     * @param vrfqtrackingsubId The id of the VRfqTrackingSub to get; value cannot be null.
     * @return VRfqTrackingSub associated with the given vrfqtrackingsubId.
	 * @throws EntityNotFoundException If no VRfqTrackingSub is found.
     */
    VRfqTrackingSub getById(Integer vrfqtrackingsubId);

    /**
     * Find and return the VRfqTrackingSub by given id if exists, returns null otherwise.
     *
     * @param vrfqtrackingsubId The id of the VRfqTrackingSub to get; value cannot be null.
     * @return VRfqTrackingSub associated with the given vrfqtrackingsubId.
     */
    VRfqTrackingSub findById(Integer vrfqtrackingsubId);

	/**
     * Find and return the list of VRfqTrackingSubs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vrfqtrackingsubIds The id's of the VRfqTrackingSub to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VRfqTrackingSubs associated with the given vrfqtrackingsubIds.
     */
    List<VRfqTrackingSub> findByMultipleIds(List<Integer> vrfqtrackingsubIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VRfqTrackingSub. It replaces all fields of the existing VRfqTrackingSub with the given vrfqTrackingSub.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRfqTrackingSub if any.
     *
     * @param vrfqTrackingSub The details of the VRfqTrackingSub to be updated; value cannot be null.
     * @return The updated VRfqTrackingSub.
     * @throws EntityNotFoundException if no VRfqTrackingSub is found with given input.
     */
    VRfqTrackingSub update(@Valid VRfqTrackingSub vrfqTrackingSub);


    /**
     * Partially updates the details of an existing VRfqTrackingSub. It updates only the
     * fields of the existing VRfqTrackingSub which are passed in the vrfqTrackingSubPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRfqTrackingSub if any.
     *
     * @param vrfqtrackingsubId The id of the VRfqTrackingSub to be deleted; value cannot be null.
     * @param vrfqTrackingSubPatch The partial data of VRfqTrackingSub which is supposed to be updated; value cannot be null.
     * @return The updated VRfqTrackingSub.
     * @throws EntityNotFoundException if no VRfqTrackingSub is found with given input.
     */
    VRfqTrackingSub partialUpdate(Integer vrfqtrackingsubId, Map<String, Object> vrfqTrackingSubPatch);

    /**
     * Deletes an existing VRfqTrackingSub with the given id.
     *
     * @param vrfqtrackingsubId The id of the VRfqTrackingSub to be deleted; value cannot be null.
     * @return The deleted VRfqTrackingSub.
     * @throws EntityNotFoundException if no VRfqTrackingSub found with the given id.
     */
    VRfqTrackingSub delete(Integer vrfqtrackingsubId);

    /**
     * Deletes an existing VRfqTrackingSub with the given object.
     *
     * @param vrfqTrackingSub The instance of the VRfqTrackingSub to be deleted; value cannot be null.
     */
    void delete(VRfqTrackingSub vrfqTrackingSub);

    /**
     * Find all VRfqTrackingSubs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VRfqTrackingSubs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VRfqTrackingSub> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VRfqTrackingSubs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VRfqTrackingSubs.
     *
     * @see Pageable
     * @see Page
     */
    Page<VRfqTrackingSub> findAll(String query, Pageable pageable);

    /**
     * Exports all VRfqTrackingSubs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VRfqTrackingSubs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VRfqTrackingSubs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VRfqTrackingSub.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}