/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMDivision;
import id.co.aio.procure_to_pay.aio_ptp.TblMDivisionBod;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMDivisionService;


/**
 * Controller object for domain model class TblMDivision.
 * @see TblMDivision
 */
@RestController("aio_ptp.TblMDivisionController")
@Api(value = "TblMDivisionController", description = "Exposes APIs to work with TblMDivision resource.")
@RequestMapping("/aio_ptp/TblMDivision")
public class TblMDivisionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMDivisionController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMDivisionService")
	private TblMDivisionService tblMDivisionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMDivision instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDivision createTblMDivision(@RequestBody TblMDivision tblMdivision) {
		LOGGER.debug("Create TblMDivision with information: {}" , tblMdivision);

		tblMdivision = tblMDivisionService.create(tblMdivision);
		LOGGER.debug("Created TblMDivision with information: {}" , tblMdivision);

	    return tblMdivision;
	}

    @ApiOperation(value = "Returns the TblMDivision instance associated with the given id.")
    @RequestMapping(value = "/{divisionId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDivision getTblMDivision(@PathVariable("divisionId") Integer divisionId) {
        LOGGER.debug("Getting TblMDivision with id: {}" , divisionId);

        TblMDivision foundTblMDivision = tblMDivisionService.getById(divisionId);
        LOGGER.debug("TblMDivision details with id: {}" , foundTblMDivision);

        return foundTblMDivision;
    }

    @ApiOperation(value = "Updates the TblMDivision instance associated with the given id.")
    @RequestMapping(value = "/{divisionId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDivision editTblMDivision(@PathVariable("divisionId") Integer divisionId, @RequestBody TblMDivision tblMdivision) {
        LOGGER.debug("Editing TblMDivision with id: {}" , tblMdivision.getDivisionId());

        tblMdivision.setDivisionId(divisionId);
        tblMdivision = tblMDivisionService.update(tblMdivision);
        LOGGER.debug("TblMDivision details with id: {}" , tblMdivision);

        return tblMdivision;
    }
    
    @ApiOperation(value = "Partially updates the TblMDivision instance associated with the given id.")
    @RequestMapping(value = "/{divisionId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDivision patchTblMDivision(@PathVariable("divisionId") Integer divisionId, @RequestBody @MapTo(TblMDivision.class) Map<String, Object> tblMdivisionPatch) {
        LOGGER.debug("Partially updating TblMDivision with id: {}" , divisionId);

        TblMDivision tblMdivision = tblMDivisionService.partialUpdate(divisionId, tblMdivisionPatch);
        LOGGER.debug("TblMDivision details after partial update: {}" , tblMdivision);

        return tblMdivision;
    }

    @ApiOperation(value = "Deletes the TblMDivision instance associated with the given id.")
    @RequestMapping(value = "/{divisionId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMDivision(@PathVariable("divisionId") Integer divisionId) {
        LOGGER.debug("Deleting TblMDivision with id: {}" , divisionId);

        TblMDivision deletedTblMDivision = tblMDivisionService.delete(divisionId);

        return deletedTblMDivision != null;
    }

    /**
     * @deprecated Use {@link #findTblMDivisions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMDivision instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDivision> searchTblMDivisionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMDivisions list by query filter:{}", (Object) queryFilters);
        return tblMDivisionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMDivision instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDivision> findTblMDivisions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMDivisions list by filter:", query);
        return tblMDivisionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMDivision instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDivision> filterTblMDivisions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMDivisions list by filter", query);
        return tblMDivisionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMDivisions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMDivisionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMDivisionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMDivision.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMDivisionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMDivision instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMDivisions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMDivisions");
		return tblMDivisionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMDivisionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMDivisionService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{divisionId:.+}/tblMdivisionBods", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblMdivisionBods instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDivisionBod> findAssociatedTblMdivisionBods(@PathVariable("divisionId") Integer divisionId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblMdivisionBods");
        return tblMDivisionService.findAssociatedTblMdivisionBods(divisionId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMDivisionService instance
	 */
	protected void setTblMDivisionService(TblMDivisionService service) {
		this.tblMDivisionService = service;
	}

}