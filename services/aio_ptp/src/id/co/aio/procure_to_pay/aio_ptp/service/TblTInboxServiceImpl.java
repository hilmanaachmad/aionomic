/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTInbox;


/**
 * ServiceImpl object for domain model class TblTInbox.
 *
 * @see TblTInbox
 */
@Service("aio_ptp.TblTInboxService")
@Validated
@EntityService(entityClass = TblTInbox.class, serviceId = "aio_ptp")
public class TblTInboxServiceImpl implements TblTInboxService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTInboxServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTInboxDao")
    private WMGenericDao<TblTInbox, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTInbox, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTInbox create(TblTInbox tblTinbox) {
        LOGGER.debug("Creating a new TblTInbox with information: {}", tblTinbox);

        TblTInbox tblTinboxCreated = this.wmGenericDao.create(tblTinbox);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTinboxCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTInbox getById(Integer tbltinboxId) {
        LOGGER.debug("Finding TblTInbox by id: {}", tbltinboxId);
        return this.wmGenericDao.findById(tbltinboxId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTInbox findById(Integer tbltinboxId) {
        LOGGER.debug("Finding TblTInbox by id: {}", tbltinboxId);
        try {
            return this.wmGenericDao.findById(tbltinboxId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTInbox found with id: {}", tbltinboxId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTInbox> findByMultipleIds(List<Integer> tbltinboxIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTInboxes by ids: {}", tbltinboxIds);

        return this.wmGenericDao.findByMultipleIds(tbltinboxIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTInbox update(TblTInbox tblTinbox) {
        LOGGER.debug("Updating TblTInbox with information: {}", tblTinbox);

        this.wmGenericDao.update(tblTinbox);
        this.wmGenericDao.refresh(tblTinbox);

        return tblTinbox;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTInbox partialUpdate(Integer tbltinboxId, Map<String, Object>tblTinboxPatch) {
        LOGGER.debug("Partially Updating the TblTInbox with id: {}", tbltinboxId);

        TblTInbox tblTinbox = getById(tbltinboxId);

        try {
            ObjectReader tblTinboxReader = this.objectMapper.reader().forType(TblTInbox.class).withValueToUpdate(tblTinbox);
            tblTinbox = tblTinboxReader.readValue(this.objectMapper.writeValueAsString(tblTinboxPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTinboxPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTinbox = update(tblTinbox);

        return tblTinbox;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTInbox delete(Integer tbltinboxId) {
        LOGGER.debug("Deleting TblTInbox with id: {}", tbltinboxId);
        TblTInbox deleted = this.wmGenericDao.findById(tbltinboxId);
        if (deleted == null) {
            LOGGER.debug("No TblTInbox found with id: {}", tbltinboxId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTInbox.class.getSimpleName(), tbltinboxId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTInbox tblTinbox) {
        LOGGER.debug("Deleting TblTInbox with {}", tblTinbox);
        this.wmGenericDao.delete(tblTinbox);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTInbox> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTInboxes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTInbox> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTInboxes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTInbox to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTInbox to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}