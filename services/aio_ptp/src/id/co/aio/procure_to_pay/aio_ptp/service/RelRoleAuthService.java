/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuth;
import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuthId;

/**
 * Service object for domain model class {@link RelRoleAuth}.
 */
public interface RelRoleAuthService {

    /**
     * Creates a new RelRoleAuth. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RelRoleAuth if any.
     *
     * @param relRoleAuth Details of the RelRoleAuth to be created; value cannot be null.
     * @return The newly created RelRoleAuth.
     */
    RelRoleAuth create(@Valid RelRoleAuth relRoleAuth);


	/**
     * Returns RelRoleAuth by given id if exists.
     *
     * @param relroleauthId The id of the RelRoleAuth to get; value cannot be null.
     * @return RelRoleAuth associated with the given relroleauthId.
	 * @throws EntityNotFoundException If no RelRoleAuth is found.
     */
    RelRoleAuth getById(RelRoleAuthId relroleauthId);

    /**
     * Find and return the RelRoleAuth by given id if exists, returns null otherwise.
     *
     * @param relroleauthId The id of the RelRoleAuth to get; value cannot be null.
     * @return RelRoleAuth associated with the given relroleauthId.
     */
    RelRoleAuth findById(RelRoleAuthId relroleauthId);

	/**
     * Find and return the list of RelRoleAuths by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param relroleauthIds The id's of the RelRoleAuth to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RelRoleAuths associated with the given relroleauthIds.
     */
    List<RelRoleAuth> findByMultipleIds(List<RelRoleAuthId> relroleauthIds, boolean orderedReturn);


    /**
     * Updates the details of an existing RelRoleAuth. It replaces all fields of the existing RelRoleAuth with the given relRoleAuth.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RelRoleAuth if any.
     *
     * @param relRoleAuth The details of the RelRoleAuth to be updated; value cannot be null.
     * @return The updated RelRoleAuth.
     * @throws EntityNotFoundException if no RelRoleAuth is found with given input.
     */
    RelRoleAuth update(@Valid RelRoleAuth relRoleAuth);


    /**
     * Partially updates the details of an existing RelRoleAuth. It updates only the
     * fields of the existing RelRoleAuth which are passed in the relRoleAuthPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RelRoleAuth if any.
     *
     * @param relroleauthId The id of the RelRoleAuth to be deleted; value cannot be null.
     * @param relRoleAuthPatch The partial data of RelRoleAuth which is supposed to be updated; value cannot be null.
     * @return The updated RelRoleAuth.
     * @throws EntityNotFoundException if no RelRoleAuth is found with given input.
     */
    RelRoleAuth partialUpdate(RelRoleAuthId relroleauthId, Map<String, Object> relRoleAuthPatch);

    /**
     * Deletes an existing RelRoleAuth with the given id.
     *
     * @param relroleauthId The id of the RelRoleAuth to be deleted; value cannot be null.
     * @return The deleted RelRoleAuth.
     * @throws EntityNotFoundException if no RelRoleAuth found with the given id.
     */
    RelRoleAuth delete(RelRoleAuthId relroleauthId);

    /**
     * Deletes an existing RelRoleAuth with the given object.
     *
     * @param relRoleAuth The instance of the RelRoleAuth to be deleted; value cannot be null.
     */
    void delete(RelRoleAuth relRoleAuth);

    /**
     * Find all RelRoleAuths matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RelRoleAuths.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RelRoleAuth> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RelRoleAuths matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RelRoleAuths.
     *
     * @see Pageable
     * @see Page
     */
    Page<RelRoleAuth> findAll(String query, Pageable pageable);

    /**
     * Exports all RelRoleAuths matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RelRoleAuths matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RelRoleAuths in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RelRoleAuth.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}