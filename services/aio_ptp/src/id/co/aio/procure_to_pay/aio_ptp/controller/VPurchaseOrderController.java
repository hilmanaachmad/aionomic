/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseOrder;
import id.co.aio.procure_to_pay.aio_ptp.service.VPurchaseOrderService;


/**
 * Controller object for domain model class VPurchaseOrder.
 * @see VPurchaseOrder
 */
@RestController("aio_ptp.VPurchaseOrderController")
@Api(value = "VPurchaseOrderController", description = "Exposes APIs to work with VPurchaseOrder resource.")
@RequestMapping("/aio_ptp/VPurchaseOrder")
public class VPurchaseOrderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseOrderController.class);

    @Autowired
	@Qualifier("aio_ptp.VPurchaseOrderService")
	private VPurchaseOrderService vPurchaseOrderService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPurchaseOrder instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrder createVPurchaseOrder(@RequestBody VPurchaseOrder vpurchaseOrder) {
		LOGGER.debug("Create VPurchaseOrder with information: {}" , vpurchaseOrder);

		vpurchaseOrder = vPurchaseOrderService.create(vpurchaseOrder);
		LOGGER.debug("Created VPurchaseOrder with information: {}" , vpurchaseOrder);

	    return vpurchaseOrder;
	}

    @ApiOperation(value = "Returns the VPurchaseOrder instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrder getVPurchaseOrder(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VPurchaseOrder with id: {}" , id);

        VPurchaseOrder foundVPurchaseOrder = vPurchaseOrderService.getById(id);
        LOGGER.debug("VPurchaseOrder details with id: {}" , foundVPurchaseOrder);

        return foundVPurchaseOrder;
    }

    @ApiOperation(value = "Updates the VPurchaseOrder instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrder editVPurchaseOrder(@PathVariable("id") Integer id, @RequestBody VPurchaseOrder vpurchaseOrder) {
        LOGGER.debug("Editing VPurchaseOrder with id: {}" , vpurchaseOrder.getId());

        vpurchaseOrder.setId(id);
        vpurchaseOrder = vPurchaseOrderService.update(vpurchaseOrder);
        LOGGER.debug("VPurchaseOrder details with id: {}" , vpurchaseOrder);

        return vpurchaseOrder;
    }
    
    @ApiOperation(value = "Partially updates the VPurchaseOrder instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrder patchVPurchaseOrder(@PathVariable("id") Integer id, @RequestBody @MapTo(VPurchaseOrder.class) Map<String, Object> vpurchaseOrderPatch) {
        LOGGER.debug("Partially updating VPurchaseOrder with id: {}" , id);

        VPurchaseOrder vpurchaseOrder = vPurchaseOrderService.partialUpdate(id, vpurchaseOrderPatch);
        LOGGER.debug("VPurchaseOrder details after partial update: {}" , vpurchaseOrder);

        return vpurchaseOrder;
    }

    @ApiOperation(value = "Deletes the VPurchaseOrder instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPurchaseOrder(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VPurchaseOrder with id: {}" , id);

        VPurchaseOrder deletedVPurchaseOrder = vPurchaseOrderService.delete(id);

        return deletedVPurchaseOrder != null;
    }

    /**
     * @deprecated Use {@link #findVPurchaseOrders(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPurchaseOrder instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseOrder> searchVPurchaseOrdersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPurchaseOrders list by query filter:{}", (Object) queryFilters);
        return vPurchaseOrderService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseOrder instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseOrder> findVPurchaseOrders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseOrders list by filter:", query);
        return vPurchaseOrderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseOrder instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseOrder> filterVPurchaseOrders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseOrders list by filter", query);
        return vPurchaseOrderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPurchaseOrders(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPurchaseOrderService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPurchaseOrdersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPurchaseOrder.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPurchaseOrderService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPurchaseOrder instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPurchaseOrders( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPurchaseOrders");
		return vPurchaseOrderService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPurchaseOrderAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPurchaseOrderService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPurchaseOrderService instance
	 */
	protected void setVPurchaseOrderService(VPurchaseOrderService service) {
		this.vPurchaseOrderService = service;
	}

}