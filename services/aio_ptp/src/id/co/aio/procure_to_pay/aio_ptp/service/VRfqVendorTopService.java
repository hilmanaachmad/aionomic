/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqVendorTop;

/**
 * Service object for domain model class {@link VRfqVendorTop}.
 */
public interface VRfqVendorTopService {

    /**
     * Creates a new VRfqVendorTop. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRfqVendorTop if any.
     *
     * @param vrfqVendorTop Details of the VRfqVendorTop to be created; value cannot be null.
     * @return The newly created VRfqVendorTop.
     */
    VRfqVendorTop create(@Valid VRfqVendorTop vrfqVendorTop);


	/**
     * Returns VRfqVendorTop by given id if exists.
     *
     * @param vrfqvendortopId The id of the VRfqVendorTop to get; value cannot be null.
     * @return VRfqVendorTop associated with the given vrfqvendortopId.
	 * @throws EntityNotFoundException If no VRfqVendorTop is found.
     */
    VRfqVendorTop getById(Integer vrfqvendortopId);

    /**
     * Find and return the VRfqVendorTop by given id if exists, returns null otherwise.
     *
     * @param vrfqvendortopId The id of the VRfqVendorTop to get; value cannot be null.
     * @return VRfqVendorTop associated with the given vrfqvendortopId.
     */
    VRfqVendorTop findById(Integer vrfqvendortopId);

	/**
     * Find and return the list of VRfqVendorTops by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vrfqvendortopIds The id's of the VRfqVendorTop to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VRfqVendorTops associated with the given vrfqvendortopIds.
     */
    List<VRfqVendorTop> findByMultipleIds(List<Integer> vrfqvendortopIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VRfqVendorTop. It replaces all fields of the existing VRfqVendorTop with the given vrfqVendorTop.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRfqVendorTop if any.
     *
     * @param vrfqVendorTop The details of the VRfqVendorTop to be updated; value cannot be null.
     * @return The updated VRfqVendorTop.
     * @throws EntityNotFoundException if no VRfqVendorTop is found with given input.
     */
    VRfqVendorTop update(@Valid VRfqVendorTop vrfqVendorTop);


    /**
     * Partially updates the details of an existing VRfqVendorTop. It updates only the
     * fields of the existing VRfqVendorTop which are passed in the vrfqVendorTopPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRfqVendorTop if any.
     *
     * @param vrfqvendortopId The id of the VRfqVendorTop to be deleted; value cannot be null.
     * @param vrfqVendorTopPatch The partial data of VRfqVendorTop which is supposed to be updated; value cannot be null.
     * @return The updated VRfqVendorTop.
     * @throws EntityNotFoundException if no VRfqVendorTop is found with given input.
     */
    VRfqVendorTop partialUpdate(Integer vrfqvendortopId, Map<String, Object> vrfqVendorTopPatch);

    /**
     * Deletes an existing VRfqVendorTop with the given id.
     *
     * @param vrfqvendortopId The id of the VRfqVendorTop to be deleted; value cannot be null.
     * @return The deleted VRfqVendorTop.
     * @throws EntityNotFoundException if no VRfqVendorTop found with the given id.
     */
    VRfqVendorTop delete(Integer vrfqvendortopId);

    /**
     * Deletes an existing VRfqVendorTop with the given object.
     *
     * @param vrfqVendorTop The instance of the VRfqVendorTop to be deleted; value cannot be null.
     */
    void delete(VRfqVendorTop vrfqVendorTop);

    /**
     * Find all VRfqVendorTops matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VRfqVendorTops.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VRfqVendorTop> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VRfqVendorTops matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VRfqVendorTops.
     *
     * @see Pageable
     * @see Page
     */
    Page<VRfqVendorTop> findAll(String query, Pageable pageable);

    /**
     * Exports all VRfqVendorTops matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VRfqVendorTops matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VRfqVendorTops in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VRfqVendorTop.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}