/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VUserRole;

/**
 * Service object for domain model class {@link VUserRole}.
 */
public interface VUserRoleService {

    /**
     * Creates a new VUserRole. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VUserRole if any.
     *
     * @param vuserRole Details of the VUserRole to be created; value cannot be null.
     * @return The newly created VUserRole.
     */
    VUserRole create(@Valid VUserRole vuserRole);


	/**
     * Returns VUserRole by given id if exists.
     *
     * @param vuserroleId The id of the VUserRole to get; value cannot be null.
     * @return VUserRole associated with the given vuserroleId.
	 * @throws EntityNotFoundException If no VUserRole is found.
     */
    VUserRole getById(Integer vuserroleId);

    /**
     * Find and return the VUserRole by given id if exists, returns null otherwise.
     *
     * @param vuserroleId The id of the VUserRole to get; value cannot be null.
     * @return VUserRole associated with the given vuserroleId.
     */
    VUserRole findById(Integer vuserroleId);

	/**
     * Find and return the list of VUserRoles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vuserroleIds The id's of the VUserRole to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VUserRoles associated with the given vuserroleIds.
     */
    List<VUserRole> findByMultipleIds(List<Integer> vuserroleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VUserRole. It replaces all fields of the existing VUserRole with the given vuserRole.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VUserRole if any.
     *
     * @param vuserRole The details of the VUserRole to be updated; value cannot be null.
     * @return The updated VUserRole.
     * @throws EntityNotFoundException if no VUserRole is found with given input.
     */
    VUserRole update(@Valid VUserRole vuserRole);


    /**
     * Partially updates the details of an existing VUserRole. It updates only the
     * fields of the existing VUserRole which are passed in the vuserRolePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VUserRole if any.
     *
     * @param vuserroleId The id of the VUserRole to be deleted; value cannot be null.
     * @param vuserRolePatch The partial data of VUserRole which is supposed to be updated; value cannot be null.
     * @return The updated VUserRole.
     * @throws EntityNotFoundException if no VUserRole is found with given input.
     */
    VUserRole partialUpdate(Integer vuserroleId, Map<String, Object> vuserRolePatch);

    /**
     * Deletes an existing VUserRole with the given id.
     *
     * @param vuserroleId The id of the VUserRole to be deleted; value cannot be null.
     * @return The deleted VUserRole.
     * @throws EntityNotFoundException if no VUserRole found with the given id.
     */
    VUserRole delete(Integer vuserroleId);

    /**
     * Deletes an existing VUserRole with the given object.
     *
     * @param vuserRole The instance of the VUserRole to be deleted; value cannot be null.
     */
    void delete(VUserRole vuserRole);

    /**
     * Find all VUserRoles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VUserRoles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VUserRole> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VUserRoles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VUserRoles.
     *
     * @see Pageable
     * @see Page
     */
    Page<VUserRole> findAll(String query, Pageable pageable);

    /**
     * Exports all VUserRoles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VUserRoles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VUserRoles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VUserRole.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}