/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserRole;


/**
 * ServiceImpl object for domain model class TblMUserRole.
 *
 * @see TblMUserRole
 */
@Service("aio_ptp.TblMUserRoleService")
@Validated
@EntityService(entityClass = TblMUserRole.class, serviceId = "aio_ptp")
public class TblMUserRoleServiceImpl implements TblMUserRoleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserRoleServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblMUserRoleDao")
    private WMGenericDao<TblMUserRole, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMUserRole, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserRole create(TblMUserRole tblMuserRole) {
        LOGGER.debug("Creating a new TblMUserRole with information: {}", tblMuserRole);

        TblMUserRole tblMuserRoleCreated = this.wmGenericDao.create(tblMuserRole);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMuserRoleCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserRole getById(Integer tblmuserroleId) {
        LOGGER.debug("Finding TblMUserRole by id: {}", tblmuserroleId);
        return this.wmGenericDao.findById(tblmuserroleId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserRole findById(Integer tblmuserroleId) {
        LOGGER.debug("Finding TblMUserRole by id: {}", tblmuserroleId);
        try {
            return this.wmGenericDao.findById(tblmuserroleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMUserRole found with id: {}", tblmuserroleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMUserRole> findByMultipleIds(List<Integer> tblmuserroleIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMUserRoles by ids: {}", tblmuserroleIds);

        return this.wmGenericDao.findByMultipleIds(tblmuserroleIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserRole update(TblMUserRole tblMuserRole) {
        LOGGER.debug("Updating TblMUserRole with information: {}", tblMuserRole);

        this.wmGenericDao.update(tblMuserRole);
        this.wmGenericDao.refresh(tblMuserRole);

        return tblMuserRole;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserRole partialUpdate(Integer tblmuserroleId, Map<String, Object>tblMuserRolePatch) {
        LOGGER.debug("Partially Updating the TblMUserRole with id: {}", tblmuserroleId);

        TblMUserRole tblMuserRole = getById(tblmuserroleId);

        try {
            ObjectReader tblMuserRoleReader = this.objectMapper.reader().forType(TblMUserRole.class).withValueToUpdate(tblMuserRole);
            tblMuserRole = tblMuserRoleReader.readValue(this.objectMapper.writeValueAsString(tblMuserRolePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMuserRolePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMuserRole = update(tblMuserRole);

        return tblMuserRole;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserRole delete(Integer tblmuserroleId) {
        LOGGER.debug("Deleting TblMUserRole with id: {}", tblmuserroleId);
        TblMUserRole deleted = this.wmGenericDao.findById(tblmuserroleId);
        if (deleted == null) {
            LOGGER.debug("No TblMUserRole found with id: {}", tblmuserroleId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMUserRole.class.getSimpleName(), tblmuserroleId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMUserRole tblMuserRole) {
        LOGGER.debug("Deleting TblMUserRole with {}", tblMuserRole);
        this.wmGenericDao.delete(tblMuserRole);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserRole> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserRoles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserRole> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserRoles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserRole to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserRole to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}