/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetDetails;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetHeader;
import id.co.aio.procure_to_pay.aio_ptp.TblTPrLineItem;


/**
 * ServiceImpl object for domain model class TblTBudgetHeader.
 *
 * @see TblTBudgetHeader
 */
@Service("aio_ptp.TblTBudgetHeaderService")
@Validated
@EntityService(entityClass = TblTBudgetHeader.class, serviceId = "aio_ptp")
public class TblTBudgetHeaderServiceImpl implements TblTBudgetHeaderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTBudgetHeaderServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTPrLineItemService")
    private TblTPrLineItemService tblTPrLineItemService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTBudgetDetailsService")
    private TblTBudgetDetailsService tblTBudgetDetailsService;

    @Autowired
    @Qualifier("aio_ptp.TblTBudgetHeaderDao")
    private WMGenericDao<TblTBudgetHeader, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTBudgetHeader, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetHeader create(TblTBudgetHeader tblTbudgetHeader) {
        LOGGER.debug("Creating a new TblTBudgetHeader with information: {}", tblTbudgetHeader);

        TblTBudgetHeader tblTbudgetHeaderCreated = this.wmGenericDao.create(tblTbudgetHeader);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTbudgetHeaderCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetHeader getById(Integer tbltbudgetheaderId) {
        LOGGER.debug("Finding TblTBudgetHeader by id: {}", tbltbudgetheaderId);
        return this.wmGenericDao.findById(tbltbudgetheaderId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetHeader findById(Integer tbltbudgetheaderId) {
        LOGGER.debug("Finding TblTBudgetHeader by id: {}", tbltbudgetheaderId);
        try {
            return this.wmGenericDao.findById(tbltbudgetheaderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTBudgetHeader found with id: {}", tbltbudgetheaderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTBudgetHeader> findByMultipleIds(List<Integer> tbltbudgetheaderIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTBudgetHeaders by ids: {}", tbltbudgetheaderIds);

        return this.wmGenericDao.findByMultipleIds(tbltbudgetheaderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetHeader update(TblTBudgetHeader tblTbudgetHeader) {
        LOGGER.debug("Updating TblTBudgetHeader with information: {}", tblTbudgetHeader);

        this.wmGenericDao.update(tblTbudgetHeader);
        this.wmGenericDao.refresh(tblTbudgetHeader);

        return tblTbudgetHeader;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetHeader partialUpdate(Integer tbltbudgetheaderId, Map<String, Object>tblTbudgetHeaderPatch) {
        LOGGER.debug("Partially Updating the TblTBudgetHeader with id: {}", tbltbudgetheaderId);

        TblTBudgetHeader tblTbudgetHeader = getById(tbltbudgetheaderId);

        try {
            ObjectReader tblTbudgetHeaderReader = this.objectMapper.reader().forType(TblTBudgetHeader.class).withValueToUpdate(tblTbudgetHeader);
            tblTbudgetHeader = tblTbudgetHeaderReader.readValue(this.objectMapper.writeValueAsString(tblTbudgetHeaderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTbudgetHeaderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTbudgetHeader = update(tblTbudgetHeader);

        return tblTbudgetHeader;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetHeader delete(Integer tbltbudgetheaderId) {
        LOGGER.debug("Deleting TblTBudgetHeader with id: {}", tbltbudgetheaderId);
        TblTBudgetHeader deleted = this.wmGenericDao.findById(tbltbudgetheaderId);
        if (deleted == null) {
            LOGGER.debug("No TblTBudgetHeader found with id: {}", tbltbudgetheaderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTBudgetHeader.class.getSimpleName(), tbltbudgetheaderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTBudgetHeader tblTbudgetHeader) {
        LOGGER.debug("Deleting TblTBudgetHeader with {}", tblTbudgetHeader);
        this.wmGenericDao.delete(tblTbudgetHeader);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetHeader> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetHeaders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetHeader> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetHeaders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetHeader to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetHeader to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetDetails> findAssociatedTblTbudgetDetailses(Integer bhId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTbudgetDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTbudgetHeader.bhId = '" + bhId + "'");

        return tblTBudgetDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPrLineItem> findAssociatedTblTprLineItems(Integer bhId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTprLineItems");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTbudgetHeader.bhId = '" + bhId + "'");

        return tblTPrLineItemService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTPrLineItemService instance
     */
    protected void setTblTPrLineItemService(TblTPrLineItemService service) {
        this.tblTPrLineItemService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTBudgetDetailsService instance
     */
    protected void setTblTBudgetDetailsService(TblTBudgetDetailsService service) {
        this.tblTBudgetDetailsService = service;
    }

}