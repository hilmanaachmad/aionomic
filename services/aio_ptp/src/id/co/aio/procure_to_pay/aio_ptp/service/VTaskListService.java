/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VTaskList;

/**
 * Service object for domain model class {@link VTaskList}.
 */
public interface VTaskListService {

    /**
     * Creates a new VTaskList. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VTaskList if any.
     *
     * @param vtaskList Details of the VTaskList to be created; value cannot be null.
     * @return The newly created VTaskList.
     */
    VTaskList create(@Valid VTaskList vtaskList);


	/**
     * Returns VTaskList by given id if exists.
     *
     * @param vtasklistId The id of the VTaskList to get; value cannot be null.
     * @return VTaskList associated with the given vtasklistId.
	 * @throws EntityNotFoundException If no VTaskList is found.
     */
    VTaskList getById(Integer vtasklistId);

    /**
     * Find and return the VTaskList by given id if exists, returns null otherwise.
     *
     * @param vtasklistId The id of the VTaskList to get; value cannot be null.
     * @return VTaskList associated with the given vtasklistId.
     */
    VTaskList findById(Integer vtasklistId);

	/**
     * Find and return the list of VTaskLists by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vtasklistIds The id's of the VTaskList to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VTaskLists associated with the given vtasklistIds.
     */
    List<VTaskList> findByMultipleIds(List<Integer> vtasklistIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VTaskList. It replaces all fields of the existing VTaskList with the given vtaskList.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VTaskList if any.
     *
     * @param vtaskList The details of the VTaskList to be updated; value cannot be null.
     * @return The updated VTaskList.
     * @throws EntityNotFoundException if no VTaskList is found with given input.
     */
    VTaskList update(@Valid VTaskList vtaskList);


    /**
     * Partially updates the details of an existing VTaskList. It updates only the
     * fields of the existing VTaskList which are passed in the vtaskListPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VTaskList if any.
     *
     * @param vtasklistId The id of the VTaskList to be deleted; value cannot be null.
     * @param vtaskListPatch The partial data of VTaskList which is supposed to be updated; value cannot be null.
     * @return The updated VTaskList.
     * @throws EntityNotFoundException if no VTaskList is found with given input.
     */
    VTaskList partialUpdate(Integer vtasklistId, Map<String, Object> vtaskListPatch);

    /**
     * Deletes an existing VTaskList with the given id.
     *
     * @param vtasklistId The id of the VTaskList to be deleted; value cannot be null.
     * @return The deleted VTaskList.
     * @throws EntityNotFoundException if no VTaskList found with the given id.
     */
    VTaskList delete(Integer vtasklistId);

    /**
     * Deletes an existing VTaskList with the given object.
     *
     * @param vtaskList The instance of the VTaskList to be deleted; value cannot be null.
     */
    void delete(VTaskList vtaskList);

    /**
     * Find all VTaskLists matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VTaskLists.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VTaskList> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VTaskLists matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VTaskLists.
     *
     * @see Pageable
     * @see Page
     */
    Page<VTaskList> findAll(String query, Pageable pageable);

    /**
     * Exports all VTaskLists matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VTaskLists matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VTaskLists in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VTaskList.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}