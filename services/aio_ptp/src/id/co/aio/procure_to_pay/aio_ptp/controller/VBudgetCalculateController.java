/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetCalculate;
import id.co.aio.procure_to_pay.aio_ptp.service.VBudgetCalculateService;


/**
 * Controller object for domain model class VBudgetCalculate.
 * @see VBudgetCalculate
 */
@RestController("aio_ptp.VBudgetCalculateController")
@Api(value = "VBudgetCalculateController", description = "Exposes APIs to work with VBudgetCalculate resource.")
@RequestMapping("/aio_ptp/VBudgetCalculate")
public class VBudgetCalculateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBudgetCalculateController.class);

    @Autowired
	@Qualifier("aio_ptp.VBudgetCalculateService")
	private VBudgetCalculateService vBudgetCalculateService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VBudgetCalculate instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetCalculate createVBudgetCalculate(@RequestBody VBudgetCalculate vbudgetCalculate) {
		LOGGER.debug("Create VBudgetCalculate with information: {}" , vbudgetCalculate);

		vbudgetCalculate = vBudgetCalculateService.create(vbudgetCalculate);
		LOGGER.debug("Created VBudgetCalculate with information: {}" , vbudgetCalculate);

	    return vbudgetCalculate;
	}

    @ApiOperation(value = "Returns the VBudgetCalculate instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetCalculate getVBudgetCalculate(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Getting VBudgetCalculate with id: {}" , bhId);

        VBudgetCalculate foundVBudgetCalculate = vBudgetCalculateService.getById(bhId);
        LOGGER.debug("VBudgetCalculate details with id: {}" , foundVBudgetCalculate);

        return foundVBudgetCalculate;
    }

    @ApiOperation(value = "Updates the VBudgetCalculate instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetCalculate editVBudgetCalculate(@PathVariable("bhId") Integer bhId, @RequestBody VBudgetCalculate vbudgetCalculate) {
        LOGGER.debug("Editing VBudgetCalculate with id: {}" , vbudgetCalculate.getBhId());

        vbudgetCalculate.setBhId(bhId);
        vbudgetCalculate = vBudgetCalculateService.update(vbudgetCalculate);
        LOGGER.debug("VBudgetCalculate details with id: {}" , vbudgetCalculate);

        return vbudgetCalculate;
    }
    
    @ApiOperation(value = "Partially updates the VBudgetCalculate instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetCalculate patchVBudgetCalculate(@PathVariable("bhId") Integer bhId, @RequestBody @MapTo(VBudgetCalculate.class) Map<String, Object> vbudgetCalculatePatch) {
        LOGGER.debug("Partially updating VBudgetCalculate with id: {}" , bhId);

        VBudgetCalculate vbudgetCalculate = vBudgetCalculateService.partialUpdate(bhId, vbudgetCalculatePatch);
        LOGGER.debug("VBudgetCalculate details after partial update: {}" , vbudgetCalculate);

        return vbudgetCalculate;
    }

    @ApiOperation(value = "Deletes the VBudgetCalculate instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVBudgetCalculate(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Deleting VBudgetCalculate with id: {}" , bhId);

        VBudgetCalculate deletedVBudgetCalculate = vBudgetCalculateService.delete(bhId);

        return deletedVBudgetCalculate != null;
    }

    /**
     * @deprecated Use {@link #findVBudgetCalculates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VBudgetCalculate instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetCalculate> searchVBudgetCalculatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VBudgetCalculates list by query filter:{}", (Object) queryFilters);
        return vBudgetCalculateService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBudgetCalculate instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetCalculate> findVBudgetCalculates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBudgetCalculates list by filter:", query);
        return vBudgetCalculateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBudgetCalculate instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetCalculate> filterVBudgetCalculates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBudgetCalculates list by filter", query);
        return vBudgetCalculateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVBudgetCalculates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vBudgetCalculateService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVBudgetCalculatesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VBudgetCalculate.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vBudgetCalculateService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VBudgetCalculate instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVBudgetCalculates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VBudgetCalculates");
		return vBudgetCalculateService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVBudgetCalculateAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vBudgetCalculateService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VBudgetCalculateService instance
	 */
	protected void setVBudgetCalculateService(VBudgetCalculateService service) {
		this.vBudgetCalculateService = service;
	}

}