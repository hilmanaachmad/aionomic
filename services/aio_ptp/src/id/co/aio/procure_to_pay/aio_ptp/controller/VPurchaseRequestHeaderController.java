/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseRequestHeader;
import id.co.aio.procure_to_pay.aio_ptp.service.VPurchaseRequestHeaderService;


/**
 * Controller object for domain model class VPurchaseRequestHeader.
 * @see VPurchaseRequestHeader
 */
@RestController("aio_ptp.VPurchaseRequestHeaderController")
@Api(value = "VPurchaseRequestHeaderController", description = "Exposes APIs to work with VPurchaseRequestHeader resource.")
@RequestMapping("/aio_ptp/VPurchaseRequestHeader")
public class VPurchaseRequestHeaderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseRequestHeaderController.class);

    @Autowired
	@Qualifier("aio_ptp.VPurchaseRequestHeaderService")
	private VPurchaseRequestHeaderService vPurchaseRequestHeaderService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPurchaseRequestHeader instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestHeader createVPurchaseRequestHeader(@RequestBody VPurchaseRequestHeader vpurchaseRequestHeader) {
		LOGGER.debug("Create VPurchaseRequestHeader with information: {}" , vpurchaseRequestHeader);

		vpurchaseRequestHeader = vPurchaseRequestHeaderService.create(vpurchaseRequestHeader);
		LOGGER.debug("Created VPurchaseRequestHeader with information: {}" , vpurchaseRequestHeader);

	    return vpurchaseRequestHeader;
	}

    @ApiOperation(value = "Returns the VPurchaseRequestHeader instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestHeader getVPurchaseRequestHeader(@PathVariable("prId") Integer prId) {
        LOGGER.debug("Getting VPurchaseRequestHeader with id: {}" , prId);

        VPurchaseRequestHeader foundVPurchaseRequestHeader = vPurchaseRequestHeaderService.getById(prId);
        LOGGER.debug("VPurchaseRequestHeader details with id: {}" , foundVPurchaseRequestHeader);

        return foundVPurchaseRequestHeader;
    }

    @ApiOperation(value = "Updates the VPurchaseRequestHeader instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestHeader editVPurchaseRequestHeader(@PathVariable("prId") Integer prId, @RequestBody VPurchaseRequestHeader vpurchaseRequestHeader) {
        LOGGER.debug("Editing VPurchaseRequestHeader with id: {}" , vpurchaseRequestHeader.getPrId());

        vpurchaseRequestHeader.setPrId(prId);
        vpurchaseRequestHeader = vPurchaseRequestHeaderService.update(vpurchaseRequestHeader);
        LOGGER.debug("VPurchaseRequestHeader details with id: {}" , vpurchaseRequestHeader);

        return vpurchaseRequestHeader;
    }
    
    @ApiOperation(value = "Partially updates the VPurchaseRequestHeader instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestHeader patchVPurchaseRequestHeader(@PathVariable("prId") Integer prId, @RequestBody @MapTo(VPurchaseRequestHeader.class) Map<String, Object> vpurchaseRequestHeaderPatch) {
        LOGGER.debug("Partially updating VPurchaseRequestHeader with id: {}" , prId);

        VPurchaseRequestHeader vpurchaseRequestHeader = vPurchaseRequestHeaderService.partialUpdate(prId, vpurchaseRequestHeaderPatch);
        LOGGER.debug("VPurchaseRequestHeader details after partial update: {}" , vpurchaseRequestHeader);

        return vpurchaseRequestHeader;
    }

    @ApiOperation(value = "Deletes the VPurchaseRequestHeader instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPurchaseRequestHeader(@PathVariable("prId") Integer prId) {
        LOGGER.debug("Deleting VPurchaseRequestHeader with id: {}" , prId);

        VPurchaseRequestHeader deletedVPurchaseRequestHeader = vPurchaseRequestHeaderService.delete(prId);

        return deletedVPurchaseRequestHeader != null;
    }

    /**
     * @deprecated Use {@link #findVPurchaseRequestHeaders(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPurchaseRequestHeader instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseRequestHeader> searchVPurchaseRequestHeadersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPurchaseRequestHeaders list by query filter:{}", (Object) queryFilters);
        return vPurchaseRequestHeaderService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseRequestHeader instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseRequestHeader> findVPurchaseRequestHeaders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseRequestHeaders list by filter:", query);
        return vPurchaseRequestHeaderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseRequestHeader instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseRequestHeader> filterVPurchaseRequestHeaders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseRequestHeaders list by filter", query);
        return vPurchaseRequestHeaderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPurchaseRequestHeaders(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPurchaseRequestHeaderService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPurchaseRequestHeadersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPurchaseRequestHeader.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPurchaseRequestHeaderService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPurchaseRequestHeader instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPurchaseRequestHeaders( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPurchaseRequestHeaders");
		return vPurchaseRequestHeaderService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPurchaseRequestHeaderAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPurchaseRequestHeaderService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPurchaseRequestHeaderService instance
	 */
	protected void setVPurchaseRequestHeaderService(VPurchaseRequestHeaderService service) {
		this.vPurchaseRequestHeaderService = service;
	}

}