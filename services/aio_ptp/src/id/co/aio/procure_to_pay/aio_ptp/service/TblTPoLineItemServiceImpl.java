/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPoLineItem;


/**
 * ServiceImpl object for domain model class TblTPoLineItem.
 *
 * @see TblTPoLineItem
 */
@Service("aio_ptp.TblTPoLineItemService")
@Validated
@EntityService(entityClass = TblTPoLineItem.class, serviceId = "aio_ptp")
public class TblTPoLineItemServiceImpl implements TblTPoLineItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPoLineItemServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTPoLineItemDao")
    private WMGenericDao<TblTPoLineItem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTPoLineItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoLineItem create(TblTPoLineItem tblTpoLineItem) {
        LOGGER.debug("Creating a new TblTPoLineItem with information: {}", tblTpoLineItem);

        TblTPoLineItem tblTpoLineItemCreated = this.wmGenericDao.create(tblTpoLineItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTpoLineItemCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoLineItem getById(Integer tbltpolineitemId) {
        LOGGER.debug("Finding TblTPoLineItem by id: {}", tbltpolineitemId);
        return this.wmGenericDao.findById(tbltpolineitemId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoLineItem findById(Integer tbltpolineitemId) {
        LOGGER.debug("Finding TblTPoLineItem by id: {}", tbltpolineitemId);
        try {
            return this.wmGenericDao.findById(tbltpolineitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTPoLineItem found with id: {}", tbltpolineitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTPoLineItem> findByMultipleIds(List<Integer> tbltpolineitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTPoLineItems by ids: {}", tbltpolineitemIds);

        return this.wmGenericDao.findByMultipleIds(tbltpolineitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoLineItem update(TblTPoLineItem tblTpoLineItem) {
        LOGGER.debug("Updating TblTPoLineItem with information: {}", tblTpoLineItem);

        this.wmGenericDao.update(tblTpoLineItem);
        this.wmGenericDao.refresh(tblTpoLineItem);

        return tblTpoLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoLineItem partialUpdate(Integer tbltpolineitemId, Map<String, Object>tblTpoLineItemPatch) {
        LOGGER.debug("Partially Updating the TblTPoLineItem with id: {}", tbltpolineitemId);

        TblTPoLineItem tblTpoLineItem = getById(tbltpolineitemId);

        try {
            ObjectReader tblTpoLineItemReader = this.objectMapper.reader().forType(TblTPoLineItem.class).withValueToUpdate(tblTpoLineItem);
            tblTpoLineItem = tblTpoLineItemReader.readValue(this.objectMapper.writeValueAsString(tblTpoLineItemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTpoLineItemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTpoLineItem = update(tblTpoLineItem);

        return tblTpoLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoLineItem delete(Integer tbltpolineitemId) {
        LOGGER.debug("Deleting TblTPoLineItem with id: {}", tbltpolineitemId);
        TblTPoLineItem deleted = this.wmGenericDao.findById(tbltpolineitemId);
        if (deleted == null) {
            LOGGER.debug("No TblTPoLineItem found with id: {}", tbltpolineitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTPoLineItem.class.getSimpleName(), tbltpolineitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTPoLineItem tblTpoLineItem) {
        LOGGER.debug("Deleting TblTPoLineItem with {}", tblTpoLineItem);
        this.wmGenericDao.delete(tblTpoLineItem);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPoLineItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTPoLineItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPoLineItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTPoLineItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPoLineItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPoLineItem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}