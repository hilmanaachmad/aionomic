/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VGrTrackingVendor;


/**
 * ServiceImpl object for domain model class VGrTrackingVendor.
 *
 * @see VGrTrackingVendor
 */
@Service("aio_ptp.VGrTrackingVendorService")
@Validated
@EntityService(entityClass = VGrTrackingVendor.class, serviceId = "aio_ptp")
public class VGrTrackingVendorServiceImpl implements VGrTrackingVendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrTrackingVendorServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VGrTrackingVendorDao")
    private WMGenericDao<VGrTrackingVendor, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VGrTrackingVendor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingVendor create(VGrTrackingVendor vgrTrackingVendor) {
        LOGGER.debug("Creating a new VGrTrackingVendor with information: {}", vgrTrackingVendor);

        VGrTrackingVendor vgrTrackingVendorCreated = this.wmGenericDao.create(vgrTrackingVendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vgrTrackingVendorCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingVendor getById(Integer vgrtrackingvendorId) {
        LOGGER.debug("Finding VGrTrackingVendor by id: {}", vgrtrackingvendorId);
        return this.wmGenericDao.findById(vgrtrackingvendorId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingVendor findById(Integer vgrtrackingvendorId) {
        LOGGER.debug("Finding VGrTrackingVendor by id: {}", vgrtrackingvendorId);
        try {
            return this.wmGenericDao.findById(vgrtrackingvendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VGrTrackingVendor found with id: {}", vgrtrackingvendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VGrTrackingVendor> findByMultipleIds(List<Integer> vgrtrackingvendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding VGrTrackingVendors by ids: {}", vgrtrackingvendorIds);

        return this.wmGenericDao.findByMultipleIds(vgrtrackingvendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingVendor update(VGrTrackingVendor vgrTrackingVendor) {
        LOGGER.debug("Updating VGrTrackingVendor with information: {}", vgrTrackingVendor);

        this.wmGenericDao.update(vgrTrackingVendor);
        this.wmGenericDao.refresh(vgrTrackingVendor);

        return vgrTrackingVendor;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingVendor partialUpdate(Integer vgrtrackingvendorId, Map<String, Object>vgrTrackingVendorPatch) {
        LOGGER.debug("Partially Updating the VGrTrackingVendor with id: {}", vgrtrackingvendorId);

        VGrTrackingVendor vgrTrackingVendor = getById(vgrtrackingvendorId);

        try {
            ObjectReader vgrTrackingVendorReader = this.objectMapper.reader().forType(VGrTrackingVendor.class).withValueToUpdate(vgrTrackingVendor);
            vgrTrackingVendor = vgrTrackingVendorReader.readValue(this.objectMapper.writeValueAsString(vgrTrackingVendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vgrTrackingVendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vgrTrackingVendor = update(vgrTrackingVendor);

        return vgrTrackingVendor;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTrackingVendor delete(Integer vgrtrackingvendorId) {
        LOGGER.debug("Deleting VGrTrackingVendor with id: {}", vgrtrackingvendorId);
        VGrTrackingVendor deleted = this.wmGenericDao.findById(vgrtrackingvendorId);
        if (deleted == null) {
            LOGGER.debug("No VGrTrackingVendor found with id: {}", vgrtrackingvendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VGrTrackingVendor.class.getSimpleName(), vgrtrackingvendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VGrTrackingVendor vgrTrackingVendor) {
        LOGGER.debug("Deleting VGrTrackingVendor with {}", vgrTrackingVendor);
        this.wmGenericDao.delete(vgrTrackingVendor);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrTrackingVendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VGrTrackingVendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrTrackingVendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VGrTrackingVendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrTrackingVendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrTrackingVendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}