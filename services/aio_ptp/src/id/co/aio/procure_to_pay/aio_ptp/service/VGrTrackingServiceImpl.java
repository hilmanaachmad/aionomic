/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VGrTracking;


/**
 * ServiceImpl object for domain model class VGrTracking.
 *
 * @see VGrTracking
 */
@Service("aio_ptp.VGrTrackingService")
@Validated
@EntityService(entityClass = VGrTracking.class, serviceId = "aio_ptp")
public class VGrTrackingServiceImpl implements VGrTrackingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrTrackingServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VGrTrackingDao")
    private WMGenericDao<VGrTracking, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VGrTracking, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTracking create(VGrTracking vgrTracking) {
        LOGGER.debug("Creating a new VGrTracking with information: {}", vgrTracking);

        VGrTracking vgrTrackingCreated = this.wmGenericDao.create(vgrTracking);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vgrTrackingCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrTracking getById(Integer vgrtrackingId) {
        LOGGER.debug("Finding VGrTracking by id: {}", vgrtrackingId);
        return this.wmGenericDao.findById(vgrtrackingId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrTracking findById(Integer vgrtrackingId) {
        LOGGER.debug("Finding VGrTracking by id: {}", vgrtrackingId);
        try {
            return this.wmGenericDao.findById(vgrtrackingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VGrTracking found with id: {}", vgrtrackingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VGrTracking> findByMultipleIds(List<Integer> vgrtrackingIds, boolean orderedReturn) {
        LOGGER.debug("Finding VGrTrackings by ids: {}", vgrtrackingIds);

        return this.wmGenericDao.findByMultipleIds(vgrtrackingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VGrTracking update(VGrTracking vgrTracking) {
        LOGGER.debug("Updating VGrTracking with information: {}", vgrTracking);

        this.wmGenericDao.update(vgrTracking);
        this.wmGenericDao.refresh(vgrTracking);

        return vgrTracking;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTracking partialUpdate(Integer vgrtrackingId, Map<String, Object>vgrTrackingPatch) {
        LOGGER.debug("Partially Updating the VGrTracking with id: {}", vgrtrackingId);

        VGrTracking vgrTracking = getById(vgrtrackingId);

        try {
            ObjectReader vgrTrackingReader = this.objectMapper.reader().forType(VGrTracking.class).withValueToUpdate(vgrTracking);
            vgrTracking = vgrTrackingReader.readValue(this.objectMapper.writeValueAsString(vgrTrackingPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vgrTrackingPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vgrTracking = update(vgrTracking);

        return vgrTracking;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrTracking delete(Integer vgrtrackingId) {
        LOGGER.debug("Deleting VGrTracking with id: {}", vgrtrackingId);
        VGrTracking deleted = this.wmGenericDao.findById(vgrtrackingId);
        if (deleted == null) {
            LOGGER.debug("No VGrTracking found with id: {}", vgrtrackingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VGrTracking.class.getSimpleName(), vgrtrackingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VGrTracking vgrTracking) {
        LOGGER.debug("Deleting VGrTracking with {}", vgrTracking);
        this.wmGenericDao.delete(vgrTracking);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrTracking> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VGrTrackings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrTracking> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VGrTrackings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrTracking to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrTracking to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}