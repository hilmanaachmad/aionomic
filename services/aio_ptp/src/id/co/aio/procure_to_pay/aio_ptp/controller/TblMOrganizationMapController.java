/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMOrganizationMap;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMOrganizationMapService;


/**
 * Controller object for domain model class TblMOrganizationMap.
 * @see TblMOrganizationMap
 */
@RestController("aio_ptp.TblMOrganizationMapController")
@Api(value = "TblMOrganizationMapController", description = "Exposes APIs to work with TblMOrganizationMap resource.")
@RequestMapping("/aio_ptp/TblMOrganizationMap")
public class TblMOrganizationMapController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMOrganizationMapController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMOrganizationMapService")
	private TblMOrganizationMapService tblMOrganizationMapService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMOrganizationMap instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMOrganizationMap createTblMOrganizationMap(@RequestBody TblMOrganizationMap tblMorganizationMap) {
		LOGGER.debug("Create TblMOrganizationMap with information: {}" , tblMorganizationMap);

		tblMorganizationMap = tblMOrganizationMapService.create(tblMorganizationMap);
		LOGGER.debug("Created TblMOrganizationMap with information: {}" , tblMorganizationMap);

	    return tblMorganizationMap;
	}

    @ApiOperation(value = "Returns the TblMOrganizationMap instance associated with the given id.")
    @RequestMapping(value = "/{omId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMOrganizationMap getTblMOrganizationMap(@PathVariable("omId") Integer omId) {
        LOGGER.debug("Getting TblMOrganizationMap with id: {}" , omId);

        TblMOrganizationMap foundTblMOrganizationMap = tblMOrganizationMapService.getById(omId);
        LOGGER.debug("TblMOrganizationMap details with id: {}" , foundTblMOrganizationMap);

        return foundTblMOrganizationMap;
    }

    @ApiOperation(value = "Updates the TblMOrganizationMap instance associated with the given id.")
    @RequestMapping(value = "/{omId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMOrganizationMap editTblMOrganizationMap(@PathVariable("omId") Integer omId, @RequestBody TblMOrganizationMap tblMorganizationMap) {
        LOGGER.debug("Editing TblMOrganizationMap with id: {}" , tblMorganizationMap.getOmId());

        tblMorganizationMap.setOmId(omId);
        tblMorganizationMap = tblMOrganizationMapService.update(tblMorganizationMap);
        LOGGER.debug("TblMOrganizationMap details with id: {}" , tblMorganizationMap);

        return tblMorganizationMap;
    }
    
    @ApiOperation(value = "Partially updates the TblMOrganizationMap instance associated with the given id.")
    @RequestMapping(value = "/{omId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMOrganizationMap patchTblMOrganizationMap(@PathVariable("omId") Integer omId, @RequestBody @MapTo(TblMOrganizationMap.class) Map<String, Object> tblMorganizationMapPatch) {
        LOGGER.debug("Partially updating TblMOrganizationMap with id: {}" , omId);

        TblMOrganizationMap tblMorganizationMap = tblMOrganizationMapService.partialUpdate(omId, tblMorganizationMapPatch);
        LOGGER.debug("TblMOrganizationMap details after partial update: {}" , tblMorganizationMap);

        return tblMorganizationMap;
    }

    @ApiOperation(value = "Deletes the TblMOrganizationMap instance associated with the given id.")
    @RequestMapping(value = "/{omId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMOrganizationMap(@PathVariable("omId") Integer omId) {
        LOGGER.debug("Deleting TblMOrganizationMap with id: {}" , omId);

        TblMOrganizationMap deletedTblMOrganizationMap = tblMOrganizationMapService.delete(omId);

        return deletedTblMOrganizationMap != null;
    }

    /**
     * @deprecated Use {@link #findTblMOrganizationMaps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMOrganizationMap instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMOrganizationMap> searchTblMOrganizationMapsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMOrganizationMaps list by query filter:{}", (Object) queryFilters);
        return tblMOrganizationMapService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMOrganizationMap instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMOrganizationMap> findTblMOrganizationMaps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMOrganizationMaps list by filter:", query);
        return tblMOrganizationMapService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMOrganizationMap instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMOrganizationMap> filterTblMOrganizationMaps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMOrganizationMaps list by filter", query);
        return tblMOrganizationMapService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMOrganizationMaps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMOrganizationMapService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMOrganizationMapsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMOrganizationMap.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMOrganizationMapService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMOrganizationMap instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMOrganizationMaps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMOrganizationMaps");
		return tblMOrganizationMapService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMOrganizationMapAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMOrganizationMapService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMOrganizationMapService instance
	 */
	protected void setTblMOrganizationMapService(TblMOrganizationMapService service) {
		this.tblMOrganizationMapService = service;
	}

}