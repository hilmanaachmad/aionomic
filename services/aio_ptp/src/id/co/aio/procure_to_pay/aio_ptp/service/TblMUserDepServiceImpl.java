/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserDep;


/**
 * ServiceImpl object for domain model class TblMUserDep.
 *
 * @see TblMUserDep
 */
@Service("aio_ptp.TblMUserDepService")
@Validated
@EntityService(entityClass = TblMUserDep.class, serviceId = "aio_ptp")
public class TblMUserDepServiceImpl implements TblMUserDepService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserDepServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblMUserDepDao")
    private WMGenericDao<TblMUserDep, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMUserDep, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserDep create(TblMUserDep tblMuserDep) {
        LOGGER.debug("Creating a new TblMUserDep with information: {}", tblMuserDep);

        TblMUserDep tblMuserDepCreated = this.wmGenericDao.create(tblMuserDep);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMuserDepCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserDep getById(Integer tblmuserdepId) {
        LOGGER.debug("Finding TblMUserDep by id: {}", tblmuserdepId);
        return this.wmGenericDao.findById(tblmuserdepId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserDep findById(Integer tblmuserdepId) {
        LOGGER.debug("Finding TblMUserDep by id: {}", tblmuserdepId);
        try {
            return this.wmGenericDao.findById(tblmuserdepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMUserDep found with id: {}", tblmuserdepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMUserDep> findByMultipleIds(List<Integer> tblmuserdepIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMUserDeps by ids: {}", tblmuserdepIds);

        return this.wmGenericDao.findByMultipleIds(tblmuserdepIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserDep update(TblMUserDep tblMuserDep) {
        LOGGER.debug("Updating TblMUserDep with information: {}", tblMuserDep);

        this.wmGenericDao.update(tblMuserDep);
        this.wmGenericDao.refresh(tblMuserDep);

        return tblMuserDep;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserDep partialUpdate(Integer tblmuserdepId, Map<String, Object>tblMuserDepPatch) {
        LOGGER.debug("Partially Updating the TblMUserDep with id: {}", tblmuserdepId);

        TblMUserDep tblMuserDep = getById(tblmuserdepId);

        try {
            ObjectReader tblMuserDepReader = this.objectMapper.reader().forType(TblMUserDep.class).withValueToUpdate(tblMuserDep);
            tblMuserDep = tblMuserDepReader.readValue(this.objectMapper.writeValueAsString(tblMuserDepPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMuserDepPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMuserDep = update(tblMuserDep);

        return tblMuserDep;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserDep delete(Integer tblmuserdepId) {
        LOGGER.debug("Deleting TblMUserDep with id: {}", tblmuserdepId);
        TblMUserDep deleted = this.wmGenericDao.findById(tblmuserdepId);
        if (deleted == null) {
            LOGGER.debug("No TblMUserDep found with id: {}", tblmuserdepId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMUserDep.class.getSimpleName(), tblmuserdepId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMUserDep tblMuserDep) {
        LOGGER.debug("Deleting TblMUserDep with {}", tblMuserDep);
        this.wmGenericDao.delete(tblMuserDep);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserDep> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserDeps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserDep> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserDeps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserDep to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserDep to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}