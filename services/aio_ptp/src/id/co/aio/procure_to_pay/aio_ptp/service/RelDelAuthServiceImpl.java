/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.RelDelAuth;
import id.co.aio.procure_to_pay.aio_ptp.RelDelAuthId;


/**
 * ServiceImpl object for domain model class RelDelAuth.
 *
 * @see RelDelAuth
 */
@Service("aio_ptp.RelDelAuthService")
@Validated
@EntityService(entityClass = RelDelAuth.class, serviceId = "aio_ptp")
public class RelDelAuthServiceImpl implements RelDelAuthService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelDelAuthServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.RelDelAuthDao")
    private WMGenericDao<RelDelAuth, RelDelAuthId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RelDelAuth, RelDelAuthId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public RelDelAuth create(RelDelAuth relDelAuth) {
        LOGGER.debug("Creating a new RelDelAuth with information: {}", relDelAuth);

        RelDelAuth relDelAuthCreated = this.wmGenericDao.create(relDelAuth);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(relDelAuthCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public RelDelAuth getById(RelDelAuthId reldelauthId) {
        LOGGER.debug("Finding RelDelAuth by id: {}", reldelauthId);
        return this.wmGenericDao.findById(reldelauthId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public RelDelAuth findById(RelDelAuthId reldelauthId) {
        LOGGER.debug("Finding RelDelAuth by id: {}", reldelauthId);
        try {
            return this.wmGenericDao.findById(reldelauthId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RelDelAuth found with id: {}", reldelauthId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<RelDelAuth> findByMultipleIds(List<RelDelAuthId> reldelauthIds, boolean orderedReturn) {
        LOGGER.debug("Finding RelDelAuths by ids: {}", reldelauthIds);

        return this.wmGenericDao.findByMultipleIds(reldelauthIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public RelDelAuth update(RelDelAuth relDelAuth) {
        LOGGER.debug("Updating RelDelAuth with information: {}", relDelAuth);

        this.wmGenericDao.update(relDelAuth);
        this.wmGenericDao.refresh(relDelAuth);

        return relDelAuth;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public RelDelAuth partialUpdate(RelDelAuthId reldelauthId, Map<String, Object>relDelAuthPatch) {
        LOGGER.debug("Partially Updating the RelDelAuth with id: {}", reldelauthId);

        RelDelAuth relDelAuth = getById(reldelauthId);

        try {
            ObjectReader relDelAuthReader = this.objectMapper.reader().forType(RelDelAuth.class).withValueToUpdate(relDelAuth);
            relDelAuth = relDelAuthReader.readValue(this.objectMapper.writeValueAsString(relDelAuthPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", relDelAuthPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        relDelAuth = update(relDelAuth);

        return relDelAuth;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public RelDelAuth delete(RelDelAuthId reldelauthId) {
        LOGGER.debug("Deleting RelDelAuth with id: {}", reldelauthId);
        RelDelAuth deleted = this.wmGenericDao.findById(reldelauthId);
        if (deleted == null) {
            LOGGER.debug("No RelDelAuth found with id: {}", reldelauthId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RelDelAuth.class.getSimpleName(), reldelauthId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(RelDelAuth relDelAuth) {
        LOGGER.debug("Deleting RelDelAuth with {}", relDelAuth);
        this.wmGenericDao.delete(relDelAuth);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<RelDelAuth> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RelDelAuths");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<RelDelAuth> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RelDelAuths");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table RelDelAuth to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table RelDelAuth to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}