/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPoReadyToBypass;
import id.co.aio.procure_to_pay.aio_ptp.service.VPoReadyToBypassService;


/**
 * Controller object for domain model class VPoReadyToBypass.
 * @see VPoReadyToBypass
 */
@RestController("aio_ptp.VPoReadyToBypassController")
@Api(value = "VPoReadyToBypassController", description = "Exposes APIs to work with VPoReadyToBypass resource.")
@RequestMapping("/aio_ptp/VPoReadyToBypass")
public class VPoReadyToBypassController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoReadyToBypassController.class);

    @Autowired
	@Qualifier("aio_ptp.VPoReadyToBypassService")
	private VPoReadyToBypassService vPoReadyToBypassService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPoReadyToBypass instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToBypass createVPoReadyToBypass(@RequestBody VPoReadyToBypass vpoReadyToBypass) {
		LOGGER.debug("Create VPoReadyToBypass with information: {}" , vpoReadyToBypass);

		vpoReadyToBypass = vPoReadyToBypassService.create(vpoReadyToBypass);
		LOGGER.debug("Created VPoReadyToBypass with information: {}" , vpoReadyToBypass);

	    return vpoReadyToBypass;
	}

    @ApiOperation(value = "Returns the VPoReadyToBypass instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToBypass getVPoReadyToBypass(@PathVariable("idPoLineItem") Integer idPoLineItem) {
        LOGGER.debug("Getting VPoReadyToBypass with id: {}" , idPoLineItem);

        VPoReadyToBypass foundVPoReadyToBypass = vPoReadyToBypassService.getById(idPoLineItem);
        LOGGER.debug("VPoReadyToBypass details with id: {}" , foundVPoReadyToBypass);

        return foundVPoReadyToBypass;
    }

    @ApiOperation(value = "Updates the VPoReadyToBypass instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToBypass editVPoReadyToBypass(@PathVariable("idPoLineItem") Integer idPoLineItem, @RequestBody VPoReadyToBypass vpoReadyToBypass) {
        LOGGER.debug("Editing VPoReadyToBypass with id: {}" , vpoReadyToBypass.getIdPoLineItem());

        vpoReadyToBypass.setIdPoLineItem(idPoLineItem);
        vpoReadyToBypass = vPoReadyToBypassService.update(vpoReadyToBypass);
        LOGGER.debug("VPoReadyToBypass details with id: {}" , vpoReadyToBypass);

        return vpoReadyToBypass;
    }
    
    @ApiOperation(value = "Partially updates the VPoReadyToBypass instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToBypass patchVPoReadyToBypass(@PathVariable("idPoLineItem") Integer idPoLineItem, @RequestBody @MapTo(VPoReadyToBypass.class) Map<String, Object> vpoReadyToBypassPatch) {
        LOGGER.debug("Partially updating VPoReadyToBypass with id: {}" , idPoLineItem);

        VPoReadyToBypass vpoReadyToBypass = vPoReadyToBypassService.partialUpdate(idPoLineItem, vpoReadyToBypassPatch);
        LOGGER.debug("VPoReadyToBypass details after partial update: {}" , vpoReadyToBypass);

        return vpoReadyToBypass;
    }

    @ApiOperation(value = "Deletes the VPoReadyToBypass instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPoReadyToBypass(@PathVariable("idPoLineItem") Integer idPoLineItem) {
        LOGGER.debug("Deleting VPoReadyToBypass with id: {}" , idPoLineItem);

        VPoReadyToBypass deletedVPoReadyToBypass = vPoReadyToBypassService.delete(idPoLineItem);

        return deletedVPoReadyToBypass != null;
    }

    /**
     * @deprecated Use {@link #findVPoReadyToBypasses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPoReadyToBypass instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToBypass> searchVPoReadyToBypassesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPoReadyToBypasses list by query filter:{}", (Object) queryFilters);
        return vPoReadyToBypassService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoReadyToBypass instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToBypass> findVPoReadyToBypasses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoReadyToBypasses list by filter:", query);
        return vPoReadyToBypassService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoReadyToBypass instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToBypass> filterVPoReadyToBypasses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoReadyToBypasses list by filter", query);
        return vPoReadyToBypassService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPoReadyToBypasses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPoReadyToBypassService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPoReadyToBypassesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPoReadyToBypass.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPoReadyToBypassService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPoReadyToBypass instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPoReadyToBypasses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPoReadyToBypasses");
		return vPoReadyToBypassService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPoReadyToBypassAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPoReadyToBypassService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPoReadyToBypassService instance
	 */
	protected void setVPoReadyToBypassService(VPoReadyToBypassService service) {
		this.vPoReadyToBypassService = service;
	}

}