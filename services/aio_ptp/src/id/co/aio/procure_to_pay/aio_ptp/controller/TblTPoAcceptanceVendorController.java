/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTPoAcceptanceVendor;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTPoAcceptanceVendorService;


/**
 * Controller object for domain model class TblTPoAcceptanceVendor.
 * @see TblTPoAcceptanceVendor
 */
@RestController("aio_ptp.TblTPoAcceptanceVendorController")
@Api(value = "TblTPoAcceptanceVendorController", description = "Exposes APIs to work with TblTPoAcceptanceVendor resource.")
@RequestMapping("/aio_ptp/TblTPoAcceptanceVendor")
public class TblTPoAcceptanceVendorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPoAcceptanceVendorController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTPoAcceptanceVendorService")
	private TblTPoAcceptanceVendorService tblTPoAcceptanceVendorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTPoAcceptanceVendor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPoAcceptanceVendor createTblTPoAcceptanceVendor(@RequestBody TblTPoAcceptanceVendor tblTpoAcceptanceVendor) {
		LOGGER.debug("Create TblTPoAcceptanceVendor with information: {}" , tblTpoAcceptanceVendor);

		tblTpoAcceptanceVendor = tblTPoAcceptanceVendorService.create(tblTpoAcceptanceVendor);
		LOGGER.debug("Created TblTPoAcceptanceVendor with information: {}" , tblTpoAcceptanceVendor);

	    return tblTpoAcceptanceVendor;
	}

    @ApiOperation(value = "Returns the TblTPoAcceptanceVendor instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPoAcceptanceVendor getTblTPoAcceptanceVendor(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TblTPoAcceptanceVendor with id: {}" , id);

        TblTPoAcceptanceVendor foundTblTPoAcceptanceVendor = tblTPoAcceptanceVendorService.getById(id);
        LOGGER.debug("TblTPoAcceptanceVendor details with id: {}" , foundTblTPoAcceptanceVendor);

        return foundTblTPoAcceptanceVendor;
    }

    @ApiOperation(value = "Updates the TblTPoAcceptanceVendor instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPoAcceptanceVendor editTblTPoAcceptanceVendor(@PathVariable("id") Integer id, @RequestBody TblTPoAcceptanceVendor tblTpoAcceptanceVendor) {
        LOGGER.debug("Editing TblTPoAcceptanceVendor with id: {}" , tblTpoAcceptanceVendor.getId());

        tblTpoAcceptanceVendor.setId(id);
        tblTpoAcceptanceVendor = tblTPoAcceptanceVendorService.update(tblTpoAcceptanceVendor);
        LOGGER.debug("TblTPoAcceptanceVendor details with id: {}" , tblTpoAcceptanceVendor);

        return tblTpoAcceptanceVendor;
    }
    
    @ApiOperation(value = "Partially updates the TblTPoAcceptanceVendor instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPoAcceptanceVendor patchTblTPoAcceptanceVendor(@PathVariable("id") Integer id, @RequestBody @MapTo(TblTPoAcceptanceVendor.class) Map<String, Object> tblTpoAcceptanceVendorPatch) {
        LOGGER.debug("Partially updating TblTPoAcceptanceVendor with id: {}" , id);

        TblTPoAcceptanceVendor tblTpoAcceptanceVendor = tblTPoAcceptanceVendorService.partialUpdate(id, tblTpoAcceptanceVendorPatch);
        LOGGER.debug("TblTPoAcceptanceVendor details after partial update: {}" , tblTpoAcceptanceVendor);

        return tblTpoAcceptanceVendor;
    }

    @ApiOperation(value = "Deletes the TblTPoAcceptanceVendor instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTPoAcceptanceVendor(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TblTPoAcceptanceVendor with id: {}" , id);

        TblTPoAcceptanceVendor deletedTblTPoAcceptanceVendor = tblTPoAcceptanceVendorService.delete(id);

        return deletedTblTPoAcceptanceVendor != null;
    }

    /**
     * @deprecated Use {@link #findTblTPoAcceptanceVendors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTPoAcceptanceVendor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPoAcceptanceVendor> searchTblTPoAcceptanceVendorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTPoAcceptanceVendors list by query filter:{}", (Object) queryFilters);
        return tblTPoAcceptanceVendorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTPoAcceptanceVendor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPoAcceptanceVendor> findTblTPoAcceptanceVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTPoAcceptanceVendors list by filter:", query);
        return tblTPoAcceptanceVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTPoAcceptanceVendor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPoAcceptanceVendor> filterTblTPoAcceptanceVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTPoAcceptanceVendors list by filter", query);
        return tblTPoAcceptanceVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTPoAcceptanceVendors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTPoAcceptanceVendorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTPoAcceptanceVendorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTPoAcceptanceVendor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTPoAcceptanceVendorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTPoAcceptanceVendor instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTPoAcceptanceVendors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTPoAcceptanceVendors");
		return tblTPoAcceptanceVendorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTPoAcceptanceVendorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTPoAcceptanceVendorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTPoAcceptanceVendorService instance
	 */
	protected void setTblTPoAcceptanceVendorService(TblTPoAcceptanceVendorService service) {
		this.tblTPoAcceptanceVendorService = service;
	}

}