/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VVendorOrderList;
import id.co.aio.procure_to_pay.aio_ptp.service.VVendorOrderListService;


/**
 * Controller object for domain model class VVendorOrderList.
 * @see VVendorOrderList
 */
@RestController("aio_ptp.VVendorOrderListController")
@Api(value = "VVendorOrderListController", description = "Exposes APIs to work with VVendorOrderList resource.")
@RequestMapping("/aio_ptp/VVendorOrderList")
public class VVendorOrderListController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VVendorOrderListController.class);

    @Autowired
	@Qualifier("aio_ptp.VVendorOrderListService")
	private VVendorOrderListService vVendorOrderListService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VVendorOrderList instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorOrderList createVVendorOrderList(@RequestBody VVendorOrderList vvendorOrderList) {
		LOGGER.debug("Create VVendorOrderList with information: {}" , vvendorOrderList);

		vvendorOrderList = vVendorOrderListService.create(vvendorOrderList);
		LOGGER.debug("Created VVendorOrderList with information: {}" , vvendorOrderList);

	    return vvendorOrderList;
	}

    @ApiOperation(value = "Returns the VVendorOrderList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorOrderList getVVendorOrderList(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VVendorOrderList with id: {}" , id);

        VVendorOrderList foundVVendorOrderList = vVendorOrderListService.getById(id);
        LOGGER.debug("VVendorOrderList details with id: {}" , foundVVendorOrderList);

        return foundVVendorOrderList;
    }

    @ApiOperation(value = "Updates the VVendorOrderList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorOrderList editVVendorOrderList(@PathVariable("id") Integer id, @RequestBody VVendorOrderList vvendorOrderList) {
        LOGGER.debug("Editing VVendorOrderList with id: {}" , vvendorOrderList.getId());

        vvendorOrderList.setId(id);
        vvendorOrderList = vVendorOrderListService.update(vvendorOrderList);
        LOGGER.debug("VVendorOrderList details with id: {}" , vvendorOrderList);

        return vvendorOrderList;
    }
    
    @ApiOperation(value = "Partially updates the VVendorOrderList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorOrderList patchVVendorOrderList(@PathVariable("id") Integer id, @RequestBody @MapTo(VVendorOrderList.class) Map<String, Object> vvendorOrderListPatch) {
        LOGGER.debug("Partially updating VVendorOrderList with id: {}" , id);

        VVendorOrderList vvendorOrderList = vVendorOrderListService.partialUpdate(id, vvendorOrderListPatch);
        LOGGER.debug("VVendorOrderList details after partial update: {}" , vvendorOrderList);

        return vvendorOrderList;
    }

    @ApiOperation(value = "Deletes the VVendorOrderList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVVendorOrderList(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VVendorOrderList with id: {}" , id);

        VVendorOrderList deletedVVendorOrderList = vVendorOrderListService.delete(id);

        return deletedVVendorOrderList != null;
    }

    /**
     * @deprecated Use {@link #findVVendorOrderLists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VVendorOrderList instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendorOrderList> searchVVendorOrderListsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VVendorOrderLists list by query filter:{}", (Object) queryFilters);
        return vVendorOrderListService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VVendorOrderList instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendorOrderList> findVVendorOrderLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VVendorOrderLists list by filter:", query);
        return vVendorOrderListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VVendorOrderList instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendorOrderList> filterVVendorOrderLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VVendorOrderLists list by filter", query);
        return vVendorOrderListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVVendorOrderLists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vVendorOrderListService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVVendorOrderListsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VVendorOrderList.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vVendorOrderListService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VVendorOrderList instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVVendorOrderLists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VVendorOrderLists");
		return vVendorOrderListService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVVendorOrderListAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vVendorOrderListService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VVendorOrderListService instance
	 */
	protected void setVVendorOrderListService(VVendorOrderListService service) {
		this.vVendorOrderListService = service;
	}

}