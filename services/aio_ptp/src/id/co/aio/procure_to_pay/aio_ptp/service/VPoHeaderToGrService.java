/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoHeaderToGr;

/**
 * Service object for domain model class {@link VPoHeaderToGr}.
 */
public interface VPoHeaderToGrService {

    /**
     * Creates a new VPoHeaderToGr. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoHeaderToGr if any.
     *
     * @param vpoHeaderToGr Details of the VPoHeaderToGr to be created; value cannot be null.
     * @return The newly created VPoHeaderToGr.
     */
    VPoHeaderToGr create(@Valid VPoHeaderToGr vpoHeaderToGr);


	/**
     * Returns VPoHeaderToGr by given id if exists.
     *
     * @param vpoheadertogrId The id of the VPoHeaderToGr to get; value cannot be null.
     * @return VPoHeaderToGr associated with the given vpoheadertogrId.
	 * @throws EntityNotFoundException If no VPoHeaderToGr is found.
     */
    VPoHeaderToGr getById(Integer vpoheadertogrId);

    /**
     * Find and return the VPoHeaderToGr by given id if exists, returns null otherwise.
     *
     * @param vpoheadertogrId The id of the VPoHeaderToGr to get; value cannot be null.
     * @return VPoHeaderToGr associated with the given vpoheadertogrId.
     */
    VPoHeaderToGr findById(Integer vpoheadertogrId);

	/**
     * Find and return the list of VPoHeaderToGrs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vpoheadertogrIds The id's of the VPoHeaderToGr to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPoHeaderToGrs associated with the given vpoheadertogrIds.
     */
    List<VPoHeaderToGr> findByMultipleIds(List<Integer> vpoheadertogrIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPoHeaderToGr. It replaces all fields of the existing VPoHeaderToGr with the given vpoHeaderToGr.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoHeaderToGr if any.
     *
     * @param vpoHeaderToGr The details of the VPoHeaderToGr to be updated; value cannot be null.
     * @return The updated VPoHeaderToGr.
     * @throws EntityNotFoundException if no VPoHeaderToGr is found with given input.
     */
    VPoHeaderToGr update(@Valid VPoHeaderToGr vpoHeaderToGr);


    /**
     * Partially updates the details of an existing VPoHeaderToGr. It updates only the
     * fields of the existing VPoHeaderToGr which are passed in the vpoHeaderToGrPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoHeaderToGr if any.
     *
     * @param vpoheadertogrId The id of the VPoHeaderToGr to be deleted; value cannot be null.
     * @param vpoHeaderToGrPatch The partial data of VPoHeaderToGr which is supposed to be updated; value cannot be null.
     * @return The updated VPoHeaderToGr.
     * @throws EntityNotFoundException if no VPoHeaderToGr is found with given input.
     */
    VPoHeaderToGr partialUpdate(Integer vpoheadertogrId, Map<String, Object> vpoHeaderToGrPatch);

    /**
     * Deletes an existing VPoHeaderToGr with the given id.
     *
     * @param vpoheadertogrId The id of the VPoHeaderToGr to be deleted; value cannot be null.
     * @return The deleted VPoHeaderToGr.
     * @throws EntityNotFoundException if no VPoHeaderToGr found with the given id.
     */
    VPoHeaderToGr delete(Integer vpoheadertogrId);

    /**
     * Deletes an existing VPoHeaderToGr with the given object.
     *
     * @param vpoHeaderToGr The instance of the VPoHeaderToGr to be deleted; value cannot be null.
     */
    void delete(VPoHeaderToGr vpoHeaderToGr);

    /**
     * Find all VPoHeaderToGrs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPoHeaderToGrs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPoHeaderToGr> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPoHeaderToGrs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPoHeaderToGrs.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPoHeaderToGr> findAll(String query, Pageable pageable);

    /**
     * Exports all VPoHeaderToGrs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPoHeaderToGrs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPoHeaderToGrs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPoHeaderToGr.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}