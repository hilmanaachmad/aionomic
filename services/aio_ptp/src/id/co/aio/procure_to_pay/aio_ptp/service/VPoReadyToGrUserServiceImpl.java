/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoReadyToGrUser;


/**
 * ServiceImpl object for domain model class VPoReadyToGrUser.
 *
 * @see VPoReadyToGrUser
 */
@Service("aio_ptp.VPoReadyToGrUserService")
@Validated
@EntityService(entityClass = VPoReadyToGrUser.class, serviceId = "aio_ptp")
public class VPoReadyToGrUserServiceImpl implements VPoReadyToGrUserService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoReadyToGrUserServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPoReadyToGrUserDao")
    private WMGenericDao<VPoReadyToGrUser, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPoReadyToGrUser, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToGrUser create(VPoReadyToGrUser vpoReadyToGrUser) {
        LOGGER.debug("Creating a new VPoReadyToGrUser with information: {}", vpoReadyToGrUser);

        VPoReadyToGrUser vpoReadyToGrUserCreated = this.wmGenericDao.create(vpoReadyToGrUser);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpoReadyToGrUserCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToGrUser getById(Integer vporeadytogruserId) {
        LOGGER.debug("Finding VPoReadyToGrUser by id: {}", vporeadytogruserId);
        return this.wmGenericDao.findById(vporeadytogruserId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToGrUser findById(Integer vporeadytogruserId) {
        LOGGER.debug("Finding VPoReadyToGrUser by id: {}", vporeadytogruserId);
        try {
            return this.wmGenericDao.findById(vporeadytogruserId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPoReadyToGrUser found with id: {}", vporeadytogruserId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPoReadyToGrUser> findByMultipleIds(List<Integer> vporeadytogruserIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPoReadyToGrUsers by ids: {}", vporeadytogruserIds);

        return this.wmGenericDao.findByMultipleIds(vporeadytogruserIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToGrUser update(VPoReadyToGrUser vpoReadyToGrUser) {
        LOGGER.debug("Updating VPoReadyToGrUser with information: {}", vpoReadyToGrUser);

        this.wmGenericDao.update(vpoReadyToGrUser);
        this.wmGenericDao.refresh(vpoReadyToGrUser);

        return vpoReadyToGrUser;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToGrUser partialUpdate(Integer vporeadytogruserId, Map<String, Object>vpoReadyToGrUserPatch) {
        LOGGER.debug("Partially Updating the VPoReadyToGrUser with id: {}", vporeadytogruserId);

        VPoReadyToGrUser vpoReadyToGrUser = getById(vporeadytogruserId);

        try {
            ObjectReader vpoReadyToGrUserReader = this.objectMapper.reader().forType(VPoReadyToGrUser.class).withValueToUpdate(vpoReadyToGrUser);
            vpoReadyToGrUser = vpoReadyToGrUserReader.readValue(this.objectMapper.writeValueAsString(vpoReadyToGrUserPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpoReadyToGrUserPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpoReadyToGrUser = update(vpoReadyToGrUser);

        return vpoReadyToGrUser;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoReadyToGrUser delete(Integer vporeadytogruserId) {
        LOGGER.debug("Deleting VPoReadyToGrUser with id: {}", vporeadytogruserId);
        VPoReadyToGrUser deleted = this.wmGenericDao.findById(vporeadytogruserId);
        if (deleted == null) {
            LOGGER.debug("No VPoReadyToGrUser found with id: {}", vporeadytogruserId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPoReadyToGrUser.class.getSimpleName(), vporeadytogruserId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPoReadyToGrUser vpoReadyToGrUser) {
        LOGGER.debug("Deleting VPoReadyToGrUser with {}", vpoReadyToGrUser);
        this.wmGenericDao.delete(vpoReadyToGrUser);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoReadyToGrUser> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPoReadyToGrUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoReadyToGrUser> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPoReadyToGrUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoReadyToGrUser to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoReadyToGrUser to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}