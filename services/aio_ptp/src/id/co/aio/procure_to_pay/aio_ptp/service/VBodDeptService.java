/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VBodDept;

/**
 * Service object for domain model class {@link VBodDept}.
 */
public interface VBodDeptService {

    /**
     * Creates a new VBodDept. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VBodDept if any.
     *
     * @param vbodDept Details of the VBodDept to be created; value cannot be null.
     * @return The newly created VBodDept.
     */
    VBodDept create(@Valid VBodDept vbodDept);


	/**
     * Returns VBodDept by given id if exists.
     *
     * @param vboddeptId The id of the VBodDept to get; value cannot be null.
     * @return VBodDept associated with the given vboddeptId.
	 * @throws EntityNotFoundException If no VBodDept is found.
     */
    VBodDept getById(String vboddeptId);

    /**
     * Find and return the VBodDept by given id if exists, returns null otherwise.
     *
     * @param vboddeptId The id of the VBodDept to get; value cannot be null.
     * @return VBodDept associated with the given vboddeptId.
     */
    VBodDept findById(String vboddeptId);

	/**
     * Find and return the list of VBodDepts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vboddeptIds The id's of the VBodDept to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VBodDepts associated with the given vboddeptIds.
     */
    List<VBodDept> findByMultipleIds(List<String> vboddeptIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VBodDept. It replaces all fields of the existing VBodDept with the given vbodDept.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VBodDept if any.
     *
     * @param vbodDept The details of the VBodDept to be updated; value cannot be null.
     * @return The updated VBodDept.
     * @throws EntityNotFoundException if no VBodDept is found with given input.
     */
    VBodDept update(@Valid VBodDept vbodDept);


    /**
     * Partially updates the details of an existing VBodDept. It updates only the
     * fields of the existing VBodDept which are passed in the vbodDeptPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VBodDept if any.
     *
     * @param vboddeptId The id of the VBodDept to be deleted; value cannot be null.
     * @param vbodDeptPatch The partial data of VBodDept which is supposed to be updated; value cannot be null.
     * @return The updated VBodDept.
     * @throws EntityNotFoundException if no VBodDept is found with given input.
     */
    VBodDept partialUpdate(String vboddeptId, Map<String, Object> vbodDeptPatch);

    /**
     * Deletes an existing VBodDept with the given id.
     *
     * @param vboddeptId The id of the VBodDept to be deleted; value cannot be null.
     * @return The deleted VBodDept.
     * @throws EntityNotFoundException if no VBodDept found with the given id.
     */
    VBodDept delete(String vboddeptId);

    /**
     * Deletes an existing VBodDept with the given object.
     *
     * @param vbodDept The instance of the VBodDept to be deleted; value cannot be null.
     */
    void delete(VBodDept vbodDept);

    /**
     * Find all VBodDepts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VBodDepts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VBodDept> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VBodDepts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VBodDepts.
     *
     * @see Pageable
     * @see Page
     */
    Page<VBodDept> findAll(String query, Pageable pageable);

    /**
     * Exports all VBodDepts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VBodDepts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VBodDepts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VBodDept.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}