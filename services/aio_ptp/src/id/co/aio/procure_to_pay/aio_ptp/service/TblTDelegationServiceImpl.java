/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.RelDelAuth;
import id.co.aio.procure_to_pay.aio_ptp.TblTDelegation;


/**
 * ServiceImpl object for domain model class TblTDelegation.
 *
 * @see TblTDelegation
 */
@Service("aio_ptp.TblTDelegationService")
@Validated
@EntityService(entityClass = TblTDelegation.class, serviceId = "aio_ptp")
public class TblTDelegationServiceImpl implements TblTDelegationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTDelegationServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.RelDelAuthService")
    private RelDelAuthService relDelAuthService;

    @Autowired
    @Qualifier("aio_ptp.TblTDelegationDao")
    private WMGenericDao<TblTDelegation, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTDelegation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTDelegation create(TblTDelegation tblTdelegation) {
        LOGGER.debug("Creating a new TblTDelegation with information: {}", tblTdelegation);

        TblTDelegation tblTdelegationCreated = this.wmGenericDao.create(tblTdelegation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTdelegationCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTDelegation getById(Integer tbltdelegationId) {
        LOGGER.debug("Finding TblTDelegation by id: {}", tbltdelegationId);
        return this.wmGenericDao.findById(tbltdelegationId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTDelegation findById(Integer tbltdelegationId) {
        LOGGER.debug("Finding TblTDelegation by id: {}", tbltdelegationId);
        try {
            return this.wmGenericDao.findById(tbltdelegationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTDelegation found with id: {}", tbltdelegationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTDelegation> findByMultipleIds(List<Integer> tbltdelegationIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTDelegations by ids: {}", tbltdelegationIds);

        return this.wmGenericDao.findByMultipleIds(tbltdelegationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTDelegation update(TblTDelegation tblTdelegation) {
        LOGGER.debug("Updating TblTDelegation with information: {}", tblTdelegation);

        this.wmGenericDao.update(tblTdelegation);
        this.wmGenericDao.refresh(tblTdelegation);

        return tblTdelegation;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTDelegation partialUpdate(Integer tbltdelegationId, Map<String, Object>tblTdelegationPatch) {
        LOGGER.debug("Partially Updating the TblTDelegation with id: {}", tbltdelegationId);

        TblTDelegation tblTdelegation = getById(tbltdelegationId);

        try {
            ObjectReader tblTdelegationReader = this.objectMapper.reader().forType(TblTDelegation.class).withValueToUpdate(tblTdelegation);
            tblTdelegation = tblTdelegationReader.readValue(this.objectMapper.writeValueAsString(tblTdelegationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTdelegationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTdelegation = update(tblTdelegation);

        return tblTdelegation;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTDelegation delete(Integer tbltdelegationId) {
        LOGGER.debug("Deleting TblTDelegation with id: {}", tbltdelegationId);
        TblTDelegation deleted = this.wmGenericDao.findById(tbltdelegationId);
        if (deleted == null) {
            LOGGER.debug("No TblTDelegation found with id: {}", tbltdelegationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTDelegation.class.getSimpleName(), tbltdelegationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTDelegation tblTdelegation) {
        LOGGER.debug("Deleting TblTDelegation with {}", tblTdelegation);
        this.wmGenericDao.delete(tblTdelegation);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTDelegation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTDelegations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTDelegation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTDelegations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTDelegation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTDelegation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<RelDelAuth> findAssociatedRelDelAuths(Integer delId, Pageable pageable) {
        LOGGER.debug("Fetching all associated relDelAuths");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTdelegation.delId = '" + delId + "'");

        return relDelAuthService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RelDelAuthService instance
     */
    protected void setRelDelAuthService(RelDelAuthService service) {
        this.relDelAuthService = service;
    }

}