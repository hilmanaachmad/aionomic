/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMPurchaseGroup;


/**
 * ServiceImpl object for domain model class TblMPurchaseGroup.
 *
 * @see TblMPurchaseGroup
 */
@Service("aio_ptp.TblMPurchaseGroupService")
@Validated
@EntityService(entityClass = TblMPurchaseGroup.class, serviceId = "aio_ptp")
public class TblMPurchaseGroupServiceImpl implements TblMPurchaseGroupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMPurchaseGroupServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblMPurchaseGroupDao")
    private WMGenericDao<TblMPurchaseGroup, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMPurchaseGroup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMPurchaseGroup create(TblMPurchaseGroup tblMpurchaseGroup) {
        LOGGER.debug("Creating a new TblMPurchaseGroup with information: {}", tblMpurchaseGroup);

        TblMPurchaseGroup tblMpurchaseGroupCreated = this.wmGenericDao.create(tblMpurchaseGroup);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMpurchaseGroupCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMPurchaseGroup getById(Integer tblmpurchasegroupId) {
        LOGGER.debug("Finding TblMPurchaseGroup by id: {}", tblmpurchasegroupId);
        return this.wmGenericDao.findById(tblmpurchasegroupId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMPurchaseGroup findById(Integer tblmpurchasegroupId) {
        LOGGER.debug("Finding TblMPurchaseGroup by id: {}", tblmpurchasegroupId);
        try {
            return this.wmGenericDao.findById(tblmpurchasegroupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMPurchaseGroup found with id: {}", tblmpurchasegroupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMPurchaseGroup> findByMultipleIds(List<Integer> tblmpurchasegroupIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMPurchaseGroups by ids: {}", tblmpurchasegroupIds);

        return this.wmGenericDao.findByMultipleIds(tblmpurchasegroupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMPurchaseGroup update(TblMPurchaseGroup tblMpurchaseGroup) {
        LOGGER.debug("Updating TblMPurchaseGroup with information: {}", tblMpurchaseGroup);

        this.wmGenericDao.update(tblMpurchaseGroup);
        this.wmGenericDao.refresh(tblMpurchaseGroup);

        return tblMpurchaseGroup;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMPurchaseGroup partialUpdate(Integer tblmpurchasegroupId, Map<String, Object>tblMpurchaseGroupPatch) {
        LOGGER.debug("Partially Updating the TblMPurchaseGroup with id: {}", tblmpurchasegroupId);

        TblMPurchaseGroup tblMpurchaseGroup = getById(tblmpurchasegroupId);

        try {
            ObjectReader tblMpurchaseGroupReader = this.objectMapper.reader().forType(TblMPurchaseGroup.class).withValueToUpdate(tblMpurchaseGroup);
            tblMpurchaseGroup = tblMpurchaseGroupReader.readValue(this.objectMapper.writeValueAsString(tblMpurchaseGroupPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMpurchaseGroupPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMpurchaseGroup = update(tblMpurchaseGroup);

        return tblMpurchaseGroup;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMPurchaseGroup delete(Integer tblmpurchasegroupId) {
        LOGGER.debug("Deleting TblMPurchaseGroup with id: {}", tblmpurchasegroupId);
        TblMPurchaseGroup deleted = this.wmGenericDao.findById(tblmpurchasegroupId);
        if (deleted == null) {
            LOGGER.debug("No TblMPurchaseGroup found with id: {}", tblmpurchasegroupId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMPurchaseGroup.class.getSimpleName(), tblmpurchasegroupId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMPurchaseGroup tblMpurchaseGroup) {
        LOGGER.debug("Deleting TblMPurchaseGroup with {}", tblMpurchaseGroup);
        this.wmGenericDao.delete(tblMpurchaseGroup);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMPurchaseGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMPurchaseGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMPurchaseGroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMPurchaseGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMPurchaseGroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMPurchaseGroup to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}