/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VGrQuantityDelivery;
import id.co.aio.procure_to_pay.aio_ptp.service.VGrQuantityDeliveryService;


/**
 * Controller object for domain model class VGrQuantityDelivery.
 * @see VGrQuantityDelivery
 */
@RestController("aio_ptp.VGrQuantityDeliveryController")
@Api(value = "VGrQuantityDeliveryController", description = "Exposes APIs to work with VGrQuantityDelivery resource.")
@RequestMapping("/aio_ptp/VGrQuantityDelivery")
public class VGrQuantityDeliveryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrQuantityDeliveryController.class);

    @Autowired
	@Qualifier("aio_ptp.VGrQuantityDeliveryService")
	private VGrQuantityDeliveryService vGrQuantityDeliveryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VGrQuantityDelivery instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrQuantityDelivery createVGrQuantityDelivery(@RequestBody VGrQuantityDelivery vgrQuantityDelivery) {
		LOGGER.debug("Create VGrQuantityDelivery with information: {}" , vgrQuantityDelivery);

		vgrQuantityDelivery = vGrQuantityDeliveryService.create(vgrQuantityDelivery);
		LOGGER.debug("Created VGrQuantityDelivery with information: {}" , vgrQuantityDelivery);

	    return vgrQuantityDelivery;
	}

    @ApiOperation(value = "Returns the VGrQuantityDelivery instance associated with the given id.")
    @RequestMapping(value = "/{idPoHeader:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrQuantityDelivery getVGrQuantityDelivery(@PathVariable("idPoHeader") Integer idPoHeader) {
        LOGGER.debug("Getting VGrQuantityDelivery with id: {}" , idPoHeader);

        VGrQuantityDelivery foundVGrQuantityDelivery = vGrQuantityDeliveryService.getById(idPoHeader);
        LOGGER.debug("VGrQuantityDelivery details with id: {}" , foundVGrQuantityDelivery);

        return foundVGrQuantityDelivery;
    }

    @ApiOperation(value = "Updates the VGrQuantityDelivery instance associated with the given id.")
    @RequestMapping(value = "/{idPoHeader:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrQuantityDelivery editVGrQuantityDelivery(@PathVariable("idPoHeader") Integer idPoHeader, @RequestBody VGrQuantityDelivery vgrQuantityDelivery) {
        LOGGER.debug("Editing VGrQuantityDelivery with id: {}" , vgrQuantityDelivery.getIdPoHeader());

        vgrQuantityDelivery.setIdPoHeader(idPoHeader);
        vgrQuantityDelivery = vGrQuantityDeliveryService.update(vgrQuantityDelivery);
        LOGGER.debug("VGrQuantityDelivery details with id: {}" , vgrQuantityDelivery);

        return vgrQuantityDelivery;
    }
    
    @ApiOperation(value = "Partially updates the VGrQuantityDelivery instance associated with the given id.")
    @RequestMapping(value = "/{idPoHeader:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrQuantityDelivery patchVGrQuantityDelivery(@PathVariable("idPoHeader") Integer idPoHeader, @RequestBody @MapTo(VGrQuantityDelivery.class) Map<String, Object> vgrQuantityDeliveryPatch) {
        LOGGER.debug("Partially updating VGrQuantityDelivery with id: {}" , idPoHeader);

        VGrQuantityDelivery vgrQuantityDelivery = vGrQuantityDeliveryService.partialUpdate(idPoHeader, vgrQuantityDeliveryPatch);
        LOGGER.debug("VGrQuantityDelivery details after partial update: {}" , vgrQuantityDelivery);

        return vgrQuantityDelivery;
    }

    @ApiOperation(value = "Deletes the VGrQuantityDelivery instance associated with the given id.")
    @RequestMapping(value = "/{idPoHeader:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVGrQuantityDelivery(@PathVariable("idPoHeader") Integer idPoHeader) {
        LOGGER.debug("Deleting VGrQuantityDelivery with id: {}" , idPoHeader);

        VGrQuantityDelivery deletedVGrQuantityDelivery = vGrQuantityDeliveryService.delete(idPoHeader);

        return deletedVGrQuantityDelivery != null;
    }

    /**
     * @deprecated Use {@link #findVGrQuantityDeliveries(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VGrQuantityDelivery instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrQuantityDelivery> searchVGrQuantityDeliveriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VGrQuantityDeliveries list by query filter:{}", (Object) queryFilters);
        return vGrQuantityDeliveryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrQuantityDelivery instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrQuantityDelivery> findVGrQuantityDeliveries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrQuantityDeliveries list by filter:", query);
        return vGrQuantityDeliveryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrQuantityDelivery instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrQuantityDelivery> filterVGrQuantityDeliveries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrQuantityDeliveries list by filter", query);
        return vGrQuantityDeliveryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVGrQuantityDeliveries(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vGrQuantityDeliveryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVGrQuantityDeliveriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VGrQuantityDelivery.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vGrQuantityDeliveryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VGrQuantityDelivery instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVGrQuantityDeliveries( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VGrQuantityDeliveries");
		return vGrQuantityDeliveryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVGrQuantityDeliveryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vGrQuantityDeliveryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VGrQuantityDeliveryService instance
	 */
	protected void setVGrQuantityDeliveryService(VGrQuantityDeliveryService service) {
		this.vGrQuantityDeliveryService = service;
	}

}