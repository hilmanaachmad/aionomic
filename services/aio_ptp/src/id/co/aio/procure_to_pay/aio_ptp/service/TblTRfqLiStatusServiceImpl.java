/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTRfqLiStatus;
import id.co.aio.procure_to_pay.aio_ptp.TblTRfqVenQuotation;


/**
 * ServiceImpl object for domain model class TblTRfqLiStatus.
 *
 * @see TblTRfqLiStatus
 */
@Service("aio_ptp.TblTRfqLiStatusService")
@Validated
@EntityService(entityClass = TblTRfqLiStatus.class, serviceId = "aio_ptp")
public class TblTRfqLiStatusServiceImpl implements TblTRfqLiStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTRfqLiStatusServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTRfqVenQuotationService")
    private TblTRfqVenQuotationService tblTRfqVenQuotationService;

    @Autowired
    @Qualifier("aio_ptp.TblTRfqLiStatusDao")
    private WMGenericDao<TblTRfqLiStatus, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTRfqLiStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTRfqLiStatus create(TblTRfqLiStatus tblTrfqLiStatus) {
        LOGGER.debug("Creating a new TblTRfqLiStatus with information: {}", tblTrfqLiStatus);

        TblTRfqLiStatus tblTrfqLiStatusCreated = this.wmGenericDao.create(tblTrfqLiStatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTrfqLiStatusCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTRfqLiStatus getById(Integer tbltrfqlistatusId) {
        LOGGER.debug("Finding TblTRfqLiStatus by id: {}", tbltrfqlistatusId);
        return this.wmGenericDao.findById(tbltrfqlistatusId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTRfqLiStatus findById(Integer tbltrfqlistatusId) {
        LOGGER.debug("Finding TblTRfqLiStatus by id: {}", tbltrfqlistatusId);
        try {
            return this.wmGenericDao.findById(tbltrfqlistatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTRfqLiStatus found with id: {}", tbltrfqlistatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTRfqLiStatus> findByMultipleIds(List<Integer> tbltrfqlistatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTRfqLiStatuses by ids: {}", tbltrfqlistatusIds);

        return this.wmGenericDao.findByMultipleIds(tbltrfqlistatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTRfqLiStatus update(TblTRfqLiStatus tblTrfqLiStatus) {
        LOGGER.debug("Updating TblTRfqLiStatus with information: {}", tblTrfqLiStatus);

        this.wmGenericDao.update(tblTrfqLiStatus);
        this.wmGenericDao.refresh(tblTrfqLiStatus);

        return tblTrfqLiStatus;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTRfqLiStatus partialUpdate(Integer tbltrfqlistatusId, Map<String, Object>tblTrfqLiStatusPatch) {
        LOGGER.debug("Partially Updating the TblTRfqLiStatus with id: {}", tbltrfqlistatusId);

        TblTRfqLiStatus tblTrfqLiStatus = getById(tbltrfqlistatusId);

        try {
            ObjectReader tblTrfqLiStatusReader = this.objectMapper.reader().forType(TblTRfqLiStatus.class).withValueToUpdate(tblTrfqLiStatus);
            tblTrfqLiStatus = tblTrfqLiStatusReader.readValue(this.objectMapper.writeValueAsString(tblTrfqLiStatusPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTrfqLiStatusPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTrfqLiStatus = update(tblTrfqLiStatus);

        return tblTrfqLiStatus;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTRfqLiStatus delete(Integer tbltrfqlistatusId) {
        LOGGER.debug("Deleting TblTRfqLiStatus with id: {}", tbltrfqlistatusId);
        TblTRfqLiStatus deleted = this.wmGenericDao.findById(tbltrfqlistatusId);
        if (deleted == null) {
            LOGGER.debug("No TblTRfqLiStatus found with id: {}", tbltrfqlistatusId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTRfqLiStatus.class.getSimpleName(), tbltrfqlistatusId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTRfqLiStatus tblTrfqLiStatus) {
        LOGGER.debug("Deleting TblTRfqLiStatus with {}", tblTrfqLiStatus);
        this.wmGenericDao.delete(tblTrfqLiStatus);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTRfqLiStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTRfqLiStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTRfqLiStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTRfqLiStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTRfqLiStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTRfqLiStatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTRfqVenQuotation> findAssociatedTblTrfqVenQuotations(Integer rlsId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTrfqVenQuotations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTrfqLiStatus.rlsId = '" + rlsId + "'");

        return tblTRfqVenQuotationService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTRfqVenQuotationService instance
     */
    protected void setTblTRfqVenQuotationService(TblTRfqVenQuotationService service) {
        this.tblTRfqVenQuotationService = service;
    }

}