/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMIo;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetAdditional;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMIoService;


/**
 * Controller object for domain model class TblMIo.
 * @see TblMIo
 */
@RestController("aio_ptp.TblMIoController")
@Api(value = "TblMIoController", description = "Exposes APIs to work with TblMIo resource.")
@RequestMapping("/aio_ptp/TblMIo")
public class TblMIoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMIoController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMIoService")
	private TblMIoService tblMIoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMIo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMIo createTblMIo(@RequestBody TblMIo tblMio) {
		LOGGER.debug("Create TblMIo with information: {}" , tblMio);

		tblMio = tblMIoService.create(tblMio);
		LOGGER.debug("Created TblMIo with information: {}" , tblMio);

	    return tblMio;
	}

    @ApiOperation(value = "Returns the TblMIo instance associated with the given id.")
    @RequestMapping(value = "/{ioId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMIo getTblMIo(@PathVariable("ioId") Integer ioId) {
        LOGGER.debug("Getting TblMIo with id: {}" , ioId);

        TblMIo foundTblMIo = tblMIoService.getById(ioId);
        LOGGER.debug("TblMIo details with id: {}" , foundTblMIo);

        return foundTblMIo;
    }

    @ApiOperation(value = "Updates the TblMIo instance associated with the given id.")
    @RequestMapping(value = "/{ioId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMIo editTblMIo(@PathVariable("ioId") Integer ioId, @RequestBody TblMIo tblMio) {
        LOGGER.debug("Editing TblMIo with id: {}" , tblMio.getIoId());

        tblMio.setIoId(ioId);
        tblMio = tblMIoService.update(tblMio);
        LOGGER.debug("TblMIo details with id: {}" , tblMio);

        return tblMio;
    }
    
    @ApiOperation(value = "Partially updates the TblMIo instance associated with the given id.")
    @RequestMapping(value = "/{ioId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMIo patchTblMIo(@PathVariable("ioId") Integer ioId, @RequestBody @MapTo(TblMIo.class) Map<String, Object> tblMioPatch) {
        LOGGER.debug("Partially updating TblMIo with id: {}" , ioId);

        TblMIo tblMio = tblMIoService.partialUpdate(ioId, tblMioPatch);
        LOGGER.debug("TblMIo details after partial update: {}" , tblMio);

        return tblMio;
    }

    @ApiOperation(value = "Deletes the TblMIo instance associated with the given id.")
    @RequestMapping(value = "/{ioId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMIo(@PathVariable("ioId") Integer ioId) {
        LOGGER.debug("Deleting TblMIo with id: {}" , ioId);

        TblMIo deletedTblMIo = tblMIoService.delete(ioId);

        return deletedTblMIo != null;
    }

    /**
     * @deprecated Use {@link #findTblMIos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMIo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMIo> searchTblMIosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMIos list by query filter:{}", (Object) queryFilters);
        return tblMIoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMIo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMIo> findTblMIos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMIos list by filter:", query);
        return tblMIoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMIo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMIo> filterTblMIos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMIos list by filter", query);
        return tblMIoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMIos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMIoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMIosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMIo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMIoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMIo instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMIos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMIos");
		return tblMIoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMIoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMIoService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{ioId:.+}/tblTbudgetAdditionals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTbudgetAdditionals instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetAdditional> findAssociatedTblTbudgetAdditionals(@PathVariable("ioId") Integer ioId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTbudgetAdditionals");
        return tblMIoService.findAssociatedTblTbudgetAdditionals(ioId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMIoService instance
	 */
	protected void setTblMIoService(TblMIoService service) {
		this.tblMIoService = service;
	}

}