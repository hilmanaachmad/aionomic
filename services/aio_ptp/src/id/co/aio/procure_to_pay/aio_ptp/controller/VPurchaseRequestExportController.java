/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseRequestExport;
import id.co.aio.procure_to_pay.aio_ptp.service.VPurchaseRequestExportService;


/**
 * Controller object for domain model class VPurchaseRequestExport.
 * @see VPurchaseRequestExport
 */
@RestController("aio_ptp.VPurchaseRequestExportController")
@Api(value = "VPurchaseRequestExportController", description = "Exposes APIs to work with VPurchaseRequestExport resource.")
@RequestMapping("/aio_ptp/VPurchaseRequestExport")
public class VPurchaseRequestExportController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseRequestExportController.class);

    @Autowired
	@Qualifier("aio_ptp.VPurchaseRequestExportService")
	private VPurchaseRequestExportService vPurchaseRequestExportService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPurchaseRequestExport instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestExport createVPurchaseRequestExport(@RequestBody VPurchaseRequestExport vpurchaseRequestExport) {
		LOGGER.debug("Create VPurchaseRequestExport with information: {}" , vpurchaseRequestExport);

		vpurchaseRequestExport = vPurchaseRequestExportService.create(vpurchaseRequestExport);
		LOGGER.debug("Created VPurchaseRequestExport with information: {}" , vpurchaseRequestExport);

	    return vpurchaseRequestExport;
	}

    @ApiOperation(value = "Returns the VPurchaseRequestExport instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestExport getVPurchaseRequestExport(@PathVariable("prId") Integer prId) {
        LOGGER.debug("Getting VPurchaseRequestExport with id: {}" , prId);

        VPurchaseRequestExport foundVPurchaseRequestExport = vPurchaseRequestExportService.getById(prId);
        LOGGER.debug("VPurchaseRequestExport details with id: {}" , foundVPurchaseRequestExport);

        return foundVPurchaseRequestExport;
    }

    @ApiOperation(value = "Updates the VPurchaseRequestExport instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestExport editVPurchaseRequestExport(@PathVariable("prId") Integer prId, @RequestBody VPurchaseRequestExport vpurchaseRequestExport) {
        LOGGER.debug("Editing VPurchaseRequestExport with id: {}" , vpurchaseRequestExport.getPrId());

        vpurchaseRequestExport.setPrId(prId);
        vpurchaseRequestExport = vPurchaseRequestExportService.update(vpurchaseRequestExport);
        LOGGER.debug("VPurchaseRequestExport details with id: {}" , vpurchaseRequestExport);

        return vpurchaseRequestExport;
    }
    
    @ApiOperation(value = "Partially updates the VPurchaseRequestExport instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseRequestExport patchVPurchaseRequestExport(@PathVariable("prId") Integer prId, @RequestBody @MapTo(VPurchaseRequestExport.class) Map<String, Object> vpurchaseRequestExportPatch) {
        LOGGER.debug("Partially updating VPurchaseRequestExport with id: {}" , prId);

        VPurchaseRequestExport vpurchaseRequestExport = vPurchaseRequestExportService.partialUpdate(prId, vpurchaseRequestExportPatch);
        LOGGER.debug("VPurchaseRequestExport details after partial update: {}" , vpurchaseRequestExport);

        return vpurchaseRequestExport;
    }

    @ApiOperation(value = "Deletes the VPurchaseRequestExport instance associated with the given id.")
    @RequestMapping(value = "/{prId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPurchaseRequestExport(@PathVariable("prId") Integer prId) {
        LOGGER.debug("Deleting VPurchaseRequestExport with id: {}" , prId);

        VPurchaseRequestExport deletedVPurchaseRequestExport = vPurchaseRequestExportService.delete(prId);

        return deletedVPurchaseRequestExport != null;
    }

    /**
     * @deprecated Use {@link #findVPurchaseRequestExports(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPurchaseRequestExport instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseRequestExport> searchVPurchaseRequestExportsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPurchaseRequestExports list by query filter:{}", (Object) queryFilters);
        return vPurchaseRequestExportService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseRequestExport instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseRequestExport> findVPurchaseRequestExports(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseRequestExports list by filter:", query);
        return vPurchaseRequestExportService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseRequestExport instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseRequestExport> filterVPurchaseRequestExports(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseRequestExports list by filter", query);
        return vPurchaseRequestExportService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPurchaseRequestExports(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPurchaseRequestExportService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPurchaseRequestExportsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPurchaseRequestExport.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPurchaseRequestExportService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPurchaseRequestExport instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPurchaseRequestExports( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPurchaseRequestExports");
		return vPurchaseRequestExportService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPurchaseRequestExportAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPurchaseRequestExportService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPurchaseRequestExportService instance
	 */
	protected void setVPurchaseRequestExportService(VPurchaseRequestExportService service) {
		this.vPurchaseRequestExportService = service;
	}

}