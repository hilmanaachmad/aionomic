/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoTracking;


/**
 * ServiceImpl object for domain model class VPoTracking.
 *
 * @see VPoTracking
 */
@Service("aio_ptp.VPoTrackingService")
@Validated
@EntityService(entityClass = VPoTracking.class, serviceId = "aio_ptp")
public class VPoTrackingServiceImpl implements VPoTrackingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoTrackingServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPoTrackingDao")
    private WMGenericDao<VPoTracking, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPoTracking, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoTracking create(VPoTracking vpoTracking) {
        LOGGER.debug("Creating a new VPoTracking with information: {}", vpoTracking);

        VPoTracking vpoTrackingCreated = this.wmGenericDao.create(vpoTracking);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpoTrackingCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoTracking getById(Integer vpotrackingId) {
        LOGGER.debug("Finding VPoTracking by id: {}", vpotrackingId);
        return this.wmGenericDao.findById(vpotrackingId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPoTracking findById(Integer vpotrackingId) {
        LOGGER.debug("Finding VPoTracking by id: {}", vpotrackingId);
        try {
            return this.wmGenericDao.findById(vpotrackingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPoTracking found with id: {}", vpotrackingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPoTracking> findByMultipleIds(List<Integer> vpotrackingIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPoTrackings by ids: {}", vpotrackingIds);

        return this.wmGenericDao.findByMultipleIds(vpotrackingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPoTracking update(VPoTracking vpoTracking) {
        LOGGER.debug("Updating VPoTracking with information: {}", vpoTracking);

        this.wmGenericDao.update(vpoTracking);
        this.wmGenericDao.refresh(vpoTracking);

        return vpoTracking;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoTracking partialUpdate(Integer vpotrackingId, Map<String, Object>vpoTrackingPatch) {
        LOGGER.debug("Partially Updating the VPoTracking with id: {}", vpotrackingId);

        VPoTracking vpoTracking = getById(vpotrackingId);

        try {
            ObjectReader vpoTrackingReader = this.objectMapper.reader().forType(VPoTracking.class).withValueToUpdate(vpoTracking);
            vpoTracking = vpoTrackingReader.readValue(this.objectMapper.writeValueAsString(vpoTrackingPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpoTrackingPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpoTracking = update(vpoTracking);

        return vpoTracking;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPoTracking delete(Integer vpotrackingId) {
        LOGGER.debug("Deleting VPoTracking with id: {}", vpotrackingId);
        VPoTracking deleted = this.wmGenericDao.findById(vpotrackingId);
        if (deleted == null) {
            LOGGER.debug("No VPoTracking found with id: {}", vpotrackingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPoTracking.class.getSimpleName(), vpotrackingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPoTracking vpoTracking) {
        LOGGER.debug("Deleting VPoTracking with {}", vpoTracking);
        this.wmGenericDao.delete(vpoTracking);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoTracking> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPoTrackings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPoTracking> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPoTrackings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoTracking to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPoTracking to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}