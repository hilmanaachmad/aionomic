/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import id.co.aio.procure_to_pay.aio_ptp.service.Aio_ptpQueryExecutorService;
import id.co.aio.procure_to_pay.aio_ptp.models.query.*;

@RestController(value = "Aio_ptp.QueryExecutionController")
@RequestMapping("/aio_ptp/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Aio_ptpQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/generateRFQRef", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "generate RFQ ref")
    public IntegerWrapper executeGenerateRFQRef(@Valid @RequestBody GenerateRfqrefRequest generateRfqrefRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: generateRFQRef");
        Integer _result = queryService.executeGenerateRFQRef(generateRfqrefRequest);
        LOGGER.debug("got the result for named query: generateRFQRef, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getBODbyDepartementId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getBODbyDepartementId")
    public Page<GetBodbyDepartementIdResponse> executeGetBODbyDepartementId(@RequestParam(value = "departementId") List<Integer> departementId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getBODbyDepartementId");
        Page<GetBodbyDepartementIdResponse> _result = queryService.executeGetBODbyDepartementId(departementId, pageable);
        LOGGER.debug("got the result for named query: getBODbyDepartementId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getBODbyDepartementId")
    @RequestMapping(value = "/queries/getBODbyDepartementId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetBODbyDepartementId(@RequestParam(value = "departementId") List<Integer> departementId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getBODbyDepartementId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getBODbyDepartementId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetBODbyDepartementId(departementId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/sendCheckerNotification", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "send checker notification")
    public IntegerWrapper executeSendCheckerNotification(@Valid @RequestBody SendCheckerNotificationRequest sendCheckerNotificationRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: sendCheckerNotification");
        Integer _result = queryService.executeSendCheckerNotification(sendCheckerNotificationRequest);
        LOGGER.debug("got the result for named query: sendCheckerNotification, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/update_userDepStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update_userDepStatus")
    public IntegerWrapper executeUpdate_userDepStatus(@Valid @RequestBody UpdateUserDepStatusRequest updateUserDepStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: update_userDepStatus");
        Integer _result = queryService.executeUpdate_userDepStatus(updateUserDepStatusRequest);
        LOGGER.debug("got the result for named query: update_userDepStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getBudgetUploadList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get budget upload list")
    public Page<GetBudgetUploadListResponse> executeGetBudgetUploadList(@RequestParam(value = "year", required = false) String year, @RequestParam(value = "company", required = false) String company, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getBudgetUploadList");
        Page<GetBudgetUploadListResponse> _result = queryService.executeGetBudgetUploadList(year, company, pageable);
        LOGGER.debug("got the result for named query: getBudgetUploadList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getBudgetUploadList")
    @RequestMapping(value = "/queries/getBudgetUploadList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetBudgetUploadList(@RequestParam(value = "year", required = false) String year, @RequestParam(value = "company", required = false) String company, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getBudgetUploadList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getBudgetUploadList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetBudgetUploadList(year, company,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/setUserProfilePic", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "set user profile picture")
    public IntegerWrapper executeSetUserProfilePic(@Valid @RequestBody SetUserProfilePicRequest setUserProfilePicRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: setUserProfilePic");
        Integer _result = queryService.executeSetUserProfilePic(setUserProfilePicRequest);
        LOGGER.debug("got the result for named query: setUserProfilePic, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/q_get_BudgetDetail2", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get budget detail 2 by budget header")
    public Page<QGetBudgetDetail2Response> executeQ_get_BudgetDetail2(@RequestParam(value = "bh_id") String bhId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_get_BudgetDetail2");
        Page<QGetBudgetDetail2Response> _result = queryService.executeQ_get_BudgetDetail2(bhId, pageable);
        LOGGER.debug("got the result for named query: q_get_BudgetDetail2, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_get_BudgetDetail2")
    @RequestMapping(value = "/queries/q_get_BudgetDetail2/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_get_BudgetDetail2(@RequestParam(value = "bh_id") String bhId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_get_BudgetDetail2");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_get_BudgetDetail2";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_get_BudgetDetail2(bhId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getDataDetailDO", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get detail Do")
    public Page<GetDataDetailDoResponse> executeGetDataDetailDO(@RequestParam(value = "id_po") String idPo, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDataDetailDO");
        Page<GetDataDetailDoResponse> _result = queryService.executeGetDataDetailDO(idPo, pageable);
        LOGGER.debug("got the result for named query: getDataDetailDO, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDataDetailDO")
    @RequestMapping(value = "/queries/getDataDetailDO/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetDataDetailDO(@RequestParam(value = "id_po") String idPo, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDataDetailDO");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDataDetailDO";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDataDetailDO(idPo,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdateETAPOLineItem", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update ETA")
    public IntegerWrapper executeQUpdateETAPOLineItem(@Valid @RequestBody QupdateEtapolineItemRequest qupdateEtapolineItemRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateETAPOLineItem");
        Integer _result = queryService.executeQUpdateETAPOLineItem(qupdateEtapolineItemRequest);
        LOGGER.debug("got the result for named query: qUpdateETAPOLineItem, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/deleteTaskListByParamId", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteTaskListByParamId")
    public IntegerWrapper executeDeleteTaskListByParamId(@Valid @RequestBody DeleteTaskListByParamIdRequest deleteTaskListByParamIdRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteTaskListByParamId");
        Integer _result = queryService.executeDeleteTaskListByParamId(deleteTaskListByParamIdRequest);
        LOGGER.debug("got the result for named query: deleteTaskListByParamId, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetMapRoleAll", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qGetMapRoleAll")
    public Page<QgetMapRoleAllResponse> executeQGetMapRoleAll(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetMapRoleAll");
        Page<QgetMapRoleAllResponse> _result = queryService.executeQGetMapRoleAll(pageable);
        LOGGER.debug("got the result for named query: qGetMapRoleAll, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetMapRoleAll")
    @RequestMapping(value = "/queries/qGetMapRoleAll/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetMapRoleAll(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetMapRoleAll");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetMapRoleAll";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetMapRoleAll( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/vendorPONotes", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update notes")
    public IntegerWrapper executeVendorPONotes(@Valid @RequestBody VendorPonotesRequest vendorPonotesRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: vendorPONotes");
        Integer _result = queryService.executeVendorPONotes(vendorPonotesRequest);
        LOGGER.debug("got the result for named query: vendorPONotes, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/deleteBudgetUpload", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete budget upload")
    public IntegerWrapper executeDeleteBudgetUpload(@Valid @RequestBody DeleteBudgetUploadRequest deleteBudgetUploadRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteBudgetUpload");
        Integer _result = queryService.executeDeleteBudgetUpload(deleteBudgetUploadRequest);
        LOGGER.debug("got the result for named query: deleteBudgetUpload, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/changeRFQVendorStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changeRFQVendorStatus")
    public IntegerWrapper executeChangeRFQVendorStatus(@Valid @RequestBody ChangeRfqvendorStatusRequest changeRfqvendorStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeRFQVendorStatus");
        Integer _result = queryService.executeChangeRFQVendorStatus(changeRfqvendorStatusRequest);
        LOGGER.debug("got the result for named query: changeRFQVendorStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getUserRole", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get user role")
    public GetUserRoleResponse executeGetUserRole(@RequestParam(value = "username") String username, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserRole");
        GetUserRoleResponse _result = queryService.executeGetUserRole(username);
        LOGGER.debug("got the result for named query: getUserRole, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/Q_MasterDepartment", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "det department")
    public Page<QMasterDepartmentResponse> executeQ_MasterDepartment(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Q_MasterDepartment");
        Page<QMasterDepartmentResponse> _result = queryService.executeQ_MasterDepartment(pageable);
        LOGGER.debug("got the result for named query: Q_MasterDepartment, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Q_MasterDepartment")
    @RequestMapping(value = "/queries/Q_MasterDepartment/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_MasterDepartment(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Q_MasterDepartment");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Q_MasterDepartment";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_MasterDepartment( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteAttionalAttachment", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteAttionalAttachment")
    public IntegerWrapper executeDeleteAttionalAttachment(@RequestParam(value = "baId") Integer baId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteAttionalAttachment");
        Integer _result = queryService.executeDeleteAttionalAttachment(baId);
        LOGGER.debug("got the result for named query: deleteAttionalAttachment, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/vMaterrialGroupPurchasing", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "vMaterrialGroupPurchasing")
    public Page<VmaterrialGroupPurchasingResponse> executeVMaterrialGroupPurchasing(@RequestParam(value = "userId") String userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: vMaterrialGroupPurchasing");
        Page<VmaterrialGroupPurchasingResponse> _result = queryService.executeVMaterrialGroupPurchasing(userId, pageable);
        LOGGER.debug("got the result for named query: vMaterrialGroupPurchasing, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query vMaterrialGroupPurchasing")
    @RequestMapping(value = "/queries/vMaterrialGroupPurchasing/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVMaterrialGroupPurchasing(@RequestParam(value = "userId") String userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: vMaterrialGroupPurchasing");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "vMaterrialGroupPurchasing";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportVMaterrialGroupPurchasing(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getUnseenNotification", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get unseen notification")
    public Page<GetUnseenNotificationResponse> executeGetUnseenNotification(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUnseenNotification");
        Page<GetUnseenNotificationResponse> _result = queryService.executeGetUnseenNotification(pageable);
        LOGGER.debug("got the result for named query: getUnseenNotification, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getUnseenNotification")
    @RequestMapping(value = "/queries/getUnseenNotification/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetUnseenNotification(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUnseenNotification");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getUnseenNotification";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetUnseenNotification( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRFGVendorTracking", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRFGVendorTracking")
    public Page<GetRfgvendorTrackingResponse> executeGetRFGVendorTracking(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRFGVendorTracking");
        Page<GetRfgvendorTrackingResponse> _result = queryService.executeGetRFGVendorTracking(pageable);
        LOGGER.debug("got the result for named query: getRFGVendorTracking, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRFGVendorTracking")
    @RequestMapping(value = "/queries/getRFGVendorTracking/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetRFGVendorTracking(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRFGVendorTracking");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRFGVendorTracking";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRFGVendorTracking( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRoleUserMapList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "mapping user role")
    public Page<GetRoleUserMapListResponse> executeGetRoleUserMapList(@RequestParam(value = "searchRoleTitle", required = false) String searchRoleTitle, @RequestParam(value = "searchAssignee", required = false) String searchAssignee, @RequestParam(value = "searchStatus", required = false) String searchStatus, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRoleUserMapList");
        Page<GetRoleUserMapListResponse> _result = queryService.executeGetRoleUserMapList(searchRoleTitle, searchAssignee, searchStatus, pageable);
        LOGGER.debug("got the result for named query: getRoleUserMapList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRoleUserMapList")
    @RequestMapping(value = "/queries/getRoleUserMapList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetRoleUserMapList(@RequestParam(value = "searchRoleTitle", required = false) String searchRoleTitle, @RequestParam(value = "searchAssignee", required = false) String searchAssignee, @RequestParam(value = "searchStatus", required = false) String searchStatus, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRoleUserMapList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRoleUserMapList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRoleUserMapList(searchRoleTitle, searchAssignee, searchStatus,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getMappingToUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getMappingToUser")
    public Page<GetMappingToUserResponse> executeGetMappingToUser(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getMappingToUser");
        Page<GetMappingToUserResponse> _result = queryService.executeGetMappingToUser(pageable);
        LOGGER.debug("got the result for named query: getMappingToUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getMappingToUser")
    @RequestMapping(value = "/queries/getMappingToUser/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetMappingToUser(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getMappingToUser");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getMappingToUser";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetMappingToUser( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/q_AccTypeBudgetHMapDepUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "account type berdasarkan budgetheader dept")
    public Page<QAccTypeBudgetHmapDepUserResponse> executeQ_AccTypeBudgetHMapDepUser(@RequestParam(value = "emp") String emp, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_AccTypeBudgetHMapDepUser");
        Page<QAccTypeBudgetHmapDepUserResponse> _result = queryService.executeQ_AccTypeBudgetHMapDepUser(emp, pageable);
        LOGGER.debug("got the result for named query: q_AccTypeBudgetHMapDepUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_AccTypeBudgetHMapDepUser")
    @RequestMapping(value = "/queries/q_AccTypeBudgetHMapDepUser/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_AccTypeBudgetHMapDepUser(@RequestParam(value = "emp") String emp, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_AccTypeBudgetHMapDepUser");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_AccTypeBudgetHMapDepUser";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_AccTypeBudgetHMapDepUser(emp,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/updatePurchaseRequest", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updatePurchaseRequest")
    public IntegerWrapper executeUpdatePurchaseRequest(@Valid @RequestBody UpdatePurchaseRequestRequest updatePurchaseRequestRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updatePurchaseRequest");
        Integer _result = queryService.executeUpdatePurchaseRequest(updatePurchaseRequestRequest);
        LOGGER.debug("got the result for named query: updatePurchaseRequest, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/QSetStatusGRLineItemByPRLineHeader", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QSetStatusGRLineItemByPRLineHeader")
    public IntegerWrapper executeQSetStatusGRLineItemByPRLineHeader(@Valid @RequestBody QsetStatusGrlineItemByPrlineHeaderRequest qsetStatusGrlineItemByPrlineHeaderRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QSetStatusGRLineItemByPRLineHeader");
        Integer _result = queryService.executeQSetStatusGRLineItemByPRLineHeader(qsetStatusGrlineItemByPrlineHeaderRequest);
        LOGGER.debug("got the result for named query: QSetStatusGRLineItemByPRLineHeader, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/update_userMapStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update_userMap")
    public IntegerWrapper executeUpdate_userMapStatus(@Valid @RequestBody UpdateUserMapStatusRequest updateUserMapStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: update_userMapStatus");
        Integer _result = queryService.executeUpdate_userMapStatus(updateUserMapStatusRequest);
        LOGGER.debug("got the result for named query: update_userMapStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/OrganizationMap", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "maping for dep, cost, div")
    public Page<OrganizationMapResponse> executeOrganizationMap(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: OrganizationMap");
        Page<OrganizationMapResponse> _result = queryService.executeOrganizationMap(pageable);
        LOGGER.debug("got the result for named query: OrganizationMap, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query OrganizationMap")
    @RequestMapping(value = "/queries/OrganizationMap/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOrganizationMap(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: OrganizationMap");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "OrganizationMap";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportOrganizationMap( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertBudgetDetail", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "for insert into budget detail")
    public IntegerWrapper executeQInsertBudgetDetail(@Valid @RequestBody QinsertBudgetDetailRequest qinsertBudgetDetailRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertBudgetDetail");
        Integer _result = queryService.executeQInsertBudgetDetail(qinsertBudgetDetailRequest);
        LOGGER.debug("got the result for named query: qInsertBudgetDetail, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getRFQParamByDepartment", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list rfq parameter using user department")
    public Page<GetRfqparamByDepartmentResponse> executeGetRFQParamByDepartment(@RequestParam(value = "userDepartment", required = false) String userDepartment, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRFQParamByDepartment");
        Page<GetRfqparamByDepartmentResponse> _result = queryService.executeGetRFQParamByDepartment(userDepartment, pageable);
        LOGGER.debug("got the result for named query: getRFQParamByDepartment, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRFQParamByDepartment")
    @RequestMapping(value = "/queries/getRFQParamByDepartment/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetRFQParamByDepartment(@RequestParam(value = "userDepartment", required = false) String userDepartment, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRFQParamByDepartment");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRFQParamByDepartment";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRFQParamByDepartment(userDepartment,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/updateStatusPO", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updateStatusPO")
    public IntegerWrapper executeUpdateStatusPO(@Valid @RequestBody UpdateStatusPoRequest updateStatusPoRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateStatusPO");
        Integer _result = queryService.executeUpdateStatusPO(updateStatusPoRequest);
        LOGGER.debug("got the result for named query: updateStatusPO, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/changeRGQ", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changeRGQ")
    public IntegerWrapper executeChangeRGQ(@Valid @RequestBody ChangeRgqRequest changeRgqRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeRGQ");
        Integer _result = queryService.executeChangeRGQ(changeRgqRequest);
        LOGGER.debug("got the result for named query: changeRGQ, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/changeTaskListUserId", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changeTaskListUserId")
    public IntegerWrapper executeChangeTaskListUserId(@Valid @RequestBody ChangeTaskListUserIdRequest changeTaskListUserIdRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeTaskListUserId");
        Integer _result = queryService.executeChangeTaskListUserId(changeTaskListUserIdRequest);
        LOGGER.debug("got the result for named query: changeTaskListUserId, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/reminderTasklistQuery", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "endpoin for reminder tasklist to inbox")
    public IntegerWrapper executeReminderTasklistQuery(@Valid @RequestBody ReminderTasklistQueryRequest reminderTasklistQueryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: reminderTasklistQuery");
        Integer _result = queryService.executeReminderTasklistQuery(reminderTasklistQueryRequest);
        LOGGER.debug("got the result for named query: reminderTasklistQuery, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/changeRFQVendorStatusWithoutCreated", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changeRFQVendorStatusWithoutCreated")
    public IntegerWrapper executeChangeRFQVendorStatusWithoutCreated(@Valid @RequestBody ChangeRfqvendorStatusWithoutCreatedRequest changeRfqvendorStatusWithoutCreatedRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeRFQVendorStatusWithoutCreated");
        Integer _result = queryService.executeChangeRFQVendorStatusWithoutCreated(changeRfqvendorStatusWithoutCreatedRequest);
        LOGGER.debug("got the result for named query: changeRFQVendorStatusWithoutCreated, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getDelegatedRoles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get user delegated roles")
    public Page<GetDelegatedRolesResponse> executeGetDelegatedRoles(@RequestParam(value = "userid") String userid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDelegatedRoles");
        Page<GetDelegatedRolesResponse> _result = queryService.executeGetDelegatedRoles(userid, pageable);
        LOGGER.debug("got the result for named query: getDelegatedRoles, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDelegatedRoles")
    @RequestMapping(value = "/queries/getDelegatedRoles/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetDelegatedRoles(@RequestParam(value = "userid") String userid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDelegatedRoles");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDelegatedRoles";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDelegatedRoles(userid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/q_BrandMappingToBudgetDepUsrMap", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Brand yang ada di transaksi dan departement yang d assignt ke user login")
    public Page<QBrandMappingToBudgetDepUsrMapResponse> executeQ_BrandMappingToBudgetDepUsrMap(@RequestParam(value = "emp") String emp, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_BrandMappingToBudgetDepUsrMap");
        Page<QBrandMappingToBudgetDepUsrMapResponse> _result = queryService.executeQ_BrandMappingToBudgetDepUsrMap(emp, pageable);
        LOGGER.debug("got the result for named query: q_BrandMappingToBudgetDepUsrMap, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_BrandMappingToBudgetDepUsrMap")
    @RequestMapping(value = "/queries/q_BrandMappingToBudgetDepUsrMap/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_BrandMappingToBudgetDepUsrMap(@RequestParam(value = "emp") String emp, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_BrandMappingToBudgetDepUsrMap");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_BrandMappingToBudgetDepUsrMap";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_BrandMappingToBudgetDepUsrMap(emp,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getPurchaseRequest", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getPurchaseRequest")
    public Page<GetPurchaseRequestResponse> executeGetPurchaseRequest(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPurchaseRequest");
        Page<GetPurchaseRequestResponse> _result = queryService.executeGetPurchaseRequest(pageable);
        LOGGER.debug("got the result for named query: getPurchaseRequest, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPurchaseRequest")
    @RequestMapping(value = "/queries/getPurchaseRequest/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetPurchaseRequest(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPurchaseRequest");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPurchaseRequest";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPurchaseRequest( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getDataPODetail", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get data PO Detail")
    public Page<GetDataPodetailResponse> executeGetDataPODetail(@RequestParam(value = "id_po") String idPo, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDataPODetail");
        Page<GetDataPodetailResponse> _result = queryService.executeGetDataPODetail(idPo, pageable);
        LOGGER.debug("got the result for named query: getDataPODetail, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDataPODetail")
    @RequestMapping(value = "/queries/getDataPODetail/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetDataPODetail(@RequestParam(value = "id_po") String idPo, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDataPODetail");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDataPODetail";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDataPODetail(idPo,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getMappingToUser2", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getMappingToUser2")
    public Page<GetMappingToUser2Response> executeGetMappingToUser2(@RequestParam(value = "company", required = false) String company, @RequestParam(value = "departrment", required = false) String departrment, @RequestParam(value = "assignee", required = false) String assignee, @RequestParam(value = "status", required = false) String status, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getMappingToUser2");
        Page<GetMappingToUser2Response> _result = queryService.executeGetMappingToUser2(company, departrment, assignee, status, pageable);
        LOGGER.debug("got the result for named query: getMappingToUser2, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getMappingToUser2")
    @RequestMapping(value = "/queries/getMappingToUser2/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetMappingToUser2(@RequestParam(value = "company", required = false) String company, @RequestParam(value = "departrment", required = false) String departrment, @RequestParam(value = "assignee", required = false) String assignee, @RequestParam(value = "status", required = false) String status, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getMappingToUser2");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getMappingToUser2";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetMappingToUser2(company, departrment, assignee, status,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/prChangeStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "prChangeStatus")
    public IntegerWrapper executePrChangeStatus(@Valid @RequestBody PrChangeStatusRequest prChangeStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: prChangeStatus");
        Integer _result = queryService.executePrChangeStatus(prChangeStatusRequest);
        LOGGER.debug("got the result for named query: prChangeStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getPOLineitem", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get po line item")
    public Page<GetPolineitemResponse> executeGetPOLineitem(@RequestParam(value = "id_po") String idPo, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPOLineitem");
        Page<GetPolineitemResponse> _result = queryService.executeGetPOLineitem(idPo, pageable);
        LOGGER.debug("got the result for named query: getPOLineitem, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPOLineitem")
    @RequestMapping(value = "/queries/getPOLineitem/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetPOLineitem(@RequestParam(value = "id_po") String idPo, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPOLineitem");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPOLineitem";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPOLineitem(idPo,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qDataPOHeader", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "header PO")
    public Page<QdataPoheaderResponse> executeQDataPOHeader(@RequestParam(value = "id_po") Integer idPo, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qDataPOHeader");
        Page<QdataPoheaderResponse> _result = queryService.executeQDataPOHeader(idPo, pageable);
        LOGGER.debug("got the result for named query: qDataPOHeader, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qDataPOHeader")
    @RequestMapping(value = "/queries/qDataPOHeader/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQDataPOHeader(@RequestParam(value = "id_po") Integer idPo, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qDataPOHeader");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qDataPOHeader";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQDataPOHeader(idPo,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/get_DeptDivCostCenterAll", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all dept div cost center")
    public Page<GetDeptDivCostCenterAllResponse> executeGet_DeptDivCostCenterAll(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_DeptDivCostCenterAll");
        Page<GetDeptDivCostCenterAllResponse> _result = queryService.executeGet_DeptDivCostCenterAll(pageable);
        LOGGER.debug("got the result for named query: get_DeptDivCostCenterAll, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query get_DeptDivCostCenterAll")
    @RequestMapping(value = "/queries/get_DeptDivCostCenterAll/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGet_DeptDivCostCenterAll(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: get_DeptDivCostCenterAll");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "get_DeptDivCostCenterAll";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGet_DeptDivCostCenterAll( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/changeRFQSetNull", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changeRFQSetNull")
    public IntegerWrapper executeChangeRFQSetNull(@Valid @RequestBody ChangeRfqsetNullRequest changeRfqsetNullRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeRFQSetNull");
        Integer _result = queryService.executeChangeRFQSetNull(changeRfqsetNullRequest);
        LOGGER.debug("got the result for named query: changeRFQSetNull, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/q_company", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "for admin budget")
    public Page<QCompanyResponse> executeQ_company(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_company");
        Page<QCompanyResponse> _result = queryService.executeQ_company(pageable);
        LOGGER.debug("got the result for named query: q_company, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_company")
    @RequestMapping(value = "/queries/q_company/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_company(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_company");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_company";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_company( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qBDReversalLineItem", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "reverse budget details record on line item")
    public IntegerWrapper executeQBDReversalLineItem(@Valid @RequestBody QbdreversalLineItemRequest qbdreversalLineItemRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qBDReversalLineItem");
        Integer _result = queryService.executeQBDReversalLineItem(qbdreversalLineItemRequest);
        LOGGER.debug("got the result for named query: qBDReversalLineItem, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/countUnseenInbox", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "count unseen inbox")
    public CountUnseenInboxResponse executeCountUnseenInbox(HttpServletRequest _request) {
        LOGGER.debug("Executing named query: countUnseenInbox");
        CountUnseenInboxResponse _result = queryService.executeCountUnseenInbox();
        LOGGER.debug("got the result for named query: countUnseenInbox, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/getCompanyRFQ", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Company in RFQ Vendor")
    public GetCompanyRfqResponse executeGetCompanyRFQ(@RequestParam(value = "rfqvid", required = false) String rfqvid, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCompanyRFQ");
        GetCompanyRfqResponse _result = queryService.executeGetCompanyRFQ(rfqvid);
        LOGGER.debug("got the result for named query: getCompanyRFQ, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/getDelegationHistory", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list delegation with relation auth")
    public Page<GetDelegationHistoryResponse> executeGetDelegationHistory(@RequestParam(value = "roleCode", required = false) String roleCode, @RequestParam(value = "fromEmployee", required = false) String fromEmployee, @RequestParam(value = "toEmployee", required = false) String toEmployee, @RequestParam(value = "reason", required = false) String reason, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDelegationHistory");
        Page<GetDelegationHistoryResponse> _result = queryService.executeGetDelegationHistory(roleCode, fromEmployee, toEmployee, reason, pageable);
        LOGGER.debug("got the result for named query: getDelegationHistory, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDelegationHistory")
    @RequestMapping(value = "/queries/getDelegationHistory/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetDelegationHistory(@RequestParam(value = "roleCode", required = false) String roleCode, @RequestParam(value = "fromEmployee", required = false) String fromEmployee, @RequestParam(value = "toEmployee", required = false) String toEmployee, @RequestParam(value = "reason", required = false) String reason, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDelegationHistory");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDelegationHistory";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDelegationHistory(roleCode, fromEmployee, toEmployee, reason,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteBudgetUploadAdjustment", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteBudgetUploadAdjustment")
    public IntegerWrapper executeDeleteBudgetUploadAdjustment(@Valid @RequestBody DeleteBudgetUploadAdjustmentRequest deleteBudgetUploadAdjustmentRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteBudgetUploadAdjustment");
        Integer _result = queryService.executeDeleteBudgetUploadAdjustment(deleteBudgetUploadAdjustmentRequest);
        LOGGER.debug("got the result for named query: deleteBudgetUploadAdjustment, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/prLineItemChangeCaoAsset", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "prLineItemChangeCaoAsset")
    public IntegerWrapper executePrLineItemChangeCaoAsset(@Valid @RequestBody PrLineItemChangeCaoAssetRequest prLineItemChangeCaoAssetRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: prLineItemChangeCaoAsset");
        Integer _result = queryService.executePrLineItemChangeCaoAsset(prLineItemChangeCaoAssetRequest);
        LOGGER.debug("got the result for named query: prLineItemChangeCaoAsset, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/changeStatusAdditional", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changeStatusAdditional")
    public IntegerWrapper executeChangeStatusAdditional(@Valid @RequestBody ChangeStatusAdditionalRequest changeStatusAdditionalRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeStatusAdditional");
        Integer _result = queryService.executeChangeStatusAdditional(changeStatusAdditionalRequest);
        LOGGER.debug("got the result for named query: changeStatusAdditional, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/updatePurchaseRequestLineItem", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updatePurchaseRequestLineItem")
    public IntegerWrapper executeUpdatePurchaseRequestLineItem(@Valid @RequestBody UpdatePurchaseRequestLineItemRequest updatePurchaseRequestLineItemRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updatePurchaseRequestLineItem");
        Integer _result = queryService.executeUpdatePurchaseRequestLineItem(updatePurchaseRequestLineItemRequest);
        LOGGER.debug("got the result for named query: updatePurchaseRequestLineItem, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/deletePODoc", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deletePODoc")
    public IntegerWrapper executeDeletePODoc(@RequestParam(value = "idPoHeader") String idPoHeader, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deletePODoc");
        Integer _result = queryService.executeDeletePODoc(idPoHeader);
        LOGGER.debug("got the result for named query: deletePODoc, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qBudgetDetail2_export", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query untuk get all data")
    public Page<QbudgetDetail2ExportResponse> executeQBudgetDetail2_export(@RequestParam(value = "bh_id") String bhId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qBudgetDetail2_export");
        Page<QbudgetDetail2ExportResponse> _result = queryService.executeQBudgetDetail2_export(bhId, pageable);
        LOGGER.debug("got the result for named query: qBudgetDetail2_export, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qBudgetDetail2_export")
    @RequestMapping(value = "/queries/qBudgetDetail2_export/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQBudgetDetail2_export(@RequestParam(value = "bh_id") String bhId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qBudgetDetail2_export");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qBudgetDetail2_export";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQBudgetDetail2_export(bhId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/updateStatusRfq", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update rfq status")
    public IntegerWrapper executeUpdateStatusRfq(@Valid @RequestBody UpdateStatusRfqRequest updateStatusRfqRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateStatusRfq");
        Integer _result = queryService.executeUpdateStatusRfq(updateStatusRfqRequest);
        LOGGER.debug("got the result for named query: updateStatusRfq, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getMasterRole", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "one time request to get multi relation of auth data")
    public Page<GetMasterRoleResponse> executeGetMasterRole(@RequestParam(value = "roleTitle", required = false) String roleTitle, @RequestParam(value = "roleStatus", required = false) String roleStatus, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getMasterRole");
        Page<GetMasterRoleResponse> _result = queryService.executeGetMasterRole(roleTitle, roleStatus, pageable);
        LOGGER.debug("got the result for named query: getMasterRole, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getMasterRole")
    @RequestMapping(value = "/queries/getMasterRole/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetMasterRole(@RequestParam(value = "roleTitle", required = false) String roleTitle, @RequestParam(value = "roleStatus", required = false) String roleStatus, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getMasterRole");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getMasterRole";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetMasterRole(roleTitle, roleStatus,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/q_changeRemarksPR_BD", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query untuk merubah remark pr")
    public IntegerWrapper executeQ_changeRemarksPR_BD(@Valid @RequestBody QChangeRemarksPrBdRequest qchangeRemarksPrBdRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_changeRemarksPR_BD");
        Integer _result = queryService.executeQ_changeRemarksPR_BD(qchangeRemarksPrBdRequest);
        LOGGER.debug("got the result for named query: q_changeRemarksPR_BD, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/tickInboxLastSeen", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "tick inbox last seen")
    public IntegerWrapper executeTickInboxLastSeen(@Valid @RequestBody TickInboxLastSeenRequest tickInboxLastSeenRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: tickInboxLastSeen");
        Integer _result = queryService.executeTickInboxLastSeen(tickInboxLastSeenRequest);
        LOGGER.debug("got the result for named query: tickInboxLastSeen, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/updatePO", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updatePO")
    public IntegerWrapper executeUpdatePO(@Valid @RequestBody UpdatePoRequest updatePoRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updatePO");
        Integer _result = queryService.executeUpdatePO(updatePoRequest);
        LOGGER.debug("got the result for named query: updatePO, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/tickLastAccess", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "tick user last access")
    public IntegerWrapper executeTickLastAccess(@Valid @RequestBody TickLastAccessRequest tickLastAccessRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: tickLastAccess");
        Integer _result = queryService.executeTickLastAccess(tickLastAccessRequest);
        LOGGER.debug("got the result for named query: tickLastAccess, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/tickNotificationLastSeen", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "tick notification last seen")
    public IntegerWrapper executeTickNotificationLastSeen(@Valid @RequestBody TickNotificationLastSeenRequest tickNotificationLastSeenRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: tickNotificationLastSeen");
        Integer _result = queryService.executeTickNotificationLastSeen(tickNotificationLastSeenRequest);
        LOGGER.debug("got the result for named query: tickNotificationLastSeen, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/q_DepartmentMapUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query Departemt yang d mapping ke user")
    public Page<QDepartmentMapUserResponse> executeQ_DepartmentMapUser(@RequestParam(value = "emp") String emp, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_DepartmentMapUser");
        Page<QDepartmentMapUserResponse> _result = queryService.executeQ_DepartmentMapUser(emp, pageable);
        LOGGER.debug("got the result for named query: q_DepartmentMapUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_DepartmentMapUser")
    @RequestMapping(value = "/queries/q_DepartmentMapUser/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_DepartmentMapUser(@RequestParam(value = "emp") String emp, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_DepartmentMapUser");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_DepartmentMapUser";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_DepartmentMapUser(emp,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/q_CompanyUserLogin", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "company yang d assignt ke user login")
    public Page<QCompanyUserLoginResponse> executeQ_CompanyUserLogin(@RequestParam(value = "emp") String emp, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_CompanyUserLogin");
        Page<QCompanyUserLoginResponse> _result = queryService.executeQ_CompanyUserLogin(emp, pageable);
        LOGGER.debug("got the result for named query: q_CompanyUserLogin, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_CompanyUserLogin")
    @RequestMapping(value = "/queries/q_CompanyUserLogin/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_CompanyUserLogin(@RequestParam(value = "emp") String emp, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_CompanyUserLogin");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_CompanyUserLogin";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_CompanyUserLogin(emp,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getMappingUserPurchaseGroup", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getMappingUserPurchaseGroup")
    public Page<GetMappingUserPurchaseGroupResponse> executeGetMappingUserPurchaseGroup(@RequestParam(value = "purchase_group", required = false) String purchaseGroup, @RequestParam(value = "assignee", required = false) String assignee, @RequestParam(value = "status", required = false) String status, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getMappingUserPurchaseGroup");
        Page<GetMappingUserPurchaseGroupResponse> _result = queryService.executeGetMappingUserPurchaseGroup(purchaseGroup, assignee, status, pageable);
        LOGGER.debug("got the result for named query: getMappingUserPurchaseGroup, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getMappingUserPurchaseGroup")
    @RequestMapping(value = "/queries/getMappingUserPurchaseGroup/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetMappingUserPurchaseGroup(@RequestParam(value = "purchase_group", required = false) String purchaseGroup, @RequestParam(value = "assignee", required = false) String assignee, @RequestParam(value = "status", required = false) String status, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getMappingUserPurchaseGroup");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getMappingUserPurchaseGroup";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetMappingUserPurchaseGroup(purchaseGroup, assignee, status,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRFQSummaryPrint", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRFQSummaryPrint")
    public Page<GetRfqsummaryPrintResponse> executeGetRFQSummaryPrint(@RequestParam(value = "rfqId") String rfqId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRFQSummaryPrint");
        Page<GetRfqsummaryPrintResponse> _result = queryService.executeGetRFQSummaryPrint(rfqId, pageable);
        LOGGER.debug("got the result for named query: getRFQSummaryPrint, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRFQSummaryPrint")
    @RequestMapping(value = "/queries/getRFQSummaryPrint/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetRFQSummaryPrint(@RequestParam(value = "rfqId") String rfqId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRFQSummaryPrint");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRFQSummaryPrint";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRFQSummaryPrint(rfqId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteAdditionalHistory", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteAdditionalHistory")
    public IntegerWrapper executeDeleteAdditionalHistory(@RequestParam(value = "baId") Integer baId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteAdditionalHistory");
        Integer _result = queryService.executeDeleteAdditionalHistory(baId);
        LOGGER.debug("got the result for named query: deleteAdditionalHistory, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/QSetStatusGRLineItem", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QSetStatusGRLineItem")
    public IntegerWrapper executeQSetStatusGRLineItem(@Valid @RequestBody QsetStatusGrlineItemRequest qsetStatusGrlineItemRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QSetStatusGRLineItem");
        Integer _result = queryService.executeQSetStatusGRLineItem(qsetStatusGrlineItemRequest);
        LOGGER.debug("got the result for named query: QSetStatusGRLineItem, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/deletePODocByIDPO", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deletePODocByIDPO")
    public IntegerWrapper executeDeletePODocByIDPO(@RequestParam(value = "idPoHeader") String idPoHeader, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deletePODocByIDPO");
        Integer _result = queryService.executeDeletePODocByIDPO(idPoHeader);
        LOGGER.debug("got the result for named query: deletePODocByIDPO, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/generatePRref", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "generate PR ref")
    public IntegerWrapper executeGeneratePRref(@Valid @RequestBody GeneratePrrefRequest generatePrrefRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: generatePRref");
        Integer _result = queryService.executeGeneratePRref(generatePrrefRequest);
        LOGGER.debug("got the result for named query: generatePRref, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getIOListBH", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of IO in table Budget Header")
    public Page<GetIolistBhResponse> executeGetIOListBH(@RequestParam(value = "budgetYear", required = false) String budgetYear, @RequestParam(value = "userDepartment", required = false) String userDepartment, @RequestParam(value = "accType", required = false) String accType, @RequestParam(value = "accActivity", required = false) String accActivity, @RequestParam(value = "accNonActivity", required = false) String accNonActivity, @RequestParam(value = "accAsset", required = false) String accAsset, @RequestParam(value = "accSewaLeasing", required = false) String accSewaLeasing, @RequestParam(value = "cId", required = false) String cid, @RequestParam(value = "accId", required = false) String accId, @RequestParam(value = "ioNumber", required = false) String ioNumber, @RequestParam(value = "ioName", required = false) String ioName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getIOListBH");
        Page<GetIolistBhResponse> _result = queryService.executeGetIOListBH(budgetYear, userDepartment, accType, accActivity, accNonActivity, accAsset, accSewaLeasing, cid, accId, ioNumber, ioName, pageable);
        LOGGER.debug("got the result for named query: getIOListBH, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getIOListBH")
    @RequestMapping(value = "/queries/getIOListBH/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetIOListBH(@RequestParam(value = "budgetYear", required = false) String budgetYear, @RequestParam(value = "userDepartment", required = false) String userDepartment, @RequestParam(value = "accType", required = false) String accType, @RequestParam(value = "accActivity", required = false) String accActivity, @RequestParam(value = "accNonActivity", required = false) String accNonActivity, @RequestParam(value = "accAsset", required = false) String accAsset, @RequestParam(value = "accSewaLeasing", required = false) String accSewaLeasing, @RequestParam(value = "cId", required = false) String cid, @RequestParam(value = "accId", required = false) String accId, @RequestParam(value = "ioNumber", required = false) String ioNumber, @RequestParam(value = "ioName", required = false) String ioName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getIOListBH");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getIOListBH";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetIOListBH(budgetYear, userDepartment, accType, accActivity, accNonActivity, accAsset, accSewaLeasing, cid, accId, ioNumber, ioName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/changeRFQItemQuotation", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update table rfq_ven_quptation")
    public IntegerWrapper executeChangeRFQItemQuotation(@Valid @RequestBody ChangeRfqitemQuotationRequest changeRfqitemQuotationRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changeRFQItemQuotation");
        Integer _result = queryService.executeChangeRFQItemQuotation(changeRfqitemQuotationRequest);
        LOGGER.debug("got the result for named query: changeRFQItemQuotation, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/GRCompareQtyConfirm", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GRCompareQtyConfirm")
    public Page<GrcompareQtyConfirmResponse> executeGRCompareQtyConfirm(@RequestParam(value = "id_pr_line_item_header") String idPrLineItemHeader, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: GRCompareQtyConfirm");
        Page<GrcompareQtyConfirmResponse> _result = queryService.executeGRCompareQtyConfirm(idPrLineItemHeader, pageable);
        LOGGER.debug("got the result for named query: GRCompareQtyConfirm, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query GRCompareQtyConfirm")
    @RequestMapping(value = "/queries/GRCompareQtyConfirm/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGRCompareQtyConfirm(@RequestParam(value = "id_pr_line_item_header") String idPrLineItemHeader, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: GRCompareQtyConfirm");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "GRCompareQtyConfirm";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGRCompareQtyConfirm(idPrLineItemHeader,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QueryupdateStatusBH", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update status Budget")
    public IntegerWrapper executeQueryupdateStatusBH(@Valid @RequestBody QueryupdateStatusBhRequest queryupdateStatusBhRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QueryupdateStatusBH");
        Integer _result = queryService.executeQueryupdateStatusBH(queryupdateStatusBhRequest);
        LOGGER.debug("got the result for named query: QueryupdateStatusBH, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getCheckerTasklist", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getCheckerTasklist")
    public Page<GetCheckerTasklistResponse> executeGetCheckerTasklist(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCheckerTasklist");
        Page<GetCheckerTasklistResponse> _result = queryService.executeGetCheckerTasklist(pageable);
        LOGGER.debug("got the result for named query: getCheckerTasklist, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getCheckerTasklist")
    @RequestMapping(value = "/queries/getCheckerTasklist/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetCheckerTasklist(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCheckerTasklist");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getCheckerTasklist";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetCheckerTasklist( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qVendorListOrder", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ambil list order vendor tersebut berdasarkan factory")
    public Page<QvendorListOrderResponse> executeQVendorListOrder(@RequestParam(value = "vendorCode") String vendorCode, @RequestParam(value = "company_code") String companyCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qVendorListOrder");
        Page<QvendorListOrderResponse> _result = queryService.executeQVendorListOrder(vendorCode, companyCode, pageable);
        LOGGER.debug("got the result for named query: qVendorListOrder, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qVendorListOrder")
    @RequestMapping(value = "/queries/qVendorListOrder/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQVendorListOrder(@RequestParam(value = "vendorCode") String vendorCode, @RequestParam(value = "company_code") String companyCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qVendorListOrder");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qVendorListOrder";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQVendorListOrder(vendorCode, companyCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRFQSummary", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "list data in RFQ Summary")
    public Page<GetRfqsummaryResponse> executeGetRFQSummary(@RequestParam(value = "rfqId", required = false) String rfqId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRFQSummary");
        Page<GetRfqsummaryResponse> _result = queryService.executeGetRFQSummary(rfqId, pageable);
        LOGGER.debug("got the result for named query: getRFQSummary, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRFQSummary")
    @RequestMapping(value = "/queries/getRFQSummary/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetRFQSummary(@RequestParam(value = "rfqId", required = false) String rfqId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRFQSummary");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRFQSummary";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRFQSummary(rfqId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/query_budgetDetail1", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query for budget detail 1")
    public Page<QueryBudgetDetail1Response> executeQuery_budgetDetail1(@RequestParam(value = "emp") String emp, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: query_budgetDetail1");
        Page<QueryBudgetDetail1Response> _result = queryService.executeQuery_budgetDetail1(emp, pageable);
        LOGGER.debug("got the result for named query: query_budgetDetail1, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query query_budgetDetail1")
    @RequestMapping(value = "/queries/query_budgetDetail1/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQuery_budgetDetail1(@RequestParam(value = "emp") String emp, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: query_budgetDetail1");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "query_budgetDetail1";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_budgetDetail1(emp,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/q_get_budgetHeader_Detail2", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query untuk mengambil data budget header detail 2")
    public Page<QGetBudgetHeaderDetail2Response> executeQ_get_budgetHeader_Detail2(@RequestParam(value = "bh_id") String bhId, @RequestParam(value = "io_number") String ioNumber, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: q_get_budgetHeader_Detail2");
        Page<QGetBudgetHeaderDetail2Response> _result = queryService.executeQ_get_budgetHeader_Detail2(bhId, ioNumber, pageable);
        LOGGER.debug("got the result for named query: q_get_budgetHeader_Detail2, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query q_get_budgetHeader_Detail2")
    @RequestMapping(value = "/queries/q_get_budgetHeader_Detail2/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQ_get_budgetHeader_Detail2(@RequestParam(value = "bh_id") String bhId, @RequestParam(value = "io_number") String ioNumber, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: q_get_budgetHeader_Detail2");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "q_get_budgetHeader_Detail2";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQ_get_budgetHeader_Detail2(bhId, ioNumber,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deletePOLineItem", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deletePOLineItem")
    public IntegerWrapper executeDeletePOLineItem(@RequestParam(value = "idPoHeader") String idPoHeader, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deletePOLineItem");
        Integer _result = queryService.executeDeletePOLineItem(idPoHeader);
        LOGGER.debug("got the result for named query: deletePOLineItem, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getIOListBHDef", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get default IO number for form edit")
    public Page<GetIolistBhdefResponse> executeGetIOListBHDef(@RequestParam(value = "budgetYear", required = false) String budgetYear, @RequestParam(value = "userDepartment", required = false) String userDepartment, @RequestParam(value = "ioNumber", required = false) String ioNumber, @RequestParam(value = "ioName", required = false) String ioName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getIOListBHDef");
        Page<GetIolistBhdefResponse> _result = queryService.executeGetIOListBHDef(budgetYear, userDepartment, ioNumber, ioName, pageable);
        LOGGER.debug("got the result for named query: getIOListBHDef, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getIOListBHDef")
    @RequestMapping(value = "/queries/getIOListBHDef/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetIOListBHDef(@RequestParam(value = "budgetYear", required = false) String budgetYear, @RequestParam(value = "userDepartment", required = false) String userDepartment, @RequestParam(value = "ioNumber", required = false) String ioNumber, @RequestParam(value = "ioName", required = false) String ioName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getIOListBHDef");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getIOListBHDef";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetIOListBHDef(budgetYear, userDepartment, ioNumber, ioName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/updatebhIdAdditionalBudget", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updatebhIdAdditionalBudget")
    public IntegerWrapper executeUpdatebhIdAdditionalBudget(@Valid @RequestBody UpdatebhIdAdditionalBudgetRequest updatebhIdAdditionalBudgetRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updatebhIdAdditionalBudget");
        Integer _result = queryService.executeUpdatebhIdAdditionalBudget(updatebhIdAdditionalBudgetRequest);
        LOGGER.debug("got the result for named query: updatebhIdAdditionalBudget, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/changetCOABudgetDetail", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "changetCOABudgetDetail")
    public IntegerWrapper executeChangetCOABudgetDetail(@Valid @RequestBody ChangetCoabudgetDetailRequest changetCoabudgetDetailRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changetCOABudgetDetail");
        Integer _result = queryService.executeChangetCOABudgetDetail(changetCoabudgetDetailRequest);
        LOGGER.debug("got the result for named query: changetCOABudgetDetail, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}