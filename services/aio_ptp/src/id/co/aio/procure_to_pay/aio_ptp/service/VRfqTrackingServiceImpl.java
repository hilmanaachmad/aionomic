/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqTracking;


/**
 * ServiceImpl object for domain model class VRfqTracking.
 *
 * @see VRfqTracking
 */
@Service("aio_ptp.VRfqTrackingService")
@Validated
@EntityService(entityClass = VRfqTracking.class, serviceId = "aio_ptp")
public class VRfqTrackingServiceImpl implements VRfqTrackingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqTrackingServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqTrackingDao")
    private WMGenericDao<VRfqTracking, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqTracking, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqTracking create(VRfqTracking vrfqTracking) {
        LOGGER.debug("Creating a new VRfqTracking with information: {}", vrfqTracking);

        VRfqTracking vrfqTrackingCreated = this.wmGenericDao.create(vrfqTracking);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqTrackingCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqTracking getById(Integer vrfqtrackingId) {
        LOGGER.debug("Finding VRfqTracking by id: {}", vrfqtrackingId);
        return this.wmGenericDao.findById(vrfqtrackingId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqTracking findById(Integer vrfqtrackingId) {
        LOGGER.debug("Finding VRfqTracking by id: {}", vrfqtrackingId);
        try {
            return this.wmGenericDao.findById(vrfqtrackingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqTracking found with id: {}", vrfqtrackingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqTracking> findByMultipleIds(List<Integer> vrfqtrackingIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqTrackings by ids: {}", vrfqtrackingIds);

        return this.wmGenericDao.findByMultipleIds(vrfqtrackingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqTracking update(VRfqTracking vrfqTracking) {
        LOGGER.debug("Updating VRfqTracking with information: {}", vrfqTracking);

        this.wmGenericDao.update(vrfqTracking);
        this.wmGenericDao.refresh(vrfqTracking);

        return vrfqTracking;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqTracking partialUpdate(Integer vrfqtrackingId, Map<String, Object>vrfqTrackingPatch) {
        LOGGER.debug("Partially Updating the VRfqTracking with id: {}", vrfqtrackingId);

        VRfqTracking vrfqTracking = getById(vrfqtrackingId);

        try {
            ObjectReader vrfqTrackingReader = this.objectMapper.reader().forType(VRfqTracking.class).withValueToUpdate(vrfqTracking);
            vrfqTracking = vrfqTrackingReader.readValue(this.objectMapper.writeValueAsString(vrfqTrackingPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqTrackingPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqTracking = update(vrfqTracking);

        return vrfqTracking;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqTracking delete(Integer vrfqtrackingId) {
        LOGGER.debug("Deleting VRfqTracking with id: {}", vrfqtrackingId);
        VRfqTracking deleted = this.wmGenericDao.findById(vrfqtrackingId);
        if (deleted == null) {
            LOGGER.debug("No VRfqTracking found with id: {}", vrfqtrackingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqTracking.class.getSimpleName(), vrfqtrackingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqTracking vrfqTracking) {
        LOGGER.debug("Deleting VRfqTracking with {}", vrfqTracking);
        this.wmGenericDao.delete(vrfqTracking);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqTracking> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqTrackings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqTracking> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqTrackings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqTracking to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqTracking to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}