/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMIo;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetAdditional;

/**
 * Service object for domain model class {@link TblMIo}.
 */
public interface TblMIoService {

    /**
     * Creates a new TblMIo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMIo if any.
     *
     * @param tblMio Details of the TblMIo to be created; value cannot be null.
     * @return The newly created TblMIo.
     */
    TblMIo create(@Valid TblMIo tblMio);


	/**
     * Returns TblMIo by given id if exists.
     *
     * @param tblmioId The id of the TblMIo to get; value cannot be null.
     * @return TblMIo associated with the given tblmioId.
	 * @throws EntityNotFoundException If no TblMIo is found.
     */
    TblMIo getById(Integer tblmioId);

    /**
     * Find and return the TblMIo by given id if exists, returns null otherwise.
     *
     * @param tblmioId The id of the TblMIo to get; value cannot be null.
     * @return TblMIo associated with the given tblmioId.
     */
    TblMIo findById(Integer tblmioId);

	/**
     * Find and return the list of TblMIos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmioIds The id's of the TblMIo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMIos associated with the given tblmioIds.
     */
    List<TblMIo> findByMultipleIds(List<Integer> tblmioIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMIo. It replaces all fields of the existing TblMIo with the given tblMio.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMIo if any.
     *
     * @param tblMio The details of the TblMIo to be updated; value cannot be null.
     * @return The updated TblMIo.
     * @throws EntityNotFoundException if no TblMIo is found with given input.
     */
    TblMIo update(@Valid TblMIo tblMio);


    /**
     * Partially updates the details of an existing TblMIo. It updates only the
     * fields of the existing TblMIo which are passed in the tblMioPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMIo if any.
     *
     * @param tblmioId The id of the TblMIo to be deleted; value cannot be null.
     * @param tblMioPatch The partial data of TblMIo which is supposed to be updated; value cannot be null.
     * @return The updated TblMIo.
     * @throws EntityNotFoundException if no TblMIo is found with given input.
     */
    TblMIo partialUpdate(Integer tblmioId, Map<String, Object> tblMioPatch);

    /**
     * Deletes an existing TblMIo with the given id.
     *
     * @param tblmioId The id of the TblMIo to be deleted; value cannot be null.
     * @return The deleted TblMIo.
     * @throws EntityNotFoundException if no TblMIo found with the given id.
     */
    TblMIo delete(Integer tblmioId);

    /**
     * Deletes an existing TblMIo with the given object.
     *
     * @param tblMio The instance of the TblMIo to be deleted; value cannot be null.
     */
    void delete(TblMIo tblMio);

    /**
     * Find all TblMIos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMIos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMIo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMIos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMIos.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMIo> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMIos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMIos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMIos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMIo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblTbudgetAdditionals for given TblMIo id.
     *
     * @param ioId value of ioId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTBudgetAdditional instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTBudgetAdditional> findAssociatedTblTbudgetAdditionals(Integer ioId, Pageable pageable);

}