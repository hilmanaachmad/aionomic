/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VTaskList;


/**
 * ServiceImpl object for domain model class VTaskList.
 *
 * @see VTaskList
 */
@Service("aio_ptp.VTaskListService")
@Validated
@EntityService(entityClass = VTaskList.class, serviceId = "aio_ptp")
public class VTaskListServiceImpl implements VTaskListService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VTaskListServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VTaskListDao")
    private WMGenericDao<VTaskList, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VTaskList, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VTaskList create(VTaskList vtaskList) {
        LOGGER.debug("Creating a new VTaskList with information: {}", vtaskList);

        VTaskList vtaskListCreated = this.wmGenericDao.create(vtaskList);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vtaskListCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VTaskList getById(Integer vtasklistId) {
        LOGGER.debug("Finding VTaskList by id: {}", vtasklistId);
        return this.wmGenericDao.findById(vtasklistId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VTaskList findById(Integer vtasklistId) {
        LOGGER.debug("Finding VTaskList by id: {}", vtasklistId);
        try {
            return this.wmGenericDao.findById(vtasklistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VTaskList found with id: {}", vtasklistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VTaskList> findByMultipleIds(List<Integer> vtasklistIds, boolean orderedReturn) {
        LOGGER.debug("Finding VTaskLists by ids: {}", vtasklistIds);

        return this.wmGenericDao.findByMultipleIds(vtasklistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VTaskList update(VTaskList vtaskList) {
        LOGGER.debug("Updating VTaskList with information: {}", vtaskList);

        this.wmGenericDao.update(vtaskList);
        this.wmGenericDao.refresh(vtaskList);

        return vtaskList;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VTaskList partialUpdate(Integer vtasklistId, Map<String, Object>vtaskListPatch) {
        LOGGER.debug("Partially Updating the VTaskList with id: {}", vtasklistId);

        VTaskList vtaskList = getById(vtasklistId);

        try {
            ObjectReader vtaskListReader = this.objectMapper.reader().forType(VTaskList.class).withValueToUpdate(vtaskList);
            vtaskList = vtaskListReader.readValue(this.objectMapper.writeValueAsString(vtaskListPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vtaskListPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vtaskList = update(vtaskList);

        return vtaskList;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VTaskList delete(Integer vtasklistId) {
        LOGGER.debug("Deleting VTaskList with id: {}", vtasklistId);
        VTaskList deleted = this.wmGenericDao.findById(vtasklistId);
        if (deleted == null) {
            LOGGER.debug("No VTaskList found with id: {}", vtasklistId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VTaskList.class.getSimpleName(), vtasklistId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VTaskList vtaskList) {
        LOGGER.debug("Deleting VTaskList with {}", vtaskList);
        this.wmGenericDao.delete(vtaskList);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VTaskList> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VTaskLists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VTaskList> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VTaskLists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VTaskList to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VTaskList to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}