/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetAvailable;
import id.co.aio.procure_to_pay.aio_ptp.service.VBudgetAvailableService;


/**
 * Controller object for domain model class VBudgetAvailable.
 * @see VBudgetAvailable
 */
@RestController("aio_ptp.VBudgetAvailableController")
@Api(value = "VBudgetAvailableController", description = "Exposes APIs to work with VBudgetAvailable resource.")
@RequestMapping("/aio_ptp/VBudgetAvailable")
public class VBudgetAvailableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBudgetAvailableController.class);

    @Autowired
	@Qualifier("aio_ptp.VBudgetAvailableService")
	private VBudgetAvailableService vBudgetAvailableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VBudgetAvailable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetAvailable createVBudgetAvailable(@RequestBody VBudgetAvailable vbudgetAvailable) {
		LOGGER.debug("Create VBudgetAvailable with information: {}" , vbudgetAvailable);

		vbudgetAvailable = vBudgetAvailableService.create(vbudgetAvailable);
		LOGGER.debug("Created VBudgetAvailable with information: {}" , vbudgetAvailable);

	    return vbudgetAvailable;
	}

    @ApiOperation(value = "Returns the VBudgetAvailable instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetAvailable getVBudgetAvailable(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Getting VBudgetAvailable with id: {}" , bhId);

        VBudgetAvailable foundVBudgetAvailable = vBudgetAvailableService.getById(bhId);
        LOGGER.debug("VBudgetAvailable details with id: {}" , foundVBudgetAvailable);

        return foundVBudgetAvailable;
    }

    @ApiOperation(value = "Updates the VBudgetAvailable instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetAvailable editVBudgetAvailable(@PathVariable("bhId") Integer bhId, @RequestBody VBudgetAvailable vbudgetAvailable) {
        LOGGER.debug("Editing VBudgetAvailable with id: {}" , vbudgetAvailable.getBhId());

        vbudgetAvailable.setBhId(bhId);
        vbudgetAvailable = vBudgetAvailableService.update(vbudgetAvailable);
        LOGGER.debug("VBudgetAvailable details with id: {}" , vbudgetAvailable);

        return vbudgetAvailable;
    }
    
    @ApiOperation(value = "Partially updates the VBudgetAvailable instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetAvailable patchVBudgetAvailable(@PathVariable("bhId") Integer bhId, @RequestBody @MapTo(VBudgetAvailable.class) Map<String, Object> vbudgetAvailablePatch) {
        LOGGER.debug("Partially updating VBudgetAvailable with id: {}" , bhId);

        VBudgetAvailable vbudgetAvailable = vBudgetAvailableService.partialUpdate(bhId, vbudgetAvailablePatch);
        LOGGER.debug("VBudgetAvailable details after partial update: {}" , vbudgetAvailable);

        return vbudgetAvailable;
    }

    @ApiOperation(value = "Deletes the VBudgetAvailable instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVBudgetAvailable(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Deleting VBudgetAvailable with id: {}" , bhId);

        VBudgetAvailable deletedVBudgetAvailable = vBudgetAvailableService.delete(bhId);

        return deletedVBudgetAvailable != null;
    }

    /**
     * @deprecated Use {@link #findVBudgetAvailables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VBudgetAvailable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetAvailable> searchVBudgetAvailablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VBudgetAvailables list by query filter:{}", (Object) queryFilters);
        return vBudgetAvailableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBudgetAvailable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetAvailable> findVBudgetAvailables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBudgetAvailables list by filter:", query);
        return vBudgetAvailableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBudgetAvailable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetAvailable> filterVBudgetAvailables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBudgetAvailables list by filter", query);
        return vBudgetAvailableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVBudgetAvailables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vBudgetAvailableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVBudgetAvailablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VBudgetAvailable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vBudgetAvailableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VBudgetAvailable instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVBudgetAvailables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VBudgetAvailables");
		return vBudgetAvailableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVBudgetAvailableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vBudgetAvailableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VBudgetAvailableService instance
	 */
	protected void setVBudgetAvailableService(VBudgetAvailableService service) {
		this.vBudgetAvailableService = service;
	}

}