/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseOrderLineItem;
import id.co.aio.procure_to_pay.aio_ptp.VPurchaseOrderLineItemId;
import id.co.aio.procure_to_pay.aio_ptp.service.VPurchaseOrderLineItemService;


/**
 * Controller object for domain model class VPurchaseOrderLineItem.
 * @see VPurchaseOrderLineItem
 */
@RestController("aio_ptp.VPurchaseOrderLineItemController")
@Api(value = "VPurchaseOrderLineItemController", description = "Exposes APIs to work with VPurchaseOrderLineItem resource.")
@RequestMapping("/aio_ptp/VPurchaseOrderLineItem")
public class VPurchaseOrderLineItemController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseOrderLineItemController.class);

    @Autowired
	@Qualifier("aio_ptp.VPurchaseOrderLineItemService")
	private VPurchaseOrderLineItemService vPurchaseOrderLineItemService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPurchaseOrderLineItem instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrderLineItem createVPurchaseOrderLineItem(@RequestBody VPurchaseOrderLineItem vpurchaseOrderLineItem) {
		LOGGER.debug("Create VPurchaseOrderLineItem with information: {}" , vpurchaseOrderLineItem);

		vpurchaseOrderLineItem = vPurchaseOrderLineItemService.create(vpurchaseOrderLineItem);
		LOGGER.debug("Created VPurchaseOrderLineItem with information: {}" , vpurchaseOrderLineItem);

	    return vpurchaseOrderLineItem;
	}

    @ApiOperation(value = "Returns the VPurchaseOrderLineItem instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrderLineItem getVPurchaseOrderLineItem(@RequestParam("idPoLineItem") Integer idPoLineItem, @RequestParam("id") Integer id) {

        VPurchaseOrderLineItemId vpurchaseorderlineitemId = new VPurchaseOrderLineItemId();
        vpurchaseorderlineitemId.setIdPoLineItem(idPoLineItem);
        vpurchaseorderlineitemId.setId(id);

        LOGGER.debug("Getting VPurchaseOrderLineItem with id: {}" , vpurchaseorderlineitemId);
        VPurchaseOrderLineItem vpurchaseOrderLineItem = vPurchaseOrderLineItemService.getById(vpurchaseorderlineitemId);
        LOGGER.debug("VPurchaseOrderLineItem details with id: {}" , vpurchaseOrderLineItem);

        return vpurchaseOrderLineItem;
    }



    @ApiOperation(value = "Updates the VPurchaseOrderLineItem instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrderLineItem editVPurchaseOrderLineItem(@RequestParam("idPoLineItem") Integer idPoLineItem, @RequestParam("id") Integer id, @RequestBody VPurchaseOrderLineItem vpurchaseOrderLineItem) {

        vpurchaseOrderLineItem.setIdPoLineItem(idPoLineItem);
        vpurchaseOrderLineItem.setId(id);

        LOGGER.debug("VPurchaseOrderLineItem details with id is updated with: {}" , vpurchaseOrderLineItem);

        return vPurchaseOrderLineItemService.update(vpurchaseOrderLineItem);
    }

	@ApiOperation(value = "Partially updates the  VPurchaseOrderLineItem instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPurchaseOrderLineItem patchVPurchaseOrderLineItem(@RequestParam("idPoLineItem") Integer idPoLineItem, @RequestParam("id") Integer id, @RequestBody @MapTo(VPurchaseOrderLineItem.class) Map<String, Object> vpurchaseOrderLineItemPatch) {

        VPurchaseOrderLineItemId vpurchaseorderlineitemId = new VPurchaseOrderLineItemId();
        vpurchaseorderlineitemId.setIdPoLineItem(idPoLineItem);
        vpurchaseorderlineitemId.setId(id);
        LOGGER.debug("Partially updating VPurchaseOrderLineItem with id: {}" , vpurchaseorderlineitemId);

        VPurchaseOrderLineItem vpurchaseOrderLineItem = vPurchaseOrderLineItemService.partialUpdate(vpurchaseorderlineitemId, vpurchaseOrderLineItemPatch);
        LOGGER.debug("VPurchaseOrderLineItem details after partial update: {}" , vpurchaseOrderLineItem);

        return vpurchaseOrderLineItem;
    }


    @ApiOperation(value = "Deletes the VPurchaseOrderLineItem instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPurchaseOrderLineItem(@RequestParam("idPoLineItem") Integer idPoLineItem, @RequestParam("id") Integer id) {

        VPurchaseOrderLineItemId vpurchaseorderlineitemId = new VPurchaseOrderLineItemId();
        vpurchaseorderlineitemId.setIdPoLineItem(idPoLineItem);
        vpurchaseorderlineitemId.setId(id);

        LOGGER.debug("Deleting VPurchaseOrderLineItem with id: {}" , vpurchaseorderlineitemId);
        VPurchaseOrderLineItem vpurchaseOrderLineItem = vPurchaseOrderLineItemService.delete(vpurchaseorderlineitemId);

        return vpurchaseOrderLineItem != null;
    }


    /**
     * @deprecated Use {@link #findVPurchaseOrderLineItems(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPurchaseOrderLineItem instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseOrderLineItem> searchVPurchaseOrderLineItemsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPurchaseOrderLineItems list by query filter:{}", (Object) queryFilters);
        return vPurchaseOrderLineItemService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseOrderLineItem instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseOrderLineItem> findVPurchaseOrderLineItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseOrderLineItems list by filter:", query);
        return vPurchaseOrderLineItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPurchaseOrderLineItem instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPurchaseOrderLineItem> filterVPurchaseOrderLineItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPurchaseOrderLineItems list by filter", query);
        return vPurchaseOrderLineItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPurchaseOrderLineItems(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPurchaseOrderLineItemService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPurchaseOrderLineItemsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPurchaseOrderLineItem.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPurchaseOrderLineItemService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPurchaseOrderLineItem instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPurchaseOrderLineItems( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPurchaseOrderLineItems");
		return vPurchaseOrderLineItemService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPurchaseOrderLineItemAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPurchaseOrderLineItemService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPurchaseOrderLineItemService instance
	 */
	protected void setVPurchaseOrderLineItemService(VPurchaseOrderLineItemService service) {
		this.vPurchaseOrderLineItemService = service;
	}

}