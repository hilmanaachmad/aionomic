/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqTrackingSub;


/**
 * ServiceImpl object for domain model class VRfqTrackingSub.
 *
 * @see VRfqTrackingSub
 */
@Service("aio_ptp.VRfqTrackingSubService")
@Validated
@EntityService(entityClass = VRfqTrackingSub.class, serviceId = "aio_ptp")
public class VRfqTrackingSubServiceImpl implements VRfqTrackingSubService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqTrackingSubServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqTrackingSubDao")
    private WMGenericDao<VRfqTrackingSub, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqTrackingSub, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqTrackingSub create(VRfqTrackingSub vrfqTrackingSub) {
        LOGGER.debug("Creating a new VRfqTrackingSub with information: {}", vrfqTrackingSub);

        VRfqTrackingSub vrfqTrackingSubCreated = this.wmGenericDao.create(vrfqTrackingSub);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqTrackingSubCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqTrackingSub getById(Integer vrfqtrackingsubId) {
        LOGGER.debug("Finding VRfqTrackingSub by id: {}", vrfqtrackingsubId);
        return this.wmGenericDao.findById(vrfqtrackingsubId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqTrackingSub findById(Integer vrfqtrackingsubId) {
        LOGGER.debug("Finding VRfqTrackingSub by id: {}", vrfqtrackingsubId);
        try {
            return this.wmGenericDao.findById(vrfqtrackingsubId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqTrackingSub found with id: {}", vrfqtrackingsubId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqTrackingSub> findByMultipleIds(List<Integer> vrfqtrackingsubIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqTrackingSubs by ids: {}", vrfqtrackingsubIds);

        return this.wmGenericDao.findByMultipleIds(vrfqtrackingsubIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqTrackingSub update(VRfqTrackingSub vrfqTrackingSub) {
        LOGGER.debug("Updating VRfqTrackingSub with information: {}", vrfqTrackingSub);

        this.wmGenericDao.update(vrfqTrackingSub);
        this.wmGenericDao.refresh(vrfqTrackingSub);

        return vrfqTrackingSub;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqTrackingSub partialUpdate(Integer vrfqtrackingsubId, Map<String, Object>vrfqTrackingSubPatch) {
        LOGGER.debug("Partially Updating the VRfqTrackingSub with id: {}", vrfqtrackingsubId);

        VRfqTrackingSub vrfqTrackingSub = getById(vrfqtrackingsubId);

        try {
            ObjectReader vrfqTrackingSubReader = this.objectMapper.reader().forType(VRfqTrackingSub.class).withValueToUpdate(vrfqTrackingSub);
            vrfqTrackingSub = vrfqTrackingSubReader.readValue(this.objectMapper.writeValueAsString(vrfqTrackingSubPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqTrackingSubPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqTrackingSub = update(vrfqTrackingSub);

        return vrfqTrackingSub;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqTrackingSub delete(Integer vrfqtrackingsubId) {
        LOGGER.debug("Deleting VRfqTrackingSub with id: {}", vrfqtrackingsubId);
        VRfqTrackingSub deleted = this.wmGenericDao.findById(vrfqtrackingsubId);
        if (deleted == null) {
            LOGGER.debug("No VRfqTrackingSub found with id: {}", vrfqtrackingsubId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqTrackingSub.class.getSimpleName(), vrfqtrackingsubId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqTrackingSub vrfqTrackingSub) {
        LOGGER.debug("Deleting VRfqTrackingSub with {}", vrfqTrackingSub);
        this.wmGenericDao.delete(vrfqTrackingSub);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqTrackingSub> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqTrackingSubs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqTrackingSub> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqTrackingSubs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqTrackingSub to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqTrackingSub to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}