/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetReclass;
import id.co.aio.procure_to_pay.aio_ptp.TblTReclassHistory;


/**
 * ServiceImpl object for domain model class TblTBudgetReclass.
 *
 * @see TblTBudgetReclass
 */
@Service("aio_ptp.TblTBudgetReclassService")
@Validated
@EntityService(entityClass = TblTBudgetReclass.class, serviceId = "aio_ptp")
public class TblTBudgetReclassServiceImpl implements TblTBudgetReclassService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTBudgetReclassServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTReclassHistoryService")
    private TblTReclassHistoryService tblTReclassHistoryService;

    @Autowired
    @Qualifier("aio_ptp.TblTBudgetReclassDao")
    private WMGenericDao<TblTBudgetReclass, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTBudgetReclass, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetReclass create(TblTBudgetReclass tblTbudgetReclass) {
        LOGGER.debug("Creating a new TblTBudgetReclass with information: {}", tblTbudgetReclass);

        TblTBudgetReclass tblTbudgetReclassCreated = this.wmGenericDao.create(tblTbudgetReclass);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTbudgetReclassCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetReclass getById(Integer tbltbudgetreclassId) {
        LOGGER.debug("Finding TblTBudgetReclass by id: {}", tbltbudgetreclassId);
        return this.wmGenericDao.findById(tbltbudgetreclassId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetReclass findById(Integer tbltbudgetreclassId) {
        LOGGER.debug("Finding TblTBudgetReclass by id: {}", tbltbudgetreclassId);
        try {
            return this.wmGenericDao.findById(tbltbudgetreclassId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTBudgetReclass found with id: {}", tbltbudgetreclassId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTBudgetReclass> findByMultipleIds(List<Integer> tbltbudgetreclassIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTBudgetReclasses by ids: {}", tbltbudgetreclassIds);

        return this.wmGenericDao.findByMultipleIds(tbltbudgetreclassIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetReclass update(TblTBudgetReclass tblTbudgetReclass) {
        LOGGER.debug("Updating TblTBudgetReclass with information: {}", tblTbudgetReclass);

        this.wmGenericDao.update(tblTbudgetReclass);
        this.wmGenericDao.refresh(tblTbudgetReclass);

        return tblTbudgetReclass;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetReclass partialUpdate(Integer tbltbudgetreclassId, Map<String, Object>tblTbudgetReclassPatch) {
        LOGGER.debug("Partially Updating the TblTBudgetReclass with id: {}", tbltbudgetreclassId);

        TblTBudgetReclass tblTbudgetReclass = getById(tbltbudgetreclassId);

        try {
            ObjectReader tblTbudgetReclassReader = this.objectMapper.reader().forType(TblTBudgetReclass.class).withValueToUpdate(tblTbudgetReclass);
            tblTbudgetReclass = tblTbudgetReclassReader.readValue(this.objectMapper.writeValueAsString(tblTbudgetReclassPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTbudgetReclassPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTbudgetReclass = update(tblTbudgetReclass);

        return tblTbudgetReclass;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetReclass delete(Integer tbltbudgetreclassId) {
        LOGGER.debug("Deleting TblTBudgetReclass with id: {}", tbltbudgetreclassId);
        TblTBudgetReclass deleted = this.wmGenericDao.findById(tbltbudgetreclassId);
        if (deleted == null) {
            LOGGER.debug("No TblTBudgetReclass found with id: {}", tbltbudgetreclassId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTBudgetReclass.class.getSimpleName(), tbltbudgetreclassId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTBudgetReclass tblTbudgetReclass) {
        LOGGER.debug("Deleting TblTBudgetReclass with {}", tblTbudgetReclass);
        this.wmGenericDao.delete(tblTbudgetReclass);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetReclass> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetReclasses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetReclass> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetReclasses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetReclass to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetReclass to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTReclassHistory> findAssociatedTblTreclassHistories(Integer bdRcId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTreclassHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTbudgetReclass.bdRcId = '" + bdRcId + "'");

        return tblTReclassHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTReclassHistoryService instance
     */
    protected void setTblTReclassHistoryService(TblTReclassHistoryService service) {
        this.tblTReclassHistoryService = service;
    }

}