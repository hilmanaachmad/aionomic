/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetReclass;
import id.co.aio.procure_to_pay.aio_ptp.TblTReclassHistory;

/**
 * Service object for domain model class {@link TblTBudgetReclass}.
 */
public interface TblTBudgetReclassService {

    /**
     * Creates a new TblTBudgetReclass. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTBudgetReclass if any.
     *
     * @param tblTbudgetReclass Details of the TblTBudgetReclass to be created; value cannot be null.
     * @return The newly created TblTBudgetReclass.
     */
    TblTBudgetReclass create(@Valid TblTBudgetReclass tblTbudgetReclass);


	/**
     * Returns TblTBudgetReclass by given id if exists.
     *
     * @param tbltbudgetreclassId The id of the TblTBudgetReclass to get; value cannot be null.
     * @return TblTBudgetReclass associated with the given tbltbudgetreclassId.
	 * @throws EntityNotFoundException If no TblTBudgetReclass is found.
     */
    TblTBudgetReclass getById(Integer tbltbudgetreclassId);

    /**
     * Find and return the TblTBudgetReclass by given id if exists, returns null otherwise.
     *
     * @param tbltbudgetreclassId The id of the TblTBudgetReclass to get; value cannot be null.
     * @return TblTBudgetReclass associated with the given tbltbudgetreclassId.
     */
    TblTBudgetReclass findById(Integer tbltbudgetreclassId);

	/**
     * Find and return the list of TblTBudgetReclasses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tbltbudgetreclassIds The id's of the TblTBudgetReclass to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblTBudgetReclasses associated with the given tbltbudgetreclassIds.
     */
    List<TblTBudgetReclass> findByMultipleIds(List<Integer> tbltbudgetreclassIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblTBudgetReclass. It replaces all fields of the existing TblTBudgetReclass with the given tblTbudgetReclass.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTBudgetReclass if any.
     *
     * @param tblTbudgetReclass The details of the TblTBudgetReclass to be updated; value cannot be null.
     * @return The updated TblTBudgetReclass.
     * @throws EntityNotFoundException if no TblTBudgetReclass is found with given input.
     */
    TblTBudgetReclass update(@Valid TblTBudgetReclass tblTbudgetReclass);


    /**
     * Partially updates the details of an existing TblTBudgetReclass. It updates only the
     * fields of the existing TblTBudgetReclass which are passed in the tblTbudgetReclassPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTBudgetReclass if any.
     *
     * @param tbltbudgetreclassId The id of the TblTBudgetReclass to be deleted; value cannot be null.
     * @param tblTbudgetReclassPatch The partial data of TblTBudgetReclass which is supposed to be updated; value cannot be null.
     * @return The updated TblTBudgetReclass.
     * @throws EntityNotFoundException if no TblTBudgetReclass is found with given input.
     */
    TblTBudgetReclass partialUpdate(Integer tbltbudgetreclassId, Map<String, Object> tblTbudgetReclassPatch);

    /**
     * Deletes an existing TblTBudgetReclass with the given id.
     *
     * @param tbltbudgetreclassId The id of the TblTBudgetReclass to be deleted; value cannot be null.
     * @return The deleted TblTBudgetReclass.
     * @throws EntityNotFoundException if no TblTBudgetReclass found with the given id.
     */
    TblTBudgetReclass delete(Integer tbltbudgetreclassId);

    /**
     * Deletes an existing TblTBudgetReclass with the given object.
     *
     * @param tblTbudgetReclass The instance of the TblTBudgetReclass to be deleted; value cannot be null.
     */
    void delete(TblTBudgetReclass tblTbudgetReclass);

    /**
     * Find all TblTBudgetReclasses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTBudgetReclasses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblTBudgetReclass> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblTBudgetReclasses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTBudgetReclasses.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTBudgetReclass> findAll(String query, Pageable pageable);

    /**
     * Exports all TblTBudgetReclasses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblTBudgetReclasses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblTBudgetReclasses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblTBudgetReclass.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblTreclassHistories for given TblTBudgetReclass id.
     *
     * @param bdRcId value of bdRcId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTReclassHistory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTReclassHistory> findAssociatedTblTreclassHistories(Integer bdRcId, Pageable pageable);

}