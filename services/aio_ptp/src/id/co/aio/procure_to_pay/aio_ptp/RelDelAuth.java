/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * RelDelAuth generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`rel_del_auth`")
@IdClass(RelDelAuthId.class)
public class RelDelAuth implements Serializable {

    private Integer authId;
    private Integer delId;
    private TblTDelegation tblTdelegation;
    private TblMAuthorization tblMauthorization;

    @Id
    @Column(name = "`auth_id`", nullable = false, scale = 0, precision = 10)
    public Integer getAuthId() {
        return this.authId;
    }

    public void setAuthId(Integer authId) {
        this.authId = authId;
    }

    @Id
    @Column(name = "`del_id`", nullable = false, scale = 0, precision = 10)
    public Integer getDelId() {
        return this.delId;
    }

    public void setDelId(Integer delId) {
        this.delId = delId;
    }


    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`del_id`", referencedColumnName = "`del_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`rel_del_auth_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public TblTDelegation getTblTdelegation() {
        return this.tblTdelegation;
    }

    public void setTblTdelegation(TblTDelegation tblTdelegation) {
        if(tblTdelegation != null) {
            this.delId = tblTdelegation.getDelId();
        }

        this.tblTdelegation = tblTdelegation;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`auth_id`", referencedColumnName = "`auth_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`rel_del_auth_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public TblMAuthorization getTblMauthorization() {
        return this.tblMauthorization;
    }

    public void setTblMauthorization(TblMAuthorization tblMauthorization) {
        if(tblMauthorization != null) {
            this.authId = tblMauthorization.getAuthId();
        }

        this.tblMauthorization = tblMauthorization;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof RelDelAuth)) return false;
        final RelDelAuth relDelAuth = (RelDelAuth) o;
        return Objects.equals(getAuthId(), relDelAuth.getAuthId()) &&
                Objects.equals(getDelId(), relDelAuth.getDelId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAuthId(),
                getDelId());
    }
}