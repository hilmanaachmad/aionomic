/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuth;
import id.co.aio.procure_to_pay.aio_ptp.TblMRole;
import id.co.aio.procure_to_pay.aio_ptp.TblMUserRole;


/**
 * ServiceImpl object for domain model class TblMRole.
 *
 * @see TblMRole
 */
@Service("aio_ptp.TblMRoleService")
@Validated
@EntityService(entityClass = TblMRole.class, serviceId = "aio_ptp")
public class TblMRoleServiceImpl implements TblMRoleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMRoleServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.RelRoleAuthService")
    private RelRoleAuthService relRoleAuthService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblMUserRoleService")
    private TblMUserRoleService tblMUserRoleService;

    @Autowired
    @Qualifier("aio_ptp.TblMRoleDao")
    private WMGenericDao<TblMRole, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMRole, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMRole create(TblMRole tblMrole) {
        LOGGER.debug("Creating a new TblMRole with information: {}", tblMrole);

        TblMRole tblMroleCreated = this.wmGenericDao.create(tblMrole);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMroleCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMRole getById(Integer tblmroleId) {
        LOGGER.debug("Finding TblMRole by id: {}", tblmroleId);
        return this.wmGenericDao.findById(tblmroleId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMRole findById(Integer tblmroleId) {
        LOGGER.debug("Finding TblMRole by id: {}", tblmroleId);
        try {
            return this.wmGenericDao.findById(tblmroleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMRole found with id: {}", tblmroleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMRole> findByMultipleIds(List<Integer> tblmroleIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMRoles by ids: {}", tblmroleIds);

        return this.wmGenericDao.findByMultipleIds(tblmroleIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMRole update(TblMRole tblMrole) {
        LOGGER.debug("Updating TblMRole with information: {}", tblMrole);

        this.wmGenericDao.update(tblMrole);
        this.wmGenericDao.refresh(tblMrole);

        return tblMrole;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMRole partialUpdate(Integer tblmroleId, Map<String, Object>tblMrolePatch) {
        LOGGER.debug("Partially Updating the TblMRole with id: {}", tblmroleId);

        TblMRole tblMrole = getById(tblmroleId);

        try {
            ObjectReader tblMroleReader = this.objectMapper.reader().forType(TblMRole.class).withValueToUpdate(tblMrole);
            tblMrole = tblMroleReader.readValue(this.objectMapper.writeValueAsString(tblMrolePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMrolePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMrole = update(tblMrole);

        return tblMrole;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMRole delete(Integer tblmroleId) {
        LOGGER.debug("Deleting TblMRole with id: {}", tblmroleId);
        TblMRole deleted = this.wmGenericDao.findById(tblmroleId);
        if (deleted == null) {
            LOGGER.debug("No TblMRole found with id: {}", tblmroleId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMRole.class.getSimpleName(), tblmroleId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMRole tblMrole) {
        LOGGER.debug("Deleting TblMRole with {}", tblMrole);
        this.wmGenericDao.delete(tblMrole);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMRole> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMRoles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMRole> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMRoles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMRole to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMRole to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<RelRoleAuth> findAssociatedRelRoleAuths(Integer roleId, Pageable pageable) {
        LOGGER.debug("Fetching all associated relRoleAuths");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMrole.roleId = '" + roleId + "'");

        return relRoleAuthService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserRole> findAssociatedTblMuserRoles(Integer roleId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblMuserRoles");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMrole.roleId = '" + roleId + "'");

        return tblMUserRoleService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RelRoleAuthService instance
     */
    protected void setRelRoleAuthService(RelRoleAuthService service) {
        this.relRoleAuthService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblMUserRoleService instance
     */
    protected void setTblMUserRoleService(TblMUserRoleService service) {
        this.tblMUserRoleService = service;
    }

}