/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPoDoc;

/**
 * Service object for domain model class {@link TblTPoDoc}.
 */
public interface TblTPoDocService {

    /**
     * Creates a new TblTPoDoc. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTPoDoc if any.
     *
     * @param tblTpoDoc Details of the TblTPoDoc to be created; value cannot be null.
     * @return The newly created TblTPoDoc.
     */
    TblTPoDoc create(@Valid TblTPoDoc tblTpoDoc);


	/**
     * Returns TblTPoDoc by given id if exists.
     *
     * @param tbltpodocId The id of the TblTPoDoc to get; value cannot be null.
     * @return TblTPoDoc associated with the given tbltpodocId.
	 * @throws EntityNotFoundException If no TblTPoDoc is found.
     */
    TblTPoDoc getById(Integer tbltpodocId);

    /**
     * Find and return the TblTPoDoc by given id if exists, returns null otherwise.
     *
     * @param tbltpodocId The id of the TblTPoDoc to get; value cannot be null.
     * @return TblTPoDoc associated with the given tbltpodocId.
     */
    TblTPoDoc findById(Integer tbltpodocId);

	/**
     * Find and return the list of TblTPoDocs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tbltpodocIds The id's of the TblTPoDoc to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblTPoDocs associated with the given tbltpodocIds.
     */
    List<TblTPoDoc> findByMultipleIds(List<Integer> tbltpodocIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblTPoDoc. It replaces all fields of the existing TblTPoDoc with the given tblTpoDoc.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTPoDoc if any.
     *
     * @param tblTpoDoc The details of the TblTPoDoc to be updated; value cannot be null.
     * @return The updated TblTPoDoc.
     * @throws EntityNotFoundException if no TblTPoDoc is found with given input.
     */
    TblTPoDoc update(@Valid TblTPoDoc tblTpoDoc);


    /**
     * Partially updates the details of an existing TblTPoDoc. It updates only the
     * fields of the existing TblTPoDoc which are passed in the tblTpoDocPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTPoDoc if any.
     *
     * @param tbltpodocId The id of the TblTPoDoc to be deleted; value cannot be null.
     * @param tblTpoDocPatch The partial data of TblTPoDoc which is supposed to be updated; value cannot be null.
     * @return The updated TblTPoDoc.
     * @throws EntityNotFoundException if no TblTPoDoc is found with given input.
     */
    TblTPoDoc partialUpdate(Integer tbltpodocId, Map<String, Object> tblTpoDocPatch);

    /**
     * Deletes an existing TblTPoDoc with the given id.
     *
     * @param tbltpodocId The id of the TblTPoDoc to be deleted; value cannot be null.
     * @return The deleted TblTPoDoc.
     * @throws EntityNotFoundException if no TblTPoDoc found with the given id.
     */
    TblTPoDoc delete(Integer tbltpodocId);

    /**
     * Deletes an existing TblTPoDoc with the given object.
     *
     * @param tblTpoDoc The instance of the TblTPoDoc to be deleted; value cannot be null.
     */
    void delete(TblTPoDoc tblTpoDoc);

    /**
     * Find all TblTPoDocs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTPoDocs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblTPoDoc> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblTPoDocs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTPoDocs.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTPoDoc> findAll(String query, Pageable pageable);

    /**
     * Exports all TblTPoDocs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblTPoDocs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblTPoDocs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblTPoDoc.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}