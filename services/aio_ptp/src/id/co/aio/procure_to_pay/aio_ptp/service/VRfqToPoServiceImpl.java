/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqToPo;


/**
 * ServiceImpl object for domain model class VRfqToPo.
 *
 * @see VRfqToPo
 */
@Service("aio_ptp.VRfqToPoService")
@Validated
@EntityService(entityClass = VRfqToPo.class, serviceId = "aio_ptp")
public class VRfqToPoServiceImpl implements VRfqToPoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqToPoServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqToPoDao")
    private WMGenericDao<VRfqToPo, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqToPo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqToPo create(VRfqToPo vrfqToPo) {
        LOGGER.debug("Creating a new VRfqToPo with information: {}", vrfqToPo);

        VRfqToPo vrfqToPoCreated = this.wmGenericDao.create(vrfqToPo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqToPoCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqToPo getById(Integer vrfqtopoId) {
        LOGGER.debug("Finding VRfqToPo by id: {}", vrfqtopoId);
        return this.wmGenericDao.findById(vrfqtopoId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqToPo findById(Integer vrfqtopoId) {
        LOGGER.debug("Finding VRfqToPo by id: {}", vrfqtopoId);
        try {
            return this.wmGenericDao.findById(vrfqtopoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqToPo found with id: {}", vrfqtopoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqToPo> findByMultipleIds(List<Integer> vrfqtopoIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqToPos by ids: {}", vrfqtopoIds);

        return this.wmGenericDao.findByMultipleIds(vrfqtopoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqToPo update(VRfqToPo vrfqToPo) {
        LOGGER.debug("Updating VRfqToPo with information: {}", vrfqToPo);

        this.wmGenericDao.update(vrfqToPo);
        this.wmGenericDao.refresh(vrfqToPo);

        return vrfqToPo;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqToPo partialUpdate(Integer vrfqtopoId, Map<String, Object>vrfqToPoPatch) {
        LOGGER.debug("Partially Updating the VRfqToPo with id: {}", vrfqtopoId);

        VRfqToPo vrfqToPo = getById(vrfqtopoId);

        try {
            ObjectReader vrfqToPoReader = this.objectMapper.reader().forType(VRfqToPo.class).withValueToUpdate(vrfqToPo);
            vrfqToPo = vrfqToPoReader.readValue(this.objectMapper.writeValueAsString(vrfqToPoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqToPoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqToPo = update(vrfqToPo);

        return vrfqToPo;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqToPo delete(Integer vrfqtopoId) {
        LOGGER.debug("Deleting VRfqToPo with id: {}", vrfqtopoId);
        VRfqToPo deleted = this.wmGenericDao.findById(vrfqtopoId);
        if (deleted == null) {
            LOGGER.debug("No VRfqToPo found with id: {}", vrfqtopoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqToPo.class.getSimpleName(), vrfqtopoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqToPo vrfqToPo) {
        LOGGER.debug("Deleting VRfqToPo with {}", vrfqToPo);
        this.wmGenericDao.delete(vrfqToPo);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqToPo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqToPos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqToPo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqToPos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqToPo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqToPo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}