/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPrLineItem;
import id.co.aio.procure_to_pay.aio_ptp.TblTRfqLiStatus;


/**
 * ServiceImpl object for domain model class TblTPrLineItem.
 *
 * @see TblTPrLineItem
 */
@Service("aio_ptp.TblTPrLineItemService")
@Validated
@EntityService(entityClass = TblTPrLineItem.class, serviceId = "aio_ptp")
public class TblTPrLineItemServiceImpl implements TblTPrLineItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPrLineItemServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTRfqLiStatusService")
    private TblTRfqLiStatusService tblTRfqLiStatusService;

    @Autowired
    @Qualifier("aio_ptp.TblTPrLineItemDao")
    private WMGenericDao<TblTPrLineItem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTPrLineItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPrLineItem create(TblTPrLineItem tblTprLineItem) {
        LOGGER.debug("Creating a new TblTPrLineItem with information: {}", tblTprLineItem);

        TblTPrLineItem tblTprLineItemCreated = this.wmGenericDao.create(tblTprLineItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTprLineItemCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPrLineItem getById(Integer tbltprlineitemId) {
        LOGGER.debug("Finding TblTPrLineItem by id: {}", tbltprlineitemId);
        return this.wmGenericDao.findById(tbltprlineitemId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPrLineItem findById(Integer tbltprlineitemId) {
        LOGGER.debug("Finding TblTPrLineItem by id: {}", tbltprlineitemId);
        try {
            return this.wmGenericDao.findById(tbltprlineitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTPrLineItem found with id: {}", tbltprlineitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTPrLineItem> findByMultipleIds(List<Integer> tbltprlineitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTPrLineItems by ids: {}", tbltprlineitemIds);

        return this.wmGenericDao.findByMultipleIds(tbltprlineitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTPrLineItem update(TblTPrLineItem tblTprLineItem) {
        LOGGER.debug("Updating TblTPrLineItem with information: {}", tblTprLineItem);

        this.wmGenericDao.update(tblTprLineItem);
        this.wmGenericDao.refresh(tblTprLineItem);

        return tblTprLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPrLineItem partialUpdate(Integer tbltprlineitemId, Map<String, Object>tblTprLineItemPatch) {
        LOGGER.debug("Partially Updating the TblTPrLineItem with id: {}", tbltprlineitemId);

        TblTPrLineItem tblTprLineItem = getById(tbltprlineitemId);

        try {
            ObjectReader tblTprLineItemReader = this.objectMapper.reader().forType(TblTPrLineItem.class).withValueToUpdate(tblTprLineItem);
            tblTprLineItem = tblTprLineItemReader.readValue(this.objectMapper.writeValueAsString(tblTprLineItemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTprLineItemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTprLineItem = update(tblTprLineItem);

        return tblTprLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPrLineItem delete(Integer tbltprlineitemId) {
        LOGGER.debug("Deleting TblTPrLineItem with id: {}", tbltprlineitemId);
        TblTPrLineItem deleted = this.wmGenericDao.findById(tbltprlineitemId);
        if (deleted == null) {
            LOGGER.debug("No TblTPrLineItem found with id: {}", tbltprlineitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTPrLineItem.class.getSimpleName(), tbltprlineitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTPrLineItem tblTprLineItem) {
        LOGGER.debug("Deleting TblTPrLineItem with {}", tblTprLineItem);
        this.wmGenericDao.delete(tblTprLineItem);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPrLineItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTPrLineItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPrLineItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTPrLineItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPrLineItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPrLineItem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTRfqLiStatus> findAssociatedTblTrfqLiStatuses(Integer pliId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTrfqLiStatuses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTprLineItem.pliId = '" + pliId + "'");

        return tblTRfqLiStatusService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTRfqLiStatusService instance
     */
    protected void setTblTRfqLiStatusService(TblTRfqLiStatusService service) {
        this.tblTRfqLiStatusService = service;
    }

}