/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblPbAttachment;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;
import id.co.aio.procure_to_pay.aio_ptp.TblTProposalBudget;

/**
 * Service object for domain model class {@link TblTProposalBudget}.
 */
public interface TblTProposalBudgetService {

    /**
     * Creates a new TblTProposalBudget. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTProposalBudget if any.
     *
     * @param tblTproposalBudget Details of the TblTProposalBudget to be created; value cannot be null.
     * @return The newly created TblTProposalBudget.
     */
    TblTProposalBudget create(@Valid TblTProposalBudget tblTproposalBudget);


	/**
     * Returns TblTProposalBudget by given id if exists.
     *
     * @param tbltproposalbudgetId The id of the TblTProposalBudget to get; value cannot be null.
     * @return TblTProposalBudget associated with the given tbltproposalbudgetId.
	 * @throws EntityNotFoundException If no TblTProposalBudget is found.
     */
    TblTProposalBudget getById(Integer tbltproposalbudgetId);

    /**
     * Find and return the TblTProposalBudget by given id if exists, returns null otherwise.
     *
     * @param tbltproposalbudgetId The id of the TblTProposalBudget to get; value cannot be null.
     * @return TblTProposalBudget associated with the given tbltproposalbudgetId.
     */
    TblTProposalBudget findById(Integer tbltproposalbudgetId);

	/**
     * Find and return the list of TblTProposalBudgets by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tbltproposalbudgetIds The id's of the TblTProposalBudget to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblTProposalBudgets associated with the given tbltproposalbudgetIds.
     */
    List<TblTProposalBudget> findByMultipleIds(List<Integer> tbltproposalbudgetIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblTProposalBudget. It replaces all fields of the existing TblTProposalBudget with the given tblTproposalBudget.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTProposalBudget if any.
     *
     * @param tblTproposalBudget The details of the TblTProposalBudget to be updated; value cannot be null.
     * @return The updated TblTProposalBudget.
     * @throws EntityNotFoundException if no TblTProposalBudget is found with given input.
     */
    TblTProposalBudget update(@Valid TblTProposalBudget tblTproposalBudget);


    /**
     * Partially updates the details of an existing TblTProposalBudget. It updates only the
     * fields of the existing TblTProposalBudget which are passed in the tblTproposalBudgetPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTProposalBudget if any.
     *
     * @param tbltproposalbudgetId The id of the TblTProposalBudget to be deleted; value cannot be null.
     * @param tblTproposalBudgetPatch The partial data of TblTProposalBudget which is supposed to be updated; value cannot be null.
     * @return The updated TblTProposalBudget.
     * @throws EntityNotFoundException if no TblTProposalBudget is found with given input.
     */
    TblTProposalBudget partialUpdate(Integer tbltproposalbudgetId, Map<String, Object> tblTproposalBudgetPatch);

    /**
     * Deletes an existing TblTProposalBudget with the given id.
     *
     * @param tbltproposalbudgetId The id of the TblTProposalBudget to be deleted; value cannot be null.
     * @return The deleted TblTProposalBudget.
     * @throws EntityNotFoundException if no TblTProposalBudget found with the given id.
     */
    TblTProposalBudget delete(Integer tbltproposalbudgetId);

    /**
     * Deletes an existing TblTProposalBudget with the given object.
     *
     * @param tblTproposalBudget The instance of the TblTProposalBudget to be deleted; value cannot be null.
     */
    void delete(TblTProposalBudget tblTproposalBudget);

    /**
     * Find all TblTProposalBudgets matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTProposalBudgets.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblTProposalBudget> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblTProposalBudgets matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTProposalBudgets.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTProposalBudget> findAll(String query, Pageable pageable);

    /**
     * Exports all TblTProposalBudgets matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblTProposalBudgets matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblTProposalBudgets in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblTProposalBudget.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblPbAttachments for given TblTProposalBudget id.
     *
     * @param pbId value of pbId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblPbAttachment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblPbAttachment> findAssociatedTblPbAttachments(Integer pbId, Pageable pageable);

    /*
     * Returns the associated tblTprs for given TblTProposalBudget id.
     *
     * @param pbId value of pbId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTPr instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTPr> findAssociatedTblTprs(Integer pbId, Pageable pageable);

}