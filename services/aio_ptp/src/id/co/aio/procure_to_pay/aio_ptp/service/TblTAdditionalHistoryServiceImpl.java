/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTAdditionalHistory;


/**
 * ServiceImpl object for domain model class TblTAdditionalHistory.
 *
 * @see TblTAdditionalHistory
 */
@Service("aio_ptp.TblTAdditionalHistoryService")
@Validated
@EntityService(entityClass = TblTAdditionalHistory.class, serviceId = "aio_ptp")
public class TblTAdditionalHistoryServiceImpl implements TblTAdditionalHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTAdditionalHistoryServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTAdditionalHistoryDao")
    private WMGenericDao<TblTAdditionalHistory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTAdditionalHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalHistory create(TblTAdditionalHistory tblTadditionalHistory) {
        LOGGER.debug("Creating a new TblTAdditionalHistory with information: {}", tblTadditionalHistory);

        TblTAdditionalHistory tblTadditionalHistoryCreated = this.wmGenericDao.create(tblTadditionalHistory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTadditionalHistoryCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalHistory getById(Integer tbltadditionalhistoryId) {
        LOGGER.debug("Finding TblTAdditionalHistory by id: {}", tbltadditionalhistoryId);
        return this.wmGenericDao.findById(tbltadditionalhistoryId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalHistory findById(Integer tbltadditionalhistoryId) {
        LOGGER.debug("Finding TblTAdditionalHistory by id: {}", tbltadditionalhistoryId);
        try {
            return this.wmGenericDao.findById(tbltadditionalhistoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTAdditionalHistory found with id: {}", tbltadditionalhistoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTAdditionalHistory> findByMultipleIds(List<Integer> tbltadditionalhistoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTAdditionalHistories by ids: {}", tbltadditionalhistoryIds);

        return this.wmGenericDao.findByMultipleIds(tbltadditionalhistoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalHistory update(TblTAdditionalHistory tblTadditionalHistory) {
        LOGGER.debug("Updating TblTAdditionalHistory with information: {}", tblTadditionalHistory);

        this.wmGenericDao.update(tblTadditionalHistory);
        this.wmGenericDao.refresh(tblTadditionalHistory);

        return tblTadditionalHistory;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalHistory partialUpdate(Integer tbltadditionalhistoryId, Map<String, Object>tblTadditionalHistoryPatch) {
        LOGGER.debug("Partially Updating the TblTAdditionalHistory with id: {}", tbltadditionalhistoryId);

        TblTAdditionalHistory tblTadditionalHistory = getById(tbltadditionalhistoryId);

        try {
            ObjectReader tblTadditionalHistoryReader = this.objectMapper.reader().forType(TblTAdditionalHistory.class).withValueToUpdate(tblTadditionalHistory);
            tblTadditionalHistory = tblTadditionalHistoryReader.readValue(this.objectMapper.writeValueAsString(tblTadditionalHistoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTadditionalHistoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTadditionalHistory = update(tblTadditionalHistory);

        return tblTadditionalHistory;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTAdditionalHistory delete(Integer tbltadditionalhistoryId) {
        LOGGER.debug("Deleting TblTAdditionalHistory with id: {}", tbltadditionalhistoryId);
        TblTAdditionalHistory deleted = this.wmGenericDao.findById(tbltadditionalhistoryId);
        if (deleted == null) {
            LOGGER.debug("No TblTAdditionalHistory found with id: {}", tbltadditionalhistoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTAdditionalHistory.class.getSimpleName(), tbltadditionalhistoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTAdditionalHistory tblTadditionalHistory) {
        LOGGER.debug("Deleting TblTAdditionalHistory with {}", tblTadditionalHistory);
        this.wmGenericDao.delete(tblTadditionalHistory);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTAdditionalHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTAdditionalHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTAdditionalHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTAdditionalHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTAdditionalHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTAdditionalHistory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}