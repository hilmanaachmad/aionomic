/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VGrTrackingVendor;
import id.co.aio.procure_to_pay.aio_ptp.service.VGrTrackingVendorService;


/**
 * Controller object for domain model class VGrTrackingVendor.
 * @see VGrTrackingVendor
 */
@RestController("aio_ptp.VGrTrackingVendorController")
@Api(value = "VGrTrackingVendorController", description = "Exposes APIs to work with VGrTrackingVendor resource.")
@RequestMapping("/aio_ptp/VGrTrackingVendor")
public class VGrTrackingVendorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrTrackingVendorController.class);

    @Autowired
	@Qualifier("aio_ptp.VGrTrackingVendorService")
	private VGrTrackingVendorService vGrTrackingVendorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VGrTrackingVendor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingVendor createVGrTrackingVendor(@RequestBody VGrTrackingVendor vgrTrackingVendor) {
		LOGGER.debug("Create VGrTrackingVendor with information: {}" , vgrTrackingVendor);

		vgrTrackingVendor = vGrTrackingVendorService.create(vgrTrackingVendor);
		LOGGER.debug("Created VGrTrackingVendor with information: {}" , vgrTrackingVendor);

	    return vgrTrackingVendor;
	}

    @ApiOperation(value = "Returns the VGrTrackingVendor instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingVendor getVGrTrackingVendor(@PathVariable("idPoLineItem") Integer idPoLineItem) {
        LOGGER.debug("Getting VGrTrackingVendor with id: {}" , idPoLineItem);

        VGrTrackingVendor foundVGrTrackingVendor = vGrTrackingVendorService.getById(idPoLineItem);
        LOGGER.debug("VGrTrackingVendor details with id: {}" , foundVGrTrackingVendor);

        return foundVGrTrackingVendor;
    }

    @ApiOperation(value = "Updates the VGrTrackingVendor instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingVendor editVGrTrackingVendor(@PathVariable("idPoLineItem") Integer idPoLineItem, @RequestBody VGrTrackingVendor vgrTrackingVendor) {
        LOGGER.debug("Editing VGrTrackingVendor with id: {}" , vgrTrackingVendor.getIdPoLineItem());

        vgrTrackingVendor.setIdPoLineItem(idPoLineItem);
        vgrTrackingVendor = vGrTrackingVendorService.update(vgrTrackingVendor);
        LOGGER.debug("VGrTrackingVendor details with id: {}" , vgrTrackingVendor);

        return vgrTrackingVendor;
    }
    
    @ApiOperation(value = "Partially updates the VGrTrackingVendor instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingVendor patchVGrTrackingVendor(@PathVariable("idPoLineItem") Integer idPoLineItem, @RequestBody @MapTo(VGrTrackingVendor.class) Map<String, Object> vgrTrackingVendorPatch) {
        LOGGER.debug("Partially updating VGrTrackingVendor with id: {}" , idPoLineItem);

        VGrTrackingVendor vgrTrackingVendor = vGrTrackingVendorService.partialUpdate(idPoLineItem, vgrTrackingVendorPatch);
        LOGGER.debug("VGrTrackingVendor details after partial update: {}" , vgrTrackingVendor);

        return vgrTrackingVendor;
    }

    @ApiOperation(value = "Deletes the VGrTrackingVendor instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVGrTrackingVendor(@PathVariable("idPoLineItem") Integer idPoLineItem) {
        LOGGER.debug("Deleting VGrTrackingVendor with id: {}" , idPoLineItem);

        VGrTrackingVendor deletedVGrTrackingVendor = vGrTrackingVendorService.delete(idPoLineItem);

        return deletedVGrTrackingVendor != null;
    }

    /**
     * @deprecated Use {@link #findVGrTrackingVendors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VGrTrackingVendor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTrackingVendor> searchVGrTrackingVendorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VGrTrackingVendors list by query filter:{}", (Object) queryFilters);
        return vGrTrackingVendorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrTrackingVendor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTrackingVendor> findVGrTrackingVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrTrackingVendors list by filter:", query);
        return vGrTrackingVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrTrackingVendor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTrackingVendor> filterVGrTrackingVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrTrackingVendors list by filter", query);
        return vGrTrackingVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVGrTrackingVendors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vGrTrackingVendorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVGrTrackingVendorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VGrTrackingVendor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vGrTrackingVendorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VGrTrackingVendor instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVGrTrackingVendors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VGrTrackingVendors");
		return vGrTrackingVendorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVGrTrackingVendorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vGrTrackingVendorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VGrTrackingVendorService instance
	 */
	protected void setVGrTrackingVendorService(VGrTrackingVendorService service) {
		this.vGrTrackingVendorService = service;
	}

}