/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMCompany;
import id.co.aio.procure_to_pay.aio_ptp.TblMIo;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetHeader;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMCompanyService;


/**
 * Controller object for domain model class TblMCompany.
 * @see TblMCompany
 */
@RestController("aio_ptp.TblMCompanyController")
@Api(value = "TblMCompanyController", description = "Exposes APIs to work with TblMCompany resource.")
@RequestMapping("/aio_ptp/TblMCompany")
public class TblMCompanyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMCompanyController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMCompanyService")
	private TblMCompanyService tblMCompanyService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMCompany instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMCompany createTblMCompany(@RequestBody TblMCompany tblMcompany) {
		LOGGER.debug("Create TblMCompany with information: {}" , tblMcompany);

		tblMcompany = tblMCompanyService.create(tblMcompany);
		LOGGER.debug("Created TblMCompany with information: {}" , tblMcompany);

	    return tblMcompany;
	}

    @ApiOperation(value = "Returns the TblMCompany instance associated with the given id.")
    @RequestMapping(value = "/{cid:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMCompany getTblMCompany(@PathVariable("cid") Integer cid) {
        LOGGER.debug("Getting TblMCompany with id: {}" , cid);

        TblMCompany foundTblMCompany = tblMCompanyService.getById(cid);
        LOGGER.debug("TblMCompany details with id: {}" , foundTblMCompany);

        return foundTblMCompany;
    }

    @ApiOperation(value = "Updates the TblMCompany instance associated with the given id.")
    @RequestMapping(value = "/{cid:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMCompany editTblMCompany(@PathVariable("cid") Integer cid, @RequestBody TblMCompany tblMcompany) {
        LOGGER.debug("Editing TblMCompany with id: {}" , tblMcompany.getCid());

        tblMcompany.setCid(cid);
        tblMcompany = tblMCompanyService.update(tblMcompany);
        LOGGER.debug("TblMCompany details with id: {}" , tblMcompany);

        return tblMcompany;
    }
    
    @ApiOperation(value = "Partially updates the TblMCompany instance associated with the given id.")
    @RequestMapping(value = "/{cid:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMCompany patchTblMCompany(@PathVariable("cid") Integer cid, @RequestBody @MapTo(TblMCompany.class) Map<String, Object> tblMcompanyPatch) {
        LOGGER.debug("Partially updating TblMCompany with id: {}" , cid);

        TblMCompany tblMcompany = tblMCompanyService.partialUpdate(cid, tblMcompanyPatch);
        LOGGER.debug("TblMCompany details after partial update: {}" , tblMcompany);

        return tblMcompany;
    }

    @ApiOperation(value = "Deletes the TblMCompany instance associated with the given id.")
    @RequestMapping(value = "/{cid:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMCompany(@PathVariable("cid") Integer cid) {
        LOGGER.debug("Deleting TblMCompany with id: {}" , cid);

        TblMCompany deletedTblMCompany = tblMCompanyService.delete(cid);

        return deletedTblMCompany != null;
    }

    /**
     * @deprecated Use {@link #findTblMCompanies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMCompany instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMCompany> searchTblMCompaniesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMCompanies list by query filter:{}", (Object) queryFilters);
        return tblMCompanyService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMCompany instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMCompany> findTblMCompanies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMCompanies list by filter:", query);
        return tblMCompanyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMCompany instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMCompany> filterTblMCompanies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMCompanies list by filter", query);
        return tblMCompanyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMCompanies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMCompanyService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMCompaniesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMCompany.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMCompanyService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMCompany instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMCompanies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMCompanies");
		return tblMCompanyService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMCompanyAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMCompanyService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{cid:.+}/tblMios", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblMios instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMIo> findAssociatedTblMios(@PathVariable("cid") Integer cid, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblMios");
        return tblMCompanyService.findAssociatedTblMios(cid, pageable);
    }

    @RequestMapping(value="/{cid:.+}/tblTbudgetHeaders", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTbudgetHeaders instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetHeader> findAssociatedTblTbudgetHeaders(@PathVariable("cid") Integer cid, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTbudgetHeaders");
        return tblMCompanyService.findAssociatedTblTbudgetHeaders(cid, pageable);
    }

    @RequestMapping(value="/{cid:.+}/tblTprs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTprs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPr> findAssociatedTblTprs(@PathVariable("cid") Integer cid, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTprs");
        return tblMCompanyService.findAssociatedTblTprs(cid, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMCompanyService instance
	 */
	protected void setTblMCompanyService(TblMCompanyService service) {
		this.tblMCompanyService = service;
	}

}