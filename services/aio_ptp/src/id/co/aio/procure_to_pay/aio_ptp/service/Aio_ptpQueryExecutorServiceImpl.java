/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import id.co.aio.procure_to_pay.aio_ptp.models.query.*;

@Service
public class Aio_ptpQueryExecutorServiceImpl implements Aio_ptpQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Aio_ptpQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("aio_ptpWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeGenerateRFQRef(GenerateRfqrefRequest generateRfqrefRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("rfqRef", generateRfqrefRequest.getRfqRef());
        params.put("rfqId", generateRfqrefRequest.getRfqId());

        return queryExecutor.executeNamedQueryForUpdate("generateRFQRef", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetBodbyDepartementIdResponse> executeGetBODbyDepartementId(List<Integer> departementId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("departementId", departementId);

        return queryExecutor.executeNamedQuery("getBODbyDepartementId", params, GetBodbyDepartementIdResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetBODbyDepartementId(List<Integer> departementId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("departementId", departementId);

        QueryProcedureInput<GetBodbyDepartementIdResponse> queryInput = new QueryProcedureInput<>("getBODbyDepartementId", params, GetBodbyDepartementIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeSendCheckerNotification(SendCheckerNotificationRequest sendCheckerNotificationRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("createdBy", sendCheckerNotificationRequest.getCreatedBy());

        return queryExecutor.executeNamedQueryForUpdate("sendCheckerNotification", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdate_userDepStatus(UpdateUserDepStatusRequest updateUserDepStatusRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("status", updateUserDepStatusRequest.getStatus());
        params.put("company_id", updateUserDepStatusRequest.getCompanyId());
        params.put("department_id", updateUserDepStatusRequest.getDepartmentId());

        return queryExecutor.executeNamedQueryForUpdate("update_userDepStatus", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetBudgetUploadListResponse> executeGetBudgetUploadList(String year, String company, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("year", year);
        params.put("company", company);

        return queryExecutor.executeNamedQuery("getBudgetUploadList", params, GetBudgetUploadListResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetBudgetUploadList(String year, String company, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("year", year);
        params.put("company", company);

        QueryProcedureInput<GetBudgetUploadListResponse> queryInput = new QueryProcedureInput<>("getBudgetUploadList", params, GetBudgetUploadListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeSetUserProfilePic(SetUserProfilePicRequest setUserProfilePicRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("imageUrl", setUserProfilePicRequest.getImageUrl());
        params.put("username", setUserProfilePicRequest.getUsername());

        return queryExecutor.executeNamedQueryForUpdate("setUserProfilePic", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QGetBudgetDetail2Response> executeQ_get_BudgetDetail2(String bhId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("bh_id", bhId);

        return queryExecutor.executeNamedQuery("q_get_BudgetDetail2", params, QGetBudgetDetail2Response.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_get_BudgetDetail2(String bhId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("bh_id", bhId);

        QueryProcedureInput<QGetBudgetDetail2Response> queryInput = new QueryProcedureInput<>("q_get_BudgetDetail2", params, QGetBudgetDetail2Response.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetDataDetailDoResponse> executeGetDataDetailDO(String idPo, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        return queryExecutor.executeNamedQuery("getDataDetailDO", params, GetDataDetailDoResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDataDetailDO(String idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        QueryProcedureInput<GetDataDetailDoResponse> queryInput = new QueryProcedureInput<>("getDataDetailDO", params, GetDataDetailDoResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQUpdateETAPOLineItem(QupdateEtapolineItemRequest qupdateEtapolineItemRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("eta", qupdateEtapolineItemRequest.getEta());
        params.put("id", qupdateEtapolineItemRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateETAPOLineItem", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeleteTaskListByParamId(DeleteTaskListByParamIdRequest deleteTaskListByParamIdRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("tlParamId", deleteTaskListByParamIdRequest.getTlParamId());
        params.put("tlType", deleteTaskListByParamIdRequest.getTlType());

        return queryExecutor.executeNamedQueryForUpdate("deleteTaskListByParamId", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QgetMapRoleAllResponse> executeQGetMapRoleAll(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetMapRoleAll", params, QgetMapRoleAllResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetMapRoleAll(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetMapRoleAllResponse> queryInput = new QueryProcedureInput<>("qGetMapRoleAll", params, QgetMapRoleAllResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeVendorPONotes(VendorPonotesRequest vendorPonotesRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("notes", vendorPonotesRequest.getNotes());
        params.put("idpo", vendorPonotesRequest.getIdpo());

        return queryExecutor.executeNamedQueryForUpdate("vendorPONotes", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeleteBudgetUpload(DeleteBudgetUploadRequest deleteBudgetUploadRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("buId", deleteBudgetUploadRequest.getBuId());

        return queryExecutor.executeNamedQueryForUpdate("deleteBudgetUpload", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeRFQVendorStatus(ChangeRfqvendorStatusRequest changeRfqvendorStatusRequest) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("rfqvCreatedAt", changeRfqvendorStatusRequest.getRfqvCreatedAt());
        params.put("rfqvModifiedBy", changeRfqvendorStatusRequest.getRfqvModifiedBy());
        params.put("rfqvModifiedAt", changeRfqvendorStatusRequest.getRfqvModifiedAt());
        params.put("rfqvStatus", changeRfqvendorStatusRequest.getRfqvStatus());
        params.put("rfqvId", changeRfqvendorStatusRequest.getRfqvId());

        return queryExecutor.executeNamedQueryForUpdate("changeRFQVendorStatus", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public GetUserRoleResponse executeGetUserRole(String username) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("username", username);

        return queryExecutor.executeNamedQuery("getUserRole", params, GetUserRoleResponse.class);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QMasterDepartmentResponse> executeQ_MasterDepartment(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("Q_MasterDepartment", params, QMasterDepartmentResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_MasterDepartment(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QMasterDepartmentResponse> queryInput = new QueryProcedureInput<>("Q_MasterDepartment", params, QMasterDepartmentResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeleteAttionalAttachment(Integer baId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("baId", baId);

        return queryExecutor.executeNamedQueryForUpdate("deleteAttionalAttachment", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<VmaterrialGroupPurchasingResponse> executeVMaterrialGroupPurchasing(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("vMaterrialGroupPurchasing", params, VmaterrialGroupPurchasingResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportVMaterrialGroupPurchasing(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        QueryProcedureInput<VmaterrialGroupPurchasingResponse> queryInput = new QueryProcedureInput<>("vMaterrialGroupPurchasing", params, VmaterrialGroupPurchasingResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetUnseenNotificationResponse> executeGetUnseenNotification(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getUnseenNotification", params, GetUnseenNotificationResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetUnseenNotification(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetUnseenNotificationResponse> queryInput = new QueryProcedureInput<>("getUnseenNotification", params, GetUnseenNotificationResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetRfgvendorTrackingResponse> executeGetRFGVendorTracking(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getRFGVendorTracking", params, GetRfgvendorTrackingResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRFGVendorTracking(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetRfgvendorTrackingResponse> queryInput = new QueryProcedureInput<>("getRFGVendorTracking", params, GetRfgvendorTrackingResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetRoleUserMapListResponse> executeGetRoleUserMapList(String searchRoleTitle, String searchAssignee, String searchStatus, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("searchRoleTitle", searchRoleTitle);
        params.put("searchAssignee", searchAssignee);
        params.put("searchStatus", searchStatus);

        return queryExecutor.executeNamedQuery("getRoleUserMapList", params, GetRoleUserMapListResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRoleUserMapList(String searchRoleTitle, String searchAssignee, String searchStatus, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("searchRoleTitle", searchRoleTitle);
        params.put("searchAssignee", searchAssignee);
        params.put("searchStatus", searchStatus);

        QueryProcedureInput<GetRoleUserMapListResponse> queryInput = new QueryProcedureInput<>("getRoleUserMapList", params, GetRoleUserMapListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetMappingToUserResponse> executeGetMappingToUser(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getMappingToUser", params, GetMappingToUserResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetMappingToUser(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetMappingToUserResponse> queryInput = new QueryProcedureInput<>("getMappingToUser", params, GetMappingToUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QAccTypeBudgetHmapDepUserResponse> executeQ_AccTypeBudgetHMapDepUser(String emp, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        return queryExecutor.executeNamedQuery("q_AccTypeBudgetHMapDepUser", params, QAccTypeBudgetHmapDepUserResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_AccTypeBudgetHMapDepUser(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        QueryProcedureInput<QAccTypeBudgetHmapDepUserResponse> queryInput = new QueryProcedureInput<>("q_AccTypeBudgetHMapDepUser", params, QAccTypeBudgetHmapDepUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdatePurchaseRequest(UpdatePurchaseRequestRequest updatePurchaseRequestRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("prStatus", updatePurchaseRequestRequest.getPrStatus());
        params.put("prId", updatePurchaseRequestRequest.getPrId());

        return queryExecutor.executeNamedQueryForUpdate("updatePurchaseRequest", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQSetStatusGRLineItemByPRLineHeader(QsetStatusGrlineItemByPrlineHeaderRequest qsetStatusGrlineItemByPrlineHeaderRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", qsetStatusGrlineItemByPrlineHeaderRequest.getStatus());
        params.put("id_pr_line_item_header", qsetStatusGrlineItemByPrlineHeaderRequest.getIdPrLineItemHeader());

        return queryExecutor.executeNamedQueryForUpdate("QSetStatusGRLineItemByPRLineHeader", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdate_userMapStatus(UpdateUserMapStatusRequest updateUserMapStatusRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("status", updateUserMapStatusRequest.getStatus());
        params.put("from_date", updateUserMapStatusRequest.getFromDate());
        params.put("to_date", updateUserMapStatusRequest.getToDate());
        params.put("role_id", updateUserMapStatusRequest.getRoleId());

        return queryExecutor.executeNamedQueryForUpdate("update_userMapStatus", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<OrganizationMapResponse> executeOrganizationMap(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("OrganizationMap", params, OrganizationMapResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportOrganizationMap(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<OrganizationMapResponse> queryInput = new QueryProcedureInput<>("OrganizationMap", params, OrganizationMapResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQInsertBudgetDetail(QinsertBudgetDetailRequest qinsertBudgetDetailRequest) {
        Map<String, Object> params = new HashMap<>(12);

        params.put("bhId", qinsertBudgetDetailRequest.getBhId());
        params.put("bdAdjustment", qinsertBudgetDetailRequest.getBdAdjustment());
        params.put("bdAdjustmentType", qinsertBudgetDetailRequest.getBdAdjustmentType());
        params.put("bdDocumentId", qinsertBudgetDetailRequest.getBdDocumentId());
        params.put("bdRemarks", qinsertBudgetDetailRequest.getBdRemarks());
        params.put("createdBy", qinsertBudgetDetailRequest.getCreatedBy());
        params.put("createdAt", qinsertBudgetDetailRequest.getCreatedAt());
        params.put("rCatId", qinsertBudgetDetailRequest.getRcatId());
        params.put("ubCatId", qinsertBudgetDetailRequest.getUbCatId());
        params.put("coaId", qinsertBudgetDetailRequest.getCoaId());
        params.put("addDocId", qinsertBudgetDetailRequest.getAddDocId());
        params.put("addDocType", qinsertBudgetDetailRequest.getAddDocType());

        return queryExecutor.executeNamedQueryForUpdate("qInsertBudgetDetail", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetRfqparamByDepartmentResponse> executeGetRFQParamByDepartment(String userDepartment, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userDepartment", userDepartment);

        return queryExecutor.executeNamedQuery("getRFQParamByDepartment", params, GetRfqparamByDepartmentResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRFQParamByDepartment(String userDepartment, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userDepartment", userDepartment);

        QueryProcedureInput<GetRfqparamByDepartmentResponse> queryInput = new QueryProcedureInput<>("getRFQParamByDepartment", params, GetRfqparamByDepartmentResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdateStatusPO(UpdateStatusPoRequest updateStatusPoRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", updateStatusPoRequest.getStatus());
        params.put("idpo", updateStatusPoRequest.getIdpo());

        return queryExecutor.executeNamedQueryForUpdate("updateStatusPO", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeRGQ(ChangeRgqRequest changeRgqRequest) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("rfqModifiedBy", changeRgqRequest.getRfqModifiedBy());
        params.put("rfqModifiedAt", changeRgqRequest.getRfqModifiedAt());
        params.put("rfqStatus", changeRgqRequest.getRfqStatus());
        params.put("rfqDelAttachment", changeRgqRequest.getRfqDelAttachment());
        params.put("rfqSumAttachment", changeRgqRequest.getRfqSumAttachment());
        params.put("rfqId", changeRgqRequest.getRfqId());

        return queryExecutor.executeNamedQueryForUpdate("changeRGQ", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeTaskListUserId(ChangeTaskListUserIdRequest changeTaskListUserIdRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("userId", changeTaskListUserIdRequest.getUserId());
        params.put("isBod", changeTaskListUserIdRequest.getIsBod());
        params.put("tlParamId", changeTaskListUserIdRequest.getTlParamId());
        params.put("tlType", changeTaskListUserIdRequest.getTlType());

        return queryExecutor.executeNamedQueryForUpdate("changeTaskListUserId", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeReminderTasklistQuery(ReminderTasklistQueryRequest reminderTasklistQueryRequest) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQueryForUpdate("reminderTasklistQuery", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeRFQVendorStatusWithoutCreated(ChangeRfqvendorStatusWithoutCreatedRequest changeRfqvendorStatusWithoutCreatedRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("rfqvModifiedBy", changeRfqvendorStatusWithoutCreatedRequest.getRfqvModifiedBy());
        params.put("rfqvModifiedAt", changeRfqvendorStatusWithoutCreatedRequest.getRfqvModifiedAt());
        params.put("rfqvStatus", changeRfqvendorStatusWithoutCreatedRequest.getRfqvStatus());
        params.put("rfqvId", changeRfqvendorStatusWithoutCreatedRequest.getRfqvId());

        return queryExecutor.executeNamedQueryForUpdate("changeRFQVendorStatusWithoutCreated", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetDelegatedRolesResponse> executeGetDelegatedRoles(String userid, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userid", userid);

        return queryExecutor.executeNamedQuery("getDelegatedRoles", params, GetDelegatedRolesResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDelegatedRoles(String userid, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userid", userid);

        QueryProcedureInput<GetDelegatedRolesResponse> queryInput = new QueryProcedureInput<>("getDelegatedRoles", params, GetDelegatedRolesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QBrandMappingToBudgetDepUsrMapResponse> executeQ_BrandMappingToBudgetDepUsrMap(String emp, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        return queryExecutor.executeNamedQuery("q_BrandMappingToBudgetDepUsrMap", params, QBrandMappingToBudgetDepUsrMapResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_BrandMappingToBudgetDepUsrMap(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        QueryProcedureInput<QBrandMappingToBudgetDepUsrMapResponse> queryInput = new QueryProcedureInput<>("q_BrandMappingToBudgetDepUsrMap", params, QBrandMappingToBudgetDepUsrMapResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetPurchaseRequestResponse> executeGetPurchaseRequest(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getPurchaseRequest", params, GetPurchaseRequestResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPurchaseRequest(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetPurchaseRequestResponse> queryInput = new QueryProcedureInput<>("getPurchaseRequest", params, GetPurchaseRequestResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetDataPodetailResponse> executeGetDataPODetail(String idPo, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        return queryExecutor.executeNamedQuery("getDataPODetail", params, GetDataPodetailResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDataPODetail(String idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        QueryProcedureInput<GetDataPodetailResponse> queryInput = new QueryProcedureInput<>("getDataPODetail", params, GetDataPodetailResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetMappingToUser2Response> executeGetMappingToUser2(String company, String departrment, String assignee, String status, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("company", company);
        params.put("departrment", departrment);
        params.put("assignee", assignee);
        params.put("status", status);

        return queryExecutor.executeNamedQuery("getMappingToUser2", params, GetMappingToUser2Response.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetMappingToUser2(String company, String departrment, String assignee, String status, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("company", company);
        params.put("departrment", departrment);
        params.put("assignee", assignee);
        params.put("status", status);

        QueryProcedureInput<GetMappingToUser2Response> queryInput = new QueryProcedureInput<>("getMappingToUser2", params, GetMappingToUser2Response.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executePrChangeStatus(PrChangeStatusRequest prChangeStatusRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("prStatus", prChangeStatusRequest.getPrStatus());
        params.put("prModifiedAt", prChangeStatusRequest.getPrModifiedAt());
        params.put("prModifiedBy", prChangeStatusRequest.getPrModifiedBy());
        params.put("prId", prChangeStatusRequest.getPrId());

        return queryExecutor.executeNamedQueryForUpdate("prChangeStatus", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetPolineitemResponse> executeGetPOLineitem(String idPo, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        return queryExecutor.executeNamedQuery("getPOLineitem", params, GetPolineitemResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPOLineitem(String idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        QueryProcedureInput<GetPolineitemResponse> queryInput = new QueryProcedureInput<>("getPOLineitem", params, GetPolineitemResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QdataPoheaderResponse> executeQDataPOHeader(Integer idPo, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        return queryExecutor.executeNamedQuery("qDataPOHeader", params, QdataPoheaderResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQDataPOHeader(Integer idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_po", idPo);

        QueryProcedureInput<QdataPoheaderResponse> queryInput = new QueryProcedureInput<>("qDataPOHeader", params, QdataPoheaderResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetDeptDivCostCenterAllResponse> executeGet_DeptDivCostCenterAll(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("get_DeptDivCostCenterAll", params, GetDeptDivCostCenterAllResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGet_DeptDivCostCenterAll(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetDeptDivCostCenterAllResponse> queryInput = new QueryProcedureInput<>("get_DeptDivCostCenterAll", params, GetDeptDivCostCenterAllResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeRFQSetNull(ChangeRfqsetNullRequest changeRfqsetNullRequest) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("rfqvCreatedAt", changeRfqsetNullRequest.getRfqvCreatedAt());
        params.put("rfqvModifiedBy", changeRfqsetNullRequest.getRfqvModifiedBy());
        params.put("rfqvModifiedAt", changeRfqsetNullRequest.getRfqvModifiedAt());
        params.put("rfqvStatus", changeRfqsetNullRequest.getRfqvStatus());
        params.put("rfqvVendorCode", changeRfqsetNullRequest.getRfqvVendorCode());
        params.put("rfqvVendorEmail", changeRfqsetNullRequest.getRfqvVendorEmail());
        params.put("rfqvVendorPhone", changeRfqsetNullRequest.getRfqvVendorPhone());
        params.put("rfqvVendorName", changeRfqsetNullRequest.getRfqvVendorName());
        params.put("rfqvVendorAddress", changeRfqsetNullRequest.getRfqvVendorAddress());
        params.put("rfqvVendorTitle", changeRfqsetNullRequest.getRfqvVendorTitle());
        params.put("rfqvId", changeRfqsetNullRequest.getRfqvId());

        return queryExecutor.executeNamedQueryForUpdate("changeRFQSetNull", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QCompanyResponse> executeQ_company(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("q_company", params, QCompanyResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_company(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QCompanyResponse> queryInput = new QueryProcedureInput<>("q_company", params, QCompanyResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQBDReversalLineItem(QbdreversalLineItemRequest qbdreversalLineItemRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("userId", qbdreversalLineItemRequest.getUserId());
        params.put("category", qbdreversalLineItemRequest.getCategory());
        params.put("reason", qbdreversalLineItemRequest.getReason());
        params.put("lineItemID", qbdreversalLineItemRequest.getLineItemId());

        return queryExecutor.executeNamedQueryForUpdate("qBDReversalLineItem", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public CountUnseenInboxResponse executeCountUnseenInbox() {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("countUnseenInbox", params, CountUnseenInboxResponse.class);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public GetCompanyRfqResponse executeGetCompanyRFQ(String rfqvid) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("rfqvid", rfqvid);

        return queryExecutor.executeNamedQuery("getCompanyRFQ", params, GetCompanyRfqResponse.class);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetDelegationHistoryResponse> executeGetDelegationHistory(String roleCode, String fromEmployee, String toEmployee, String reason, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("roleCode", roleCode);
        params.put("fromEmployee", fromEmployee);
        params.put("toEmployee", toEmployee);
        params.put("reason", reason);

        return queryExecutor.executeNamedQuery("getDelegationHistory", params, GetDelegationHistoryResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDelegationHistory(String roleCode, String fromEmployee, String toEmployee, String reason, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("roleCode", roleCode);
        params.put("fromEmployee", fromEmployee);
        params.put("toEmployee", toEmployee);
        params.put("reason", reason);

        QueryProcedureInput<GetDelegationHistoryResponse> queryInput = new QueryProcedureInput<>("getDelegationHistory", params, GetDelegationHistoryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeleteBudgetUploadAdjustment(DeleteBudgetUploadAdjustmentRequest deleteBudgetUploadAdjustmentRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("buId", deleteBudgetUploadAdjustmentRequest.getBuId());

        return queryExecutor.executeNamedQueryForUpdate("deleteBudgetUploadAdjustment", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executePrLineItemChangeCaoAsset(PrLineItemChangeCaoAssetRequest prLineItemChangeCaoAssetRequest) {
        Map<String, Object> params = new HashMap<>(8);

        params.put("pliModifiedAt", prLineItemChangeCaoAssetRequest.getPliModifiedAt());
        params.put("pliModifiedBy", prLineItemChangeCaoAssetRequest.getPliModifiedBy());
        params.put("pliCoa", prLineItemChangeCaoAssetRequest.getPliCoa());
        params.put("assetNumber", prLineItemChangeCaoAssetRequest.getAssetNumber());
        params.put("bhId", prLineItemChangeCaoAssetRequest.getBhId());
        params.put("pliCostCenterId", prLineItemChangeCaoAssetRequest.getPliCostCenterId());
        params.put("pliCostCenterTitle", prLineItemChangeCaoAssetRequest.getPliCostCenterTitle());
        params.put("pliId", prLineItemChangeCaoAssetRequest.getPliId());

        return queryExecutor.executeNamedQueryForUpdate("prLineItemChangeCaoAsset", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeStatusAdditional(ChangeStatusAdditionalRequest changeStatusAdditionalRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", changeStatusAdditionalRequest.getStatus());
        params.put("baId", changeStatusAdditionalRequest.getBaId());

        return queryExecutor.executeNamedQueryForUpdate("changeStatusAdditional", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdatePurchaseRequestLineItem(UpdatePurchaseRequestLineItemRequest updatePurchaseRequestLineItemRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pli_status", updatePurchaseRequestLineItemRequest.getPliStatus());
        params.put("pli_id", updatePurchaseRequestLineItemRequest.getPliId());

        return queryExecutor.executeNamedQueryForUpdate("updatePurchaseRequestLineItem", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeletePODoc(String idPoHeader) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("idPoHeader", idPoHeader);

        return queryExecutor.executeNamedQueryForUpdate("deletePODoc", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QbudgetDetail2ExportResponse> executeQBudgetDetail2_export(String bhId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("bh_id", bhId);

        return queryExecutor.executeNamedQuery("qBudgetDetail2_export", params, QbudgetDetail2ExportResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQBudgetDetail2_export(String bhId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("bh_id", bhId);

        QueryProcedureInput<QbudgetDetail2ExportResponse> queryInput = new QueryProcedureInput<>("qBudgetDetail2_export", params, QbudgetDetail2ExportResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdateStatusRfq(UpdateStatusRfqRequest updateStatusRfqRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", updateStatusRfqRequest.getStatus());
        params.put("rlsId", updateStatusRfqRequest.getRlsId());

        return queryExecutor.executeNamedQueryForUpdate("updateStatusRfq", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetMasterRoleResponse> executeGetMasterRole(String roleTitle, String roleStatus, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("roleTitle", roleTitle);
        params.put("roleStatus", roleStatus);

        return queryExecutor.executeNamedQuery("getMasterRole", params, GetMasterRoleResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetMasterRole(String roleTitle, String roleStatus, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("roleTitle", roleTitle);
        params.put("roleStatus", roleStatus);

        QueryProcedureInput<GetMasterRoleResponse> queryInput = new QueryProcedureInput<>("getMasterRole", params, GetMasterRoleResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQ_changeRemarksPR_BD(QChangeRemarksPrBdRequest qchangeRemarksPrBdRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("bd_remarks", qchangeRemarksPrBdRequest.getBdRemarks());
        params.put("bd_additional_doc_id", qchangeRemarksPrBdRequest.getBdAdditionalDocId());

        return queryExecutor.executeNamedQueryForUpdate("q_changeRemarksPR_BD", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeTickInboxLastSeen(TickInboxLastSeenRequest tickInboxLastSeenRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("date", tickInboxLastSeenRequest.getDate());

        return queryExecutor.executeNamedQueryForUpdate("tickInboxLastSeen", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdatePO(UpdatePoRequest updatePoRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", updatePoRequest.getStatus());
        params.put("id", updatePoRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("updatePO", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeTickLastAccess(TickLastAccessRequest tickLastAccessRequest) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQueryForUpdate("tickLastAccess", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeTickNotificationLastSeen(TickNotificationLastSeenRequest tickNotificationLastSeenRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("date", tickNotificationLastSeenRequest.getDate());

        return queryExecutor.executeNamedQueryForUpdate("tickNotificationLastSeen", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QDepartmentMapUserResponse> executeQ_DepartmentMapUser(String emp, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        return queryExecutor.executeNamedQuery("q_DepartmentMapUser", params, QDepartmentMapUserResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_DepartmentMapUser(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        QueryProcedureInput<QDepartmentMapUserResponse> queryInput = new QueryProcedureInput<>("q_DepartmentMapUser", params, QDepartmentMapUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QCompanyUserLoginResponse> executeQ_CompanyUserLogin(String emp, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        return queryExecutor.executeNamedQuery("q_CompanyUserLogin", params, QCompanyUserLoginResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_CompanyUserLogin(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        QueryProcedureInput<QCompanyUserLoginResponse> queryInput = new QueryProcedureInput<>("q_CompanyUserLogin", params, QCompanyUserLoginResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetMappingUserPurchaseGroupResponse> executeGetMappingUserPurchaseGroup(String purchaseGroup, String assignee, String status, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("purchase_group", purchaseGroup);
        params.put("assignee", assignee);
        params.put("status", status);

        return queryExecutor.executeNamedQuery("getMappingUserPurchaseGroup", params, GetMappingUserPurchaseGroupResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetMappingUserPurchaseGroup(String purchaseGroup, String assignee, String status, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("purchase_group", purchaseGroup);
        params.put("assignee", assignee);
        params.put("status", status);

        QueryProcedureInput<GetMappingUserPurchaseGroupResponse> queryInput = new QueryProcedureInput<>("getMappingUserPurchaseGroup", params, GetMappingUserPurchaseGroupResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetRfqsummaryPrintResponse> executeGetRFQSummaryPrint(String rfqId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("rfqId", rfqId);

        return queryExecutor.executeNamedQuery("getRFQSummaryPrint", params, GetRfqsummaryPrintResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRFQSummaryPrint(String rfqId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("rfqId", rfqId);

        QueryProcedureInput<GetRfqsummaryPrintResponse> queryInput = new QueryProcedureInput<>("getRFQSummaryPrint", params, GetRfqsummaryPrintResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeleteAdditionalHistory(Integer baId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("baId", baId);

        return queryExecutor.executeNamedQueryForUpdate("deleteAdditionalHistory", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQSetStatusGRLineItem(QsetStatusGrlineItemRequest qsetStatusGrlineItemRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", qsetStatusGrlineItemRequest.getStatus());
        params.put("id", qsetStatusGrlineItemRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("QSetStatusGRLineItem", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeletePODocByIDPO(String idPoHeader) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("idPoHeader", idPoHeader);

        return queryExecutor.executeNamedQueryForUpdate("deletePODocByIDPO", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeGeneratePRref(GeneratePrrefRequest generatePrrefRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("prRef", generatePrrefRequest.getPrRef());
        params.put("prId", generatePrrefRequest.getPrId());

        return queryExecutor.executeNamedQueryForUpdate("generatePRref", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetIolistBhResponse> executeGetIOListBH(String budgetYear, String userDepartment, String accType, String accActivity, String accNonActivity, String accAsset, String accSewaLeasing, String cid, String accId, String ioNumber, String ioName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("budgetYear", budgetYear);
        params.put("userDepartment", userDepartment);
        params.put("accType", accType);
        params.put("accActivity", accActivity);
        params.put("accNonActivity", accNonActivity);
        params.put("accAsset", accAsset);
        params.put("accSewaLeasing", accSewaLeasing);
        params.put("cId", cid);
        params.put("accId", accId);
        params.put("ioNumber", ioNumber);
        params.put("ioName", ioName);

        return queryExecutor.executeNamedQuery("getIOListBH", params, GetIolistBhResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetIOListBH(String budgetYear, String userDepartment, String accType, String accActivity, String accNonActivity, String accAsset, String accSewaLeasing, String cid, String accId, String ioNumber, String ioName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("budgetYear", budgetYear);
        params.put("userDepartment", userDepartment);
        params.put("accType", accType);
        params.put("accActivity", accActivity);
        params.put("accNonActivity", accNonActivity);
        params.put("accAsset", accAsset);
        params.put("accSewaLeasing", accSewaLeasing);
        params.put("cId", cid);
        params.put("accId", accId);
        params.put("ioNumber", ioNumber);
        params.put("ioName", ioName);

        QueryProcedureInput<GetIolistBhResponse> queryInput = new QueryProcedureInput<>("getIOListBH", params, GetIolistBhResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangeRFQItemQuotation(ChangeRfqitemQuotationRequest changeRfqitemQuotationRequest) {
        Map<String, Object> params = new HashMap<>(8);

        params.put("modifiedBy", changeRfqitemQuotationRequest.getModifiedBy());
        params.put("modifiedAt", changeRfqitemQuotationRequest.getModifiedAt());
        params.put("leadTime", changeRfqitemQuotationRequest.getLeadTime());
        params.put("discount", changeRfqitemQuotationRequest.getDiscount());
        params.put("unitPrice", changeRfqitemQuotationRequest.getUnitPrice());
        params.put("currency", changeRfqitemQuotationRequest.getCurrency());
        params.put("amount", changeRfqitemQuotationRequest.getAmount());
        params.put("liqId", changeRfqitemQuotationRequest.getLiqId());

        return queryExecutor.executeNamedQueryForUpdate("changeRFQItemQuotation", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GrcompareQtyConfirmResponse> executeGRCompareQtyConfirm(String idPrLineItemHeader, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_pr_line_item_header", idPrLineItemHeader);

        return queryExecutor.executeNamedQuery("GRCompareQtyConfirm", params, GrcompareQtyConfirmResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGRCompareQtyConfirm(String idPrLineItemHeader, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id_pr_line_item_header", idPrLineItemHeader);

        QueryProcedureInput<GrcompareQtyConfirmResponse> queryInput = new QueryProcedureInput<>("GRCompareQtyConfirm", params, GrcompareQtyConfirmResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeQueryupdateStatusBH(QueryupdateStatusBhRequest queryupdateStatusBhRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", queryupdateStatusBhRequest.getStatus());
        params.put("id", queryupdateStatusBhRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("QueryupdateStatusBH", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetCheckerTasklistResponse> executeGetCheckerTasklist(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getCheckerTasklist", params, GetCheckerTasklistResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetCheckerTasklist(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetCheckerTasklistResponse> queryInput = new QueryProcedureInput<>("getCheckerTasklist", params, GetCheckerTasklistResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QvendorListOrderResponse> executeQVendorListOrder(String vendorCode, String companyCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("vendorCode", vendorCode);
        params.put("company_code", companyCode);

        return queryExecutor.executeNamedQuery("qVendorListOrder", params, QvendorListOrderResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQVendorListOrder(String vendorCode, String companyCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("vendorCode", vendorCode);
        params.put("company_code", companyCode);

        QueryProcedureInput<QvendorListOrderResponse> queryInput = new QueryProcedureInput<>("qVendorListOrder", params, QvendorListOrderResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetRfqsummaryResponse> executeGetRFQSummary(String rfqId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("rfqId", rfqId);

        return queryExecutor.executeNamedQuery("getRFQSummary", params, GetRfqsummaryResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRFQSummary(String rfqId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("rfqId", rfqId);

        QueryProcedureInput<GetRfqsummaryResponse> queryInput = new QueryProcedureInput<>("getRFQSummary", params, GetRfqsummaryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QueryBudgetDetail1Response> executeQuery_budgetDetail1(String emp, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        return queryExecutor.executeNamedQuery("query_budgetDetail1", params, QueryBudgetDetail1Response.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_budgetDetail1(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("emp", emp);

        QueryProcedureInput<QueryBudgetDetail1Response> queryInput = new QueryProcedureInput<>("query_budgetDetail1", params, QueryBudgetDetail1Response.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<QGetBudgetHeaderDetail2Response> executeQ_get_budgetHeader_Detail2(String bhId, String ioNumber, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("bh_id", bhId);
        params.put("io_number", ioNumber);

        return queryExecutor.executeNamedQuery("q_get_budgetHeader_Detail2", params, QGetBudgetHeaderDetail2Response.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQ_get_budgetHeader_Detail2(String bhId, String ioNumber, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("bh_id", bhId);
        params.put("io_number", ioNumber);

        QueryProcedureInput<QGetBudgetHeaderDetail2Response> queryInput = new QueryProcedureInput<>("q_get_budgetHeader_Detail2", params, QGetBudgetHeaderDetail2Response.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeDeletePOLineItem(String idPoHeader) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("idPoHeader", idPoHeader);

        return queryExecutor.executeNamedQueryForUpdate("deletePOLineItem", params);
    }

    @Transactional(value = "aio_ptpTransactionManager", readOnly = true)
    @Override
    public Page<GetIolistBhdefResponse> executeGetIOListBHDef(String budgetYear, String userDepartment, String ioNumber, String ioName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("budgetYear", budgetYear);
        params.put("userDepartment", userDepartment);
        params.put("ioNumber", ioNumber);
        params.put("ioName", ioName);

        return queryExecutor.executeNamedQuery("getIOListBHDef", params, GetIolistBhdefResponse.class, pageable);
    }

    @Transactional(value = "aio_ptpTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetIOListBHDef(String budgetYear, String userDepartment, String ioNumber, String ioName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("budgetYear", budgetYear);
        params.put("userDepartment", userDepartment);
        params.put("ioNumber", ioNumber);
        params.put("ioName", ioName);

        QueryProcedureInput<GetIolistBhdefResponse> queryInput = new QueryProcedureInput<>("getIOListBHDef", params, GetIolistBhdefResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeUpdatebhIdAdditionalBudget(UpdatebhIdAdditionalBudgetRequest updatebhIdAdditionalBudgetRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("bhId", updatebhIdAdditionalBudgetRequest.getBhId());
        params.put("baId", updatebhIdAdditionalBudgetRequest.getBaId());

        return queryExecutor.executeNamedQueryForUpdate("updatebhIdAdditionalBudget", params);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public Integer executeChangetCOABudgetDetail(ChangetCoabudgetDetailRequest changetCoabudgetDetailRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("coaId", changetCoabudgetDetailRequest.getCoaId());
        params.put("bhId", changetCoabudgetDetailRequest.getBhId());
        params.put("pliId", changetCoabudgetDetailRequest.getPliId());

        return queryExecutor.executeNamedQueryForUpdate("changetCOABudgetDetail", params);
    }

}