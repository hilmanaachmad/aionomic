/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPrReadyForPurchase;
import id.co.aio.procure_to_pay.aio_ptp.service.VPrReadyForPurchaseService;


/**
 * Controller object for domain model class VPrReadyForPurchase.
 * @see VPrReadyForPurchase
 */
@RestController("aio_ptp.VPrReadyForPurchaseController")
@Api(value = "VPrReadyForPurchaseController", description = "Exposes APIs to work with VPrReadyForPurchase resource.")
@RequestMapping("/aio_ptp/VPrReadyForPurchase")
public class VPrReadyForPurchaseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPrReadyForPurchaseController.class);

    @Autowired
	@Qualifier("aio_ptp.VPrReadyForPurchaseService")
	private VPrReadyForPurchaseService vPrReadyForPurchaseService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPrReadyForPurchase instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPrReadyForPurchase createVPrReadyForPurchase(@RequestBody VPrReadyForPurchase vprReadyForPurchase) {
		LOGGER.debug("Create VPrReadyForPurchase with information: {}" , vprReadyForPurchase);

		vprReadyForPurchase = vPrReadyForPurchaseService.create(vprReadyForPurchase);
		LOGGER.debug("Created VPrReadyForPurchase with information: {}" , vprReadyForPurchase);

	    return vprReadyForPurchase;
	}

    @ApiOperation(value = "Returns the VPrReadyForPurchase instance associated with the given id.")
    @RequestMapping(value = "/{liId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPrReadyForPurchase getVPrReadyForPurchase(@PathVariable("liId") Integer liId) {
        LOGGER.debug("Getting VPrReadyForPurchase with id: {}" , liId);

        VPrReadyForPurchase foundVPrReadyForPurchase = vPrReadyForPurchaseService.getById(liId);
        LOGGER.debug("VPrReadyForPurchase details with id: {}" , foundVPrReadyForPurchase);

        return foundVPrReadyForPurchase;
    }

    @ApiOperation(value = "Updates the VPrReadyForPurchase instance associated with the given id.")
    @RequestMapping(value = "/{liId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPrReadyForPurchase editVPrReadyForPurchase(@PathVariable("liId") Integer liId, @RequestBody VPrReadyForPurchase vprReadyForPurchase) {
        LOGGER.debug("Editing VPrReadyForPurchase with id: {}" , vprReadyForPurchase.getLiId());

        vprReadyForPurchase.setLiId(liId);
        vprReadyForPurchase = vPrReadyForPurchaseService.update(vprReadyForPurchase);
        LOGGER.debug("VPrReadyForPurchase details with id: {}" , vprReadyForPurchase);

        return vprReadyForPurchase;
    }
    
    @ApiOperation(value = "Partially updates the VPrReadyForPurchase instance associated with the given id.")
    @RequestMapping(value = "/{liId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPrReadyForPurchase patchVPrReadyForPurchase(@PathVariable("liId") Integer liId, @RequestBody @MapTo(VPrReadyForPurchase.class) Map<String, Object> vprReadyForPurchasePatch) {
        LOGGER.debug("Partially updating VPrReadyForPurchase with id: {}" , liId);

        VPrReadyForPurchase vprReadyForPurchase = vPrReadyForPurchaseService.partialUpdate(liId, vprReadyForPurchasePatch);
        LOGGER.debug("VPrReadyForPurchase details after partial update: {}" , vprReadyForPurchase);

        return vprReadyForPurchase;
    }

    @ApiOperation(value = "Deletes the VPrReadyForPurchase instance associated with the given id.")
    @RequestMapping(value = "/{liId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPrReadyForPurchase(@PathVariable("liId") Integer liId) {
        LOGGER.debug("Deleting VPrReadyForPurchase with id: {}" , liId);

        VPrReadyForPurchase deletedVPrReadyForPurchase = vPrReadyForPurchaseService.delete(liId);

        return deletedVPrReadyForPurchase != null;
    }

    /**
     * @deprecated Use {@link #findVPrReadyForPurchases(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPrReadyForPurchase instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPrReadyForPurchase> searchVPrReadyForPurchasesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPrReadyForPurchases list by query filter:{}", (Object) queryFilters);
        return vPrReadyForPurchaseService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPrReadyForPurchase instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPrReadyForPurchase> findVPrReadyForPurchases(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPrReadyForPurchases list by filter:", query);
        return vPrReadyForPurchaseService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPrReadyForPurchase instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPrReadyForPurchase> filterVPrReadyForPurchases(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPrReadyForPurchases list by filter", query);
        return vPrReadyForPurchaseService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPrReadyForPurchases(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPrReadyForPurchaseService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPrReadyForPurchasesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPrReadyForPurchase.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPrReadyForPurchaseService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPrReadyForPurchase instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPrReadyForPurchases( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPrReadyForPurchases");
		return vPrReadyForPurchaseService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPrReadyForPurchaseAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPrReadyForPurchaseService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPrReadyForPurchaseService instance
	 */
	protected void setVPrReadyForPurchaseService(VPrReadyForPurchaseService service) {
		this.vPrReadyForPurchaseService = service;
	}

}