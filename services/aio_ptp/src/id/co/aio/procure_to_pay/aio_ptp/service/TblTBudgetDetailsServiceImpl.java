/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetDetails;


/**
 * ServiceImpl object for domain model class TblTBudgetDetails.
 *
 * @see TblTBudgetDetails
 */
@Service("aio_ptp.TblTBudgetDetailsService")
@Validated
@EntityService(entityClass = TblTBudgetDetails.class, serviceId = "aio_ptp")
public class TblTBudgetDetailsServiceImpl implements TblTBudgetDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTBudgetDetailsServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTBudgetDetailsDao")
    private WMGenericDao<TblTBudgetDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTBudgetDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetDetails create(TblTBudgetDetails tblTbudgetDetails) {
        LOGGER.debug("Creating a new TblTBudgetDetails with information: {}", tblTbudgetDetails);

        TblTBudgetDetails tblTbudgetDetailsCreated = this.wmGenericDao.create(tblTbudgetDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTbudgetDetailsCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetDetails getById(Integer tbltbudgetdetailsId) {
        LOGGER.debug("Finding TblTBudgetDetails by id: {}", tbltbudgetdetailsId);
        return this.wmGenericDao.findById(tbltbudgetdetailsId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetDetails findById(Integer tbltbudgetdetailsId) {
        LOGGER.debug("Finding TblTBudgetDetails by id: {}", tbltbudgetdetailsId);
        try {
            return this.wmGenericDao.findById(tbltbudgetdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTBudgetDetails found with id: {}", tbltbudgetdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTBudgetDetails> findByMultipleIds(List<Integer> tbltbudgetdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTBudgetDetails by ids: {}", tbltbudgetdetailsIds);

        return this.wmGenericDao.findByMultipleIds(tbltbudgetdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetDetails update(TblTBudgetDetails tblTbudgetDetails) {
        LOGGER.debug("Updating TblTBudgetDetails with information: {}", tblTbudgetDetails);

        this.wmGenericDao.update(tblTbudgetDetails);
        this.wmGenericDao.refresh(tblTbudgetDetails);

        return tblTbudgetDetails;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetDetails partialUpdate(Integer tbltbudgetdetailsId, Map<String, Object>tblTbudgetDetailsPatch) {
        LOGGER.debug("Partially Updating the TblTBudgetDetails with id: {}", tbltbudgetdetailsId);

        TblTBudgetDetails tblTbudgetDetails = getById(tbltbudgetdetailsId);

        try {
            ObjectReader tblTbudgetDetailsReader = this.objectMapper.reader().forType(TblTBudgetDetails.class).withValueToUpdate(tblTbudgetDetails);
            tblTbudgetDetails = tblTbudgetDetailsReader.readValue(this.objectMapper.writeValueAsString(tblTbudgetDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTbudgetDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTbudgetDetails = update(tblTbudgetDetails);

        return tblTbudgetDetails;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetDetails delete(Integer tbltbudgetdetailsId) {
        LOGGER.debug("Deleting TblTBudgetDetails with id: {}", tbltbudgetdetailsId);
        TblTBudgetDetails deleted = this.wmGenericDao.findById(tbltbudgetdetailsId);
        if (deleted == null) {
            LOGGER.debug("No TblTBudgetDetails found with id: {}", tbltbudgetdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTBudgetDetails.class.getSimpleName(), tbltbudgetdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTBudgetDetails tblTbudgetDetails) {
        LOGGER.debug("Deleting TblTBudgetDetails with {}", tblTbudgetDetails);
        this.wmGenericDao.delete(tblTbudgetDetails);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}