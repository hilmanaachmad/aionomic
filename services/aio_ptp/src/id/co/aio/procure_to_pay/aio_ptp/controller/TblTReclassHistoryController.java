/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTReclassHistory;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTReclassHistoryService;


/**
 * Controller object for domain model class TblTReclassHistory.
 * @see TblTReclassHistory
 */
@RestController("aio_ptp.TblTReclassHistoryController")
@Api(value = "TblTReclassHistoryController", description = "Exposes APIs to work with TblTReclassHistory resource.")
@RequestMapping("/aio_ptp/TblTReclassHistory")
public class TblTReclassHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTReclassHistoryController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTReclassHistoryService")
	private TblTReclassHistoryService tblTReclassHistoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTReclassHistory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTReclassHistory createTblTReclassHistory(@RequestBody TblTReclassHistory tblTreclassHistory) {
		LOGGER.debug("Create TblTReclassHistory with information: {}" , tblTreclassHistory);

		tblTreclassHistory = tblTReclassHistoryService.create(tblTreclassHistory);
		LOGGER.debug("Created TblTReclassHistory with information: {}" , tblTreclassHistory);

	    return tblTreclassHistory;
	}

    @ApiOperation(value = "Returns the TblTReclassHistory instance associated with the given id.")
    @RequestMapping(value = "/{rhId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTReclassHistory getTblTReclassHistory(@PathVariable("rhId") Integer rhId) {
        LOGGER.debug("Getting TblTReclassHistory with id: {}" , rhId);

        TblTReclassHistory foundTblTReclassHistory = tblTReclassHistoryService.getById(rhId);
        LOGGER.debug("TblTReclassHistory details with id: {}" , foundTblTReclassHistory);

        return foundTblTReclassHistory;
    }

    @ApiOperation(value = "Updates the TblTReclassHistory instance associated with the given id.")
    @RequestMapping(value = "/{rhId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTReclassHistory editTblTReclassHistory(@PathVariable("rhId") Integer rhId, @RequestBody TblTReclassHistory tblTreclassHistory) {
        LOGGER.debug("Editing TblTReclassHistory with id: {}" , tblTreclassHistory.getRhId());

        tblTreclassHistory.setRhId(rhId);
        tblTreclassHistory = tblTReclassHistoryService.update(tblTreclassHistory);
        LOGGER.debug("TblTReclassHistory details with id: {}" , tblTreclassHistory);

        return tblTreclassHistory;
    }
    
    @ApiOperation(value = "Partially updates the TblTReclassHistory instance associated with the given id.")
    @RequestMapping(value = "/{rhId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTReclassHistory patchTblTReclassHistory(@PathVariable("rhId") Integer rhId, @RequestBody @MapTo(TblTReclassHistory.class) Map<String, Object> tblTreclassHistoryPatch) {
        LOGGER.debug("Partially updating TblTReclassHistory with id: {}" , rhId);

        TblTReclassHistory tblTreclassHistory = tblTReclassHistoryService.partialUpdate(rhId, tblTreclassHistoryPatch);
        LOGGER.debug("TblTReclassHistory details after partial update: {}" , tblTreclassHistory);

        return tblTreclassHistory;
    }

    @ApiOperation(value = "Deletes the TblTReclassHistory instance associated with the given id.")
    @RequestMapping(value = "/{rhId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTReclassHistory(@PathVariable("rhId") Integer rhId) {
        LOGGER.debug("Deleting TblTReclassHistory with id: {}" , rhId);

        TblTReclassHistory deletedTblTReclassHistory = tblTReclassHistoryService.delete(rhId);

        return deletedTblTReclassHistory != null;
    }

    /**
     * @deprecated Use {@link #findTblTReclassHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTReclassHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTReclassHistory> searchTblTReclassHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTReclassHistories list by query filter:{}", (Object) queryFilters);
        return tblTReclassHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTReclassHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTReclassHistory> findTblTReclassHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTReclassHistories list by filter:", query);
        return tblTReclassHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTReclassHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTReclassHistory> filterTblTReclassHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTReclassHistories list by filter", query);
        return tblTReclassHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTReclassHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTReclassHistoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTReclassHistoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTReclassHistory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTReclassHistoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTReclassHistory instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTReclassHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTReclassHistories");
		return tblTReclassHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTReclassHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTReclassHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTReclassHistoryService instance
	 */
	protected void setTblTReclassHistoryService(TblTReclassHistoryService service) {
		this.tblTReclassHistoryService = service;
	}

}