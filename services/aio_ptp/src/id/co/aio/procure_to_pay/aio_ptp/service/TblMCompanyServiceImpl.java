/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMCompany;
import id.co.aio.procure_to_pay.aio_ptp.TblMIo;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetHeader;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;


/**
 * ServiceImpl object for domain model class TblMCompany.
 *
 * @see TblMCompany
 */
@Service("aio_ptp.TblMCompanyService")
@Validated
@EntityService(entityClass = TblMCompany.class, serviceId = "aio_ptp")
public class TblMCompanyServiceImpl implements TblMCompanyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMCompanyServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTBudgetHeaderService")
    private TblTBudgetHeaderService tblTBudgetHeaderService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTPrService")
    private TblTPrService tblTPrService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblMIoService")
    private TblMIoService tblMIoService;

    @Autowired
    @Qualifier("aio_ptp.TblMCompanyDao")
    private WMGenericDao<TblMCompany, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMCompany, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMCompany create(TblMCompany tblMcompany) {
        LOGGER.debug("Creating a new TblMCompany with information: {}", tblMcompany);

        TblMCompany tblMcompanyCreated = this.wmGenericDao.create(tblMcompany);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMcompanyCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMCompany getById(Integer tblmcompanyId) {
        LOGGER.debug("Finding TblMCompany by id: {}", tblmcompanyId);
        return this.wmGenericDao.findById(tblmcompanyId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMCompany findById(Integer tblmcompanyId) {
        LOGGER.debug("Finding TblMCompany by id: {}", tblmcompanyId);
        try {
            return this.wmGenericDao.findById(tblmcompanyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMCompany found with id: {}", tblmcompanyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMCompany> findByMultipleIds(List<Integer> tblmcompanyIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMCompanies by ids: {}", tblmcompanyIds);

        return this.wmGenericDao.findByMultipleIds(tblmcompanyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMCompany update(TblMCompany tblMcompany) {
        LOGGER.debug("Updating TblMCompany with information: {}", tblMcompany);

        this.wmGenericDao.update(tblMcompany);
        this.wmGenericDao.refresh(tblMcompany);

        return tblMcompany;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMCompany partialUpdate(Integer tblmcompanyId, Map<String, Object>tblMcompanyPatch) {
        LOGGER.debug("Partially Updating the TblMCompany with id: {}", tblmcompanyId);

        TblMCompany tblMcompany = getById(tblmcompanyId);

        try {
            ObjectReader tblMcompanyReader = this.objectMapper.reader().forType(TblMCompany.class).withValueToUpdate(tblMcompany);
            tblMcompany = tblMcompanyReader.readValue(this.objectMapper.writeValueAsString(tblMcompanyPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMcompanyPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMcompany = update(tblMcompany);

        return tblMcompany;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMCompany delete(Integer tblmcompanyId) {
        LOGGER.debug("Deleting TblMCompany with id: {}", tblmcompanyId);
        TblMCompany deleted = this.wmGenericDao.findById(tblmcompanyId);
        if (deleted == null) {
            LOGGER.debug("No TblMCompany found with id: {}", tblmcompanyId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMCompany.class.getSimpleName(), tblmcompanyId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMCompany tblMcompany) {
        LOGGER.debug("Deleting TblMCompany with {}", tblMcompany);
        this.wmGenericDao.delete(tblMcompany);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMCompany> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMCompanies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMCompany> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMCompanies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMCompany to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMCompany to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMIo> findAssociatedTblMios(Integer cid, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblMios");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMcompany.cid = '" + cid + "'");

        return tblMIoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetHeader> findAssociatedTblTbudgetHeaders(Integer cid, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTbudgetHeaders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMcompany.cid = '" + cid + "'");

        return tblTBudgetHeaderService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPr> findAssociatedTblTprs(Integer cid, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTprs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMcompany.cid = '" + cid + "'");

        return tblTPrService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTBudgetHeaderService instance
     */
    protected void setTblTBudgetHeaderService(TblTBudgetHeaderService service) {
        this.tblTBudgetHeaderService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTPrService instance
     */
    protected void setTblTPrService(TblTPrService service) {
        this.tblTPrService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblMIoService instance
     */
    protected void setTblMIoService(TblMIoService service) {
        this.tblMIoService = service;
    }

}