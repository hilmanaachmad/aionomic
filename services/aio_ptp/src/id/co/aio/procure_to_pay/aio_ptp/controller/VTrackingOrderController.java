/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VTrackingOrder;
import id.co.aio.procure_to_pay.aio_ptp.service.VTrackingOrderService;


/**
 * Controller object for domain model class VTrackingOrder.
 * @see VTrackingOrder
 */
@RestController("aio_ptp.VTrackingOrderController")
@Api(value = "VTrackingOrderController", description = "Exposes APIs to work with VTrackingOrder resource.")
@RequestMapping("/aio_ptp/VTrackingOrder")
public class VTrackingOrderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VTrackingOrderController.class);

    @Autowired
	@Qualifier("aio_ptp.VTrackingOrderService")
	private VTrackingOrderService vTrackingOrderService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VTrackingOrder instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VTrackingOrder createVTrackingOrder(@RequestBody VTrackingOrder vtrackingOrder) {
		LOGGER.debug("Create VTrackingOrder with information: {}" , vtrackingOrder);

		vtrackingOrder = vTrackingOrderService.create(vtrackingOrder);
		LOGGER.debug("Created VTrackingOrder with information: {}" , vtrackingOrder);

	    return vtrackingOrder;
	}

    @ApiOperation(value = "Returns the VTrackingOrder instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VTrackingOrder getVTrackingOrder(@PathVariable("idPoLineItem") String idPoLineItem) {
        LOGGER.debug("Getting VTrackingOrder with id: {}" , idPoLineItem);

        VTrackingOrder foundVTrackingOrder = vTrackingOrderService.getById(idPoLineItem);
        LOGGER.debug("VTrackingOrder details with id: {}" , foundVTrackingOrder);

        return foundVTrackingOrder;
    }

    @ApiOperation(value = "Updates the VTrackingOrder instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VTrackingOrder editVTrackingOrder(@PathVariable("idPoLineItem") String idPoLineItem, @RequestBody VTrackingOrder vtrackingOrder) {
        LOGGER.debug("Editing VTrackingOrder with id: {}" , vtrackingOrder.getIdPoLineItem());

        vtrackingOrder.setIdPoLineItem(idPoLineItem);
        vtrackingOrder = vTrackingOrderService.update(vtrackingOrder);
        LOGGER.debug("VTrackingOrder details with id: {}" , vtrackingOrder);

        return vtrackingOrder;
    }
    
    @ApiOperation(value = "Partially updates the VTrackingOrder instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VTrackingOrder patchVTrackingOrder(@PathVariable("idPoLineItem") String idPoLineItem, @RequestBody @MapTo(VTrackingOrder.class) Map<String, Object> vtrackingOrderPatch) {
        LOGGER.debug("Partially updating VTrackingOrder with id: {}" , idPoLineItem);

        VTrackingOrder vtrackingOrder = vTrackingOrderService.partialUpdate(idPoLineItem, vtrackingOrderPatch);
        LOGGER.debug("VTrackingOrder details after partial update: {}" , vtrackingOrder);

        return vtrackingOrder;
    }

    @ApiOperation(value = "Deletes the VTrackingOrder instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVTrackingOrder(@PathVariable("idPoLineItem") String idPoLineItem) {
        LOGGER.debug("Deleting VTrackingOrder with id: {}" , idPoLineItem);

        VTrackingOrder deletedVTrackingOrder = vTrackingOrderService.delete(idPoLineItem);

        return deletedVTrackingOrder != null;
    }

    /**
     * @deprecated Use {@link #findVTrackingOrders(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VTrackingOrder instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VTrackingOrder> searchVTrackingOrdersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VTrackingOrders list by query filter:{}", (Object) queryFilters);
        return vTrackingOrderService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VTrackingOrder instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VTrackingOrder> findVTrackingOrders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VTrackingOrders list by filter:", query);
        return vTrackingOrderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VTrackingOrder instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VTrackingOrder> filterVTrackingOrders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VTrackingOrders list by filter", query);
        return vTrackingOrderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVTrackingOrders(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vTrackingOrderService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVTrackingOrdersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VTrackingOrder.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vTrackingOrderService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VTrackingOrder instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVTrackingOrders( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VTrackingOrders");
		return vTrackingOrderService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVTrackingOrderAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vTrackingOrderService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VTrackingOrderService instance
	 */
	protected void setVTrackingOrderService(VTrackingOrderService service) {
		this.vTrackingOrderService = service;
	}

}