/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTReclassAttachment;


/**
 * ServiceImpl object for domain model class TblTReclassAttachment.
 *
 * @see TblTReclassAttachment
 */
@Service("aio_ptp.TblTReclassAttachmentService")
@Validated
@EntityService(entityClass = TblTReclassAttachment.class, serviceId = "aio_ptp")
public class TblTReclassAttachmentServiceImpl implements TblTReclassAttachmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTReclassAttachmentServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTReclassAttachmentDao")
    private WMGenericDao<TblTReclassAttachment, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTReclassAttachment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTReclassAttachment create(TblTReclassAttachment tblTreclassAttachment) {
        LOGGER.debug("Creating a new TblTReclassAttachment with information: {}", tblTreclassAttachment);

        TblTReclassAttachment tblTreclassAttachmentCreated = this.wmGenericDao.create(tblTreclassAttachment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTreclassAttachmentCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTReclassAttachment getById(Integer tbltreclassattachmentId) {
        LOGGER.debug("Finding TblTReclassAttachment by id: {}", tbltreclassattachmentId);
        return this.wmGenericDao.findById(tbltreclassattachmentId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTReclassAttachment findById(Integer tbltreclassattachmentId) {
        LOGGER.debug("Finding TblTReclassAttachment by id: {}", tbltreclassattachmentId);
        try {
            return this.wmGenericDao.findById(tbltreclassattachmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTReclassAttachment found with id: {}", tbltreclassattachmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTReclassAttachment> findByMultipleIds(List<Integer> tbltreclassattachmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTReclassAttachments by ids: {}", tbltreclassattachmentIds);

        return this.wmGenericDao.findByMultipleIds(tbltreclassattachmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTReclassAttachment update(TblTReclassAttachment tblTreclassAttachment) {
        LOGGER.debug("Updating TblTReclassAttachment with information: {}", tblTreclassAttachment);

        this.wmGenericDao.update(tblTreclassAttachment);
        this.wmGenericDao.refresh(tblTreclassAttachment);

        return tblTreclassAttachment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTReclassAttachment partialUpdate(Integer tbltreclassattachmentId, Map<String, Object>tblTreclassAttachmentPatch) {
        LOGGER.debug("Partially Updating the TblTReclassAttachment with id: {}", tbltreclassattachmentId);

        TblTReclassAttachment tblTreclassAttachment = getById(tbltreclassattachmentId);

        try {
            ObjectReader tblTreclassAttachmentReader = this.objectMapper.reader().forType(TblTReclassAttachment.class).withValueToUpdate(tblTreclassAttachment);
            tblTreclassAttachment = tblTreclassAttachmentReader.readValue(this.objectMapper.writeValueAsString(tblTreclassAttachmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTreclassAttachmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTreclassAttachment = update(tblTreclassAttachment);

        return tblTreclassAttachment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTReclassAttachment delete(Integer tbltreclassattachmentId) {
        LOGGER.debug("Deleting TblTReclassAttachment with id: {}", tbltreclassattachmentId);
        TblTReclassAttachment deleted = this.wmGenericDao.findById(tbltreclassattachmentId);
        if (deleted == null) {
            LOGGER.debug("No TblTReclassAttachment found with id: {}", tbltreclassattachmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTReclassAttachment.class.getSimpleName(), tbltreclassattachmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTReclassAttachment tblTreclassAttachment) {
        LOGGER.debug("Deleting TblTReclassAttachment with {}", tblTreclassAttachment);
        this.wmGenericDao.delete(tblTreclassAttachment);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTReclassAttachment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTReclassAttachments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTReclassAttachment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTReclassAttachments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTReclassAttachment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTReclassAttachment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}