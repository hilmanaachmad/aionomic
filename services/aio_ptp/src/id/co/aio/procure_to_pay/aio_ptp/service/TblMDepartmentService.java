/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMDepartment;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;

/**
 * Service object for domain model class {@link TblMDepartment}.
 */
public interface TblMDepartmentService {

    /**
     * Creates a new TblMDepartment. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMDepartment if any.
     *
     * @param tblMdepartment Details of the TblMDepartment to be created; value cannot be null.
     * @return The newly created TblMDepartment.
     */
    TblMDepartment create(@Valid TblMDepartment tblMdepartment);


	/**
     * Returns TblMDepartment by given id if exists.
     *
     * @param tblmdepartmentId The id of the TblMDepartment to get; value cannot be null.
     * @return TblMDepartment associated with the given tblmdepartmentId.
	 * @throws EntityNotFoundException If no TblMDepartment is found.
     */
    TblMDepartment getById(Integer tblmdepartmentId);

    /**
     * Find and return the TblMDepartment by given id if exists, returns null otherwise.
     *
     * @param tblmdepartmentId The id of the TblMDepartment to get; value cannot be null.
     * @return TblMDepartment associated with the given tblmdepartmentId.
     */
    TblMDepartment findById(Integer tblmdepartmentId);

	/**
     * Find and return the list of TblMDepartments by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmdepartmentIds The id's of the TblMDepartment to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMDepartments associated with the given tblmdepartmentIds.
     */
    List<TblMDepartment> findByMultipleIds(List<Integer> tblmdepartmentIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMDepartment. It replaces all fields of the existing TblMDepartment with the given tblMdepartment.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMDepartment if any.
     *
     * @param tblMdepartment The details of the TblMDepartment to be updated; value cannot be null.
     * @return The updated TblMDepartment.
     * @throws EntityNotFoundException if no TblMDepartment is found with given input.
     */
    TblMDepartment update(@Valid TblMDepartment tblMdepartment);


    /**
     * Partially updates the details of an existing TblMDepartment. It updates only the
     * fields of the existing TblMDepartment which are passed in the tblMdepartmentPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMDepartment if any.
     *
     * @param tblmdepartmentId The id of the TblMDepartment to be deleted; value cannot be null.
     * @param tblMdepartmentPatch The partial data of TblMDepartment which is supposed to be updated; value cannot be null.
     * @return The updated TblMDepartment.
     * @throws EntityNotFoundException if no TblMDepartment is found with given input.
     */
    TblMDepartment partialUpdate(Integer tblmdepartmentId, Map<String, Object> tblMdepartmentPatch);

    /**
     * Deletes an existing TblMDepartment with the given id.
     *
     * @param tblmdepartmentId The id of the TblMDepartment to be deleted; value cannot be null.
     * @return The deleted TblMDepartment.
     * @throws EntityNotFoundException if no TblMDepartment found with the given id.
     */
    TblMDepartment delete(Integer tblmdepartmentId);

    /**
     * Deletes an existing TblMDepartment with the given object.
     *
     * @param tblMdepartment The instance of the TblMDepartment to be deleted; value cannot be null.
     */
    void delete(TblMDepartment tblMdepartment);

    /**
     * Find all TblMDepartments matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMDepartments.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMDepartment> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMDepartments matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMDepartments.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMDepartment> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMDepartments matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMDepartments matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMDepartments in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMDepartment.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblTprs for given TblMDepartment id.
     *
     * @param departmentId value of departmentId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTPr instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTPr> findAssociatedTblTprs(Integer departmentId, Pageable pageable);

}