/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VActiveBudget;
import id.co.aio.procure_to_pay.aio_ptp.service.VActiveBudgetService;


/**
 * Controller object for domain model class VActiveBudget.
 * @see VActiveBudget
 */
@RestController("aio_ptp.VActiveBudgetController")
@Api(value = "VActiveBudgetController", description = "Exposes APIs to work with VActiveBudget resource.")
@RequestMapping("/aio_ptp/VActiveBudget")
public class VActiveBudgetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VActiveBudgetController.class);

    @Autowired
	@Qualifier("aio_ptp.VActiveBudgetService")
	private VActiveBudgetService vActiveBudgetService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VActiveBudget instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VActiveBudget createVActiveBudget(@RequestBody VActiveBudget vactiveBudget) {
		LOGGER.debug("Create VActiveBudget with information: {}" , vactiveBudget);

		vactiveBudget = vActiveBudgetService.create(vactiveBudget);
		LOGGER.debug("Created VActiveBudget with information: {}" , vactiveBudget);

	    return vactiveBudget;
	}

    @ApiOperation(value = "Returns the VActiveBudget instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VActiveBudget getVActiveBudget(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Getting VActiveBudget with id: {}" , bhId);

        VActiveBudget foundVActiveBudget = vActiveBudgetService.getById(bhId);
        LOGGER.debug("VActiveBudget details with id: {}" , foundVActiveBudget);

        return foundVActiveBudget;
    }

    @ApiOperation(value = "Updates the VActiveBudget instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VActiveBudget editVActiveBudget(@PathVariable("bhId") Integer bhId, @RequestBody VActiveBudget vactiveBudget) {
        LOGGER.debug("Editing VActiveBudget with id: {}" , vactiveBudget.getBhId());

        vactiveBudget.setBhId(bhId);
        vactiveBudget = vActiveBudgetService.update(vactiveBudget);
        LOGGER.debug("VActiveBudget details with id: {}" , vactiveBudget);

        return vactiveBudget;
    }
    
    @ApiOperation(value = "Partially updates the VActiveBudget instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VActiveBudget patchVActiveBudget(@PathVariable("bhId") Integer bhId, @RequestBody @MapTo(VActiveBudget.class) Map<String, Object> vactiveBudgetPatch) {
        LOGGER.debug("Partially updating VActiveBudget with id: {}" , bhId);

        VActiveBudget vactiveBudget = vActiveBudgetService.partialUpdate(bhId, vactiveBudgetPatch);
        LOGGER.debug("VActiveBudget details after partial update: {}" , vactiveBudget);

        return vactiveBudget;
    }

    @ApiOperation(value = "Deletes the VActiveBudget instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVActiveBudget(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Deleting VActiveBudget with id: {}" , bhId);

        VActiveBudget deletedVActiveBudget = vActiveBudgetService.delete(bhId);

        return deletedVActiveBudget != null;
    }

    /**
     * @deprecated Use {@link #findVActiveBudgets(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VActiveBudget instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VActiveBudget> searchVActiveBudgetsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VActiveBudgets list by query filter:{}", (Object) queryFilters);
        return vActiveBudgetService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VActiveBudget instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VActiveBudget> findVActiveBudgets(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VActiveBudgets list by filter:", query);
        return vActiveBudgetService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VActiveBudget instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VActiveBudget> filterVActiveBudgets(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VActiveBudgets list by filter", query);
        return vActiveBudgetService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVActiveBudgets(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vActiveBudgetService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVActiveBudgetsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VActiveBudget.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vActiveBudgetService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VActiveBudget instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVActiveBudgets( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VActiveBudgets");
		return vActiveBudgetService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVActiveBudgetAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vActiveBudgetService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VActiveBudgetService instance
	 */
	protected void setVActiveBudgetService(VActiveBudgetService service) {
		this.vActiveBudgetService = service;
	}

}