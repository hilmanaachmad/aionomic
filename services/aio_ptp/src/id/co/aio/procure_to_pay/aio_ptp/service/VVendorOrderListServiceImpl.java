/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VVendorOrderList;


/**
 * ServiceImpl object for domain model class VVendorOrderList.
 *
 * @see VVendorOrderList
 */
@Service("aio_ptp.VVendorOrderListService")
@Validated
@EntityService(entityClass = VVendorOrderList.class, serviceId = "aio_ptp")
public class VVendorOrderListServiceImpl implements VVendorOrderListService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VVendorOrderListServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VVendorOrderListDao")
    private WMGenericDao<VVendorOrderList, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VVendorOrderList, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VVendorOrderList create(VVendorOrderList vvendorOrderList) {
        LOGGER.debug("Creating a new VVendorOrderList with information: {}", vvendorOrderList);

        VVendorOrderList vvendorOrderListCreated = this.wmGenericDao.create(vvendorOrderList);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vvendorOrderListCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VVendorOrderList getById(Integer vvendororderlistId) {
        LOGGER.debug("Finding VVendorOrderList by id: {}", vvendororderlistId);
        return this.wmGenericDao.findById(vvendororderlistId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VVendorOrderList findById(Integer vvendororderlistId) {
        LOGGER.debug("Finding VVendorOrderList by id: {}", vvendororderlistId);
        try {
            return this.wmGenericDao.findById(vvendororderlistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VVendorOrderList found with id: {}", vvendororderlistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VVendorOrderList> findByMultipleIds(List<Integer> vvendororderlistIds, boolean orderedReturn) {
        LOGGER.debug("Finding VVendorOrderLists by ids: {}", vvendororderlistIds);

        return this.wmGenericDao.findByMultipleIds(vvendororderlistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VVendorOrderList update(VVendorOrderList vvendorOrderList) {
        LOGGER.debug("Updating VVendorOrderList with information: {}", vvendorOrderList);

        this.wmGenericDao.update(vvendorOrderList);
        this.wmGenericDao.refresh(vvendorOrderList);

        return vvendorOrderList;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VVendorOrderList partialUpdate(Integer vvendororderlistId, Map<String, Object>vvendorOrderListPatch) {
        LOGGER.debug("Partially Updating the VVendorOrderList with id: {}", vvendororderlistId);

        VVendorOrderList vvendorOrderList = getById(vvendororderlistId);

        try {
            ObjectReader vvendorOrderListReader = this.objectMapper.reader().forType(VVendorOrderList.class).withValueToUpdate(vvendorOrderList);
            vvendorOrderList = vvendorOrderListReader.readValue(this.objectMapper.writeValueAsString(vvendorOrderListPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vvendorOrderListPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vvendorOrderList = update(vvendorOrderList);

        return vvendorOrderList;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VVendorOrderList delete(Integer vvendororderlistId) {
        LOGGER.debug("Deleting VVendorOrderList with id: {}", vvendororderlistId);
        VVendorOrderList deleted = this.wmGenericDao.findById(vvendororderlistId);
        if (deleted == null) {
            LOGGER.debug("No VVendorOrderList found with id: {}", vvendororderlistId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VVendorOrderList.class.getSimpleName(), vvendororderlistId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VVendorOrderList vvendorOrderList) {
        LOGGER.debug("Deleting VVendorOrderList with {}", vvendorOrderList);
        this.wmGenericDao.delete(vvendorOrderList);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VVendorOrderList> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VVendorOrderLists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VVendorOrderList> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VVendorOrderLists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VVendorOrderList to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VVendorOrderList to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}