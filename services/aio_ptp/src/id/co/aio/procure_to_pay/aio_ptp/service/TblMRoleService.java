/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuth;
import id.co.aio.procure_to_pay.aio_ptp.TblMRole;
import id.co.aio.procure_to_pay.aio_ptp.TblMUserRole;

/**
 * Service object for domain model class {@link TblMRole}.
 */
public interface TblMRoleService {

    /**
     * Creates a new TblMRole. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMRole if any.
     *
     * @param tblMrole Details of the TblMRole to be created; value cannot be null.
     * @return The newly created TblMRole.
     */
    TblMRole create(@Valid TblMRole tblMrole);


	/**
     * Returns TblMRole by given id if exists.
     *
     * @param tblmroleId The id of the TblMRole to get; value cannot be null.
     * @return TblMRole associated with the given tblmroleId.
	 * @throws EntityNotFoundException If no TblMRole is found.
     */
    TblMRole getById(Integer tblmroleId);

    /**
     * Find and return the TblMRole by given id if exists, returns null otherwise.
     *
     * @param tblmroleId The id of the TblMRole to get; value cannot be null.
     * @return TblMRole associated with the given tblmroleId.
     */
    TblMRole findById(Integer tblmroleId);

	/**
     * Find and return the list of TblMRoles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmroleIds The id's of the TblMRole to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMRoles associated with the given tblmroleIds.
     */
    List<TblMRole> findByMultipleIds(List<Integer> tblmroleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMRole. It replaces all fields of the existing TblMRole with the given tblMrole.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMRole if any.
     *
     * @param tblMrole The details of the TblMRole to be updated; value cannot be null.
     * @return The updated TblMRole.
     * @throws EntityNotFoundException if no TblMRole is found with given input.
     */
    TblMRole update(@Valid TblMRole tblMrole);


    /**
     * Partially updates the details of an existing TblMRole. It updates only the
     * fields of the existing TblMRole which are passed in the tblMrolePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMRole if any.
     *
     * @param tblmroleId The id of the TblMRole to be deleted; value cannot be null.
     * @param tblMrolePatch The partial data of TblMRole which is supposed to be updated; value cannot be null.
     * @return The updated TblMRole.
     * @throws EntityNotFoundException if no TblMRole is found with given input.
     */
    TblMRole partialUpdate(Integer tblmroleId, Map<String, Object> tblMrolePatch);

    /**
     * Deletes an existing TblMRole with the given id.
     *
     * @param tblmroleId The id of the TblMRole to be deleted; value cannot be null.
     * @return The deleted TblMRole.
     * @throws EntityNotFoundException if no TblMRole found with the given id.
     */
    TblMRole delete(Integer tblmroleId);

    /**
     * Deletes an existing TblMRole with the given object.
     *
     * @param tblMrole The instance of the TblMRole to be deleted; value cannot be null.
     */
    void delete(TblMRole tblMrole);

    /**
     * Find all TblMRoles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMRoles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMRole> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMRoles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMRoles.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMRole> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMRoles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMRoles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMRoles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMRole.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated relRoleAuths for given TblMRole id.
     *
     * @param roleId value of roleId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated RelRoleAuth instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<RelRoleAuth> findAssociatedRelRoleAuths(Integer roleId, Pageable pageable);

    /*
     * Returns the associated tblMuserRoles for given TblMRole id.
     *
     * @param roleId value of roleId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblMUserRole instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMUserRole> findAssociatedTblMuserRoles(Integer roleId, Pageable pageable);

}