/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VLastBudgetDetail;


/**
 * ServiceImpl object for domain model class VLastBudgetDetail.
 *
 * @see VLastBudgetDetail
 */
@Service("aio_ptp.VLastBudgetDetailService")
@Validated
@EntityService(entityClass = VLastBudgetDetail.class, serviceId = "aio_ptp")
public class VLastBudgetDetailServiceImpl implements VLastBudgetDetailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VLastBudgetDetailServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VLastBudgetDetailDao")
    private WMGenericDao<VLastBudgetDetail, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VLastBudgetDetail, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VLastBudgetDetail create(VLastBudgetDetail vlastBudgetDetail) {
        LOGGER.debug("Creating a new VLastBudgetDetail with information: {}", vlastBudgetDetail);

        VLastBudgetDetail vlastBudgetDetailCreated = this.wmGenericDao.create(vlastBudgetDetail);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vlastBudgetDetailCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VLastBudgetDetail getById(Integer vlastbudgetdetailId) {
        LOGGER.debug("Finding VLastBudgetDetail by id: {}", vlastbudgetdetailId);
        return this.wmGenericDao.findById(vlastbudgetdetailId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VLastBudgetDetail findById(Integer vlastbudgetdetailId) {
        LOGGER.debug("Finding VLastBudgetDetail by id: {}", vlastbudgetdetailId);
        try {
            return this.wmGenericDao.findById(vlastbudgetdetailId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VLastBudgetDetail found with id: {}", vlastbudgetdetailId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VLastBudgetDetail> findByMultipleIds(List<Integer> vlastbudgetdetailIds, boolean orderedReturn) {
        LOGGER.debug("Finding VLastBudgetDetails by ids: {}", vlastbudgetdetailIds);

        return this.wmGenericDao.findByMultipleIds(vlastbudgetdetailIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VLastBudgetDetail update(VLastBudgetDetail vlastBudgetDetail) {
        LOGGER.debug("Updating VLastBudgetDetail with information: {}", vlastBudgetDetail);

        this.wmGenericDao.update(vlastBudgetDetail);
        this.wmGenericDao.refresh(vlastBudgetDetail);

        return vlastBudgetDetail;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VLastBudgetDetail partialUpdate(Integer vlastbudgetdetailId, Map<String, Object>vlastBudgetDetailPatch) {
        LOGGER.debug("Partially Updating the VLastBudgetDetail with id: {}", vlastbudgetdetailId);

        VLastBudgetDetail vlastBudgetDetail = getById(vlastbudgetdetailId);

        try {
            ObjectReader vlastBudgetDetailReader = this.objectMapper.reader().forType(VLastBudgetDetail.class).withValueToUpdate(vlastBudgetDetail);
            vlastBudgetDetail = vlastBudgetDetailReader.readValue(this.objectMapper.writeValueAsString(vlastBudgetDetailPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vlastBudgetDetailPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vlastBudgetDetail = update(vlastBudgetDetail);

        return vlastBudgetDetail;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VLastBudgetDetail delete(Integer vlastbudgetdetailId) {
        LOGGER.debug("Deleting VLastBudgetDetail with id: {}", vlastbudgetdetailId);
        VLastBudgetDetail deleted = this.wmGenericDao.findById(vlastbudgetdetailId);
        if (deleted == null) {
            LOGGER.debug("No VLastBudgetDetail found with id: {}", vlastbudgetdetailId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VLastBudgetDetail.class.getSimpleName(), vlastbudgetdetailId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VLastBudgetDetail vlastBudgetDetail) {
        LOGGER.debug("Deleting VLastBudgetDetail with {}", vlastBudgetDetail);
        this.wmGenericDao.delete(vlastBudgetDetail);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VLastBudgetDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VLastBudgetDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VLastBudgetDetail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VLastBudgetDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VLastBudgetDetail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VLastBudgetDetail to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}