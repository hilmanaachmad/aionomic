/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblPbAttachment;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;
import id.co.aio.procure_to_pay.aio_ptp.TblTProposalBudget;


/**
 * ServiceImpl object for domain model class TblTProposalBudget.
 *
 * @see TblTProposalBudget
 */
@Service("aio_ptp.TblTProposalBudgetService")
@Validated
@EntityService(entityClass = TblTProposalBudget.class, serviceId = "aio_ptp")
public class TblTProposalBudgetServiceImpl implements TblTProposalBudgetService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTProposalBudgetServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblPbAttachmentService")
    private TblPbAttachmentService tblPbAttachmentService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTPrService")
    private TblTPrService tblTPrService;

    @Autowired
    @Qualifier("aio_ptp.TblTProposalBudgetDao")
    private WMGenericDao<TblTProposalBudget, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTProposalBudget, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTProposalBudget create(TblTProposalBudget tblTproposalBudget) {
        LOGGER.debug("Creating a new TblTProposalBudget with information: {}", tblTproposalBudget);

        TblTProposalBudget tblTproposalBudgetCreated = this.wmGenericDao.create(tblTproposalBudget);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTproposalBudgetCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTProposalBudget getById(Integer tbltproposalbudgetId) {
        LOGGER.debug("Finding TblTProposalBudget by id: {}", tbltproposalbudgetId);
        return this.wmGenericDao.findById(tbltproposalbudgetId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTProposalBudget findById(Integer tbltproposalbudgetId) {
        LOGGER.debug("Finding TblTProposalBudget by id: {}", tbltproposalbudgetId);
        try {
            return this.wmGenericDao.findById(tbltproposalbudgetId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTProposalBudget found with id: {}", tbltproposalbudgetId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTProposalBudget> findByMultipleIds(List<Integer> tbltproposalbudgetIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTProposalBudgets by ids: {}", tbltproposalbudgetIds);

        return this.wmGenericDao.findByMultipleIds(tbltproposalbudgetIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTProposalBudget update(TblTProposalBudget tblTproposalBudget) {
        LOGGER.debug("Updating TblTProposalBudget with information: {}", tblTproposalBudget);

        this.wmGenericDao.update(tblTproposalBudget);
        this.wmGenericDao.refresh(tblTproposalBudget);

        return tblTproposalBudget;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTProposalBudget partialUpdate(Integer tbltproposalbudgetId, Map<String, Object>tblTproposalBudgetPatch) {
        LOGGER.debug("Partially Updating the TblTProposalBudget with id: {}", tbltproposalbudgetId);

        TblTProposalBudget tblTproposalBudget = getById(tbltproposalbudgetId);

        try {
            ObjectReader tblTproposalBudgetReader = this.objectMapper.reader().forType(TblTProposalBudget.class).withValueToUpdate(tblTproposalBudget);
            tblTproposalBudget = tblTproposalBudgetReader.readValue(this.objectMapper.writeValueAsString(tblTproposalBudgetPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTproposalBudgetPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTproposalBudget = update(tblTproposalBudget);

        return tblTproposalBudget;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTProposalBudget delete(Integer tbltproposalbudgetId) {
        LOGGER.debug("Deleting TblTProposalBudget with id: {}", tbltproposalbudgetId);
        TblTProposalBudget deleted = this.wmGenericDao.findById(tbltproposalbudgetId);
        if (deleted == null) {
            LOGGER.debug("No TblTProposalBudget found with id: {}", tbltproposalbudgetId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTProposalBudget.class.getSimpleName(), tbltproposalbudgetId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTProposalBudget tblTproposalBudget) {
        LOGGER.debug("Deleting TblTProposalBudget with {}", tblTproposalBudget);
        this.wmGenericDao.delete(tblTproposalBudget);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTProposalBudget> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTProposalBudgets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTProposalBudget> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTProposalBudgets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTProposalBudget to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTProposalBudget to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblPbAttachment> findAssociatedTblPbAttachments(Integer pbId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblPbAttachments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTproposalBudget.pbId = '" + pbId + "'");

        return tblPbAttachmentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPr> findAssociatedTblTprs(Integer pbId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTprs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblTproposalBudget.pbId = '" + pbId + "'");

        return tblTPrService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblPbAttachmentService instance
     */
    protected void setTblPbAttachmentService(TblPbAttachmentService service) {
        this.tblPbAttachmentService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTPrService instance
     */
    protected void setTblTPrService(TblTPrService service) {
        this.tblTPrService = service;
    }

}