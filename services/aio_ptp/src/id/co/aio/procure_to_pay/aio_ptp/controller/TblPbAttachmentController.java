/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblPbAttachment;
import id.co.aio.procure_to_pay.aio_ptp.service.TblPbAttachmentService;


/**
 * Controller object for domain model class TblPbAttachment.
 * @see TblPbAttachment
 */
@RestController("aio_ptp.TblPbAttachmentController")
@Api(value = "TblPbAttachmentController", description = "Exposes APIs to work with TblPbAttachment resource.")
@RequestMapping("/aio_ptp/TblPbAttachment")
public class TblPbAttachmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblPbAttachmentController.class);

    @Autowired
	@Qualifier("aio_ptp.TblPbAttachmentService")
	private TblPbAttachmentService tblPbAttachmentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblPbAttachment instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblPbAttachment createTblPbAttachment(@RequestBody TblPbAttachment tblPbAttachment) {
		LOGGER.debug("Create TblPbAttachment with information: {}" , tblPbAttachment);

		tblPbAttachment = tblPbAttachmentService.create(tblPbAttachment);
		LOGGER.debug("Created TblPbAttachment with information: {}" , tblPbAttachment);

	    return tblPbAttachment;
	}

    @ApiOperation(value = "Returns the TblPbAttachment instance associated with the given id.")
    @RequestMapping(value = "/{pbAtId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblPbAttachment getTblPbAttachment(@PathVariable("pbAtId") Integer pbAtId) {
        LOGGER.debug("Getting TblPbAttachment with id: {}" , pbAtId);

        TblPbAttachment foundTblPbAttachment = tblPbAttachmentService.getById(pbAtId);
        LOGGER.debug("TblPbAttachment details with id: {}" , foundTblPbAttachment);

        return foundTblPbAttachment;
    }

    @ApiOperation(value = "Updates the TblPbAttachment instance associated with the given id.")
    @RequestMapping(value = "/{pbAtId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblPbAttachment editTblPbAttachment(@PathVariable("pbAtId") Integer pbAtId, @RequestBody TblPbAttachment tblPbAttachment) {
        LOGGER.debug("Editing TblPbAttachment with id: {}" , tblPbAttachment.getPbAtId());

        tblPbAttachment.setPbAtId(pbAtId);
        tblPbAttachment = tblPbAttachmentService.update(tblPbAttachment);
        LOGGER.debug("TblPbAttachment details with id: {}" , tblPbAttachment);

        return tblPbAttachment;
    }
    
    @ApiOperation(value = "Partially updates the TblPbAttachment instance associated with the given id.")
    @RequestMapping(value = "/{pbAtId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblPbAttachment patchTblPbAttachment(@PathVariable("pbAtId") Integer pbAtId, @RequestBody @MapTo(TblPbAttachment.class) Map<String, Object> tblPbAttachmentPatch) {
        LOGGER.debug("Partially updating TblPbAttachment with id: {}" , pbAtId);

        TblPbAttachment tblPbAttachment = tblPbAttachmentService.partialUpdate(pbAtId, tblPbAttachmentPatch);
        LOGGER.debug("TblPbAttachment details after partial update: {}" , tblPbAttachment);

        return tblPbAttachment;
    }

    @ApiOperation(value = "Deletes the TblPbAttachment instance associated with the given id.")
    @RequestMapping(value = "/{pbAtId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblPbAttachment(@PathVariable("pbAtId") Integer pbAtId) {
        LOGGER.debug("Deleting TblPbAttachment with id: {}" , pbAtId);

        TblPbAttachment deletedTblPbAttachment = tblPbAttachmentService.delete(pbAtId);

        return deletedTblPbAttachment != null;
    }

    /**
     * @deprecated Use {@link #findTblPbAttachments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblPbAttachment instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblPbAttachment> searchTblPbAttachmentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblPbAttachments list by query filter:{}", (Object) queryFilters);
        return tblPbAttachmentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblPbAttachment instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblPbAttachment> findTblPbAttachments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblPbAttachments list by filter:", query);
        return tblPbAttachmentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblPbAttachment instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblPbAttachment> filterTblPbAttachments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblPbAttachments list by filter", query);
        return tblPbAttachmentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblPbAttachments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblPbAttachmentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblPbAttachmentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblPbAttachment.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblPbAttachmentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblPbAttachment instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblPbAttachments( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblPbAttachments");
		return tblPbAttachmentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblPbAttachmentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblPbAttachmentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblPbAttachmentService instance
	 */
	protected void setTblPbAttachmentService(TblPbAttachmentService service) {
		this.tblPbAttachmentService = service;
	}

}