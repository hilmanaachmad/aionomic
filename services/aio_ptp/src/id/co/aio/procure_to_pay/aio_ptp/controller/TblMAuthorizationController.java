/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.RelDelAuth;
import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuth;
import id.co.aio.procure_to_pay.aio_ptp.TblMAuthorization;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMAuthorizationService;


/**
 * Controller object for domain model class TblMAuthorization.
 * @see TblMAuthorization
 */
@RestController("aio_ptp.TblMAuthorizationController")
@Api(value = "TblMAuthorizationController", description = "Exposes APIs to work with TblMAuthorization resource.")
@RequestMapping("/aio_ptp/TblMAuthorization")
public class TblMAuthorizationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMAuthorizationController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMAuthorizationService")
	private TblMAuthorizationService tblMAuthorizationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMAuthorization instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMAuthorization createTblMAuthorization(@RequestBody TblMAuthorization tblMauthorization) {
		LOGGER.debug("Create TblMAuthorization with information: {}" , tblMauthorization);

		tblMauthorization = tblMAuthorizationService.create(tblMauthorization);
		LOGGER.debug("Created TblMAuthorization with information: {}" , tblMauthorization);

	    return tblMauthorization;
	}

    @ApiOperation(value = "Returns the TblMAuthorization instance associated with the given id.")
    @RequestMapping(value = "/{authId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMAuthorization getTblMAuthorization(@PathVariable("authId") Integer authId) {
        LOGGER.debug("Getting TblMAuthorization with id: {}" , authId);

        TblMAuthorization foundTblMAuthorization = tblMAuthorizationService.getById(authId);
        LOGGER.debug("TblMAuthorization details with id: {}" , foundTblMAuthorization);

        return foundTblMAuthorization;
    }

    @ApiOperation(value = "Updates the TblMAuthorization instance associated with the given id.")
    @RequestMapping(value = "/{authId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMAuthorization editTblMAuthorization(@PathVariable("authId") Integer authId, @RequestBody TblMAuthorization tblMauthorization) {
        LOGGER.debug("Editing TblMAuthorization with id: {}" , tblMauthorization.getAuthId());

        tblMauthorization.setAuthId(authId);
        tblMauthorization = tblMAuthorizationService.update(tblMauthorization);
        LOGGER.debug("TblMAuthorization details with id: {}" , tblMauthorization);

        return tblMauthorization;
    }
    
    @ApiOperation(value = "Partially updates the TblMAuthorization instance associated with the given id.")
    @RequestMapping(value = "/{authId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMAuthorization patchTblMAuthorization(@PathVariable("authId") Integer authId, @RequestBody @MapTo(TblMAuthorization.class) Map<String, Object> tblMauthorizationPatch) {
        LOGGER.debug("Partially updating TblMAuthorization with id: {}" , authId);

        TblMAuthorization tblMauthorization = tblMAuthorizationService.partialUpdate(authId, tblMauthorizationPatch);
        LOGGER.debug("TblMAuthorization details after partial update: {}" , tblMauthorization);

        return tblMauthorization;
    }

    @ApiOperation(value = "Deletes the TblMAuthorization instance associated with the given id.")
    @RequestMapping(value = "/{authId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMAuthorization(@PathVariable("authId") Integer authId) {
        LOGGER.debug("Deleting TblMAuthorization with id: {}" , authId);

        TblMAuthorization deletedTblMAuthorization = tblMAuthorizationService.delete(authId);

        return deletedTblMAuthorization != null;
    }

    /**
     * @deprecated Use {@link #findTblMAuthorizations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMAuthorization instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMAuthorization> searchTblMAuthorizationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMAuthorizations list by query filter:{}", (Object) queryFilters);
        return tblMAuthorizationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMAuthorization instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMAuthorization> findTblMAuthorizations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMAuthorizations list by filter:", query);
        return tblMAuthorizationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMAuthorization instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMAuthorization> filterTblMAuthorizations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMAuthorizations list by filter", query);
        return tblMAuthorizationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMAuthorizations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMAuthorizationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMAuthorizationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMAuthorization.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMAuthorizationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMAuthorization instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMAuthorizations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMAuthorizations");
		return tblMAuthorizationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMAuthorizationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMAuthorizationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{authId:.+}/relDelAuths", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the relDelAuths instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelDelAuth> findAssociatedRelDelAuths(@PathVariable("authId") Integer authId, Pageable pageable) {

        LOGGER.debug("Fetching all associated relDelAuths");
        return tblMAuthorizationService.findAssociatedRelDelAuths(authId, pageable);
    }

    @RequestMapping(value="/{authId:.+}/relRoleAuths", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the relRoleAuths instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelRoleAuth> findAssociatedRelRoleAuths(@PathVariable("authId") Integer authId, Pageable pageable) {

        LOGGER.debug("Fetching all associated relRoleAuths");
        return tblMAuthorizationService.findAssociatedRelRoleAuths(authId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMAuthorizationService instance
	 */
	protected void setTblMAuthorizationService(TblMAuthorizationService service) {
		this.tblMAuthorizationService = service;
	}

}