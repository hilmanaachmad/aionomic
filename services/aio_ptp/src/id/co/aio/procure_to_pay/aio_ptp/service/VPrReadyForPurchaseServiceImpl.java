/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPrReadyForPurchase;


/**
 * ServiceImpl object for domain model class VPrReadyForPurchase.
 *
 * @see VPrReadyForPurchase
 */
@Service("aio_ptp.VPrReadyForPurchaseService")
@Validated
@EntityService(entityClass = VPrReadyForPurchase.class, serviceId = "aio_ptp")
public class VPrReadyForPurchaseServiceImpl implements VPrReadyForPurchaseService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPrReadyForPurchaseServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPrReadyForPurchaseDao")
    private WMGenericDao<VPrReadyForPurchase, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPrReadyForPurchase, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPrReadyForPurchase create(VPrReadyForPurchase vprReadyForPurchase) {
        LOGGER.debug("Creating a new VPrReadyForPurchase with information: {}", vprReadyForPurchase);

        VPrReadyForPurchase vprReadyForPurchaseCreated = this.wmGenericDao.create(vprReadyForPurchase);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vprReadyForPurchaseCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPrReadyForPurchase getById(Integer vprreadyforpurchaseId) {
        LOGGER.debug("Finding VPrReadyForPurchase by id: {}", vprreadyforpurchaseId);
        return this.wmGenericDao.findById(vprreadyforpurchaseId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPrReadyForPurchase findById(Integer vprreadyforpurchaseId) {
        LOGGER.debug("Finding VPrReadyForPurchase by id: {}", vprreadyforpurchaseId);
        try {
            return this.wmGenericDao.findById(vprreadyforpurchaseId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPrReadyForPurchase found with id: {}", vprreadyforpurchaseId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPrReadyForPurchase> findByMultipleIds(List<Integer> vprreadyforpurchaseIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPrReadyForPurchases by ids: {}", vprreadyforpurchaseIds);

        return this.wmGenericDao.findByMultipleIds(vprreadyforpurchaseIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPrReadyForPurchase update(VPrReadyForPurchase vprReadyForPurchase) {
        LOGGER.debug("Updating VPrReadyForPurchase with information: {}", vprReadyForPurchase);

        this.wmGenericDao.update(vprReadyForPurchase);
        this.wmGenericDao.refresh(vprReadyForPurchase);

        return vprReadyForPurchase;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPrReadyForPurchase partialUpdate(Integer vprreadyforpurchaseId, Map<String, Object>vprReadyForPurchasePatch) {
        LOGGER.debug("Partially Updating the VPrReadyForPurchase with id: {}", vprreadyforpurchaseId);

        VPrReadyForPurchase vprReadyForPurchase = getById(vprreadyforpurchaseId);

        try {
            ObjectReader vprReadyForPurchaseReader = this.objectMapper.reader().forType(VPrReadyForPurchase.class).withValueToUpdate(vprReadyForPurchase);
            vprReadyForPurchase = vprReadyForPurchaseReader.readValue(this.objectMapper.writeValueAsString(vprReadyForPurchasePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vprReadyForPurchasePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vprReadyForPurchase = update(vprReadyForPurchase);

        return vprReadyForPurchase;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPrReadyForPurchase delete(Integer vprreadyforpurchaseId) {
        LOGGER.debug("Deleting VPrReadyForPurchase with id: {}", vprreadyforpurchaseId);
        VPrReadyForPurchase deleted = this.wmGenericDao.findById(vprreadyforpurchaseId);
        if (deleted == null) {
            LOGGER.debug("No VPrReadyForPurchase found with id: {}", vprreadyforpurchaseId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPrReadyForPurchase.class.getSimpleName(), vprreadyforpurchaseId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPrReadyForPurchase vprReadyForPurchase) {
        LOGGER.debug("Deleting VPrReadyForPurchase with {}", vprReadyForPurchase);
        this.wmGenericDao.delete(vprReadyForPurchase);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPrReadyForPurchase> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPrReadyForPurchases");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPrReadyForPurchase> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPrReadyForPurchases");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPrReadyForPurchase to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPrReadyForPurchase to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}