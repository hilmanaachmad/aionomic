/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPoReadyToGr;
import id.co.aio.procure_to_pay.aio_ptp.service.VPoReadyToGrService;


/**
 * Controller object for domain model class VPoReadyToGr.
 * @see VPoReadyToGr
 */
@RestController("aio_ptp.VPoReadyToGrController")
@Api(value = "VPoReadyToGrController", description = "Exposes APIs to work with VPoReadyToGr resource.")
@RequestMapping("/aio_ptp/VPoReadyToGr")
public class VPoReadyToGrController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoReadyToGrController.class);

    @Autowired
	@Qualifier("aio_ptp.VPoReadyToGrService")
	private VPoReadyToGrService vPoReadyToGrService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPoReadyToGr instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGr createVPoReadyToGr(@RequestBody VPoReadyToGr vpoReadyToGr) {
		LOGGER.debug("Create VPoReadyToGr with information: {}" , vpoReadyToGr);

		vpoReadyToGr = vPoReadyToGrService.create(vpoReadyToGr);
		LOGGER.debug("Created VPoReadyToGr with information: {}" , vpoReadyToGr);

	    return vpoReadyToGr;
	}

    @ApiOperation(value = "Returns the VPoReadyToGr instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGr getVPoReadyToGr(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VPoReadyToGr with id: {}" , id);

        VPoReadyToGr foundVPoReadyToGr = vPoReadyToGrService.getById(id);
        LOGGER.debug("VPoReadyToGr details with id: {}" , foundVPoReadyToGr);

        return foundVPoReadyToGr;
    }

    @ApiOperation(value = "Updates the VPoReadyToGr instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGr editVPoReadyToGr(@PathVariable("id") Integer id, @RequestBody VPoReadyToGr vpoReadyToGr) {
        LOGGER.debug("Editing VPoReadyToGr with id: {}" , vpoReadyToGr.getId());

        vpoReadyToGr.setId(id);
        vpoReadyToGr = vPoReadyToGrService.update(vpoReadyToGr);
        LOGGER.debug("VPoReadyToGr details with id: {}" , vpoReadyToGr);

        return vpoReadyToGr;
    }
    
    @ApiOperation(value = "Partially updates the VPoReadyToGr instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGr patchVPoReadyToGr(@PathVariable("id") Integer id, @RequestBody @MapTo(VPoReadyToGr.class) Map<String, Object> vpoReadyToGrPatch) {
        LOGGER.debug("Partially updating VPoReadyToGr with id: {}" , id);

        VPoReadyToGr vpoReadyToGr = vPoReadyToGrService.partialUpdate(id, vpoReadyToGrPatch);
        LOGGER.debug("VPoReadyToGr details after partial update: {}" , vpoReadyToGr);

        return vpoReadyToGr;
    }

    @ApiOperation(value = "Deletes the VPoReadyToGr instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPoReadyToGr(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VPoReadyToGr with id: {}" , id);

        VPoReadyToGr deletedVPoReadyToGr = vPoReadyToGrService.delete(id);

        return deletedVPoReadyToGr != null;
    }

    /**
     * @deprecated Use {@link #findVPoReadyToGrs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPoReadyToGr instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToGr> searchVPoReadyToGrsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPoReadyToGrs list by query filter:{}", (Object) queryFilters);
        return vPoReadyToGrService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoReadyToGr instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToGr> findVPoReadyToGrs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoReadyToGrs list by filter:", query);
        return vPoReadyToGrService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoReadyToGr instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToGr> filterVPoReadyToGrs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoReadyToGrs list by filter", query);
        return vPoReadyToGrService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPoReadyToGrs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPoReadyToGrService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPoReadyToGrsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPoReadyToGr.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPoReadyToGrService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPoReadyToGr instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPoReadyToGrs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPoReadyToGrs");
		return vPoReadyToGrService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPoReadyToGrAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPoReadyToGrService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPoReadyToGrService instance
	 */
	protected void setVPoReadyToGrService(VPoReadyToGrService service) {
		this.vPoReadyToGrService = service;
	}

}