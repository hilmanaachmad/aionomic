/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuth;
import id.co.aio.procure_to_pay.aio_ptp.RelRoleAuthId;


/**
 * ServiceImpl object for domain model class RelRoleAuth.
 *
 * @see RelRoleAuth
 */
@Service("aio_ptp.RelRoleAuthService")
@Validated
@EntityService(entityClass = RelRoleAuth.class, serviceId = "aio_ptp")
public class RelRoleAuthServiceImpl implements RelRoleAuthService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelRoleAuthServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.RelRoleAuthDao")
    private WMGenericDao<RelRoleAuth, RelRoleAuthId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RelRoleAuth, RelRoleAuthId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public RelRoleAuth create(RelRoleAuth relRoleAuth) {
        LOGGER.debug("Creating a new RelRoleAuth with information: {}", relRoleAuth);

        RelRoleAuth relRoleAuthCreated = this.wmGenericDao.create(relRoleAuth);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(relRoleAuthCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public RelRoleAuth getById(RelRoleAuthId relroleauthId) {
        LOGGER.debug("Finding RelRoleAuth by id: {}", relroleauthId);
        return this.wmGenericDao.findById(relroleauthId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public RelRoleAuth findById(RelRoleAuthId relroleauthId) {
        LOGGER.debug("Finding RelRoleAuth by id: {}", relroleauthId);
        try {
            return this.wmGenericDao.findById(relroleauthId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RelRoleAuth found with id: {}", relroleauthId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<RelRoleAuth> findByMultipleIds(List<RelRoleAuthId> relroleauthIds, boolean orderedReturn) {
        LOGGER.debug("Finding RelRoleAuths by ids: {}", relroleauthIds);

        return this.wmGenericDao.findByMultipleIds(relroleauthIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public RelRoleAuth update(RelRoleAuth relRoleAuth) {
        LOGGER.debug("Updating RelRoleAuth with information: {}", relRoleAuth);

        this.wmGenericDao.update(relRoleAuth);
        this.wmGenericDao.refresh(relRoleAuth);

        return relRoleAuth;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public RelRoleAuth partialUpdate(RelRoleAuthId relroleauthId, Map<String, Object>relRoleAuthPatch) {
        LOGGER.debug("Partially Updating the RelRoleAuth with id: {}", relroleauthId);

        RelRoleAuth relRoleAuth = getById(relroleauthId);

        try {
            ObjectReader relRoleAuthReader = this.objectMapper.reader().forType(RelRoleAuth.class).withValueToUpdate(relRoleAuth);
            relRoleAuth = relRoleAuthReader.readValue(this.objectMapper.writeValueAsString(relRoleAuthPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", relRoleAuthPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        relRoleAuth = update(relRoleAuth);

        return relRoleAuth;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public RelRoleAuth delete(RelRoleAuthId relroleauthId) {
        LOGGER.debug("Deleting RelRoleAuth with id: {}", relroleauthId);
        RelRoleAuth deleted = this.wmGenericDao.findById(relroleauthId);
        if (deleted == null) {
            LOGGER.debug("No RelRoleAuth found with id: {}", relroleauthId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RelRoleAuth.class.getSimpleName(), relroleauthId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(RelRoleAuth relRoleAuth) {
        LOGGER.debug("Deleting RelRoleAuth with {}", relRoleAuth);
        this.wmGenericDao.delete(relRoleAuth);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<RelRoleAuth> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RelRoleAuths");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<RelRoleAuth> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RelRoleAuths");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table RelRoleAuth to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table RelRoleAuth to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}