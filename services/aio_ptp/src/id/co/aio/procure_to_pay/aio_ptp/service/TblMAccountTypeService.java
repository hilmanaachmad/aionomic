/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMAccountType;
import id.co.aio.procure_to_pay.aio_ptp.TblMIo;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetHeader;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;

/**
 * Service object for domain model class {@link TblMAccountType}.
 */
public interface TblMAccountTypeService {

    /**
     * Creates a new TblMAccountType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMAccountType if any.
     *
     * @param tblMaccountType Details of the TblMAccountType to be created; value cannot be null.
     * @return The newly created TblMAccountType.
     */
    TblMAccountType create(@Valid TblMAccountType tblMaccountType);


	/**
     * Returns TblMAccountType by given id if exists.
     *
     * @param tblmaccounttypeId The id of the TblMAccountType to get; value cannot be null.
     * @return TblMAccountType associated with the given tblmaccounttypeId.
	 * @throws EntityNotFoundException If no TblMAccountType is found.
     */
    TblMAccountType getById(Integer tblmaccounttypeId);

    /**
     * Find and return the TblMAccountType by given id if exists, returns null otherwise.
     *
     * @param tblmaccounttypeId The id of the TblMAccountType to get; value cannot be null.
     * @return TblMAccountType associated with the given tblmaccounttypeId.
     */
    TblMAccountType findById(Integer tblmaccounttypeId);

	/**
     * Find and return the list of TblMAccountTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmaccounttypeIds The id's of the TblMAccountType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMAccountTypes associated with the given tblmaccounttypeIds.
     */
    List<TblMAccountType> findByMultipleIds(List<Integer> tblmaccounttypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMAccountType. It replaces all fields of the existing TblMAccountType with the given tblMaccountType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMAccountType if any.
     *
     * @param tblMaccountType The details of the TblMAccountType to be updated; value cannot be null.
     * @return The updated TblMAccountType.
     * @throws EntityNotFoundException if no TblMAccountType is found with given input.
     */
    TblMAccountType update(@Valid TblMAccountType tblMaccountType);


    /**
     * Partially updates the details of an existing TblMAccountType. It updates only the
     * fields of the existing TblMAccountType which are passed in the tblMaccountTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMAccountType if any.
     *
     * @param tblmaccounttypeId The id of the TblMAccountType to be deleted; value cannot be null.
     * @param tblMaccountTypePatch The partial data of TblMAccountType which is supposed to be updated; value cannot be null.
     * @return The updated TblMAccountType.
     * @throws EntityNotFoundException if no TblMAccountType is found with given input.
     */
    TblMAccountType partialUpdate(Integer tblmaccounttypeId, Map<String, Object> tblMaccountTypePatch);

    /**
     * Deletes an existing TblMAccountType with the given id.
     *
     * @param tblmaccounttypeId The id of the TblMAccountType to be deleted; value cannot be null.
     * @return The deleted TblMAccountType.
     * @throws EntityNotFoundException if no TblMAccountType found with the given id.
     */
    TblMAccountType delete(Integer tblmaccounttypeId);

    /**
     * Deletes an existing TblMAccountType with the given object.
     *
     * @param tblMaccountType The instance of the TblMAccountType to be deleted; value cannot be null.
     */
    void delete(TblMAccountType tblMaccountType);

    /**
     * Find all TblMAccountTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMAccountTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMAccountType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMAccountTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMAccountTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMAccountType> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMAccountTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMAccountTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMAccountTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMAccountType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblMios for given TblMAccountType id.
     *
     * @param accId value of accId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblMIo instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMIo> findAssociatedTblMios(Integer accId, Pageable pageable);

    /*
     * Returns the associated tblTbudgetHeaders for given TblMAccountType id.
     *
     * @param accId value of accId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTBudgetHeader instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTBudgetHeader> findAssociatedTblTbudgetHeaders(Integer accId, Pageable pageable);

    /*
     * Returns the associated tblTprs for given TblMAccountType id.
     *
     * @param accId value of accId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTPr instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTPr> findAssociatedTblTprs(Integer accId, Pageable pageable);

}