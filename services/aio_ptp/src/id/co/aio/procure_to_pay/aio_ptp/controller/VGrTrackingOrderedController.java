/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VGrTrackingOrdered;
import id.co.aio.procure_to_pay.aio_ptp.service.VGrTrackingOrderedService;


/**
 * Controller object for domain model class VGrTrackingOrdered.
 * @see VGrTrackingOrdered
 */
@RestController("aio_ptp.VGrTrackingOrderedController")
@Api(value = "VGrTrackingOrderedController", description = "Exposes APIs to work with VGrTrackingOrdered resource.")
@RequestMapping("/aio_ptp/VGrTrackingOrdered")
public class VGrTrackingOrderedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrTrackingOrderedController.class);

    @Autowired
	@Qualifier("aio_ptp.VGrTrackingOrderedService")
	private VGrTrackingOrderedService vGrTrackingOrderedService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VGrTrackingOrdered instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingOrdered createVGrTrackingOrdered(@RequestBody VGrTrackingOrdered vgrTrackingOrdered) {
		LOGGER.debug("Create VGrTrackingOrdered with information: {}" , vgrTrackingOrdered);

		vgrTrackingOrdered = vGrTrackingOrderedService.create(vgrTrackingOrdered);
		LOGGER.debug("Created VGrTrackingOrdered with information: {}" , vgrTrackingOrdered);

	    return vgrTrackingOrdered;
	}

    @ApiOperation(value = "Returns the VGrTrackingOrdered instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingOrdered getVGrTrackingOrdered(@PathVariable("idPoLineItem") Integer idPoLineItem) {
        LOGGER.debug("Getting VGrTrackingOrdered with id: {}" , idPoLineItem);

        VGrTrackingOrdered foundVGrTrackingOrdered = vGrTrackingOrderedService.getById(idPoLineItem);
        LOGGER.debug("VGrTrackingOrdered details with id: {}" , foundVGrTrackingOrdered);

        return foundVGrTrackingOrdered;
    }

    @ApiOperation(value = "Updates the VGrTrackingOrdered instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingOrdered editVGrTrackingOrdered(@PathVariable("idPoLineItem") Integer idPoLineItem, @RequestBody VGrTrackingOrdered vgrTrackingOrdered) {
        LOGGER.debug("Editing VGrTrackingOrdered with id: {}" , vgrTrackingOrdered.getIdPoLineItem());

        vgrTrackingOrdered.setIdPoLineItem(idPoLineItem);
        vgrTrackingOrdered = vGrTrackingOrderedService.update(vgrTrackingOrdered);
        LOGGER.debug("VGrTrackingOrdered details with id: {}" , vgrTrackingOrdered);

        return vgrTrackingOrdered;
    }
    
    @ApiOperation(value = "Partially updates the VGrTrackingOrdered instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTrackingOrdered patchVGrTrackingOrdered(@PathVariable("idPoLineItem") Integer idPoLineItem, @RequestBody @MapTo(VGrTrackingOrdered.class) Map<String, Object> vgrTrackingOrderedPatch) {
        LOGGER.debug("Partially updating VGrTrackingOrdered with id: {}" , idPoLineItem);

        VGrTrackingOrdered vgrTrackingOrdered = vGrTrackingOrderedService.partialUpdate(idPoLineItem, vgrTrackingOrderedPatch);
        LOGGER.debug("VGrTrackingOrdered details after partial update: {}" , vgrTrackingOrdered);

        return vgrTrackingOrdered;
    }

    @ApiOperation(value = "Deletes the VGrTrackingOrdered instance associated with the given id.")
    @RequestMapping(value = "/{idPoLineItem:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVGrTrackingOrdered(@PathVariable("idPoLineItem") Integer idPoLineItem) {
        LOGGER.debug("Deleting VGrTrackingOrdered with id: {}" , idPoLineItem);

        VGrTrackingOrdered deletedVGrTrackingOrdered = vGrTrackingOrderedService.delete(idPoLineItem);

        return deletedVGrTrackingOrdered != null;
    }

    /**
     * @deprecated Use {@link #findVGrTrackingOrdereds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VGrTrackingOrdered instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTrackingOrdered> searchVGrTrackingOrderedsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VGrTrackingOrdereds list by query filter:{}", (Object) queryFilters);
        return vGrTrackingOrderedService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrTrackingOrdered instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTrackingOrdered> findVGrTrackingOrdereds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrTrackingOrdereds list by filter:", query);
        return vGrTrackingOrderedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrTrackingOrdered instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTrackingOrdered> filterVGrTrackingOrdereds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrTrackingOrdereds list by filter", query);
        return vGrTrackingOrderedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVGrTrackingOrdereds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vGrTrackingOrderedService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVGrTrackingOrderedsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VGrTrackingOrdered.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vGrTrackingOrderedService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VGrTrackingOrdered instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVGrTrackingOrdereds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VGrTrackingOrdereds");
		return vGrTrackingOrderedService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVGrTrackingOrderedAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vGrTrackingOrderedService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VGrTrackingOrderedService instance
	 */
	protected void setVGrTrackingOrderedService(VGrTrackingOrderedService service) {
		this.vGrTrackingOrderedService = service;
	}

}