/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblSapReturnError;
import id.co.aio.procure_to_pay.aio_ptp.service.TblSapReturnErrorService;


/**
 * Controller object for domain model class TblSapReturnError.
 * @see TblSapReturnError
 */
@RestController("aio_ptp.TblSapReturnErrorController")
@Api(value = "TblSapReturnErrorController", description = "Exposes APIs to work with TblSapReturnError resource.")
@RequestMapping("/aio_ptp/TblSapReturnError")
public class TblSapReturnErrorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblSapReturnErrorController.class);

    @Autowired
	@Qualifier("aio_ptp.TblSapReturnErrorService")
	private TblSapReturnErrorService tblSapReturnErrorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblSapReturnError instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblSapReturnError createTblSapReturnError(@RequestBody TblSapReturnError tblSapReturnError) {
		LOGGER.debug("Create TblSapReturnError with information: {}" , tblSapReturnError);

		tblSapReturnError = tblSapReturnErrorService.create(tblSapReturnError);
		LOGGER.debug("Created TblSapReturnError with information: {}" , tblSapReturnError);

	    return tblSapReturnError;
	}

    @ApiOperation(value = "Returns the TblSapReturnError instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblSapReturnError getTblSapReturnError(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TblSapReturnError with id: {}" , id);

        TblSapReturnError foundTblSapReturnError = tblSapReturnErrorService.getById(id);
        LOGGER.debug("TblSapReturnError details with id: {}" , foundTblSapReturnError);

        return foundTblSapReturnError;
    }

    @ApiOperation(value = "Updates the TblSapReturnError instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblSapReturnError editTblSapReturnError(@PathVariable("id") Integer id, @RequestBody TblSapReturnError tblSapReturnError) {
        LOGGER.debug("Editing TblSapReturnError with id: {}" , tblSapReturnError.getId());

        tblSapReturnError.setId(id);
        tblSapReturnError = tblSapReturnErrorService.update(tblSapReturnError);
        LOGGER.debug("TblSapReturnError details with id: {}" , tblSapReturnError);

        return tblSapReturnError;
    }
    
    @ApiOperation(value = "Partially updates the TblSapReturnError instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblSapReturnError patchTblSapReturnError(@PathVariable("id") Integer id, @RequestBody @MapTo(TblSapReturnError.class) Map<String, Object> tblSapReturnErrorPatch) {
        LOGGER.debug("Partially updating TblSapReturnError with id: {}" , id);

        TblSapReturnError tblSapReturnError = tblSapReturnErrorService.partialUpdate(id, tblSapReturnErrorPatch);
        LOGGER.debug("TblSapReturnError details after partial update: {}" , tblSapReturnError);

        return tblSapReturnError;
    }

    @ApiOperation(value = "Deletes the TblSapReturnError instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblSapReturnError(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TblSapReturnError with id: {}" , id);

        TblSapReturnError deletedTblSapReturnError = tblSapReturnErrorService.delete(id);

        return deletedTblSapReturnError != null;
    }

    /**
     * @deprecated Use {@link #findTblSapReturnErrors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblSapReturnError instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblSapReturnError> searchTblSapReturnErrorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblSapReturnErrors list by query filter:{}", (Object) queryFilters);
        return tblSapReturnErrorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblSapReturnError instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblSapReturnError> findTblSapReturnErrors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblSapReturnErrors list by filter:", query);
        return tblSapReturnErrorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblSapReturnError instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblSapReturnError> filterTblSapReturnErrors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblSapReturnErrors list by filter", query);
        return tblSapReturnErrorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblSapReturnErrors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblSapReturnErrorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblSapReturnErrorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblSapReturnError.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblSapReturnErrorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblSapReturnError instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblSapReturnErrors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblSapReturnErrors");
		return tblSapReturnErrorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblSapReturnErrorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblSapReturnErrorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblSapReturnErrorService instance
	 */
	protected void setTblSapReturnErrorService(TblSapReturnErrorService service) {
		this.tblSapReturnErrorService = service;
	}

}