/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VGrLineItem;


/**
 * ServiceImpl object for domain model class VGrLineItem.
 *
 * @see VGrLineItem
 */
@Service("aio_ptp.VGrLineItemService")
@Validated
@EntityService(entityClass = VGrLineItem.class, serviceId = "aio_ptp")
public class VGrLineItemServiceImpl implements VGrLineItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrLineItemServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VGrLineItemDao")
    private WMGenericDao<VGrLineItem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VGrLineItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrLineItem create(VGrLineItem vgrLineItem) {
        LOGGER.debug("Creating a new VGrLineItem with information: {}", vgrLineItem);

        VGrLineItem vgrLineItemCreated = this.wmGenericDao.create(vgrLineItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vgrLineItemCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrLineItem getById(Integer vgrlineitemId) {
        LOGGER.debug("Finding VGrLineItem by id: {}", vgrlineitemId);
        return this.wmGenericDao.findById(vgrlineitemId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VGrLineItem findById(Integer vgrlineitemId) {
        LOGGER.debug("Finding VGrLineItem by id: {}", vgrlineitemId);
        try {
            return this.wmGenericDao.findById(vgrlineitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VGrLineItem found with id: {}", vgrlineitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VGrLineItem> findByMultipleIds(List<Integer> vgrlineitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding VGrLineItems by ids: {}", vgrlineitemIds);

        return this.wmGenericDao.findByMultipleIds(vgrlineitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VGrLineItem update(VGrLineItem vgrLineItem) {
        LOGGER.debug("Updating VGrLineItem with information: {}", vgrLineItem);

        this.wmGenericDao.update(vgrLineItem);
        this.wmGenericDao.refresh(vgrLineItem);

        return vgrLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrLineItem partialUpdate(Integer vgrlineitemId, Map<String, Object>vgrLineItemPatch) {
        LOGGER.debug("Partially Updating the VGrLineItem with id: {}", vgrlineitemId);

        VGrLineItem vgrLineItem = getById(vgrlineitemId);

        try {
            ObjectReader vgrLineItemReader = this.objectMapper.reader().forType(VGrLineItem.class).withValueToUpdate(vgrLineItem);
            vgrLineItem = vgrLineItemReader.readValue(this.objectMapper.writeValueAsString(vgrLineItemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vgrLineItemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vgrLineItem = update(vgrLineItem);

        return vgrLineItem;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VGrLineItem delete(Integer vgrlineitemId) {
        LOGGER.debug("Deleting VGrLineItem with id: {}", vgrlineitemId);
        VGrLineItem deleted = this.wmGenericDao.findById(vgrlineitemId);
        if (deleted == null) {
            LOGGER.debug("No VGrLineItem found with id: {}", vgrlineitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VGrLineItem.class.getSimpleName(), vgrlineitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VGrLineItem vgrLineItem) {
        LOGGER.debug("Deleting VGrLineItem with {}", vgrLineItem);
        this.wmGenericDao.delete(vgrLineItem);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrLineItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VGrLineItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VGrLineItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VGrLineItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrLineItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VGrLineItem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}