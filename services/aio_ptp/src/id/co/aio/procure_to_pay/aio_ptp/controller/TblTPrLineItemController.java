/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTPrLineItem;
import id.co.aio.procure_to_pay.aio_ptp.TblTRfqLiStatus;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTPrLineItemService;


/**
 * Controller object for domain model class TblTPrLineItem.
 * @see TblTPrLineItem
 */
@RestController("aio_ptp.TblTPrLineItemController")
@Api(value = "TblTPrLineItemController", description = "Exposes APIs to work with TblTPrLineItem resource.")
@RequestMapping("/aio_ptp/TblTPrLineItem")
public class TblTPrLineItemController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPrLineItemController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTPrLineItemService")
	private TblTPrLineItemService tblTPrLineItemService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTPrLineItem instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPrLineItem createTblTPrLineItem(@RequestBody TblTPrLineItem tblTprLineItem) {
		LOGGER.debug("Create TblTPrLineItem with information: {}" , tblTprLineItem);

		tblTprLineItem = tblTPrLineItemService.create(tblTprLineItem);
		LOGGER.debug("Created TblTPrLineItem with information: {}" , tblTprLineItem);

	    return tblTprLineItem;
	}

    @ApiOperation(value = "Returns the TblTPrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{pliId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPrLineItem getTblTPrLineItem(@PathVariable("pliId") Integer pliId) {
        LOGGER.debug("Getting TblTPrLineItem with id: {}" , pliId);

        TblTPrLineItem foundTblTPrLineItem = tblTPrLineItemService.getById(pliId);
        LOGGER.debug("TblTPrLineItem details with id: {}" , foundTblTPrLineItem);

        return foundTblTPrLineItem;
    }

    @ApiOperation(value = "Updates the TblTPrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{pliId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPrLineItem editTblTPrLineItem(@PathVariable("pliId") Integer pliId, @RequestBody TblTPrLineItem tblTprLineItem) {
        LOGGER.debug("Editing TblTPrLineItem with id: {}" , tblTprLineItem.getPliId());

        tblTprLineItem.setPliId(pliId);
        tblTprLineItem = tblTPrLineItemService.update(tblTprLineItem);
        LOGGER.debug("TblTPrLineItem details with id: {}" , tblTprLineItem);

        return tblTprLineItem;
    }
    
    @ApiOperation(value = "Partially updates the TblTPrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{pliId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTPrLineItem patchTblTPrLineItem(@PathVariable("pliId") Integer pliId, @RequestBody @MapTo(TblTPrLineItem.class) Map<String, Object> tblTprLineItemPatch) {
        LOGGER.debug("Partially updating TblTPrLineItem with id: {}" , pliId);

        TblTPrLineItem tblTprLineItem = tblTPrLineItemService.partialUpdate(pliId, tblTprLineItemPatch);
        LOGGER.debug("TblTPrLineItem details after partial update: {}" , tblTprLineItem);

        return tblTprLineItem;
    }

    @ApiOperation(value = "Deletes the TblTPrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{pliId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTPrLineItem(@PathVariable("pliId") Integer pliId) {
        LOGGER.debug("Deleting TblTPrLineItem with id: {}" , pliId);

        TblTPrLineItem deletedTblTPrLineItem = tblTPrLineItemService.delete(pliId);

        return deletedTblTPrLineItem != null;
    }

    /**
     * @deprecated Use {@link #findTblTPrLineItems(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTPrLineItem instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPrLineItem> searchTblTPrLineItemsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTPrLineItems list by query filter:{}", (Object) queryFilters);
        return tblTPrLineItemService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTPrLineItem instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPrLineItem> findTblTPrLineItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTPrLineItems list by filter:", query);
        return tblTPrLineItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTPrLineItem instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTPrLineItem> filterTblTPrLineItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTPrLineItems list by filter", query);
        return tblTPrLineItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTPrLineItems(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTPrLineItemService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTPrLineItemsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTPrLineItem.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTPrLineItemService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTPrLineItem instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTPrLineItems( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTPrLineItems");
		return tblTPrLineItemService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTPrLineItemAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTPrLineItemService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{pliId:.+}/tblTrfqLiStatuses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblTrfqLiStatuses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTRfqLiStatus> findAssociatedTblTrfqLiStatuses(@PathVariable("pliId") Integer pliId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblTrfqLiStatuses");
        return tblTPrLineItemService.findAssociatedTblTrfqLiStatuses(pliId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTPrLineItemService instance
	 */
	protected void setTblTPrLineItemService(TblTPrLineItemService service) {
		this.tblTPrLineItemService = service;
	}

}