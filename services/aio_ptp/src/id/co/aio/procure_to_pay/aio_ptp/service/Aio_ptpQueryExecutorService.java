/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.export.ExportOptions;

import id.co.aio.procure_to_pay.aio_ptp.models.query.*;

public interface Aio_ptpQueryExecutorService {

    Integer executeGenerateRFQRef(GenerateRfqrefRequest generateRfqrefRequest);

    Page<GetBodbyDepartementIdResponse> executeGetBODbyDepartementId(List<Integer> departementId, Pageable pageable);

    void exportGetBODbyDepartementId(List<Integer> departementId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeSendCheckerNotification(SendCheckerNotificationRequest sendCheckerNotificationRequest);

    Integer executeUpdate_userDepStatus(UpdateUserDepStatusRequest updateUserDepStatusRequest);

    Page<GetBudgetUploadListResponse> executeGetBudgetUploadList(String year, String company, Pageable pageable);

    void exportGetBudgetUploadList(String year, String company, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeSetUserProfilePic(SetUserProfilePicRequest setUserProfilePicRequest);

    Page<QGetBudgetDetail2Response> executeQ_get_BudgetDetail2(String bhId, Pageable pageable);

    void exportQ_get_BudgetDetail2(String bhId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetDataDetailDoResponse> executeGetDataDetailDO(String idPo, Pageable pageable);

    void exportGetDataDetailDO(String idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeQUpdateETAPOLineItem(QupdateEtapolineItemRequest qupdateEtapolineItemRequest);

    Integer executeDeleteTaskListByParamId(DeleteTaskListByParamIdRequest deleteTaskListByParamIdRequest);

    Page<QgetMapRoleAllResponse> executeQGetMapRoleAll(Pageable pageable);

    void exportQGetMapRoleAll(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeVendorPONotes(VendorPonotesRequest vendorPonotesRequest);

    Integer executeDeleteBudgetUpload(DeleteBudgetUploadRequest deleteBudgetUploadRequest);

    Integer executeChangeRFQVendorStatus(ChangeRfqvendorStatusRequest changeRfqvendorStatusRequest);

    GetUserRoleResponse executeGetUserRole(String username);

    Page<QMasterDepartmentResponse> executeQ_MasterDepartment(Pageable pageable);

    void exportQ_MasterDepartment(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeDeleteAttionalAttachment(Integer baId);

    Page<VmaterrialGroupPurchasingResponse> executeVMaterrialGroupPurchasing(String userId, Pageable pageable);

    void exportVMaterrialGroupPurchasing(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetUnseenNotificationResponse> executeGetUnseenNotification(Pageable pageable);

    void exportGetUnseenNotification(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetRfgvendorTrackingResponse> executeGetRFGVendorTracking(Pageable pageable);

    void exportGetRFGVendorTracking(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetRoleUserMapListResponse> executeGetRoleUserMapList(String searchRoleTitle, String searchAssignee, String searchStatus, Pageable pageable);

    void exportGetRoleUserMapList(String searchRoleTitle, String searchAssignee, String searchStatus, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetMappingToUserResponse> executeGetMappingToUser(Pageable pageable);

    void exportGetMappingToUser(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QAccTypeBudgetHmapDepUserResponse> executeQ_AccTypeBudgetHMapDepUser(String emp, Pageable pageable);

    void exportQ_AccTypeBudgetHMapDepUser(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeUpdatePurchaseRequest(UpdatePurchaseRequestRequest updatePurchaseRequestRequest);

    Integer executeQSetStatusGRLineItemByPRLineHeader(QsetStatusGrlineItemByPrlineHeaderRequest qsetStatusGrlineItemByPrlineHeaderRequest);

    Integer executeUpdate_userMapStatus(UpdateUserMapStatusRequest updateUserMapStatusRequest);

    Page<OrganizationMapResponse> executeOrganizationMap(Pageable pageable);

    void exportOrganizationMap(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeQInsertBudgetDetail(QinsertBudgetDetailRequest qinsertBudgetDetailRequest);

    Page<GetRfqparamByDepartmentResponse> executeGetRFQParamByDepartment(String userDepartment, Pageable pageable);

    void exportGetRFQParamByDepartment(String userDepartment, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeUpdateStatusPO(UpdateStatusPoRequest updateStatusPoRequest);

    Integer executeChangeRGQ(ChangeRgqRequest changeRgqRequest);

    Integer executeChangeTaskListUserId(ChangeTaskListUserIdRequest changeTaskListUserIdRequest);

    Integer executeReminderTasklistQuery(ReminderTasklistQueryRequest reminderTasklistQueryRequest);

    Integer executeChangeRFQVendorStatusWithoutCreated(ChangeRfqvendorStatusWithoutCreatedRequest changeRfqvendorStatusWithoutCreatedRequest);

    Page<GetDelegatedRolesResponse> executeGetDelegatedRoles(String userid, Pageable pageable);

    void exportGetDelegatedRoles(String userid, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QBrandMappingToBudgetDepUsrMapResponse> executeQ_BrandMappingToBudgetDepUsrMap(String emp, Pageable pageable);

    void exportQ_BrandMappingToBudgetDepUsrMap(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetPurchaseRequestResponse> executeGetPurchaseRequest(Pageable pageable);

    void exportGetPurchaseRequest(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetDataPodetailResponse> executeGetDataPODetail(String idPo, Pageable pageable);

    void exportGetDataPODetail(String idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetMappingToUser2Response> executeGetMappingToUser2(String company, String departrment, String assignee, String status, Pageable pageable);

    void exportGetMappingToUser2(String company, String departrment, String assignee, String status, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executePrChangeStatus(PrChangeStatusRequest prChangeStatusRequest);

    Page<GetPolineitemResponse> executeGetPOLineitem(String idPo, Pageable pageable);

    void exportGetPOLineitem(String idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QdataPoheaderResponse> executeQDataPOHeader(Integer idPo, Pageable pageable);

    void exportQDataPOHeader(Integer idPo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetDeptDivCostCenterAllResponse> executeGet_DeptDivCostCenterAll(Pageable pageable);

    void exportGet_DeptDivCostCenterAll(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeChangeRFQSetNull(ChangeRfqsetNullRequest changeRfqsetNullRequest);

    Page<QCompanyResponse> executeQ_company(Pageable pageable);

    void exportQ_company(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeQBDReversalLineItem(QbdreversalLineItemRequest qbdreversalLineItemRequest);

    CountUnseenInboxResponse executeCountUnseenInbox();

    GetCompanyRfqResponse executeGetCompanyRFQ(String rfqvid);

    Page<GetDelegationHistoryResponse> executeGetDelegationHistory(String roleCode, String fromEmployee, String toEmployee, String reason, Pageable pageable);

    void exportGetDelegationHistory(String roleCode, String fromEmployee, String toEmployee, String reason, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeDeleteBudgetUploadAdjustment(DeleteBudgetUploadAdjustmentRequest deleteBudgetUploadAdjustmentRequest);

    Integer executePrLineItemChangeCaoAsset(PrLineItemChangeCaoAssetRequest prLineItemChangeCaoAssetRequest);

    Integer executeChangeStatusAdditional(ChangeStatusAdditionalRequest changeStatusAdditionalRequest);

    Integer executeUpdatePurchaseRequestLineItem(UpdatePurchaseRequestLineItemRequest updatePurchaseRequestLineItemRequest);

    Integer executeDeletePODoc(String idPoHeader);

    Page<QbudgetDetail2ExportResponse> executeQBudgetDetail2_export(String bhId, Pageable pageable);

    void exportQBudgetDetail2_export(String bhId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeUpdateStatusRfq(UpdateStatusRfqRequest updateStatusRfqRequest);

    Page<GetMasterRoleResponse> executeGetMasterRole(String roleTitle, String roleStatus, Pageable pageable);

    void exportGetMasterRole(String roleTitle, String roleStatus, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeQ_changeRemarksPR_BD(QChangeRemarksPrBdRequest qchangeRemarksPrBdRequest);

    Integer executeTickInboxLastSeen(TickInboxLastSeenRequest tickInboxLastSeenRequest);

    Integer executeUpdatePO(UpdatePoRequest updatePoRequest);

    Integer executeTickLastAccess(TickLastAccessRequest tickLastAccessRequest);

    Integer executeTickNotificationLastSeen(TickNotificationLastSeenRequest tickNotificationLastSeenRequest);

    Page<QDepartmentMapUserResponse> executeQ_DepartmentMapUser(String emp, Pageable pageable);

    void exportQ_DepartmentMapUser(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QCompanyUserLoginResponse> executeQ_CompanyUserLogin(String emp, Pageable pageable);

    void exportQ_CompanyUserLogin(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetMappingUserPurchaseGroupResponse> executeGetMappingUserPurchaseGroup(String purchaseGroup, String assignee, String status, Pageable pageable);

    void exportGetMappingUserPurchaseGroup(String purchaseGroup, String assignee, String status, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetRfqsummaryPrintResponse> executeGetRFQSummaryPrint(String rfqId, Pageable pageable);

    void exportGetRFQSummaryPrint(String rfqId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeDeleteAdditionalHistory(Integer baId);

    Integer executeQSetStatusGRLineItem(QsetStatusGrlineItemRequest qsetStatusGrlineItemRequest);

    Integer executeDeletePODocByIDPO(String idPoHeader);

    Integer executeGeneratePRref(GeneratePrrefRequest generatePrrefRequest);

    Page<GetIolistBhResponse> executeGetIOListBH(String budgetYear, String userDepartment, String accType, String accActivity, String accNonActivity, String accAsset, String accSewaLeasing, String cid, String accId, String ioNumber, String ioName, Pageable pageable);

    void exportGetIOListBH(String budgetYear, String userDepartment, String accType, String accActivity, String accNonActivity, String accAsset, String accSewaLeasing, String cid, String accId, String ioNumber, String ioName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeChangeRFQItemQuotation(ChangeRfqitemQuotationRequest changeRfqitemQuotationRequest);

    Page<GrcompareQtyConfirmResponse> executeGRCompareQtyConfirm(String idPrLineItemHeader, Pageable pageable);

    void exportGRCompareQtyConfirm(String idPrLineItemHeader, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeQueryupdateStatusBH(QueryupdateStatusBhRequest queryupdateStatusBhRequest);

    Page<GetCheckerTasklistResponse> executeGetCheckerTasklist(Pageable pageable);

    void exportGetCheckerTasklist(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QvendorListOrderResponse> executeQVendorListOrder(String vendorCode, String companyCode, Pageable pageable);

    void exportQVendorListOrder(String vendorCode, String companyCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetRfqsummaryResponse> executeGetRFQSummary(String rfqId, Pageable pageable);

    void exportGetRFQSummary(String rfqId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QueryBudgetDetail1Response> executeQuery_budgetDetail1(String emp, Pageable pageable);

    void exportQuery_budgetDetail1(String emp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<QGetBudgetHeaderDetail2Response> executeQ_get_budgetHeader_Detail2(String bhId, String ioNumber, Pageable pageable);

    void exportQ_get_budgetHeader_Detail2(String bhId, String ioNumber, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeDeletePOLineItem(String idPoHeader);

    Page<GetIolistBhdefResponse> executeGetIOListBHDef(String budgetYear, String userDepartment, String ioNumber, String ioName, Pageable pageable);

    void exportGetIOListBHDef(String budgetYear, String userDepartment, String ioNumber, String ioName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeUpdatebhIdAdditionalBudget(UpdatebhIdAdditionalBudgetRequest updatebhIdAdditionalBudgetRequest);

    Integer executeChangetCOABudgetDetail(ChangetCoabudgetDetailRequest changetCoabudgetDetailRequest);

}