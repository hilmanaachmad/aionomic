/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VGrTrackingOrdered;

/**
 * Service object for domain model class {@link VGrTrackingOrdered}.
 */
public interface VGrTrackingOrderedService {

    /**
     * Creates a new VGrTrackingOrdered. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VGrTrackingOrdered if any.
     *
     * @param vgrTrackingOrdered Details of the VGrTrackingOrdered to be created; value cannot be null.
     * @return The newly created VGrTrackingOrdered.
     */
    VGrTrackingOrdered create(@Valid VGrTrackingOrdered vgrTrackingOrdered);


	/**
     * Returns VGrTrackingOrdered by given id if exists.
     *
     * @param vgrtrackingorderedId The id of the VGrTrackingOrdered to get; value cannot be null.
     * @return VGrTrackingOrdered associated with the given vgrtrackingorderedId.
	 * @throws EntityNotFoundException If no VGrTrackingOrdered is found.
     */
    VGrTrackingOrdered getById(Integer vgrtrackingorderedId);

    /**
     * Find and return the VGrTrackingOrdered by given id if exists, returns null otherwise.
     *
     * @param vgrtrackingorderedId The id of the VGrTrackingOrdered to get; value cannot be null.
     * @return VGrTrackingOrdered associated with the given vgrtrackingorderedId.
     */
    VGrTrackingOrdered findById(Integer vgrtrackingorderedId);

	/**
     * Find and return the list of VGrTrackingOrdereds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vgrtrackingorderedIds The id's of the VGrTrackingOrdered to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VGrTrackingOrdereds associated with the given vgrtrackingorderedIds.
     */
    List<VGrTrackingOrdered> findByMultipleIds(List<Integer> vgrtrackingorderedIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VGrTrackingOrdered. It replaces all fields of the existing VGrTrackingOrdered with the given vgrTrackingOrdered.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VGrTrackingOrdered if any.
     *
     * @param vgrTrackingOrdered The details of the VGrTrackingOrdered to be updated; value cannot be null.
     * @return The updated VGrTrackingOrdered.
     * @throws EntityNotFoundException if no VGrTrackingOrdered is found with given input.
     */
    VGrTrackingOrdered update(@Valid VGrTrackingOrdered vgrTrackingOrdered);


    /**
     * Partially updates the details of an existing VGrTrackingOrdered. It updates only the
     * fields of the existing VGrTrackingOrdered which are passed in the vgrTrackingOrderedPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VGrTrackingOrdered if any.
     *
     * @param vgrtrackingorderedId The id of the VGrTrackingOrdered to be deleted; value cannot be null.
     * @param vgrTrackingOrderedPatch The partial data of VGrTrackingOrdered which is supposed to be updated; value cannot be null.
     * @return The updated VGrTrackingOrdered.
     * @throws EntityNotFoundException if no VGrTrackingOrdered is found with given input.
     */
    VGrTrackingOrdered partialUpdate(Integer vgrtrackingorderedId, Map<String, Object> vgrTrackingOrderedPatch);

    /**
     * Deletes an existing VGrTrackingOrdered with the given id.
     *
     * @param vgrtrackingorderedId The id of the VGrTrackingOrdered to be deleted; value cannot be null.
     * @return The deleted VGrTrackingOrdered.
     * @throws EntityNotFoundException if no VGrTrackingOrdered found with the given id.
     */
    VGrTrackingOrdered delete(Integer vgrtrackingorderedId);

    /**
     * Deletes an existing VGrTrackingOrdered with the given object.
     *
     * @param vgrTrackingOrdered The instance of the VGrTrackingOrdered to be deleted; value cannot be null.
     */
    void delete(VGrTrackingOrdered vgrTrackingOrdered);

    /**
     * Find all VGrTrackingOrdereds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VGrTrackingOrdereds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VGrTrackingOrdered> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VGrTrackingOrdereds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VGrTrackingOrdereds.
     *
     * @see Pageable
     * @see Page
     */
    Page<VGrTrackingOrdered> findAll(String query, Pageable pageable);

    /**
     * Exports all VGrTrackingOrdereds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VGrTrackingOrdereds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VGrTrackingOrdereds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VGrTrackingOrdered.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}