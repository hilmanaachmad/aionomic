/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VAlreadyInGr;


/**
 * ServiceImpl object for domain model class VAlreadyInGr.
 *
 * @see VAlreadyInGr
 */
@Service("aio_ptp.VAlreadyInGrService")
@Validated
@EntityService(entityClass = VAlreadyInGr.class, serviceId = "aio_ptp")
public class VAlreadyInGrServiceImpl implements VAlreadyInGrService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VAlreadyInGrServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VAlreadyInGrDao")
    private WMGenericDao<VAlreadyInGr, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VAlreadyInGr, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VAlreadyInGr create(VAlreadyInGr valreadyInGr) {
        LOGGER.debug("Creating a new VAlreadyInGr with information: {}", valreadyInGr);

        VAlreadyInGr valreadyInGrCreated = this.wmGenericDao.create(valreadyInGr);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(valreadyInGrCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VAlreadyInGr getById(String valreadyingrId) {
        LOGGER.debug("Finding VAlreadyInGr by id: {}", valreadyingrId);
        return this.wmGenericDao.findById(valreadyingrId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VAlreadyInGr findById(String valreadyingrId) {
        LOGGER.debug("Finding VAlreadyInGr by id: {}", valreadyingrId);
        try {
            return this.wmGenericDao.findById(valreadyingrId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VAlreadyInGr found with id: {}", valreadyingrId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VAlreadyInGr> findByMultipleIds(List<String> valreadyingrIds, boolean orderedReturn) {
        LOGGER.debug("Finding VAlreadyInGrs by ids: {}", valreadyingrIds);

        return this.wmGenericDao.findByMultipleIds(valreadyingrIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VAlreadyInGr update(VAlreadyInGr valreadyInGr) {
        LOGGER.debug("Updating VAlreadyInGr with information: {}", valreadyInGr);

        this.wmGenericDao.update(valreadyInGr);
        this.wmGenericDao.refresh(valreadyInGr);

        return valreadyInGr;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VAlreadyInGr partialUpdate(String valreadyingrId, Map<String, Object>valreadyInGrPatch) {
        LOGGER.debug("Partially Updating the VAlreadyInGr with id: {}", valreadyingrId);

        VAlreadyInGr valreadyInGr = getById(valreadyingrId);

        try {
            ObjectReader valreadyInGrReader = this.objectMapper.reader().forType(VAlreadyInGr.class).withValueToUpdate(valreadyInGr);
            valreadyInGr = valreadyInGrReader.readValue(this.objectMapper.writeValueAsString(valreadyInGrPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", valreadyInGrPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        valreadyInGr = update(valreadyInGr);

        return valreadyInGr;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VAlreadyInGr delete(String valreadyingrId) {
        LOGGER.debug("Deleting VAlreadyInGr with id: {}", valreadyingrId);
        VAlreadyInGr deleted = this.wmGenericDao.findById(valreadyingrId);
        if (deleted == null) {
            LOGGER.debug("No VAlreadyInGr found with id: {}", valreadyingrId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VAlreadyInGr.class.getSimpleName(), valreadyingrId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VAlreadyInGr valreadyInGr) {
        LOGGER.debug("Deleting VAlreadyInGr with {}", valreadyInGr);
        this.wmGenericDao.delete(valreadyInGr);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VAlreadyInGr> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VAlreadyInGrs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VAlreadyInGr> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VAlreadyInGrs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VAlreadyInGr to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VAlreadyInGr to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}