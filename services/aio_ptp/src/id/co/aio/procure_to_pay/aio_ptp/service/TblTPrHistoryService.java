/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPrHistory;

/**
 * Service object for domain model class {@link TblTPrHistory}.
 */
public interface TblTPrHistoryService {

    /**
     * Creates a new TblTPrHistory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTPrHistory if any.
     *
     * @param tblTprHistory Details of the TblTPrHistory to be created; value cannot be null.
     * @return The newly created TblTPrHistory.
     */
    TblTPrHistory create(@Valid TblTPrHistory tblTprHistory);


	/**
     * Returns TblTPrHistory by given id if exists.
     *
     * @param tbltprhistoryId The id of the TblTPrHistory to get; value cannot be null.
     * @return TblTPrHistory associated with the given tbltprhistoryId.
	 * @throws EntityNotFoundException If no TblTPrHistory is found.
     */
    TblTPrHistory getById(Integer tbltprhistoryId);

    /**
     * Find and return the TblTPrHistory by given id if exists, returns null otherwise.
     *
     * @param tbltprhistoryId The id of the TblTPrHistory to get; value cannot be null.
     * @return TblTPrHistory associated with the given tbltprhistoryId.
     */
    TblTPrHistory findById(Integer tbltprhistoryId);

	/**
     * Find and return the list of TblTPrHistories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tbltprhistoryIds The id's of the TblTPrHistory to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblTPrHistories associated with the given tbltprhistoryIds.
     */
    List<TblTPrHistory> findByMultipleIds(List<Integer> tbltprhistoryIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblTPrHistory. It replaces all fields of the existing TblTPrHistory with the given tblTprHistory.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTPrHistory if any.
     *
     * @param tblTprHistory The details of the TblTPrHistory to be updated; value cannot be null.
     * @return The updated TblTPrHistory.
     * @throws EntityNotFoundException if no TblTPrHistory is found with given input.
     */
    TblTPrHistory update(@Valid TblTPrHistory tblTprHistory);


    /**
     * Partially updates the details of an existing TblTPrHistory. It updates only the
     * fields of the existing TblTPrHistory which are passed in the tblTprHistoryPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTPrHistory if any.
     *
     * @param tbltprhistoryId The id of the TblTPrHistory to be deleted; value cannot be null.
     * @param tblTprHistoryPatch The partial data of TblTPrHistory which is supposed to be updated; value cannot be null.
     * @return The updated TblTPrHistory.
     * @throws EntityNotFoundException if no TblTPrHistory is found with given input.
     */
    TblTPrHistory partialUpdate(Integer tbltprhistoryId, Map<String, Object> tblTprHistoryPatch);

    /**
     * Deletes an existing TblTPrHistory with the given id.
     *
     * @param tbltprhistoryId The id of the TblTPrHistory to be deleted; value cannot be null.
     * @return The deleted TblTPrHistory.
     * @throws EntityNotFoundException if no TblTPrHistory found with the given id.
     */
    TblTPrHistory delete(Integer tbltprhistoryId);

    /**
     * Deletes an existing TblTPrHistory with the given object.
     *
     * @param tblTprHistory The instance of the TblTPrHistory to be deleted; value cannot be null.
     */
    void delete(TblTPrHistory tblTprHistory);

    /**
     * Find all TblTPrHistories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTPrHistories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblTPrHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblTPrHistories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTPrHistories.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTPrHistory> findAll(String query, Pageable pageable);

    /**
     * Exports all TblTPrHistories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblTPrHistories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblTPrHistories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblTPrHistory.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}