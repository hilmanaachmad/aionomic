/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserRole;

/**
 * Service object for domain model class {@link TblMUserRole}.
 */
public interface TblMUserRoleService {

    /**
     * Creates a new TblMUserRole. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMUserRole if any.
     *
     * @param tblMuserRole Details of the TblMUserRole to be created; value cannot be null.
     * @return The newly created TblMUserRole.
     */
    TblMUserRole create(@Valid TblMUserRole tblMuserRole);


	/**
     * Returns TblMUserRole by given id if exists.
     *
     * @param tblmuserroleId The id of the TblMUserRole to get; value cannot be null.
     * @return TblMUserRole associated with the given tblmuserroleId.
	 * @throws EntityNotFoundException If no TblMUserRole is found.
     */
    TblMUserRole getById(Integer tblmuserroleId);

    /**
     * Find and return the TblMUserRole by given id if exists, returns null otherwise.
     *
     * @param tblmuserroleId The id of the TblMUserRole to get; value cannot be null.
     * @return TblMUserRole associated with the given tblmuserroleId.
     */
    TblMUserRole findById(Integer tblmuserroleId);

	/**
     * Find and return the list of TblMUserRoles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmuserroleIds The id's of the TblMUserRole to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMUserRoles associated with the given tblmuserroleIds.
     */
    List<TblMUserRole> findByMultipleIds(List<Integer> tblmuserroleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMUserRole. It replaces all fields of the existing TblMUserRole with the given tblMuserRole.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMUserRole if any.
     *
     * @param tblMuserRole The details of the TblMUserRole to be updated; value cannot be null.
     * @return The updated TblMUserRole.
     * @throws EntityNotFoundException if no TblMUserRole is found with given input.
     */
    TblMUserRole update(@Valid TblMUserRole tblMuserRole);


    /**
     * Partially updates the details of an existing TblMUserRole. It updates only the
     * fields of the existing TblMUserRole which are passed in the tblMuserRolePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMUserRole if any.
     *
     * @param tblmuserroleId The id of the TblMUserRole to be deleted; value cannot be null.
     * @param tblMuserRolePatch The partial data of TblMUserRole which is supposed to be updated; value cannot be null.
     * @return The updated TblMUserRole.
     * @throws EntityNotFoundException if no TblMUserRole is found with given input.
     */
    TblMUserRole partialUpdate(Integer tblmuserroleId, Map<String, Object> tblMuserRolePatch);

    /**
     * Deletes an existing TblMUserRole with the given id.
     *
     * @param tblmuserroleId The id of the TblMUserRole to be deleted; value cannot be null.
     * @return The deleted TblMUserRole.
     * @throws EntityNotFoundException if no TblMUserRole found with the given id.
     */
    TblMUserRole delete(Integer tblmuserroleId);

    /**
     * Deletes an existing TblMUserRole with the given object.
     *
     * @param tblMuserRole The instance of the TblMUserRole to be deleted; value cannot be null.
     */
    void delete(TblMUserRole tblMuserRole);

    /**
     * Find all TblMUserRoles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMUserRoles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMUserRole> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMUserRoles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMUserRoles.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMUserRole> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMUserRoles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMUserRoles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMUserRoles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMUserRole.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}