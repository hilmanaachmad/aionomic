/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblPbAttachment;


/**
 * ServiceImpl object for domain model class TblPbAttachment.
 *
 * @see TblPbAttachment
 */
@Service("aio_ptp.TblPbAttachmentService")
@Validated
@EntityService(entityClass = TblPbAttachment.class, serviceId = "aio_ptp")
public class TblPbAttachmentServiceImpl implements TblPbAttachmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblPbAttachmentServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblPbAttachmentDao")
    private WMGenericDao<TblPbAttachment, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblPbAttachment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblPbAttachment create(TblPbAttachment tblPbAttachment) {
        LOGGER.debug("Creating a new TblPbAttachment with information: {}", tblPbAttachment);

        TblPbAttachment tblPbAttachmentCreated = this.wmGenericDao.create(tblPbAttachment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblPbAttachmentCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblPbAttachment getById(Integer tblpbattachmentId) {
        LOGGER.debug("Finding TblPbAttachment by id: {}", tblpbattachmentId);
        return this.wmGenericDao.findById(tblpbattachmentId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblPbAttachment findById(Integer tblpbattachmentId) {
        LOGGER.debug("Finding TblPbAttachment by id: {}", tblpbattachmentId);
        try {
            return this.wmGenericDao.findById(tblpbattachmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblPbAttachment found with id: {}", tblpbattachmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblPbAttachment> findByMultipleIds(List<Integer> tblpbattachmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblPbAttachments by ids: {}", tblpbattachmentIds);

        return this.wmGenericDao.findByMultipleIds(tblpbattachmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblPbAttachment update(TblPbAttachment tblPbAttachment) {
        LOGGER.debug("Updating TblPbAttachment with information: {}", tblPbAttachment);

        this.wmGenericDao.update(tblPbAttachment);
        this.wmGenericDao.refresh(tblPbAttachment);

        return tblPbAttachment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblPbAttachment partialUpdate(Integer tblpbattachmentId, Map<String, Object>tblPbAttachmentPatch) {
        LOGGER.debug("Partially Updating the TblPbAttachment with id: {}", tblpbattachmentId);

        TblPbAttachment tblPbAttachment = getById(tblpbattachmentId);

        try {
            ObjectReader tblPbAttachmentReader = this.objectMapper.reader().forType(TblPbAttachment.class).withValueToUpdate(tblPbAttachment);
            tblPbAttachment = tblPbAttachmentReader.readValue(this.objectMapper.writeValueAsString(tblPbAttachmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblPbAttachmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblPbAttachment = update(tblPbAttachment);

        return tblPbAttachment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblPbAttachment delete(Integer tblpbattachmentId) {
        LOGGER.debug("Deleting TblPbAttachment with id: {}", tblpbattachmentId);
        TblPbAttachment deleted = this.wmGenericDao.findById(tblpbattachmentId);
        if (deleted == null) {
            LOGGER.debug("No TblPbAttachment found with id: {}", tblpbattachmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblPbAttachment.class.getSimpleName(), tblpbattachmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblPbAttachment tblPbAttachment) {
        LOGGER.debug("Deleting TblPbAttachment with {}", tblPbAttachment);
        this.wmGenericDao.delete(tblPbAttachment);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblPbAttachment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblPbAttachments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblPbAttachment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblPbAttachments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblPbAttachment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblPbAttachment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}