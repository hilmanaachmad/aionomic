/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VLastBudgetDetail;
import id.co.aio.procure_to_pay.aio_ptp.service.VLastBudgetDetailService;


/**
 * Controller object for domain model class VLastBudgetDetail.
 * @see VLastBudgetDetail
 */
@RestController("aio_ptp.VLastBudgetDetailController")
@Api(value = "VLastBudgetDetailController", description = "Exposes APIs to work with VLastBudgetDetail resource.")
@RequestMapping("/aio_ptp/VLastBudgetDetail")
public class VLastBudgetDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VLastBudgetDetailController.class);

    @Autowired
	@Qualifier("aio_ptp.VLastBudgetDetailService")
	private VLastBudgetDetailService vLastBudgetDetailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VLastBudgetDetail instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VLastBudgetDetail createVLastBudgetDetail(@RequestBody VLastBudgetDetail vlastBudgetDetail) {
		LOGGER.debug("Create VLastBudgetDetail with information: {}" , vlastBudgetDetail);

		vlastBudgetDetail = vLastBudgetDetailService.create(vlastBudgetDetail);
		LOGGER.debug("Created VLastBudgetDetail with information: {}" , vlastBudgetDetail);

	    return vlastBudgetDetail;
	}

    @ApiOperation(value = "Returns the VLastBudgetDetail instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VLastBudgetDetail getVLastBudgetDetail(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Getting VLastBudgetDetail with id: {}" , bhId);

        VLastBudgetDetail foundVLastBudgetDetail = vLastBudgetDetailService.getById(bhId);
        LOGGER.debug("VLastBudgetDetail details with id: {}" , foundVLastBudgetDetail);

        return foundVLastBudgetDetail;
    }

    @ApiOperation(value = "Updates the VLastBudgetDetail instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VLastBudgetDetail editVLastBudgetDetail(@PathVariable("bhId") Integer bhId, @RequestBody VLastBudgetDetail vlastBudgetDetail) {
        LOGGER.debug("Editing VLastBudgetDetail with id: {}" , vlastBudgetDetail.getBhId());

        vlastBudgetDetail.setBhId(bhId);
        vlastBudgetDetail = vLastBudgetDetailService.update(vlastBudgetDetail);
        LOGGER.debug("VLastBudgetDetail details with id: {}" , vlastBudgetDetail);

        return vlastBudgetDetail;
    }
    
    @ApiOperation(value = "Partially updates the VLastBudgetDetail instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VLastBudgetDetail patchVLastBudgetDetail(@PathVariable("bhId") Integer bhId, @RequestBody @MapTo(VLastBudgetDetail.class) Map<String, Object> vlastBudgetDetailPatch) {
        LOGGER.debug("Partially updating VLastBudgetDetail with id: {}" , bhId);

        VLastBudgetDetail vlastBudgetDetail = vLastBudgetDetailService.partialUpdate(bhId, vlastBudgetDetailPatch);
        LOGGER.debug("VLastBudgetDetail details after partial update: {}" , vlastBudgetDetail);

        return vlastBudgetDetail;
    }

    @ApiOperation(value = "Deletes the VLastBudgetDetail instance associated with the given id.")
    @RequestMapping(value = "/{bhId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVLastBudgetDetail(@PathVariable("bhId") Integer bhId) {
        LOGGER.debug("Deleting VLastBudgetDetail with id: {}" , bhId);

        VLastBudgetDetail deletedVLastBudgetDetail = vLastBudgetDetailService.delete(bhId);

        return deletedVLastBudgetDetail != null;
    }

    /**
     * @deprecated Use {@link #findVLastBudgetDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VLastBudgetDetail instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VLastBudgetDetail> searchVLastBudgetDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VLastBudgetDetails list by query filter:{}", (Object) queryFilters);
        return vLastBudgetDetailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VLastBudgetDetail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VLastBudgetDetail> findVLastBudgetDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VLastBudgetDetails list by filter:", query);
        return vLastBudgetDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VLastBudgetDetail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VLastBudgetDetail> filterVLastBudgetDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VLastBudgetDetails list by filter", query);
        return vLastBudgetDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVLastBudgetDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vLastBudgetDetailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVLastBudgetDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VLastBudgetDetail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vLastBudgetDetailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VLastBudgetDetail instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVLastBudgetDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VLastBudgetDetails");
		return vLastBudgetDetailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVLastBudgetDetailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vLastBudgetDetailService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VLastBudgetDetailService instance
	 */
	protected void setVLastBudgetDetailService(VLastBudgetDetailService service) {
		this.vLastBudgetDetailService = service;
	}

}