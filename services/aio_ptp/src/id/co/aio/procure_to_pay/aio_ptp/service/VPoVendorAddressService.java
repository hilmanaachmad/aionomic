/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoVendorAddress;

/**
 * Service object for domain model class {@link VPoVendorAddress}.
 */
public interface VPoVendorAddressService {

    /**
     * Creates a new VPoVendorAddress. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoVendorAddress if any.
     *
     * @param vpoVendorAddress Details of the VPoVendorAddress to be created; value cannot be null.
     * @return The newly created VPoVendorAddress.
     */
    VPoVendorAddress create(@Valid VPoVendorAddress vpoVendorAddress);


	/**
     * Returns VPoVendorAddress by given id if exists.
     *
     * @param vpovendoraddressId The id of the VPoVendorAddress to get; value cannot be null.
     * @return VPoVendorAddress associated with the given vpovendoraddressId.
	 * @throws EntityNotFoundException If no VPoVendorAddress is found.
     */
    VPoVendorAddress getById(Integer vpovendoraddressId);

    /**
     * Find and return the VPoVendorAddress by given id if exists, returns null otherwise.
     *
     * @param vpovendoraddressId The id of the VPoVendorAddress to get; value cannot be null.
     * @return VPoVendorAddress associated with the given vpovendoraddressId.
     */
    VPoVendorAddress findById(Integer vpovendoraddressId);

	/**
     * Find and return the list of VPoVendorAddresses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vpovendoraddressIds The id's of the VPoVendorAddress to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPoVendorAddresses associated with the given vpovendoraddressIds.
     */
    List<VPoVendorAddress> findByMultipleIds(List<Integer> vpovendoraddressIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPoVendorAddress. It replaces all fields of the existing VPoVendorAddress with the given vpoVendorAddress.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoVendorAddress if any.
     *
     * @param vpoVendorAddress The details of the VPoVendorAddress to be updated; value cannot be null.
     * @return The updated VPoVendorAddress.
     * @throws EntityNotFoundException if no VPoVendorAddress is found with given input.
     */
    VPoVendorAddress update(@Valid VPoVendorAddress vpoVendorAddress);


    /**
     * Partially updates the details of an existing VPoVendorAddress. It updates only the
     * fields of the existing VPoVendorAddress which are passed in the vpoVendorAddressPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoVendorAddress if any.
     *
     * @param vpovendoraddressId The id of the VPoVendorAddress to be deleted; value cannot be null.
     * @param vpoVendorAddressPatch The partial data of VPoVendorAddress which is supposed to be updated; value cannot be null.
     * @return The updated VPoVendorAddress.
     * @throws EntityNotFoundException if no VPoVendorAddress is found with given input.
     */
    VPoVendorAddress partialUpdate(Integer vpovendoraddressId, Map<String, Object> vpoVendorAddressPatch);

    /**
     * Deletes an existing VPoVendorAddress with the given id.
     *
     * @param vpovendoraddressId The id of the VPoVendorAddress to be deleted; value cannot be null.
     * @return The deleted VPoVendorAddress.
     * @throws EntityNotFoundException if no VPoVendorAddress found with the given id.
     */
    VPoVendorAddress delete(Integer vpovendoraddressId);

    /**
     * Deletes an existing VPoVendorAddress with the given object.
     *
     * @param vpoVendorAddress The instance of the VPoVendorAddress to be deleted; value cannot be null.
     */
    void delete(VPoVendorAddress vpoVendorAddress);

    /**
     * Find all VPoVendorAddresses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPoVendorAddresses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPoVendorAddress> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPoVendorAddresses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPoVendorAddresses.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPoVendorAddress> findAll(String query, Pageable pageable);

    /**
     * Exports all VPoVendorAddresses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPoVendorAddresses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPoVendorAddresses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPoVendorAddress.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}