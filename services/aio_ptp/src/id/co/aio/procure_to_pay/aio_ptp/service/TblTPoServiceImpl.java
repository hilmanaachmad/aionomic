/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPo;


/**
 * ServiceImpl object for domain model class TblTPo.
 *
 * @see TblTPo
 */
@Service("aio_ptp.TblTPoService")
@Validated
@EntityService(entityClass = TblTPo.class, serviceId = "aio_ptp")
public class TblTPoServiceImpl implements TblTPoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPoServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTPoDao")
    private WMGenericDao<TblTPo, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTPo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPo create(TblTPo tblTpo) {
        LOGGER.debug("Creating a new TblTPo with information: {}", tblTpo);

        TblTPo tblTpoCreated = this.wmGenericDao.create(tblTpo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTpoCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPo getById(Integer tbltpoId) {
        LOGGER.debug("Finding TblTPo by id: {}", tbltpoId);
        return this.wmGenericDao.findById(tbltpoId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPo findById(Integer tbltpoId) {
        LOGGER.debug("Finding TblTPo by id: {}", tbltpoId);
        try {
            return this.wmGenericDao.findById(tbltpoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTPo found with id: {}", tbltpoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTPo> findByMultipleIds(List<Integer> tbltpoIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTPos by ids: {}", tbltpoIds);

        return this.wmGenericDao.findByMultipleIds(tbltpoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTPo update(TblTPo tblTpo) {
        LOGGER.debug("Updating TblTPo with information: {}", tblTpo);

        this.wmGenericDao.update(tblTpo);
        this.wmGenericDao.refresh(tblTpo);

        return tblTpo;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPo partialUpdate(Integer tbltpoId, Map<String, Object>tblTpoPatch) {
        LOGGER.debug("Partially Updating the TblTPo with id: {}", tbltpoId);

        TblTPo tblTpo = getById(tbltpoId);

        try {
            ObjectReader tblTpoReader = this.objectMapper.reader().forType(TblTPo.class).withValueToUpdate(tblTpo);
            tblTpo = tblTpoReader.readValue(this.objectMapper.writeValueAsString(tblTpoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTpoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTpo = update(tblTpo);

        return tblTpo;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPo delete(Integer tbltpoId) {
        LOGGER.debug("Deleting TblTPo with id: {}", tbltpoId);
        TblTPo deleted = this.wmGenericDao.findById(tbltpoId);
        if (deleted == null) {
            LOGGER.debug("No TblTPo found with id: {}", tbltpoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTPo.class.getSimpleName(), tbltpoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTPo tblTpo) {
        LOGGER.debug("Deleting TblTPo with {}", tblTpo);
        this.wmGenericDao.delete(tblTpo);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTPos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTPos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}