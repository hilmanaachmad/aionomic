/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VUserRole;
import id.co.aio.procure_to_pay.aio_ptp.service.VUserRoleService;


/**
 * Controller object for domain model class VUserRole.
 * @see VUserRole
 */
@RestController("aio_ptp.VUserRoleController")
@Api(value = "VUserRoleController", description = "Exposes APIs to work with VUserRole resource.")
@RequestMapping("/aio_ptp/VUserRole")
public class VUserRoleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VUserRoleController.class);

    @Autowired
	@Qualifier("aio_ptp.VUserRoleService")
	private VUserRoleService vUserRoleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VUserRole instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VUserRole createVUserRole(@RequestBody VUserRole vuserRole) {
		LOGGER.debug("Create VUserRole with information: {}" , vuserRole);

		vuserRole = vUserRoleService.create(vuserRole);
		LOGGER.debug("Created VUserRole with information: {}" , vuserRole);

	    return vuserRole;
	}

    @ApiOperation(value = "Returns the VUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VUserRole getVUserRole(@PathVariable("urId") Integer urId) {
        LOGGER.debug("Getting VUserRole with id: {}" , urId);

        VUserRole foundVUserRole = vUserRoleService.getById(urId);
        LOGGER.debug("VUserRole details with id: {}" , foundVUserRole);

        return foundVUserRole;
    }

    @ApiOperation(value = "Updates the VUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VUserRole editVUserRole(@PathVariable("urId") Integer urId, @RequestBody VUserRole vuserRole) {
        LOGGER.debug("Editing VUserRole with id: {}" , vuserRole.getUrId());

        vuserRole.setUrId(urId);
        vuserRole = vUserRoleService.update(vuserRole);
        LOGGER.debug("VUserRole details with id: {}" , vuserRole);

        return vuserRole;
    }
    
    @ApiOperation(value = "Partially updates the VUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VUserRole patchVUserRole(@PathVariable("urId") Integer urId, @RequestBody @MapTo(VUserRole.class) Map<String, Object> vuserRolePatch) {
        LOGGER.debug("Partially updating VUserRole with id: {}" , urId);

        VUserRole vuserRole = vUserRoleService.partialUpdate(urId, vuserRolePatch);
        LOGGER.debug("VUserRole details after partial update: {}" , vuserRole);

        return vuserRole;
    }

    @ApiOperation(value = "Deletes the VUserRole instance associated with the given id.")
    @RequestMapping(value = "/{urId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVUserRole(@PathVariable("urId") Integer urId) {
        LOGGER.debug("Deleting VUserRole with id: {}" , urId);

        VUserRole deletedVUserRole = vUserRoleService.delete(urId);

        return deletedVUserRole != null;
    }

    /**
     * @deprecated Use {@link #findVUserRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VUserRole instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VUserRole> searchVUserRolesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VUserRoles list by query filter:{}", (Object) queryFilters);
        return vUserRoleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VUserRole instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VUserRole> findVUserRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VUserRoles list by filter:", query);
        return vUserRoleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VUserRole instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VUserRole> filterVUserRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VUserRoles list by filter", query);
        return vUserRoleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVUserRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vUserRoleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVUserRolesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VUserRole.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vUserRoleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VUserRole instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVUserRoles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VUserRoles");
		return vUserRoleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVUserRoleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vUserRoleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VUserRoleService instance
	 */
	protected void setVUserRoleService(VUserRoleService service) {
		this.vUserRoleService = service;
	}

}