/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMDivision;
import id.co.aio.procure_to_pay.aio_ptp.TblMDivisionBod;

/**
 * Service object for domain model class {@link TblMDivision}.
 */
public interface TblMDivisionService {

    /**
     * Creates a new TblMDivision. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMDivision if any.
     *
     * @param tblMdivision Details of the TblMDivision to be created; value cannot be null.
     * @return The newly created TblMDivision.
     */
    TblMDivision create(@Valid TblMDivision tblMdivision);


	/**
     * Returns TblMDivision by given id if exists.
     *
     * @param tblmdivisionId The id of the TblMDivision to get; value cannot be null.
     * @return TblMDivision associated with the given tblmdivisionId.
	 * @throws EntityNotFoundException If no TblMDivision is found.
     */
    TblMDivision getById(Integer tblmdivisionId);

    /**
     * Find and return the TblMDivision by given id if exists, returns null otherwise.
     *
     * @param tblmdivisionId The id of the TblMDivision to get; value cannot be null.
     * @return TblMDivision associated with the given tblmdivisionId.
     */
    TblMDivision findById(Integer tblmdivisionId);

	/**
     * Find and return the list of TblMDivisions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tblmdivisionIds The id's of the TblMDivision to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblMDivisions associated with the given tblmdivisionIds.
     */
    List<TblMDivision> findByMultipleIds(List<Integer> tblmdivisionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblMDivision. It replaces all fields of the existing TblMDivision with the given tblMdivision.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMDivision if any.
     *
     * @param tblMdivision The details of the TblMDivision to be updated; value cannot be null.
     * @return The updated TblMDivision.
     * @throws EntityNotFoundException if no TblMDivision is found with given input.
     */
    TblMDivision update(@Valid TblMDivision tblMdivision);


    /**
     * Partially updates the details of an existing TblMDivision. It updates only the
     * fields of the existing TblMDivision which are passed in the tblMdivisionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblMDivision if any.
     *
     * @param tblmdivisionId The id of the TblMDivision to be deleted; value cannot be null.
     * @param tblMdivisionPatch The partial data of TblMDivision which is supposed to be updated; value cannot be null.
     * @return The updated TblMDivision.
     * @throws EntityNotFoundException if no TblMDivision is found with given input.
     */
    TblMDivision partialUpdate(Integer tblmdivisionId, Map<String, Object> tblMdivisionPatch);

    /**
     * Deletes an existing TblMDivision with the given id.
     *
     * @param tblmdivisionId The id of the TblMDivision to be deleted; value cannot be null.
     * @return The deleted TblMDivision.
     * @throws EntityNotFoundException if no TblMDivision found with the given id.
     */
    TblMDivision delete(Integer tblmdivisionId);

    /**
     * Deletes an existing TblMDivision with the given object.
     *
     * @param tblMdivision The instance of the TblMDivision to be deleted; value cannot be null.
     */
    void delete(TblMDivision tblMdivision);

    /**
     * Find all TblMDivisions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMDivisions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblMDivision> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblMDivisions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblMDivisions.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMDivision> findAll(String query, Pageable pageable);

    /**
     * Exports all TblMDivisions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblMDivisions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblMDivisions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblMDivision.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblMdivisionBods for given TblMDivision id.
     *
     * @param divisionId value of divisionId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblMDivisionBod instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblMDivisionBod> findAssociatedTblMdivisionBods(Integer divisionId, Pageable pageable);

}