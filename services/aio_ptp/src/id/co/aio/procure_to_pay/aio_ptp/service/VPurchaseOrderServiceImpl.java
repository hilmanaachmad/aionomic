/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseOrder;


/**
 * ServiceImpl object for domain model class VPurchaseOrder.
 *
 * @see VPurchaseOrder
 */
@Service("aio_ptp.VPurchaseOrderService")
@Validated
@EntityService(entityClass = VPurchaseOrder.class, serviceId = "aio_ptp")
public class VPurchaseOrderServiceImpl implements VPurchaseOrderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseOrderServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPurchaseOrderDao")
    private WMGenericDao<VPurchaseOrder, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPurchaseOrder, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseOrder create(VPurchaseOrder vpurchaseOrder) {
        LOGGER.debug("Creating a new VPurchaseOrder with information: {}", vpurchaseOrder);

        VPurchaseOrder vpurchaseOrderCreated = this.wmGenericDao.create(vpurchaseOrder);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpurchaseOrderCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseOrder getById(Integer vpurchaseorderId) {
        LOGGER.debug("Finding VPurchaseOrder by id: {}", vpurchaseorderId);
        return this.wmGenericDao.findById(vpurchaseorderId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseOrder findById(Integer vpurchaseorderId) {
        LOGGER.debug("Finding VPurchaseOrder by id: {}", vpurchaseorderId);
        try {
            return this.wmGenericDao.findById(vpurchaseorderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPurchaseOrder found with id: {}", vpurchaseorderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPurchaseOrder> findByMultipleIds(List<Integer> vpurchaseorderIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPurchaseOrders by ids: {}", vpurchaseorderIds);

        return this.wmGenericDao.findByMultipleIds(vpurchaseorderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseOrder update(VPurchaseOrder vpurchaseOrder) {
        LOGGER.debug("Updating VPurchaseOrder with information: {}", vpurchaseOrder);

        this.wmGenericDao.update(vpurchaseOrder);
        this.wmGenericDao.refresh(vpurchaseOrder);

        return vpurchaseOrder;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseOrder partialUpdate(Integer vpurchaseorderId, Map<String, Object>vpurchaseOrderPatch) {
        LOGGER.debug("Partially Updating the VPurchaseOrder with id: {}", vpurchaseorderId);

        VPurchaseOrder vpurchaseOrder = getById(vpurchaseorderId);

        try {
            ObjectReader vpurchaseOrderReader = this.objectMapper.reader().forType(VPurchaseOrder.class).withValueToUpdate(vpurchaseOrder);
            vpurchaseOrder = vpurchaseOrderReader.readValue(this.objectMapper.writeValueAsString(vpurchaseOrderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpurchaseOrderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpurchaseOrder = update(vpurchaseOrder);

        return vpurchaseOrder;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseOrder delete(Integer vpurchaseorderId) {
        LOGGER.debug("Deleting VPurchaseOrder with id: {}", vpurchaseorderId);
        VPurchaseOrder deleted = this.wmGenericDao.findById(vpurchaseorderId);
        if (deleted == null) {
            LOGGER.debug("No VPurchaseOrder found with id: {}", vpurchaseorderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPurchaseOrder.class.getSimpleName(), vpurchaseorderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPurchaseOrder vpurchaseOrder) {
        LOGGER.debug("Deleting VPurchaseOrder with {}", vpurchaseOrder);
        this.wmGenericDao.delete(vpurchaseOrder);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseOrder> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseOrders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseOrder> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseOrders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseOrder to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseOrder to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}