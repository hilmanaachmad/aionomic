/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqVendorTop;


/**
 * ServiceImpl object for domain model class VRfqVendorTop.
 *
 * @see VRfqVendorTop
 */
@Service("aio_ptp.VRfqVendorTopService")
@Validated
@EntityService(entityClass = VRfqVendorTop.class, serviceId = "aio_ptp")
public class VRfqVendorTopServiceImpl implements VRfqVendorTopService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqVendorTopServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqVendorTopDao")
    private WMGenericDao<VRfqVendorTop, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqVendorTop, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorTop create(VRfqVendorTop vrfqVendorTop) {
        LOGGER.debug("Creating a new VRfqVendorTop with information: {}", vrfqVendorTop);

        VRfqVendorTop vrfqVendorTopCreated = this.wmGenericDao.create(vrfqVendorTop);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqVendorTopCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorTop getById(Integer vrfqvendortopId) {
        LOGGER.debug("Finding VRfqVendorTop by id: {}", vrfqvendortopId);
        return this.wmGenericDao.findById(vrfqvendortopId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorTop findById(Integer vrfqvendortopId) {
        LOGGER.debug("Finding VRfqVendorTop by id: {}", vrfqvendortopId);
        try {
            return this.wmGenericDao.findById(vrfqvendortopId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqVendorTop found with id: {}", vrfqvendortopId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqVendorTop> findByMultipleIds(List<Integer> vrfqvendortopIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqVendorTops by ids: {}", vrfqvendortopIds);

        return this.wmGenericDao.findByMultipleIds(vrfqvendortopIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorTop update(VRfqVendorTop vrfqVendorTop) {
        LOGGER.debug("Updating VRfqVendorTop with information: {}", vrfqVendorTop);

        this.wmGenericDao.update(vrfqVendorTop);
        this.wmGenericDao.refresh(vrfqVendorTop);

        return vrfqVendorTop;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorTop partialUpdate(Integer vrfqvendortopId, Map<String, Object>vrfqVendorTopPatch) {
        LOGGER.debug("Partially Updating the VRfqVendorTop with id: {}", vrfqvendortopId);

        VRfqVendorTop vrfqVendorTop = getById(vrfqvendortopId);

        try {
            ObjectReader vrfqVendorTopReader = this.objectMapper.reader().forType(VRfqVendorTop.class).withValueToUpdate(vrfqVendorTop);
            vrfqVendorTop = vrfqVendorTopReader.readValue(this.objectMapper.writeValueAsString(vrfqVendorTopPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqVendorTopPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqVendorTop = update(vrfqVendorTop);

        return vrfqVendorTop;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorTop delete(Integer vrfqvendortopId) {
        LOGGER.debug("Deleting VRfqVendorTop with id: {}", vrfqvendortopId);
        VRfqVendorTop deleted = this.wmGenericDao.findById(vrfqvendortopId);
        if (deleted == null) {
            LOGGER.debug("No VRfqVendorTop found with id: {}", vrfqvendortopId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqVendorTop.class.getSimpleName(), vrfqvendortopId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqVendorTop vrfqVendorTop) {
        LOGGER.debug("Deleting VRfqVendorTop with {}", vrfqVendorTop);
        this.wmGenericDao.delete(vrfqVendorTop);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqVendorTop> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqVendorTops");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqVendorTop> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqVendorTops");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqVendorTop to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqVendorTop to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}