/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTPoAcceptanceVendor;


/**
 * ServiceImpl object for domain model class TblTPoAcceptanceVendor.
 *
 * @see TblTPoAcceptanceVendor
 */
@Service("aio_ptp.TblTPoAcceptanceVendorService")
@Validated
@EntityService(entityClass = TblTPoAcceptanceVendor.class, serviceId = "aio_ptp")
public class TblTPoAcceptanceVendorServiceImpl implements TblTPoAcceptanceVendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTPoAcceptanceVendorServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTPoAcceptanceVendorDao")
    private WMGenericDao<TblTPoAcceptanceVendor, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTPoAcceptanceVendor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoAcceptanceVendor create(TblTPoAcceptanceVendor tblTpoAcceptanceVendor) {
        LOGGER.debug("Creating a new TblTPoAcceptanceVendor with information: {}", tblTpoAcceptanceVendor);

        TblTPoAcceptanceVendor tblTpoAcceptanceVendorCreated = this.wmGenericDao.create(tblTpoAcceptanceVendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTpoAcceptanceVendorCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoAcceptanceVendor getById(Integer tbltpoacceptancevendorId) {
        LOGGER.debug("Finding TblTPoAcceptanceVendor by id: {}", tbltpoacceptancevendorId);
        return this.wmGenericDao.findById(tbltpoacceptancevendorId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoAcceptanceVendor findById(Integer tbltpoacceptancevendorId) {
        LOGGER.debug("Finding TblTPoAcceptanceVendor by id: {}", tbltpoacceptancevendorId);
        try {
            return this.wmGenericDao.findById(tbltpoacceptancevendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTPoAcceptanceVendor found with id: {}", tbltpoacceptancevendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTPoAcceptanceVendor> findByMultipleIds(List<Integer> tbltpoacceptancevendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTPoAcceptanceVendors by ids: {}", tbltpoacceptancevendorIds);

        return this.wmGenericDao.findByMultipleIds(tbltpoacceptancevendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTPoAcceptanceVendor update(TblTPoAcceptanceVendor tblTpoAcceptanceVendor) {
        LOGGER.debug("Updating TblTPoAcceptanceVendor with information: {}", tblTpoAcceptanceVendor);

        this.wmGenericDao.update(tblTpoAcceptanceVendor);
        this.wmGenericDao.refresh(tblTpoAcceptanceVendor);

        return tblTpoAcceptanceVendor;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoAcceptanceVendor partialUpdate(Integer tbltpoacceptancevendorId, Map<String, Object>tblTpoAcceptanceVendorPatch) {
        LOGGER.debug("Partially Updating the TblTPoAcceptanceVendor with id: {}", tbltpoacceptancevendorId);

        TblTPoAcceptanceVendor tblTpoAcceptanceVendor = getById(tbltpoacceptancevendorId);

        try {
            ObjectReader tblTpoAcceptanceVendorReader = this.objectMapper.reader().forType(TblTPoAcceptanceVendor.class).withValueToUpdate(tblTpoAcceptanceVendor);
            tblTpoAcceptanceVendor = tblTpoAcceptanceVendorReader.readValue(this.objectMapper.writeValueAsString(tblTpoAcceptanceVendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTpoAcceptanceVendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTpoAcceptanceVendor = update(tblTpoAcceptanceVendor);

        return tblTpoAcceptanceVendor;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTPoAcceptanceVendor delete(Integer tbltpoacceptancevendorId) {
        LOGGER.debug("Deleting TblTPoAcceptanceVendor with id: {}", tbltpoacceptancevendorId);
        TblTPoAcceptanceVendor deleted = this.wmGenericDao.findById(tbltpoacceptancevendorId);
        if (deleted == null) {
            LOGGER.debug("No TblTPoAcceptanceVendor found with id: {}", tbltpoacceptancevendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTPoAcceptanceVendor.class.getSimpleName(), tbltpoacceptancevendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTPoAcceptanceVendor tblTpoAcceptanceVendor) {
        LOGGER.debug("Deleting TblTPoAcceptanceVendor with {}", tblTpoAcceptanceVendor);
        this.wmGenericDao.delete(tblTpoAcceptanceVendor);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPoAcceptanceVendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTPoAcceptanceVendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPoAcceptanceVendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTPoAcceptanceVendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPoAcceptanceVendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTPoAcceptanceVendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}