/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetUploadAdjustment;


/**
 * ServiceImpl object for domain model class TblTBudgetUploadAdjustment.
 *
 * @see TblTBudgetUploadAdjustment
 */
@Service("aio_ptp.TblTBudgetUploadAdjustmentService")
@Validated
@EntityService(entityClass = TblTBudgetUploadAdjustment.class, serviceId = "aio_ptp")
public class TblTBudgetUploadAdjustmentServiceImpl implements TblTBudgetUploadAdjustmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTBudgetUploadAdjustmentServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblTBudgetUploadAdjustmentDao")
    private WMGenericDao<TblTBudgetUploadAdjustment, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblTBudgetUploadAdjustment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUploadAdjustment create(TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment) {
        LOGGER.debug("Creating a new TblTBudgetUploadAdjustment with information: {}", tblTbudgetUploadAdjustment);

        TblTBudgetUploadAdjustment tblTbudgetUploadAdjustmentCreated = this.wmGenericDao.create(tblTbudgetUploadAdjustment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblTbudgetUploadAdjustmentCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUploadAdjustment getById(Integer tbltbudgetuploadadjustmentId) {
        LOGGER.debug("Finding TblTBudgetUploadAdjustment by id: {}", tbltbudgetuploadadjustmentId);
        return this.wmGenericDao.findById(tbltbudgetuploadadjustmentId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUploadAdjustment findById(Integer tbltbudgetuploadadjustmentId) {
        LOGGER.debug("Finding TblTBudgetUploadAdjustment by id: {}", tbltbudgetuploadadjustmentId);
        try {
            return this.wmGenericDao.findById(tbltbudgetuploadadjustmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblTBudgetUploadAdjustment found with id: {}", tbltbudgetuploadadjustmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblTBudgetUploadAdjustment> findByMultipleIds(List<Integer> tbltbudgetuploadadjustmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblTBudgetUploadAdjustments by ids: {}", tbltbudgetuploadadjustmentIds);

        return this.wmGenericDao.findByMultipleIds(tbltbudgetuploadadjustmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUploadAdjustment update(TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment) {
        LOGGER.debug("Updating TblTBudgetUploadAdjustment with information: {}", tblTbudgetUploadAdjustment);

        this.wmGenericDao.update(tblTbudgetUploadAdjustment);
        this.wmGenericDao.refresh(tblTbudgetUploadAdjustment);

        return tblTbudgetUploadAdjustment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUploadAdjustment partialUpdate(Integer tbltbudgetuploadadjustmentId, Map<String, Object>tblTbudgetUploadAdjustmentPatch) {
        LOGGER.debug("Partially Updating the TblTBudgetUploadAdjustment with id: {}", tbltbudgetuploadadjustmentId);

        TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment = getById(tbltbudgetuploadadjustmentId);

        try {
            ObjectReader tblTbudgetUploadAdjustmentReader = this.objectMapper.reader().forType(TblTBudgetUploadAdjustment.class).withValueToUpdate(tblTbudgetUploadAdjustment);
            tblTbudgetUploadAdjustment = tblTbudgetUploadAdjustmentReader.readValue(this.objectMapper.writeValueAsString(tblTbudgetUploadAdjustmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblTbudgetUploadAdjustmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblTbudgetUploadAdjustment = update(tblTbudgetUploadAdjustment);

        return tblTbudgetUploadAdjustment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblTBudgetUploadAdjustment delete(Integer tbltbudgetuploadadjustmentId) {
        LOGGER.debug("Deleting TblTBudgetUploadAdjustment with id: {}", tbltbudgetuploadadjustmentId);
        TblTBudgetUploadAdjustment deleted = this.wmGenericDao.findById(tbltbudgetuploadadjustmentId);
        if (deleted == null) {
            LOGGER.debug("No TblTBudgetUploadAdjustment found with id: {}", tbltbudgetuploadadjustmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblTBudgetUploadAdjustment.class.getSimpleName(), tbltbudgetuploadadjustmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment) {
        LOGGER.debug("Deleting TblTBudgetUploadAdjustment with {}", tblTbudgetUploadAdjustment);
        this.wmGenericDao.delete(tblTbudgetUploadAdjustment);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetUploadAdjustment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetUploadAdjustments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetUploadAdjustment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblTBudgetUploadAdjustments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetUploadAdjustment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblTBudgetUploadAdjustment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}