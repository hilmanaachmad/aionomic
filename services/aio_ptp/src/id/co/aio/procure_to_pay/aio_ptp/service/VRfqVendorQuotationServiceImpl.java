/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqVendorQuotation;


/**
 * ServiceImpl object for domain model class VRfqVendorQuotation.
 *
 * @see VRfqVendorQuotation
 */
@Service("aio_ptp.VRfqVendorQuotationService")
@Validated
@EntityService(entityClass = VRfqVendorQuotation.class, serviceId = "aio_ptp")
public class VRfqVendorQuotationServiceImpl implements VRfqVendorQuotationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqVendorQuotationServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqVendorQuotationDao")
    private WMGenericDao<VRfqVendorQuotation, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqVendorQuotation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorQuotation create(VRfqVendorQuotation vrfqVendorQuotation) {
        LOGGER.debug("Creating a new VRfqVendorQuotation with information: {}", vrfqVendorQuotation);

        VRfqVendorQuotation vrfqVendorQuotationCreated = this.wmGenericDao.create(vrfqVendorQuotation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqVendorQuotationCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorQuotation getById(Integer vrfqvendorquotationId) {
        LOGGER.debug("Finding VRfqVendorQuotation by id: {}", vrfqvendorquotationId);
        return this.wmGenericDao.findById(vrfqvendorquotationId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorQuotation findById(Integer vrfqvendorquotationId) {
        LOGGER.debug("Finding VRfqVendorQuotation by id: {}", vrfqvendorquotationId);
        try {
            return this.wmGenericDao.findById(vrfqvendorquotationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqVendorQuotation found with id: {}", vrfqvendorquotationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqVendorQuotation> findByMultipleIds(List<Integer> vrfqvendorquotationIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqVendorQuotations by ids: {}", vrfqvendorquotationIds);

        return this.wmGenericDao.findByMultipleIds(vrfqvendorquotationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorQuotation update(VRfqVendorQuotation vrfqVendorQuotation) {
        LOGGER.debug("Updating VRfqVendorQuotation with information: {}", vrfqVendorQuotation);

        this.wmGenericDao.update(vrfqVendorQuotation);
        this.wmGenericDao.refresh(vrfqVendorQuotation);

        return vrfqVendorQuotation;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorQuotation partialUpdate(Integer vrfqvendorquotationId, Map<String, Object>vrfqVendorQuotationPatch) {
        LOGGER.debug("Partially Updating the VRfqVendorQuotation with id: {}", vrfqvendorquotationId);

        VRfqVendorQuotation vrfqVendorQuotation = getById(vrfqvendorquotationId);

        try {
            ObjectReader vrfqVendorQuotationReader = this.objectMapper.reader().forType(VRfqVendorQuotation.class).withValueToUpdate(vrfqVendorQuotation);
            vrfqVendorQuotation = vrfqVendorQuotationReader.readValue(this.objectMapper.writeValueAsString(vrfqVendorQuotationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqVendorQuotationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqVendorQuotation = update(vrfqVendorQuotation);

        return vrfqVendorQuotation;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqVendorQuotation delete(Integer vrfqvendorquotationId) {
        LOGGER.debug("Deleting VRfqVendorQuotation with id: {}", vrfqvendorquotationId);
        VRfqVendorQuotation deleted = this.wmGenericDao.findById(vrfqvendorquotationId);
        if (deleted == null) {
            LOGGER.debug("No VRfqVendorQuotation found with id: {}", vrfqvendorquotationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqVendorQuotation.class.getSimpleName(), vrfqvendorquotationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqVendorQuotation vrfqVendorQuotation) {
        LOGGER.debug("Deleting VRfqVendorQuotation with {}", vrfqVendorQuotation);
        this.wmGenericDao.delete(vrfqVendorQuotation);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqVendorQuotation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqVendorQuotations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqVendorQuotation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqVendorQuotations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqVendorQuotation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqVendorQuotation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}