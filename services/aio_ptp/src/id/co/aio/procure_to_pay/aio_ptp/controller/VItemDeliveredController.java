/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VItemDelivered;
import id.co.aio.procure_to_pay.aio_ptp.service.VItemDeliveredService;


/**
 * Controller object for domain model class VItemDelivered.
 * @see VItemDelivered
 */
@RestController("aio_ptp.VItemDeliveredController")
@Api(value = "VItemDeliveredController", description = "Exposes APIs to work with VItemDelivered resource.")
@RequestMapping("/aio_ptp/VItemDelivered")
public class VItemDeliveredController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VItemDeliveredController.class);

    @Autowired
	@Qualifier("aio_ptp.VItemDeliveredService")
	private VItemDeliveredService vItemDeliveredService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VItemDelivered instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VItemDelivered createVItemDelivered(@RequestBody VItemDelivered vitemDelivered) {
		LOGGER.debug("Create VItemDelivered with information: {}" , vitemDelivered);

		vitemDelivered = vItemDeliveredService.create(vitemDelivered);
		LOGGER.debug("Created VItemDelivered with information: {}" , vitemDelivered);

	    return vitemDelivered;
	}

    @ApiOperation(value = "Returns the VItemDelivered instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VItemDelivered getVItemDelivered(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VItemDelivered with id: {}" , id);

        VItemDelivered foundVItemDelivered = vItemDeliveredService.getById(id);
        LOGGER.debug("VItemDelivered details with id: {}" , foundVItemDelivered);

        return foundVItemDelivered;
    }

    @ApiOperation(value = "Updates the VItemDelivered instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VItemDelivered editVItemDelivered(@PathVariable("id") Integer id, @RequestBody VItemDelivered vitemDelivered) {
        LOGGER.debug("Editing VItemDelivered with id: {}" , vitemDelivered.getId());

        vitemDelivered.setId(id);
        vitemDelivered = vItemDeliveredService.update(vitemDelivered);
        LOGGER.debug("VItemDelivered details with id: {}" , vitemDelivered);

        return vitemDelivered;
    }
    
    @ApiOperation(value = "Partially updates the VItemDelivered instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VItemDelivered patchVItemDelivered(@PathVariable("id") Integer id, @RequestBody @MapTo(VItemDelivered.class) Map<String, Object> vitemDeliveredPatch) {
        LOGGER.debug("Partially updating VItemDelivered with id: {}" , id);

        VItemDelivered vitemDelivered = vItemDeliveredService.partialUpdate(id, vitemDeliveredPatch);
        LOGGER.debug("VItemDelivered details after partial update: {}" , vitemDelivered);

        return vitemDelivered;
    }

    @ApiOperation(value = "Deletes the VItemDelivered instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVItemDelivered(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VItemDelivered with id: {}" , id);

        VItemDelivered deletedVItemDelivered = vItemDeliveredService.delete(id);

        return deletedVItemDelivered != null;
    }

    /**
     * @deprecated Use {@link #findVItemDelivereds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VItemDelivered instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VItemDelivered> searchVItemDeliveredsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VItemDelivereds list by query filter:{}", (Object) queryFilters);
        return vItemDeliveredService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VItemDelivered instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VItemDelivered> findVItemDelivereds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VItemDelivereds list by filter:", query);
        return vItemDeliveredService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VItemDelivered instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VItemDelivered> filterVItemDelivereds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VItemDelivereds list by filter", query);
        return vItemDeliveredService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVItemDelivereds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vItemDeliveredService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVItemDeliveredsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VItemDelivered.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vItemDeliveredService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VItemDelivered instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVItemDelivereds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VItemDelivereds");
		return vItemDeliveredService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVItemDeliveredAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vItemDeliveredService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VItemDeliveredService instance
	 */
	protected void setVItemDeliveredService(VItemDeliveredService service) {
		this.vItemDeliveredService = service;
	}

}