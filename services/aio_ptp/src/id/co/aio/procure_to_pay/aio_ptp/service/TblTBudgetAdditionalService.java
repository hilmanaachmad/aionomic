/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTAdditionalAttachment;
import id.co.aio.procure_to_pay.aio_ptp.TblTAdditionalHistory;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetAdditional;

/**
 * Service object for domain model class {@link TblTBudgetAdditional}.
 */
public interface TblTBudgetAdditionalService {

    /**
     * Creates a new TblTBudgetAdditional. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTBudgetAdditional if any.
     *
     * @param tblTbudgetAdditional Details of the TblTBudgetAdditional to be created; value cannot be null.
     * @return The newly created TblTBudgetAdditional.
     */
    TblTBudgetAdditional create(@Valid TblTBudgetAdditional tblTbudgetAdditional);


	/**
     * Returns TblTBudgetAdditional by given id if exists.
     *
     * @param tbltbudgetadditionalId The id of the TblTBudgetAdditional to get; value cannot be null.
     * @return TblTBudgetAdditional associated with the given tbltbudgetadditionalId.
	 * @throws EntityNotFoundException If no TblTBudgetAdditional is found.
     */
    TblTBudgetAdditional getById(Integer tbltbudgetadditionalId);

    /**
     * Find and return the TblTBudgetAdditional by given id if exists, returns null otherwise.
     *
     * @param tbltbudgetadditionalId The id of the TblTBudgetAdditional to get; value cannot be null.
     * @return TblTBudgetAdditional associated with the given tbltbudgetadditionalId.
     */
    TblTBudgetAdditional findById(Integer tbltbudgetadditionalId);

	/**
     * Find and return the list of TblTBudgetAdditionals by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tbltbudgetadditionalIds The id's of the TblTBudgetAdditional to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblTBudgetAdditionals associated with the given tbltbudgetadditionalIds.
     */
    List<TblTBudgetAdditional> findByMultipleIds(List<Integer> tbltbudgetadditionalIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblTBudgetAdditional. It replaces all fields of the existing TblTBudgetAdditional with the given tblTbudgetAdditional.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTBudgetAdditional if any.
     *
     * @param tblTbudgetAdditional The details of the TblTBudgetAdditional to be updated; value cannot be null.
     * @return The updated TblTBudgetAdditional.
     * @throws EntityNotFoundException if no TblTBudgetAdditional is found with given input.
     */
    TblTBudgetAdditional update(@Valid TblTBudgetAdditional tblTbudgetAdditional);


    /**
     * Partially updates the details of an existing TblTBudgetAdditional. It updates only the
     * fields of the existing TblTBudgetAdditional which are passed in the tblTbudgetAdditionalPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTBudgetAdditional if any.
     *
     * @param tbltbudgetadditionalId The id of the TblTBudgetAdditional to be deleted; value cannot be null.
     * @param tblTbudgetAdditionalPatch The partial data of TblTBudgetAdditional which is supposed to be updated; value cannot be null.
     * @return The updated TblTBudgetAdditional.
     * @throws EntityNotFoundException if no TblTBudgetAdditional is found with given input.
     */
    TblTBudgetAdditional partialUpdate(Integer tbltbudgetadditionalId, Map<String, Object> tblTbudgetAdditionalPatch);

    /**
     * Deletes an existing TblTBudgetAdditional with the given id.
     *
     * @param tbltbudgetadditionalId The id of the TblTBudgetAdditional to be deleted; value cannot be null.
     * @return The deleted TblTBudgetAdditional.
     * @throws EntityNotFoundException if no TblTBudgetAdditional found with the given id.
     */
    TblTBudgetAdditional delete(Integer tbltbudgetadditionalId);

    /**
     * Deletes an existing TblTBudgetAdditional with the given object.
     *
     * @param tblTbudgetAdditional The instance of the TblTBudgetAdditional to be deleted; value cannot be null.
     */
    void delete(TblTBudgetAdditional tblTbudgetAdditional);

    /**
     * Find all TblTBudgetAdditionals matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTBudgetAdditionals.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblTBudgetAdditional> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblTBudgetAdditionals matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTBudgetAdditionals.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTBudgetAdditional> findAll(String query, Pageable pageable);

    /**
     * Exports all TblTBudgetAdditionals matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblTBudgetAdditionals matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblTBudgetAdditionals in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblTBudgetAdditional.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblTadditionalAttachments for given TblTBudgetAdditional id.
     *
     * @param baId value of baId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTAdditionalAttachment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTAdditionalAttachment> findAssociatedTblTadditionalAttachments(Integer baId, Pageable pageable);

    /*
     * Returns the associated tblTadditionalHistories for given TblTBudgetAdditional id.
     *
     * @param baId value of baId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTAdditionalHistory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTAdditionalHistory> findAssociatedTblTadditionalHistories(Integer baId, Pageable pageable);

}