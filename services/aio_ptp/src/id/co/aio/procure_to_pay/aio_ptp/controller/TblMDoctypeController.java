/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMDoctype;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMDoctypeService;


/**
 * Controller object for domain model class TblMDoctype.
 * @see TblMDoctype
 */
@RestController("aio_ptp.TblMDoctypeController")
@Api(value = "TblMDoctypeController", description = "Exposes APIs to work with TblMDoctype resource.")
@RequestMapping("/aio_ptp/TblMDoctype")
public class TblMDoctypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMDoctypeController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMDoctypeService")
	private TblMDoctypeService tblMDoctypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMDoctype instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDoctype createTblMDoctype(@RequestBody TblMDoctype tblMdoctype) {
		LOGGER.debug("Create TblMDoctype with information: {}" , tblMdoctype);

		tblMdoctype = tblMDoctypeService.create(tblMdoctype);
		LOGGER.debug("Created TblMDoctype with information: {}" , tblMdoctype);

	    return tblMdoctype;
	}

    @ApiOperation(value = "Returns the TblMDoctype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDoctype getTblMDoctype(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TblMDoctype with id: {}" , id);

        TblMDoctype foundTblMDoctype = tblMDoctypeService.getById(id);
        LOGGER.debug("TblMDoctype details with id: {}" , foundTblMDoctype);

        return foundTblMDoctype;
    }

    @ApiOperation(value = "Updates the TblMDoctype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDoctype editTblMDoctype(@PathVariable("id") Integer id, @RequestBody TblMDoctype tblMdoctype) {
        LOGGER.debug("Editing TblMDoctype with id: {}" , tblMdoctype.getId());

        tblMdoctype.setId(id);
        tblMdoctype = tblMDoctypeService.update(tblMdoctype);
        LOGGER.debug("TblMDoctype details with id: {}" , tblMdoctype);

        return tblMdoctype;
    }
    
    @ApiOperation(value = "Partially updates the TblMDoctype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMDoctype patchTblMDoctype(@PathVariable("id") Integer id, @RequestBody @MapTo(TblMDoctype.class) Map<String, Object> tblMdoctypePatch) {
        LOGGER.debug("Partially updating TblMDoctype with id: {}" , id);

        TblMDoctype tblMdoctype = tblMDoctypeService.partialUpdate(id, tblMdoctypePatch);
        LOGGER.debug("TblMDoctype details after partial update: {}" , tblMdoctype);

        return tblMdoctype;
    }

    @ApiOperation(value = "Deletes the TblMDoctype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMDoctype(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TblMDoctype with id: {}" , id);

        TblMDoctype deletedTblMDoctype = tblMDoctypeService.delete(id);

        return deletedTblMDoctype != null;
    }

    /**
     * @deprecated Use {@link #findTblMDoctypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMDoctype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDoctype> searchTblMDoctypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMDoctypes list by query filter:{}", (Object) queryFilters);
        return tblMDoctypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMDoctype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDoctype> findTblMDoctypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMDoctypes list by filter:", query);
        return tblMDoctypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMDoctype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMDoctype> filterTblMDoctypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMDoctypes list by filter", query);
        return tblMDoctypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMDoctypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMDoctypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMDoctypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMDoctype.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMDoctypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMDoctype instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMDoctypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMDoctypes");
		return tblMDoctypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMDoctypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMDoctypeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMDoctypeService instance
	 */
	protected void setTblMDoctypeService(TblMDoctypeService service) {
		this.tblMDoctypeService = service;
	}

}