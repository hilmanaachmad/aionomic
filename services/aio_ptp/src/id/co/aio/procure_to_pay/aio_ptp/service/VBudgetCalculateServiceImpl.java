/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetCalculate;


/**
 * ServiceImpl object for domain model class VBudgetCalculate.
 *
 * @see VBudgetCalculate
 */
@Service("aio_ptp.VBudgetCalculateService")
@Validated
@EntityService(entityClass = VBudgetCalculate.class, serviceId = "aio_ptp")
public class VBudgetCalculateServiceImpl implements VBudgetCalculateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBudgetCalculateServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VBudgetCalculateDao")
    private WMGenericDao<VBudgetCalculate, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VBudgetCalculate, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetCalculate create(VBudgetCalculate vbudgetCalculate) {
        LOGGER.debug("Creating a new VBudgetCalculate with information: {}", vbudgetCalculate);

        VBudgetCalculate vbudgetCalculateCreated = this.wmGenericDao.create(vbudgetCalculate);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vbudgetCalculateCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetCalculate getById(Integer vbudgetcalculateId) {
        LOGGER.debug("Finding VBudgetCalculate by id: {}", vbudgetcalculateId);
        return this.wmGenericDao.findById(vbudgetcalculateId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetCalculate findById(Integer vbudgetcalculateId) {
        LOGGER.debug("Finding VBudgetCalculate by id: {}", vbudgetcalculateId);
        try {
            return this.wmGenericDao.findById(vbudgetcalculateId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VBudgetCalculate found with id: {}", vbudgetcalculateId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VBudgetCalculate> findByMultipleIds(List<Integer> vbudgetcalculateIds, boolean orderedReturn) {
        LOGGER.debug("Finding VBudgetCalculates by ids: {}", vbudgetcalculateIds);

        return this.wmGenericDao.findByMultipleIds(vbudgetcalculateIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetCalculate update(VBudgetCalculate vbudgetCalculate) {
        LOGGER.debug("Updating VBudgetCalculate with information: {}", vbudgetCalculate);

        this.wmGenericDao.update(vbudgetCalculate);
        this.wmGenericDao.refresh(vbudgetCalculate);

        return vbudgetCalculate;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetCalculate partialUpdate(Integer vbudgetcalculateId, Map<String, Object>vbudgetCalculatePatch) {
        LOGGER.debug("Partially Updating the VBudgetCalculate with id: {}", vbudgetcalculateId);

        VBudgetCalculate vbudgetCalculate = getById(vbudgetcalculateId);

        try {
            ObjectReader vbudgetCalculateReader = this.objectMapper.reader().forType(VBudgetCalculate.class).withValueToUpdate(vbudgetCalculate);
            vbudgetCalculate = vbudgetCalculateReader.readValue(this.objectMapper.writeValueAsString(vbudgetCalculatePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vbudgetCalculatePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vbudgetCalculate = update(vbudgetCalculate);

        return vbudgetCalculate;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetCalculate delete(Integer vbudgetcalculateId) {
        LOGGER.debug("Deleting VBudgetCalculate with id: {}", vbudgetcalculateId);
        VBudgetCalculate deleted = this.wmGenericDao.findById(vbudgetcalculateId);
        if (deleted == null) {
            LOGGER.debug("No VBudgetCalculate found with id: {}", vbudgetcalculateId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VBudgetCalculate.class.getSimpleName(), vbudgetcalculateId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VBudgetCalculate vbudgetCalculate) {
        LOGGER.debug("Deleting VBudgetCalculate with {}", vbudgetCalculate);
        this.wmGenericDao.delete(vbudgetCalculate);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VBudgetCalculate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VBudgetCalculates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VBudgetCalculate> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VBudgetCalculates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VBudgetCalculate to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VBudgetCalculate to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}