/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseOrder;

/**
 * Service object for domain model class {@link VPurchaseOrder}.
 */
public interface VPurchaseOrderService {

    /**
     * Creates a new VPurchaseOrder. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPurchaseOrder if any.
     *
     * @param vpurchaseOrder Details of the VPurchaseOrder to be created; value cannot be null.
     * @return The newly created VPurchaseOrder.
     */
    VPurchaseOrder create(@Valid VPurchaseOrder vpurchaseOrder);


	/**
     * Returns VPurchaseOrder by given id if exists.
     *
     * @param vpurchaseorderId The id of the VPurchaseOrder to get; value cannot be null.
     * @return VPurchaseOrder associated with the given vpurchaseorderId.
	 * @throws EntityNotFoundException If no VPurchaseOrder is found.
     */
    VPurchaseOrder getById(Integer vpurchaseorderId);

    /**
     * Find and return the VPurchaseOrder by given id if exists, returns null otherwise.
     *
     * @param vpurchaseorderId The id of the VPurchaseOrder to get; value cannot be null.
     * @return VPurchaseOrder associated with the given vpurchaseorderId.
     */
    VPurchaseOrder findById(Integer vpurchaseorderId);

	/**
     * Find and return the list of VPurchaseOrders by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vpurchaseorderIds The id's of the VPurchaseOrder to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPurchaseOrders associated with the given vpurchaseorderIds.
     */
    List<VPurchaseOrder> findByMultipleIds(List<Integer> vpurchaseorderIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPurchaseOrder. It replaces all fields of the existing VPurchaseOrder with the given vpurchaseOrder.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPurchaseOrder if any.
     *
     * @param vpurchaseOrder The details of the VPurchaseOrder to be updated; value cannot be null.
     * @return The updated VPurchaseOrder.
     * @throws EntityNotFoundException if no VPurchaseOrder is found with given input.
     */
    VPurchaseOrder update(@Valid VPurchaseOrder vpurchaseOrder);


    /**
     * Partially updates the details of an existing VPurchaseOrder. It updates only the
     * fields of the existing VPurchaseOrder which are passed in the vpurchaseOrderPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPurchaseOrder if any.
     *
     * @param vpurchaseorderId The id of the VPurchaseOrder to be deleted; value cannot be null.
     * @param vpurchaseOrderPatch The partial data of VPurchaseOrder which is supposed to be updated; value cannot be null.
     * @return The updated VPurchaseOrder.
     * @throws EntityNotFoundException if no VPurchaseOrder is found with given input.
     */
    VPurchaseOrder partialUpdate(Integer vpurchaseorderId, Map<String, Object> vpurchaseOrderPatch);

    /**
     * Deletes an existing VPurchaseOrder with the given id.
     *
     * @param vpurchaseorderId The id of the VPurchaseOrder to be deleted; value cannot be null.
     * @return The deleted VPurchaseOrder.
     * @throws EntityNotFoundException if no VPurchaseOrder found with the given id.
     */
    VPurchaseOrder delete(Integer vpurchaseorderId);

    /**
     * Deletes an existing VPurchaseOrder with the given object.
     *
     * @param vpurchaseOrder The instance of the VPurchaseOrder to be deleted; value cannot be null.
     */
    void delete(VPurchaseOrder vpurchaseOrder);

    /**
     * Find all VPurchaseOrders matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPurchaseOrders.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPurchaseOrder> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPurchaseOrders matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPurchaseOrders.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPurchaseOrder> findAll(String query, Pageable pageable);

    /**
     * Exports all VPurchaseOrders matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPurchaseOrders matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPurchaseOrders in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPurchaseOrder.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}