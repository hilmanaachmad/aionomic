/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMBrand;
import id.co.aio.procure_to_pay.aio_ptp.TblMIo;
import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetHeader;


/**
 * ServiceImpl object for domain model class TblMBrand.
 *
 * @see TblMBrand
 */
@Service("aio_ptp.TblMBrandService")
@Validated
@EntityService(entityClass = TblMBrand.class, serviceId = "aio_ptp")
public class TblMBrandServiceImpl implements TblMBrandService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMBrandServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTBudgetHeaderService")
    private TblTBudgetHeaderService tblTBudgetHeaderService;

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblMIoService")
    private TblMIoService tblMIoService;

    @Autowired
    @Qualifier("aio_ptp.TblMBrandDao")
    private WMGenericDao<TblMBrand, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMBrand, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMBrand create(TblMBrand tblMbrand) {
        LOGGER.debug("Creating a new TblMBrand with information: {}", tblMbrand);

        TblMBrand tblMbrandCreated = this.wmGenericDao.create(tblMbrand);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMbrandCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMBrand getById(Integer tblmbrandId) {
        LOGGER.debug("Finding TblMBrand by id: {}", tblmbrandId);
        return this.wmGenericDao.findById(tblmbrandId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMBrand findById(Integer tblmbrandId) {
        LOGGER.debug("Finding TblMBrand by id: {}", tblmbrandId);
        try {
            return this.wmGenericDao.findById(tblmbrandId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMBrand found with id: {}", tblmbrandId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMBrand> findByMultipleIds(List<Integer> tblmbrandIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMBrands by ids: {}", tblmbrandIds);

        return this.wmGenericDao.findByMultipleIds(tblmbrandIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMBrand update(TblMBrand tblMbrand) {
        LOGGER.debug("Updating TblMBrand with information: {}", tblMbrand);

        this.wmGenericDao.update(tblMbrand);
        this.wmGenericDao.refresh(tblMbrand);

        return tblMbrand;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMBrand partialUpdate(Integer tblmbrandId, Map<String, Object>tblMbrandPatch) {
        LOGGER.debug("Partially Updating the TblMBrand with id: {}", tblmbrandId);

        TblMBrand tblMbrand = getById(tblmbrandId);

        try {
            ObjectReader tblMbrandReader = this.objectMapper.reader().forType(TblMBrand.class).withValueToUpdate(tblMbrand);
            tblMbrand = tblMbrandReader.readValue(this.objectMapper.writeValueAsString(tblMbrandPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMbrandPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMbrand = update(tblMbrand);

        return tblMbrand;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMBrand delete(Integer tblmbrandId) {
        LOGGER.debug("Deleting TblMBrand with id: {}", tblmbrandId);
        TblMBrand deleted = this.wmGenericDao.findById(tblmbrandId);
        if (deleted == null) {
            LOGGER.debug("No TblMBrand found with id: {}", tblmbrandId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMBrand.class.getSimpleName(), tblmbrandId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMBrand tblMbrand) {
        LOGGER.debug("Deleting TblMBrand with {}", tblMbrand);
        this.wmGenericDao.delete(tblMbrand);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMBrand> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMBrands");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMBrand> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMBrands");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMBrand to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMBrand to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMIo> findAssociatedTblMios(Integer brId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblMios");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMbrand.brId = '" + brId + "'");

        return tblMIoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTBudgetHeader> findAssociatedTblTbudgetHeaders(Integer brId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTbudgetHeaders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMbrand.brId = '" + brId + "'");

        return tblTBudgetHeaderService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTBudgetHeaderService instance
     */
    protected void setTblTBudgetHeaderService(TblTBudgetHeaderService service) {
        this.tblTBudgetHeaderService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblMIoService instance
     */
    protected void setTblMIoService(TblMIoService service) {
        this.tblMIoService = service;
    }

}