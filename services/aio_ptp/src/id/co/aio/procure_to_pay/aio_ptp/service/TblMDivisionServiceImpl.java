/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMDivision;
import id.co.aio.procure_to_pay.aio_ptp.TblMDivisionBod;


/**
 * ServiceImpl object for domain model class TblMDivision.
 *
 * @see TblMDivision
 */
@Service("aio_ptp.TblMDivisionService")
@Validated
@EntityService(entityClass = TblMDivision.class, serviceId = "aio_ptp")
public class TblMDivisionServiceImpl implements TblMDivisionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMDivisionServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblMDivisionBodService")
    private TblMDivisionBodService tblMDivisionBodService;

    @Autowired
    @Qualifier("aio_ptp.TblMDivisionDao")
    private WMGenericDao<TblMDivision, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMDivision, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMDivision create(TblMDivision tblMdivision) {
        LOGGER.debug("Creating a new TblMDivision with information: {}", tblMdivision);

        TblMDivision tblMdivisionCreated = this.wmGenericDao.create(tblMdivision);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMdivisionCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMDivision getById(Integer tblmdivisionId) {
        LOGGER.debug("Finding TblMDivision by id: {}", tblmdivisionId);
        return this.wmGenericDao.findById(tblmdivisionId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMDivision findById(Integer tblmdivisionId) {
        LOGGER.debug("Finding TblMDivision by id: {}", tblmdivisionId);
        try {
            return this.wmGenericDao.findById(tblmdivisionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMDivision found with id: {}", tblmdivisionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMDivision> findByMultipleIds(List<Integer> tblmdivisionIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMDivisions by ids: {}", tblmdivisionIds);

        return this.wmGenericDao.findByMultipleIds(tblmdivisionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMDivision update(TblMDivision tblMdivision) {
        LOGGER.debug("Updating TblMDivision with information: {}", tblMdivision);

        this.wmGenericDao.update(tblMdivision);
        this.wmGenericDao.refresh(tblMdivision);

        return tblMdivision;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMDivision partialUpdate(Integer tblmdivisionId, Map<String, Object>tblMdivisionPatch) {
        LOGGER.debug("Partially Updating the TblMDivision with id: {}", tblmdivisionId);

        TblMDivision tblMdivision = getById(tblmdivisionId);

        try {
            ObjectReader tblMdivisionReader = this.objectMapper.reader().forType(TblMDivision.class).withValueToUpdate(tblMdivision);
            tblMdivision = tblMdivisionReader.readValue(this.objectMapper.writeValueAsString(tblMdivisionPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMdivisionPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMdivision = update(tblMdivision);

        return tblMdivision;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMDivision delete(Integer tblmdivisionId) {
        LOGGER.debug("Deleting TblMDivision with id: {}", tblmdivisionId);
        TblMDivision deleted = this.wmGenericDao.findById(tblmdivisionId);
        if (deleted == null) {
            LOGGER.debug("No TblMDivision found with id: {}", tblmdivisionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMDivision.class.getSimpleName(), tblmdivisionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMDivision tblMdivision) {
        LOGGER.debug("Deleting TblMDivision with {}", tblMdivision);
        this.wmGenericDao.delete(tblMdivision);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMDivision> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMDivisions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMDivision> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMDivisions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMDivision to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMDivision to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMDivisionBod> findAssociatedTblMdivisionBods(Integer divisionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblMdivisionBods");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMdivision.divisionId = '" + divisionId + "'");

        return tblMDivisionBodService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblMDivisionBodService instance
     */
    protected void setTblMDivisionBodService(TblMDivisionBodService service) {
        this.tblMDivisionBodService = service;
    }

}