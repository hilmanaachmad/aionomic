/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.RelDelAuth;
import id.co.aio.procure_to_pay.aio_ptp.RelDelAuthId;
import id.co.aio.procure_to_pay.aio_ptp.service.RelDelAuthService;


/**
 * Controller object for domain model class RelDelAuth.
 * @see RelDelAuth
 */
@RestController("aio_ptp.RelDelAuthController")
@Api(value = "RelDelAuthController", description = "Exposes APIs to work with RelDelAuth resource.")
@RequestMapping("/aio_ptp/RelDelAuth")
public class RelDelAuthController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelDelAuthController.class);

    @Autowired
	@Qualifier("aio_ptp.RelDelAuthService")
	private RelDelAuthService relDelAuthService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new RelDelAuth instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelDelAuth createRelDelAuth(@RequestBody RelDelAuth relDelAuth) {
		LOGGER.debug("Create RelDelAuth with information: {}" , relDelAuth);

		relDelAuth = relDelAuthService.create(relDelAuth);
		LOGGER.debug("Created RelDelAuth with information: {}" , relDelAuth);

	    return relDelAuth;
	}

    @ApiOperation(value = "Returns the RelDelAuth instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelDelAuth getRelDelAuth(@RequestParam("authId") Integer authId, @RequestParam("delId") Integer delId) {

        RelDelAuthId reldelauthId = new RelDelAuthId();
        reldelauthId.setAuthId(authId);
        reldelauthId.setDelId(delId);

        LOGGER.debug("Getting RelDelAuth with id: {}" , reldelauthId);
        RelDelAuth relDelAuth = relDelAuthService.getById(reldelauthId);
        LOGGER.debug("RelDelAuth details with id: {}" , relDelAuth);

        return relDelAuth;
    }



    @ApiOperation(value = "Updates the RelDelAuth instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelDelAuth editRelDelAuth(@RequestParam("authId") Integer authId, @RequestParam("delId") Integer delId, @RequestBody RelDelAuth relDelAuth) {

        relDelAuth.setAuthId(authId);
        relDelAuth.setDelId(delId);

        LOGGER.debug("RelDelAuth details with id is updated with: {}" , relDelAuth);

        return relDelAuthService.update(relDelAuth);
    }

	@ApiOperation(value = "Partially updates the  RelDelAuth instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelDelAuth patchRelDelAuth(@RequestParam("authId") Integer authId, @RequestParam("delId") Integer delId, @RequestBody @MapTo(RelDelAuth.class) Map<String, Object> relDelAuthPatch) {

        RelDelAuthId reldelauthId = new RelDelAuthId();
        reldelauthId.setAuthId(authId);
        reldelauthId.setDelId(delId);
        LOGGER.debug("Partially updating RelDelAuth with id: {}" , reldelauthId);

        RelDelAuth relDelAuth = relDelAuthService.partialUpdate(reldelauthId, relDelAuthPatch);
        LOGGER.debug("RelDelAuth details after partial update: {}" , relDelAuth);

        return relDelAuth;
    }


    @ApiOperation(value = "Deletes the RelDelAuth instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRelDelAuth(@RequestParam("authId") Integer authId, @RequestParam("delId") Integer delId) {

        RelDelAuthId reldelauthId = new RelDelAuthId();
        reldelauthId.setAuthId(authId);
        reldelauthId.setDelId(delId);

        LOGGER.debug("Deleting RelDelAuth with id: {}" , reldelauthId);
        RelDelAuth relDelAuth = relDelAuthService.delete(reldelauthId);

        return relDelAuth != null;
    }


    /**
     * @deprecated Use {@link #findRelDelAuths(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RelDelAuth instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelDelAuth> searchRelDelAuthsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RelDelAuths list by query filter:{}", (Object) queryFilters);
        return relDelAuthService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RelDelAuth instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelDelAuth> findRelDelAuths(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RelDelAuths list by filter:", query);
        return relDelAuthService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RelDelAuth instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelDelAuth> filterRelDelAuths(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RelDelAuths list by filter", query);
        return relDelAuthService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRelDelAuths(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return relDelAuthService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRelDelAuthsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = RelDelAuth.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> relDelAuthService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of RelDelAuth instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRelDelAuths( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RelDelAuths");
		return relDelAuthService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRelDelAuthAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return relDelAuthService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RelDelAuthService instance
	 */
	protected void setRelDelAuthService(RelDelAuthService service) {
		this.relDelAuthService = service;
	}

}