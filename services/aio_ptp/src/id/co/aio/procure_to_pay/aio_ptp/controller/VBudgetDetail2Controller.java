/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetDetail2;
import id.co.aio.procure_to_pay.aio_ptp.service.VBudgetDetail2Service;


/**
 * Controller object for domain model class VBudgetDetail2.
 * @see VBudgetDetail2
 */
@RestController("aio_ptp.VBudgetDetail2Controller")
@Api(value = "VBudgetDetail2Controller", description = "Exposes APIs to work with VBudgetDetail2 resource.")
@RequestMapping("/aio_ptp/VBudgetDetail2")
public class VBudgetDetail2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBudgetDetail2Controller.class);

    @Autowired
	@Qualifier("aio_ptp.VBudgetDetail2Service")
	private VBudgetDetail2Service vBudgetDetail2Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VBudgetDetail2 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetDetail2 createVBudgetDetail2(@RequestBody VBudgetDetail2 vbudgetDetail2) {
		LOGGER.debug("Create VBudgetDetail2 with information: {}" , vbudgetDetail2);

		vbudgetDetail2 = vBudgetDetail2Service.create(vbudgetDetail2);
		LOGGER.debug("Created VBudgetDetail2 with information: {}" , vbudgetDetail2);

	    return vbudgetDetail2;
	}

    @ApiOperation(value = "Returns the VBudgetDetail2 instance associated with the given id.")
    @RequestMapping(value = "/{bdId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetDetail2 getVBudgetDetail2(@PathVariable("bdId") Integer bdId) {
        LOGGER.debug("Getting VBudgetDetail2 with id: {}" , bdId);

        VBudgetDetail2 foundVBudgetDetail2 = vBudgetDetail2Service.getById(bdId);
        LOGGER.debug("VBudgetDetail2 details with id: {}" , foundVBudgetDetail2);

        return foundVBudgetDetail2;
    }

    @ApiOperation(value = "Updates the VBudgetDetail2 instance associated with the given id.")
    @RequestMapping(value = "/{bdId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetDetail2 editVBudgetDetail2(@PathVariable("bdId") Integer bdId, @RequestBody VBudgetDetail2 vbudgetDetail2) {
        LOGGER.debug("Editing VBudgetDetail2 with id: {}" , vbudgetDetail2.getBdId());

        vbudgetDetail2.setBdId(bdId);
        vbudgetDetail2 = vBudgetDetail2Service.update(vbudgetDetail2);
        LOGGER.debug("VBudgetDetail2 details with id: {}" , vbudgetDetail2);

        return vbudgetDetail2;
    }
    
    @ApiOperation(value = "Partially updates the VBudgetDetail2 instance associated with the given id.")
    @RequestMapping(value = "/{bdId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBudgetDetail2 patchVBudgetDetail2(@PathVariable("bdId") Integer bdId, @RequestBody @MapTo(VBudgetDetail2.class) Map<String, Object> vbudgetDetail2Patch) {
        LOGGER.debug("Partially updating VBudgetDetail2 with id: {}" , bdId);

        VBudgetDetail2 vbudgetDetail2 = vBudgetDetail2Service.partialUpdate(bdId, vbudgetDetail2Patch);
        LOGGER.debug("VBudgetDetail2 details after partial update: {}" , vbudgetDetail2);

        return vbudgetDetail2;
    }

    @ApiOperation(value = "Deletes the VBudgetDetail2 instance associated with the given id.")
    @RequestMapping(value = "/{bdId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVBudgetDetail2(@PathVariable("bdId") Integer bdId) {
        LOGGER.debug("Deleting VBudgetDetail2 with id: {}" , bdId);

        VBudgetDetail2 deletedVBudgetDetail2 = vBudgetDetail2Service.delete(bdId);

        return deletedVBudgetDetail2 != null;
    }

    /**
     * @deprecated Use {@link #findVBudgetDetail2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VBudgetDetail2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetDetail2> searchVBudgetDetail2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VBudgetDetail2s list by query filter:{}", (Object) queryFilters);
        return vBudgetDetail2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBudgetDetail2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetDetail2> findVBudgetDetail2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBudgetDetail2s list by filter:", query);
        return vBudgetDetail2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBudgetDetail2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBudgetDetail2> filterVBudgetDetail2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBudgetDetail2s list by filter", query);
        return vBudgetDetail2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVBudgetDetail2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vBudgetDetail2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVBudgetDetail2sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VBudgetDetail2.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vBudgetDetail2Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VBudgetDetail2 instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVBudgetDetail2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VBudgetDetail2s");
		return vBudgetDetail2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVBudgetDetail2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vBudgetDetail2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VBudgetDetail2Service instance
	 */
	protected void setVBudgetDetail2Service(VBudgetDetail2Service service) {
		this.vBudgetDetail2Service = service;
	}

}