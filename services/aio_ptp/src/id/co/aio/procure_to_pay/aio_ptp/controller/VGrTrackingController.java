/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VGrTracking;
import id.co.aio.procure_to_pay.aio_ptp.service.VGrTrackingService;


/**
 * Controller object for domain model class VGrTracking.
 * @see VGrTracking
 */
@RestController("aio_ptp.VGrTrackingController")
@Api(value = "VGrTrackingController", description = "Exposes APIs to work with VGrTracking resource.")
@RequestMapping("/aio_ptp/VGrTracking")
public class VGrTrackingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrTrackingController.class);

    @Autowired
	@Qualifier("aio_ptp.VGrTrackingService")
	private VGrTrackingService vGrTrackingService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VGrTracking instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTracking createVGrTracking(@RequestBody VGrTracking vgrTracking) {
		LOGGER.debug("Create VGrTracking with information: {}" , vgrTracking);

		vgrTracking = vGrTrackingService.create(vgrTracking);
		LOGGER.debug("Created VGrTracking with information: {}" , vgrTracking);

	    return vgrTracking;
	}

    @ApiOperation(value = "Returns the VGrTracking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTracking getVGrTracking(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VGrTracking with id: {}" , id);

        VGrTracking foundVGrTracking = vGrTrackingService.getById(id);
        LOGGER.debug("VGrTracking details with id: {}" , foundVGrTracking);

        return foundVGrTracking;
    }

    @ApiOperation(value = "Updates the VGrTracking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTracking editVGrTracking(@PathVariable("id") Integer id, @RequestBody VGrTracking vgrTracking) {
        LOGGER.debug("Editing VGrTracking with id: {}" , vgrTracking.getId());

        vgrTracking.setId(id);
        vgrTracking = vGrTrackingService.update(vgrTracking);
        LOGGER.debug("VGrTracking details with id: {}" , vgrTracking);

        return vgrTracking;
    }
    
    @ApiOperation(value = "Partially updates the VGrTracking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrTracking patchVGrTracking(@PathVariable("id") Integer id, @RequestBody @MapTo(VGrTracking.class) Map<String, Object> vgrTrackingPatch) {
        LOGGER.debug("Partially updating VGrTracking with id: {}" , id);

        VGrTracking vgrTracking = vGrTrackingService.partialUpdate(id, vgrTrackingPatch);
        LOGGER.debug("VGrTracking details after partial update: {}" , vgrTracking);

        return vgrTracking;
    }

    @ApiOperation(value = "Deletes the VGrTracking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVGrTracking(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VGrTracking with id: {}" , id);

        VGrTracking deletedVGrTracking = vGrTrackingService.delete(id);

        return deletedVGrTracking != null;
    }

    /**
     * @deprecated Use {@link #findVGrTrackings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VGrTracking instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTracking> searchVGrTrackingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VGrTrackings list by query filter:{}", (Object) queryFilters);
        return vGrTrackingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrTracking instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTracking> findVGrTrackings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrTrackings list by filter:", query);
        return vGrTrackingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrTracking instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrTracking> filterVGrTrackings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrTrackings list by filter", query);
        return vGrTrackingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVGrTrackings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vGrTrackingService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVGrTrackingsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VGrTracking.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vGrTrackingService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VGrTracking instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVGrTrackings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VGrTrackings");
		return vGrTrackingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVGrTrackingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vGrTrackingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VGrTrackingService instance
	 */
	protected void setVGrTrackingService(VGrTrackingService service) {
		this.vGrTrackingService = service;
	}

}