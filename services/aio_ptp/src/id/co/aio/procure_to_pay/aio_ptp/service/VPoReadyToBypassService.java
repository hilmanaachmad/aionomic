/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPoReadyToBypass;

/**
 * Service object for domain model class {@link VPoReadyToBypass}.
 */
public interface VPoReadyToBypassService {

    /**
     * Creates a new VPoReadyToBypass. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoReadyToBypass if any.
     *
     * @param vpoReadyToBypass Details of the VPoReadyToBypass to be created; value cannot be null.
     * @return The newly created VPoReadyToBypass.
     */
    VPoReadyToBypass create(@Valid VPoReadyToBypass vpoReadyToBypass);


	/**
     * Returns VPoReadyToBypass by given id if exists.
     *
     * @param vporeadytobypassId The id of the VPoReadyToBypass to get; value cannot be null.
     * @return VPoReadyToBypass associated with the given vporeadytobypassId.
	 * @throws EntityNotFoundException If no VPoReadyToBypass is found.
     */
    VPoReadyToBypass getById(Integer vporeadytobypassId);

    /**
     * Find and return the VPoReadyToBypass by given id if exists, returns null otherwise.
     *
     * @param vporeadytobypassId The id of the VPoReadyToBypass to get; value cannot be null.
     * @return VPoReadyToBypass associated with the given vporeadytobypassId.
     */
    VPoReadyToBypass findById(Integer vporeadytobypassId);

	/**
     * Find and return the list of VPoReadyToBypasses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vporeadytobypassIds The id's of the VPoReadyToBypass to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPoReadyToBypasses associated with the given vporeadytobypassIds.
     */
    List<VPoReadyToBypass> findByMultipleIds(List<Integer> vporeadytobypassIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPoReadyToBypass. It replaces all fields of the existing VPoReadyToBypass with the given vpoReadyToBypass.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoReadyToBypass if any.
     *
     * @param vpoReadyToBypass The details of the VPoReadyToBypass to be updated; value cannot be null.
     * @return The updated VPoReadyToBypass.
     * @throws EntityNotFoundException if no VPoReadyToBypass is found with given input.
     */
    VPoReadyToBypass update(@Valid VPoReadyToBypass vpoReadyToBypass);


    /**
     * Partially updates the details of an existing VPoReadyToBypass. It updates only the
     * fields of the existing VPoReadyToBypass which are passed in the vpoReadyToBypassPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPoReadyToBypass if any.
     *
     * @param vporeadytobypassId The id of the VPoReadyToBypass to be deleted; value cannot be null.
     * @param vpoReadyToBypassPatch The partial data of VPoReadyToBypass which is supposed to be updated; value cannot be null.
     * @return The updated VPoReadyToBypass.
     * @throws EntityNotFoundException if no VPoReadyToBypass is found with given input.
     */
    VPoReadyToBypass partialUpdate(Integer vporeadytobypassId, Map<String, Object> vpoReadyToBypassPatch);

    /**
     * Deletes an existing VPoReadyToBypass with the given id.
     *
     * @param vporeadytobypassId The id of the VPoReadyToBypass to be deleted; value cannot be null.
     * @return The deleted VPoReadyToBypass.
     * @throws EntityNotFoundException if no VPoReadyToBypass found with the given id.
     */
    VPoReadyToBypass delete(Integer vporeadytobypassId);

    /**
     * Deletes an existing VPoReadyToBypass with the given object.
     *
     * @param vpoReadyToBypass The instance of the VPoReadyToBypass to be deleted; value cannot be null.
     */
    void delete(VPoReadyToBypass vpoReadyToBypass);

    /**
     * Find all VPoReadyToBypasses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPoReadyToBypasses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPoReadyToBypass> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPoReadyToBypasses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPoReadyToBypasses.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPoReadyToBypass> findAll(String query, Pageable pageable);

    /**
     * Exports all VPoReadyToBypasses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPoReadyToBypasses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPoReadyToBypasses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPoReadyToBypass.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}