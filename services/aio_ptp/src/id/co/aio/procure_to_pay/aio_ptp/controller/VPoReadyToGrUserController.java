/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VPoReadyToGrUser;
import id.co.aio.procure_to_pay.aio_ptp.service.VPoReadyToGrUserService;


/**
 * Controller object for domain model class VPoReadyToGrUser.
 * @see VPoReadyToGrUser
 */
@RestController("aio_ptp.VPoReadyToGrUserController")
@Api(value = "VPoReadyToGrUserController", description = "Exposes APIs to work with VPoReadyToGrUser resource.")
@RequestMapping("/aio_ptp/VPoReadyToGrUser")
public class VPoReadyToGrUserController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPoReadyToGrUserController.class);

    @Autowired
	@Qualifier("aio_ptp.VPoReadyToGrUserService")
	private VPoReadyToGrUserService vPoReadyToGrUserService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPoReadyToGrUser instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGrUser createVPoReadyToGrUser(@RequestBody VPoReadyToGrUser vpoReadyToGrUser) {
		LOGGER.debug("Create VPoReadyToGrUser with information: {}" , vpoReadyToGrUser);

		vpoReadyToGrUser = vPoReadyToGrUserService.create(vpoReadyToGrUser);
		LOGGER.debug("Created VPoReadyToGrUser with information: {}" , vpoReadyToGrUser);

	    return vpoReadyToGrUser;
	}

    @ApiOperation(value = "Returns the VPoReadyToGrUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGrUser getVPoReadyToGrUser(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VPoReadyToGrUser with id: {}" , id);

        VPoReadyToGrUser foundVPoReadyToGrUser = vPoReadyToGrUserService.getById(id);
        LOGGER.debug("VPoReadyToGrUser details with id: {}" , foundVPoReadyToGrUser);

        return foundVPoReadyToGrUser;
    }

    @ApiOperation(value = "Updates the VPoReadyToGrUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGrUser editVPoReadyToGrUser(@PathVariable("id") Integer id, @RequestBody VPoReadyToGrUser vpoReadyToGrUser) {
        LOGGER.debug("Editing VPoReadyToGrUser with id: {}" , vpoReadyToGrUser.getId());

        vpoReadyToGrUser.setId(id);
        vpoReadyToGrUser = vPoReadyToGrUserService.update(vpoReadyToGrUser);
        LOGGER.debug("VPoReadyToGrUser details with id: {}" , vpoReadyToGrUser);

        return vpoReadyToGrUser;
    }
    
    @ApiOperation(value = "Partially updates the VPoReadyToGrUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPoReadyToGrUser patchVPoReadyToGrUser(@PathVariable("id") Integer id, @RequestBody @MapTo(VPoReadyToGrUser.class) Map<String, Object> vpoReadyToGrUserPatch) {
        LOGGER.debug("Partially updating VPoReadyToGrUser with id: {}" , id);

        VPoReadyToGrUser vpoReadyToGrUser = vPoReadyToGrUserService.partialUpdate(id, vpoReadyToGrUserPatch);
        LOGGER.debug("VPoReadyToGrUser details after partial update: {}" , vpoReadyToGrUser);

        return vpoReadyToGrUser;
    }

    @ApiOperation(value = "Deletes the VPoReadyToGrUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPoReadyToGrUser(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VPoReadyToGrUser with id: {}" , id);

        VPoReadyToGrUser deletedVPoReadyToGrUser = vPoReadyToGrUserService.delete(id);

        return deletedVPoReadyToGrUser != null;
    }

    /**
     * @deprecated Use {@link #findVPoReadyToGrUsers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPoReadyToGrUser instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToGrUser> searchVPoReadyToGrUsersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPoReadyToGrUsers list by query filter:{}", (Object) queryFilters);
        return vPoReadyToGrUserService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoReadyToGrUser instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToGrUser> findVPoReadyToGrUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoReadyToGrUsers list by filter:", query);
        return vPoReadyToGrUserService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPoReadyToGrUser instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPoReadyToGrUser> filterVPoReadyToGrUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPoReadyToGrUsers list by filter", query);
        return vPoReadyToGrUserService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPoReadyToGrUsers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPoReadyToGrUserService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPoReadyToGrUsersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPoReadyToGrUser.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPoReadyToGrUserService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPoReadyToGrUser instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPoReadyToGrUsers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPoReadyToGrUsers");
		return vPoReadyToGrUserService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPoReadyToGrUserAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPoReadyToGrUserService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPoReadyToGrUserService instance
	 */
	protected void setVPoReadyToGrUserService(VPoReadyToGrUserService service) {
		this.vPoReadyToGrUserService = service;
	}

}