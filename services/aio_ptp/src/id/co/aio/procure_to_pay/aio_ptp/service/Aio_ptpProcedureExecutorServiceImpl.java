/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import id.co.aio.procure_to_pay.aio_ptp.models.procedure.*;

@Service
public class Aio_ptpProcedureExecutorServiceImpl implements Aio_ptpProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Aio_ptpProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("aio_ptpWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SpUsageBudgetDetailsResponse executeSp_usage_budgetDetails(String bhId, String typeData, String valueBeginning, String valueAdjustment, String valueReserve, String valueCommitment, String valueActual, String createdAtStart, String createdAtEnd, String createdBy, String coa, String remarks, String docNumber) {
        Map<String, Object> params = new HashMap<>(13);

        params.put("bh_id", bhId);
        params.put("type_data", typeData);
        params.put("value_beginning", valueBeginning);
        params.put("value_adjustment", valueAdjustment);
        params.put("value_reserve", valueReserve);
        params.put("value_commitment", valueCommitment);
        params.put("value_actual", valueActual);
        params.put("created_at_start", createdAtStart);
        params.put("created_at_end", createdAtEnd);
        params.put("created_by", createdBy);
        params.put("coa", coa);
        params.put("remarks", remarks);
        params.put("docNumber", docNumber);

        return procedureExecutor.executeNamedProcedure("sp_usage_budgetDetails", params, SpUsageBudgetDetailsResponse.class);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SpBudgetDetail2Response executeSp_budgetDetail2(String bhId, String typeData, String valueBeginning, String valueAdjustment, String valueReclass, String valueAdditional, String createdAtStart, String createdAtEnd, String createdBy, String coa) {
        Map<String, Object> params = new HashMap<>(10);

        params.put("bh_id", bhId);
        params.put("type_data", typeData);
        params.put("value_beginning", valueBeginning);
        params.put("value_adjustment", valueAdjustment);
        params.put("value_reclass", valueReclass);
        params.put("value_additional", valueAdditional);
        params.put("created_at_start", createdAtStart);
        params.put("created_at_end", createdAtEnd);
        params.put("created_by", createdBy);
        params.put("coa", coa);

        return procedureExecutor.executeNamedProcedure("sp_budgetDetail2", params, SpBudgetDetail2Response.class);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SpBudgetDetail1Response executeSpBudgetDetail1(String accType, String comp, String brand, String dep, String emp, String year, String admin) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("acc_type", accType);
        params.put("comp", comp);
        params.put("brand", brand);
        params.put("dep", dep);
        params.put("emp", emp);
        params.put("year", year);
        params.put("admin", admin);

        return procedureExecutor.executeNamedProcedure("spBudgetDetail1", params, SpBudgetDetail1Response.class);
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public SpBudgetDetailsResponse executeSp_budgetDetails(String bhId, String typeData, String valueBeginning, String valueAdjustment, String valueReclass, String valueAdditional, String createdAtStart, String createdAtEnd, String createdBy, String coa, String remarks, String docNumber) {
        Map<String, Object> params = new HashMap<>(12);

        params.put("bh_id", bhId);
        params.put("type_data", typeData);
        params.put("value_beginning", valueBeginning);
        params.put("value_adjustment", valueAdjustment);
        params.put("value_reclass", valueReclass);
        params.put("value_additional", valueAdditional);
        params.put("created_at_start", createdAtStart);
        params.put("created_at_end", createdAtEnd);
        params.put("created_by", createdBy);
        params.put("coa", coa);
        params.put("remarks", remarks);
        params.put("docNumber", docNumber);

        return procedureExecutor.executeNamedProcedure("sp_budgetDetails", params, SpBudgetDetailsResponse.class);
    }

}