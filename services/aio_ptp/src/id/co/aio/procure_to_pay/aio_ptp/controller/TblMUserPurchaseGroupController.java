/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserPurchaseGroup;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMUserPurchaseGroupService;


/**
 * Controller object for domain model class TblMUserPurchaseGroup.
 * @see TblMUserPurchaseGroup
 */
@RestController("aio_ptp.TblMUserPurchaseGroupController")
@Api(value = "TblMUserPurchaseGroupController", description = "Exposes APIs to work with TblMUserPurchaseGroup resource.")
@RequestMapping("/aio_ptp/TblMUserPurchaseGroup")
public class TblMUserPurchaseGroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserPurchaseGroupController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMUserPurchaseGroupService")
	private TblMUserPurchaseGroupService tblMUserPurchaseGroupService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMUserPurchaseGroup instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserPurchaseGroup createTblMUserPurchaseGroup(@RequestBody TblMUserPurchaseGroup tblMuserPurchaseGroup) {
		LOGGER.debug("Create TblMUserPurchaseGroup with information: {}" , tblMuserPurchaseGroup);

		tblMuserPurchaseGroup = tblMUserPurchaseGroupService.create(tblMuserPurchaseGroup);
		LOGGER.debug("Created TblMUserPurchaseGroup with information: {}" , tblMuserPurchaseGroup);

	    return tblMuserPurchaseGroup;
	}

    @ApiOperation(value = "Returns the TblMUserPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{upurgrId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserPurchaseGroup getTblMUserPurchaseGroup(@PathVariable("upurgrId") Integer upurgrId) {
        LOGGER.debug("Getting TblMUserPurchaseGroup with id: {}" , upurgrId);

        TblMUserPurchaseGroup foundTblMUserPurchaseGroup = tblMUserPurchaseGroupService.getById(upurgrId);
        LOGGER.debug("TblMUserPurchaseGroup details with id: {}" , foundTblMUserPurchaseGroup);

        return foundTblMUserPurchaseGroup;
    }

    @ApiOperation(value = "Updates the TblMUserPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{upurgrId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserPurchaseGroup editTblMUserPurchaseGroup(@PathVariable("upurgrId") Integer upurgrId, @RequestBody TblMUserPurchaseGroup tblMuserPurchaseGroup) {
        LOGGER.debug("Editing TblMUserPurchaseGroup with id: {}" , tblMuserPurchaseGroup.getUpurgrId());

        tblMuserPurchaseGroup.setUpurgrId(upurgrId);
        tblMuserPurchaseGroup = tblMUserPurchaseGroupService.update(tblMuserPurchaseGroup);
        LOGGER.debug("TblMUserPurchaseGroup details with id: {}" , tblMuserPurchaseGroup);

        return tblMuserPurchaseGroup;
    }
    
    @ApiOperation(value = "Partially updates the TblMUserPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{upurgrId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMUserPurchaseGroup patchTblMUserPurchaseGroup(@PathVariable("upurgrId") Integer upurgrId, @RequestBody @MapTo(TblMUserPurchaseGroup.class) Map<String, Object> tblMuserPurchaseGroupPatch) {
        LOGGER.debug("Partially updating TblMUserPurchaseGroup with id: {}" , upurgrId);

        TblMUserPurchaseGroup tblMuserPurchaseGroup = tblMUserPurchaseGroupService.partialUpdate(upurgrId, tblMuserPurchaseGroupPatch);
        LOGGER.debug("TblMUserPurchaseGroup details after partial update: {}" , tblMuserPurchaseGroup);

        return tblMuserPurchaseGroup;
    }

    @ApiOperation(value = "Deletes the TblMUserPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{upurgrId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMUserPurchaseGroup(@PathVariable("upurgrId") Integer upurgrId) {
        LOGGER.debug("Deleting TblMUserPurchaseGroup with id: {}" , upurgrId);

        TblMUserPurchaseGroup deletedTblMUserPurchaseGroup = tblMUserPurchaseGroupService.delete(upurgrId);

        return deletedTblMUserPurchaseGroup != null;
    }

    /**
     * @deprecated Use {@link #findTblMUserPurchaseGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMUserPurchaseGroup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserPurchaseGroup> searchTblMUserPurchaseGroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMUserPurchaseGroups list by query filter:{}", (Object) queryFilters);
        return tblMUserPurchaseGroupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMUserPurchaseGroup instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserPurchaseGroup> findTblMUserPurchaseGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMUserPurchaseGroups list by filter:", query);
        return tblMUserPurchaseGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMUserPurchaseGroup instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMUserPurchaseGroup> filterTblMUserPurchaseGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMUserPurchaseGroups list by filter", query);
        return tblMUserPurchaseGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMUserPurchaseGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMUserPurchaseGroupService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMUserPurchaseGroupsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMUserPurchaseGroup.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMUserPurchaseGroupService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMUserPurchaseGroup instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMUserPurchaseGroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMUserPurchaseGroups");
		return tblMUserPurchaseGroupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMUserPurchaseGroupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMUserPurchaseGroupService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMUserPurchaseGroupService instance
	 */
	protected void setTblMUserPurchaseGroupService(TblMUserPurchaseGroupService service) {
		this.tblMUserPurchaseGroupService = service;
	}

}