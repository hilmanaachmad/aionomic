/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblTRfqVenQuotation;
import id.co.aio.procure_to_pay.aio_ptp.TblTRfqVendor;

/**
 * Service object for domain model class {@link TblTRfqVendor}.
 */
public interface TblTRfqVendorService {

    /**
     * Creates a new TblTRfqVendor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTRfqVendor if any.
     *
     * @param tblTrfqVendor Details of the TblTRfqVendor to be created; value cannot be null.
     * @return The newly created TblTRfqVendor.
     */
    TblTRfqVendor create(@Valid TblTRfqVendor tblTrfqVendor);


	/**
     * Returns TblTRfqVendor by given id if exists.
     *
     * @param tbltrfqvendorId The id of the TblTRfqVendor to get; value cannot be null.
     * @return TblTRfqVendor associated with the given tbltrfqvendorId.
	 * @throws EntityNotFoundException If no TblTRfqVendor is found.
     */
    TblTRfqVendor getById(Integer tbltrfqvendorId);

    /**
     * Find and return the TblTRfqVendor by given id if exists, returns null otherwise.
     *
     * @param tbltrfqvendorId The id of the TblTRfqVendor to get; value cannot be null.
     * @return TblTRfqVendor associated with the given tbltrfqvendorId.
     */
    TblTRfqVendor findById(Integer tbltrfqvendorId);

	/**
     * Find and return the list of TblTRfqVendors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tbltrfqvendorIds The id's of the TblTRfqVendor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TblTRfqVendors associated with the given tbltrfqvendorIds.
     */
    List<TblTRfqVendor> findByMultipleIds(List<Integer> tbltrfqvendorIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TblTRfqVendor. It replaces all fields of the existing TblTRfqVendor with the given tblTrfqVendor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTRfqVendor if any.
     *
     * @param tblTrfqVendor The details of the TblTRfqVendor to be updated; value cannot be null.
     * @return The updated TblTRfqVendor.
     * @throws EntityNotFoundException if no TblTRfqVendor is found with given input.
     */
    TblTRfqVendor update(@Valid TblTRfqVendor tblTrfqVendor);


    /**
     * Partially updates the details of an existing TblTRfqVendor. It updates only the
     * fields of the existing TblTRfqVendor which are passed in the tblTrfqVendorPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TblTRfqVendor if any.
     *
     * @param tbltrfqvendorId The id of the TblTRfqVendor to be deleted; value cannot be null.
     * @param tblTrfqVendorPatch The partial data of TblTRfqVendor which is supposed to be updated; value cannot be null.
     * @return The updated TblTRfqVendor.
     * @throws EntityNotFoundException if no TblTRfqVendor is found with given input.
     */
    TblTRfqVendor partialUpdate(Integer tbltrfqvendorId, Map<String, Object> tblTrfqVendorPatch);

    /**
     * Deletes an existing TblTRfqVendor with the given id.
     *
     * @param tbltrfqvendorId The id of the TblTRfqVendor to be deleted; value cannot be null.
     * @return The deleted TblTRfqVendor.
     * @throws EntityNotFoundException if no TblTRfqVendor found with the given id.
     */
    TblTRfqVendor delete(Integer tbltrfqvendorId);

    /**
     * Deletes an existing TblTRfqVendor with the given object.
     *
     * @param tblTrfqVendor The instance of the TblTRfqVendor to be deleted; value cannot be null.
     */
    void delete(TblTRfqVendor tblTrfqVendor);

    /**
     * Find all TblTRfqVendors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTRfqVendors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TblTRfqVendor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TblTRfqVendors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TblTRfqVendors.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTRfqVendor> findAll(String query, Pageable pageable);

    /**
     * Exports all TblTRfqVendors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TblTRfqVendors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TblTRfqVendors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TblTRfqVendor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tblTrfqVenQuotations for given TblTRfqVendor id.
     *
     * @param rfqvId value of rfqvId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TblTRfqVenQuotation instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TblTRfqVenQuotation> findAssociatedTblTrfqVenQuotations(Integer rfqvId, Pageable pageable);

}