/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserPurchaseGroup;


/**
 * ServiceImpl object for domain model class TblMUserPurchaseGroup.
 *
 * @see TblMUserPurchaseGroup
 */
@Service("aio_ptp.TblMUserPurchaseGroupService")
@Validated
@EntityService(entityClass = TblMUserPurchaseGroup.class, serviceId = "aio_ptp")
public class TblMUserPurchaseGroupServiceImpl implements TblMUserPurchaseGroupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserPurchaseGroupServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblMUserPurchaseGroupDao")
    private WMGenericDao<TblMUserPurchaseGroup, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMUserPurchaseGroup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserPurchaseGroup create(TblMUserPurchaseGroup tblMuserPurchaseGroup) {
        LOGGER.debug("Creating a new TblMUserPurchaseGroup with information: {}", tblMuserPurchaseGroup);

        TblMUserPurchaseGroup tblMuserPurchaseGroupCreated = this.wmGenericDao.create(tblMuserPurchaseGroup);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMuserPurchaseGroupCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserPurchaseGroup getById(Integer tblmuserpurchasegroupId) {
        LOGGER.debug("Finding TblMUserPurchaseGroup by id: {}", tblmuserpurchasegroupId);
        return this.wmGenericDao.findById(tblmuserpurchasegroupId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserPurchaseGroup findById(Integer tblmuserpurchasegroupId) {
        LOGGER.debug("Finding TblMUserPurchaseGroup by id: {}", tblmuserpurchasegroupId);
        try {
            return this.wmGenericDao.findById(tblmuserpurchasegroupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMUserPurchaseGroup found with id: {}", tblmuserpurchasegroupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMUserPurchaseGroup> findByMultipleIds(List<Integer> tblmuserpurchasegroupIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMUserPurchaseGroups by ids: {}", tblmuserpurchasegroupIds);

        return this.wmGenericDao.findByMultipleIds(tblmuserpurchasegroupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserPurchaseGroup update(TblMUserPurchaseGroup tblMuserPurchaseGroup) {
        LOGGER.debug("Updating TblMUserPurchaseGroup with information: {}", tblMuserPurchaseGroup);

        this.wmGenericDao.update(tblMuserPurchaseGroup);
        this.wmGenericDao.refresh(tblMuserPurchaseGroup);

        return tblMuserPurchaseGroup;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserPurchaseGroup partialUpdate(Integer tblmuserpurchasegroupId, Map<String, Object>tblMuserPurchaseGroupPatch) {
        LOGGER.debug("Partially Updating the TblMUserPurchaseGroup with id: {}", tblmuserpurchasegroupId);

        TblMUserPurchaseGroup tblMuserPurchaseGroup = getById(tblmuserpurchasegroupId);

        try {
            ObjectReader tblMuserPurchaseGroupReader = this.objectMapper.reader().forType(TblMUserPurchaseGroup.class).withValueToUpdate(tblMuserPurchaseGroup);
            tblMuserPurchaseGroup = tblMuserPurchaseGroupReader.readValue(this.objectMapper.writeValueAsString(tblMuserPurchaseGroupPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMuserPurchaseGroupPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMuserPurchaseGroup = update(tblMuserPurchaseGroup);

        return tblMuserPurchaseGroup;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserPurchaseGroup delete(Integer tblmuserpurchasegroupId) {
        LOGGER.debug("Deleting TblMUserPurchaseGroup with id: {}", tblmuserpurchasegroupId);
        TblMUserPurchaseGroup deleted = this.wmGenericDao.findById(tblmuserpurchasegroupId);
        if (deleted == null) {
            LOGGER.debug("No TblMUserPurchaseGroup found with id: {}", tblmuserpurchasegroupId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMUserPurchaseGroup.class.getSimpleName(), tblmuserpurchasegroupId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMUserPurchaseGroup tblMuserPurchaseGroup) {
        LOGGER.debug("Deleting TblMUserPurchaseGroup with {}", tblMuserPurchaseGroup);
        this.wmGenericDao.delete(tblMuserPurchaseGroup);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserPurchaseGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserPurchaseGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserPurchaseGroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserPurchaseGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserPurchaseGroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserPurchaseGroup to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}