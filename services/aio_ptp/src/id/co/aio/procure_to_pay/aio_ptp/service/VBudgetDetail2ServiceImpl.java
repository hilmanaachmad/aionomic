/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VBudgetDetail2;


/**
 * ServiceImpl object for domain model class VBudgetDetail2.
 *
 * @see VBudgetDetail2
 */
@Service("aio_ptp.VBudgetDetail2Service")
@Validated
@EntityService(entityClass = VBudgetDetail2.class, serviceId = "aio_ptp")
public class VBudgetDetail2ServiceImpl implements VBudgetDetail2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBudgetDetail2ServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VBudgetDetail2Dao")
    private WMGenericDao<VBudgetDetail2, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VBudgetDetail2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetail2 create(VBudgetDetail2 vbudgetDetail2) {
        LOGGER.debug("Creating a new VBudgetDetail2 with information: {}", vbudgetDetail2);

        VBudgetDetail2 vbudgetDetail2Created = this.wmGenericDao.create(vbudgetDetail2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vbudgetDetail2Created);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetail2 getById(Integer vbudgetdetail2Id) {
        LOGGER.debug("Finding VBudgetDetail2 by id: {}", vbudgetdetail2Id);
        return this.wmGenericDao.findById(vbudgetdetail2Id);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetail2 findById(Integer vbudgetdetail2Id) {
        LOGGER.debug("Finding VBudgetDetail2 by id: {}", vbudgetdetail2Id);
        try {
            return this.wmGenericDao.findById(vbudgetdetail2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VBudgetDetail2 found with id: {}", vbudgetdetail2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VBudgetDetail2> findByMultipleIds(List<Integer> vbudgetdetail2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding VBudgetDetail2s by ids: {}", vbudgetdetail2Ids);

        return this.wmGenericDao.findByMultipleIds(vbudgetdetail2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetail2 update(VBudgetDetail2 vbudgetDetail2) {
        LOGGER.debug("Updating VBudgetDetail2 with information: {}", vbudgetDetail2);

        this.wmGenericDao.update(vbudgetDetail2);
        this.wmGenericDao.refresh(vbudgetDetail2);

        return vbudgetDetail2;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetail2 partialUpdate(Integer vbudgetdetail2Id, Map<String, Object>vbudgetDetail2Patch) {
        LOGGER.debug("Partially Updating the VBudgetDetail2 with id: {}", vbudgetdetail2Id);

        VBudgetDetail2 vbudgetDetail2 = getById(vbudgetdetail2Id);

        try {
            ObjectReader vbudgetDetail2Reader = this.objectMapper.reader().forType(VBudgetDetail2.class).withValueToUpdate(vbudgetDetail2);
            vbudgetDetail2 = vbudgetDetail2Reader.readValue(this.objectMapper.writeValueAsString(vbudgetDetail2Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vbudgetDetail2Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vbudgetDetail2 = update(vbudgetDetail2);

        return vbudgetDetail2;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VBudgetDetail2 delete(Integer vbudgetdetail2Id) {
        LOGGER.debug("Deleting VBudgetDetail2 with id: {}", vbudgetdetail2Id);
        VBudgetDetail2 deleted = this.wmGenericDao.findById(vbudgetdetail2Id);
        if (deleted == null) {
            LOGGER.debug("No VBudgetDetail2 found with id: {}", vbudgetdetail2Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VBudgetDetail2.class.getSimpleName(), vbudgetdetail2Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VBudgetDetail2 vbudgetDetail2) {
        LOGGER.debug("Deleting VBudgetDetail2 with {}", vbudgetDetail2);
        this.wmGenericDao.delete(vbudgetDetail2);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VBudgetDetail2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VBudgetDetail2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VBudgetDetail2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VBudgetDetail2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VBudgetDetail2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VBudgetDetail2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}