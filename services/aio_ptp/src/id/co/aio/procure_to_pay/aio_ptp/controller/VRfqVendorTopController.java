/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VRfqVendorTop;
import id.co.aio.procure_to_pay.aio_ptp.service.VRfqVendorTopService;


/**
 * Controller object for domain model class VRfqVendorTop.
 * @see VRfqVendorTop
 */
@RestController("aio_ptp.VRfqVendorTopController")
@Api(value = "VRfqVendorTopController", description = "Exposes APIs to work with VRfqVendorTop resource.")
@RequestMapping("/aio_ptp/VRfqVendorTop")
public class VRfqVendorTopController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqVendorTopController.class);

    @Autowired
	@Qualifier("aio_ptp.VRfqVendorTopService")
	private VRfqVendorTopService vRfqVendorTopService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VRfqVendorTop instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqVendorTop createVRfqVendorTop(@RequestBody VRfqVendorTop vrfqVendorTop) {
		LOGGER.debug("Create VRfqVendorTop with information: {}" , vrfqVendorTop);

		vrfqVendorTop = vRfqVendorTopService.create(vrfqVendorTop);
		LOGGER.debug("Created VRfqVendorTop with information: {}" , vrfqVendorTop);

	    return vrfqVendorTop;
	}

    @ApiOperation(value = "Returns the VRfqVendorTop instance associated with the given id.")
    @RequestMapping(value = "/{liqId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqVendorTop getVRfqVendorTop(@PathVariable("liqId") Integer liqId) {
        LOGGER.debug("Getting VRfqVendorTop with id: {}" , liqId);

        VRfqVendorTop foundVRfqVendorTop = vRfqVendorTopService.getById(liqId);
        LOGGER.debug("VRfqVendorTop details with id: {}" , foundVRfqVendorTop);

        return foundVRfqVendorTop;
    }

    @ApiOperation(value = "Updates the VRfqVendorTop instance associated with the given id.")
    @RequestMapping(value = "/{liqId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqVendorTop editVRfqVendorTop(@PathVariable("liqId") Integer liqId, @RequestBody VRfqVendorTop vrfqVendorTop) {
        LOGGER.debug("Editing VRfqVendorTop with id: {}" , vrfqVendorTop.getLiqId());

        vrfqVendorTop.setLiqId(liqId);
        vrfqVendorTop = vRfqVendorTopService.update(vrfqVendorTop);
        LOGGER.debug("VRfqVendorTop details with id: {}" , vrfqVendorTop);

        return vrfqVendorTop;
    }
    
    @ApiOperation(value = "Partially updates the VRfqVendorTop instance associated with the given id.")
    @RequestMapping(value = "/{liqId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VRfqVendorTop patchVRfqVendorTop(@PathVariable("liqId") Integer liqId, @RequestBody @MapTo(VRfqVendorTop.class) Map<String, Object> vrfqVendorTopPatch) {
        LOGGER.debug("Partially updating VRfqVendorTop with id: {}" , liqId);

        VRfqVendorTop vrfqVendorTop = vRfqVendorTopService.partialUpdate(liqId, vrfqVendorTopPatch);
        LOGGER.debug("VRfqVendorTop details after partial update: {}" , vrfqVendorTop);

        return vrfqVendorTop;
    }

    @ApiOperation(value = "Deletes the VRfqVendorTop instance associated with the given id.")
    @RequestMapping(value = "/{liqId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVRfqVendorTop(@PathVariable("liqId") Integer liqId) {
        LOGGER.debug("Deleting VRfqVendorTop with id: {}" , liqId);

        VRfqVendorTop deletedVRfqVendorTop = vRfqVendorTopService.delete(liqId);

        return deletedVRfqVendorTop != null;
    }

    /**
     * @deprecated Use {@link #findVRfqVendorTops(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VRfqVendorTop instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VRfqVendorTop> searchVRfqVendorTopsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VRfqVendorTops list by query filter:{}", (Object) queryFilters);
        return vRfqVendorTopService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VRfqVendorTop instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VRfqVendorTop> findVRfqVendorTops(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VRfqVendorTops list by filter:", query);
        return vRfqVendorTopService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VRfqVendorTop instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VRfqVendorTop> filterVRfqVendorTops(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VRfqVendorTops list by filter", query);
        return vRfqVendorTopService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVRfqVendorTops(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vRfqVendorTopService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVRfqVendorTopsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VRfqVendorTop.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vRfqVendorTopService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VRfqVendorTop instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVRfqVendorTops( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VRfqVendorTops");
		return vRfqVendorTopService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVRfqVendorTopAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vRfqVendorTopService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VRfqVendorTopService instance
	 */
	protected void setVRfqVendorTopService(VRfqVendorTopService service) {
		this.vRfqVendorTopService = service;
	}

}