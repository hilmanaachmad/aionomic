/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblTBudgetUploadAdjustment;
import id.co.aio.procure_to_pay.aio_ptp.service.TblTBudgetUploadAdjustmentService;


/**
 * Controller object for domain model class TblTBudgetUploadAdjustment.
 * @see TblTBudgetUploadAdjustment
 */
@RestController("aio_ptp.TblTBudgetUploadAdjustmentController")
@Api(value = "TblTBudgetUploadAdjustmentController", description = "Exposes APIs to work with TblTBudgetUploadAdjustment resource.")
@RequestMapping("/aio_ptp/TblTBudgetUploadAdjustment")
public class TblTBudgetUploadAdjustmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblTBudgetUploadAdjustmentController.class);

    @Autowired
	@Qualifier("aio_ptp.TblTBudgetUploadAdjustmentService")
	private TblTBudgetUploadAdjustmentService tblTBudgetUploadAdjustmentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblTBudgetUploadAdjustment instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTBudgetUploadAdjustment createTblTBudgetUploadAdjustment(@RequestBody TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment) {
		LOGGER.debug("Create TblTBudgetUploadAdjustment with information: {}" , tblTbudgetUploadAdjustment);

		tblTbudgetUploadAdjustment = tblTBudgetUploadAdjustmentService.create(tblTbudgetUploadAdjustment);
		LOGGER.debug("Created TblTBudgetUploadAdjustment with information: {}" , tblTbudgetUploadAdjustment);

	    return tblTbudgetUploadAdjustment;
	}

    @ApiOperation(value = "Returns the TblTBudgetUploadAdjustment instance associated with the given id.")
    @RequestMapping(value = "/{buId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTBudgetUploadAdjustment getTblTBudgetUploadAdjustment(@PathVariable("buId") Integer buId) {
        LOGGER.debug("Getting TblTBudgetUploadAdjustment with id: {}" , buId);

        TblTBudgetUploadAdjustment foundTblTBudgetUploadAdjustment = tblTBudgetUploadAdjustmentService.getById(buId);
        LOGGER.debug("TblTBudgetUploadAdjustment details with id: {}" , foundTblTBudgetUploadAdjustment);

        return foundTblTBudgetUploadAdjustment;
    }

    @ApiOperation(value = "Updates the TblTBudgetUploadAdjustment instance associated with the given id.")
    @RequestMapping(value = "/{buId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTBudgetUploadAdjustment editTblTBudgetUploadAdjustment(@PathVariable("buId") Integer buId, @RequestBody TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment) {
        LOGGER.debug("Editing TblTBudgetUploadAdjustment with id: {}" , tblTbudgetUploadAdjustment.getBuId());

        tblTbudgetUploadAdjustment.setBuId(buId);
        tblTbudgetUploadAdjustment = tblTBudgetUploadAdjustmentService.update(tblTbudgetUploadAdjustment);
        LOGGER.debug("TblTBudgetUploadAdjustment details with id: {}" , tblTbudgetUploadAdjustment);

        return tblTbudgetUploadAdjustment;
    }
    
    @ApiOperation(value = "Partially updates the TblTBudgetUploadAdjustment instance associated with the given id.")
    @RequestMapping(value = "/{buId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblTBudgetUploadAdjustment patchTblTBudgetUploadAdjustment(@PathVariable("buId") Integer buId, @RequestBody @MapTo(TblTBudgetUploadAdjustment.class) Map<String, Object> tblTbudgetUploadAdjustmentPatch) {
        LOGGER.debug("Partially updating TblTBudgetUploadAdjustment with id: {}" , buId);

        TblTBudgetUploadAdjustment tblTbudgetUploadAdjustment = tblTBudgetUploadAdjustmentService.partialUpdate(buId, tblTbudgetUploadAdjustmentPatch);
        LOGGER.debug("TblTBudgetUploadAdjustment details after partial update: {}" , tblTbudgetUploadAdjustment);

        return tblTbudgetUploadAdjustment;
    }

    @ApiOperation(value = "Deletes the TblTBudgetUploadAdjustment instance associated with the given id.")
    @RequestMapping(value = "/{buId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblTBudgetUploadAdjustment(@PathVariable("buId") Integer buId) {
        LOGGER.debug("Deleting TblTBudgetUploadAdjustment with id: {}" , buId);

        TblTBudgetUploadAdjustment deletedTblTBudgetUploadAdjustment = tblTBudgetUploadAdjustmentService.delete(buId);

        return deletedTblTBudgetUploadAdjustment != null;
    }

    /**
     * @deprecated Use {@link #findTblTBudgetUploadAdjustments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblTBudgetUploadAdjustment instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetUploadAdjustment> searchTblTBudgetUploadAdjustmentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblTBudgetUploadAdjustments list by query filter:{}", (Object) queryFilters);
        return tblTBudgetUploadAdjustmentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTBudgetUploadAdjustment instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetUploadAdjustment> findTblTBudgetUploadAdjustments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTBudgetUploadAdjustments list by filter:", query);
        return tblTBudgetUploadAdjustmentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblTBudgetUploadAdjustment instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblTBudgetUploadAdjustment> filterTblTBudgetUploadAdjustments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblTBudgetUploadAdjustments list by filter", query);
        return tblTBudgetUploadAdjustmentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblTBudgetUploadAdjustments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblTBudgetUploadAdjustmentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblTBudgetUploadAdjustmentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblTBudgetUploadAdjustment.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblTBudgetUploadAdjustmentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblTBudgetUploadAdjustment instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblTBudgetUploadAdjustments( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblTBudgetUploadAdjustments");
		return tblTBudgetUploadAdjustmentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblTBudgetUploadAdjustmentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblTBudgetUploadAdjustmentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblTBudgetUploadAdjustmentService instance
	 */
	protected void setTblTBudgetUploadAdjustmentService(TblTBudgetUploadAdjustmentService service) {
		this.tblTBudgetUploadAdjustmentService = service;
	}

}