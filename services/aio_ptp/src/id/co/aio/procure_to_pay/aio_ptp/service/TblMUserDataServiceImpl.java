/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMUserData;


/**
 * ServiceImpl object for domain model class TblMUserData.
 *
 * @see TblMUserData
 */
@Service("aio_ptp.TblMUserDataService")
@Validated
@EntityService(entityClass = TblMUserData.class, serviceId = "aio_ptp")
public class TblMUserDataServiceImpl implements TblMUserDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMUserDataServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblMUserDataDao")
    private WMGenericDao<TblMUserData, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMUserData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserData create(TblMUserData tblMuserData) {
        LOGGER.debug("Creating a new TblMUserData with information: {}", tblMuserData);

        TblMUserData tblMuserDataCreated = this.wmGenericDao.create(tblMuserData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMuserDataCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserData getById(Integer tblmuserdataId) {
        LOGGER.debug("Finding TblMUserData by id: {}", tblmuserdataId);
        return this.wmGenericDao.findById(tblmuserdataId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserData findById(Integer tblmuserdataId) {
        LOGGER.debug("Finding TblMUserData by id: {}", tblmuserdataId);
        try {
            return this.wmGenericDao.findById(tblmuserdataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMUserData found with id: {}", tblmuserdataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMUserData> findByMultipleIds(List<Integer> tblmuserdataIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMUserDatas by ids: {}", tblmuserdataIds);

        return this.wmGenericDao.findByMultipleIds(tblmuserdataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMUserData update(TblMUserData tblMuserData) {
        LOGGER.debug("Updating TblMUserData with information: {}", tblMuserData);

        this.wmGenericDao.update(tblMuserData);
        this.wmGenericDao.refresh(tblMuserData);

        return tblMuserData;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserData partialUpdate(Integer tblmuserdataId, Map<String, Object>tblMuserDataPatch) {
        LOGGER.debug("Partially Updating the TblMUserData with id: {}", tblmuserdataId);

        TblMUserData tblMuserData = getById(tblmuserdataId);

        try {
            ObjectReader tblMuserDataReader = this.objectMapper.reader().forType(TblMUserData.class).withValueToUpdate(tblMuserData);
            tblMuserData = tblMuserDataReader.readValue(this.objectMapper.writeValueAsString(tblMuserDataPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMuserDataPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMuserData = update(tblMuserData);

        return tblMuserData;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMUserData delete(Integer tblmuserdataId) {
        LOGGER.debug("Deleting TblMUserData with id: {}", tblmuserdataId);
        TblMUserData deleted = this.wmGenericDao.findById(tblmuserdataId);
        if (deleted == null) {
            LOGGER.debug("No TblMUserData found with id: {}", tblmuserdataId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMUserData.class.getSimpleName(), tblmuserdataId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMUserData tblMuserData) {
        LOGGER.debug("Deleting TblMUserData with {}", tblMuserData);
        this.wmGenericDao.delete(tblMuserData);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMUserData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMUserDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMUserData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}