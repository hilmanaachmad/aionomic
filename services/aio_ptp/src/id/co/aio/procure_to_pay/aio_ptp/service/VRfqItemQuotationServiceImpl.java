/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VRfqItemQuotation;


/**
 * ServiceImpl object for domain model class VRfqItemQuotation.
 *
 * @see VRfqItemQuotation
 */
@Service("aio_ptp.VRfqItemQuotationService")
@Validated
@EntityService(entityClass = VRfqItemQuotation.class, serviceId = "aio_ptp")
public class VRfqItemQuotationServiceImpl implements VRfqItemQuotationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRfqItemQuotationServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VRfqItemQuotationDao")
    private WMGenericDao<VRfqItemQuotation, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRfqItemQuotation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqItemQuotation create(VRfqItemQuotation vrfqItemQuotation) {
        LOGGER.debug("Creating a new VRfqItemQuotation with information: {}", vrfqItemQuotation);

        VRfqItemQuotation vrfqItemQuotationCreated = this.wmGenericDao.create(vrfqItemQuotation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vrfqItemQuotationCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqItemQuotation getById(Integer vrfqitemquotationId) {
        LOGGER.debug("Finding VRfqItemQuotation by id: {}", vrfqitemquotationId);
        return this.wmGenericDao.findById(vrfqitemquotationId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VRfqItemQuotation findById(Integer vrfqitemquotationId) {
        LOGGER.debug("Finding VRfqItemQuotation by id: {}", vrfqitemquotationId);
        try {
            return this.wmGenericDao.findById(vrfqitemquotationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRfqItemQuotation found with id: {}", vrfqitemquotationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VRfqItemQuotation> findByMultipleIds(List<Integer> vrfqitemquotationIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRfqItemQuotations by ids: {}", vrfqitemquotationIds);

        return this.wmGenericDao.findByMultipleIds(vrfqitemquotationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VRfqItemQuotation update(VRfqItemQuotation vrfqItemQuotation) {
        LOGGER.debug("Updating VRfqItemQuotation with information: {}", vrfqItemQuotation);

        this.wmGenericDao.update(vrfqItemQuotation);
        this.wmGenericDao.refresh(vrfqItemQuotation);

        return vrfqItemQuotation;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqItemQuotation partialUpdate(Integer vrfqitemquotationId, Map<String, Object>vrfqItemQuotationPatch) {
        LOGGER.debug("Partially Updating the VRfqItemQuotation with id: {}", vrfqitemquotationId);

        VRfqItemQuotation vrfqItemQuotation = getById(vrfqitemquotationId);

        try {
            ObjectReader vrfqItemQuotationReader = this.objectMapper.reader().forType(VRfqItemQuotation.class).withValueToUpdate(vrfqItemQuotation);
            vrfqItemQuotation = vrfqItemQuotationReader.readValue(this.objectMapper.writeValueAsString(vrfqItemQuotationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vrfqItemQuotationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vrfqItemQuotation = update(vrfqItemQuotation);

        return vrfqItemQuotation;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VRfqItemQuotation delete(Integer vrfqitemquotationId) {
        LOGGER.debug("Deleting VRfqItemQuotation with id: {}", vrfqitemquotationId);
        VRfqItemQuotation deleted = this.wmGenericDao.findById(vrfqitemquotationId);
        if (deleted == null) {
            LOGGER.debug("No VRfqItemQuotation found with id: {}", vrfqitemquotationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRfqItemQuotation.class.getSimpleName(), vrfqitemquotationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VRfqItemQuotation vrfqItemQuotation) {
        LOGGER.debug("Deleting VRfqItemQuotation with {}", vrfqItemQuotation);
        this.wmGenericDao.delete(vrfqItemQuotation);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqItemQuotation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRfqItemQuotations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VRfqItemQuotation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRfqItemQuotations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqItemQuotation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VRfqItemQuotation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}