/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMOrganizationMap;


/**
 * ServiceImpl object for domain model class TblMOrganizationMap.
 *
 * @see TblMOrganizationMap
 */
@Service("aio_ptp.TblMOrganizationMapService")
@Validated
@EntityService(entityClass = TblMOrganizationMap.class, serviceId = "aio_ptp")
public class TblMOrganizationMapServiceImpl implements TblMOrganizationMapService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMOrganizationMapServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.TblMOrganizationMapDao")
    private WMGenericDao<TblMOrganizationMap, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMOrganizationMap, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMOrganizationMap create(TblMOrganizationMap tblMorganizationMap) {
        LOGGER.debug("Creating a new TblMOrganizationMap with information: {}", tblMorganizationMap);

        TblMOrganizationMap tblMorganizationMapCreated = this.wmGenericDao.create(tblMorganizationMap);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMorganizationMapCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMOrganizationMap getById(Integer tblmorganizationmapId) {
        LOGGER.debug("Finding TblMOrganizationMap by id: {}", tblmorganizationmapId);
        return this.wmGenericDao.findById(tblmorganizationmapId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMOrganizationMap findById(Integer tblmorganizationmapId) {
        LOGGER.debug("Finding TblMOrganizationMap by id: {}", tblmorganizationmapId);
        try {
            return this.wmGenericDao.findById(tblmorganizationmapId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMOrganizationMap found with id: {}", tblmorganizationmapId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMOrganizationMap> findByMultipleIds(List<Integer> tblmorganizationmapIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMOrganizationMaps by ids: {}", tblmorganizationmapIds);

        return this.wmGenericDao.findByMultipleIds(tblmorganizationmapIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMOrganizationMap update(TblMOrganizationMap tblMorganizationMap) {
        LOGGER.debug("Updating TblMOrganizationMap with information: {}", tblMorganizationMap);

        this.wmGenericDao.update(tblMorganizationMap);
        this.wmGenericDao.refresh(tblMorganizationMap);

        return tblMorganizationMap;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMOrganizationMap partialUpdate(Integer tblmorganizationmapId, Map<String, Object>tblMorganizationMapPatch) {
        LOGGER.debug("Partially Updating the TblMOrganizationMap with id: {}", tblmorganizationmapId);

        TblMOrganizationMap tblMorganizationMap = getById(tblmorganizationmapId);

        try {
            ObjectReader tblMorganizationMapReader = this.objectMapper.reader().forType(TblMOrganizationMap.class).withValueToUpdate(tblMorganizationMap);
            tblMorganizationMap = tblMorganizationMapReader.readValue(this.objectMapper.writeValueAsString(tblMorganizationMapPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMorganizationMapPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMorganizationMap = update(tblMorganizationMap);

        return tblMorganizationMap;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMOrganizationMap delete(Integer tblmorganizationmapId) {
        LOGGER.debug("Deleting TblMOrganizationMap with id: {}", tblmorganizationmapId);
        TblMOrganizationMap deleted = this.wmGenericDao.findById(tblmorganizationmapId);
        if (deleted == null) {
            LOGGER.debug("No TblMOrganizationMap found with id: {}", tblmorganizationmapId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMOrganizationMap.class.getSimpleName(), tblmorganizationmapId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMOrganizationMap tblMorganizationMap) {
        LOGGER.debug("Deleting TblMOrganizationMap with {}", tblMorganizationMap);
        this.wmGenericDao.delete(tblMorganizationMap);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMOrganizationMap> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMOrganizationMaps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMOrganizationMap> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMOrganizationMaps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMOrganizationMap to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMOrganizationMap to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}