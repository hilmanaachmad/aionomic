/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseRequest;


/**
 * ServiceImpl object for domain model class VPurchaseRequest.
 *
 * @see VPurchaseRequest
 */
@Service("aio_ptp.VPurchaseRequestService")
@Validated
@EntityService(entityClass = VPurchaseRequest.class, serviceId = "aio_ptp")
public class VPurchaseRequestServiceImpl implements VPurchaseRequestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseRequestServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPurchaseRequestDao")
    private WMGenericDao<VPurchaseRequest, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPurchaseRequest, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequest create(VPurchaseRequest vpurchaseRequest) {
        LOGGER.debug("Creating a new VPurchaseRequest with information: {}", vpurchaseRequest);

        VPurchaseRequest vpurchaseRequestCreated = this.wmGenericDao.create(vpurchaseRequest);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpurchaseRequestCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequest getById(Integer vpurchaserequestId) {
        LOGGER.debug("Finding VPurchaseRequest by id: {}", vpurchaserequestId);
        return this.wmGenericDao.findById(vpurchaserequestId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequest findById(Integer vpurchaserequestId) {
        LOGGER.debug("Finding VPurchaseRequest by id: {}", vpurchaserequestId);
        try {
            return this.wmGenericDao.findById(vpurchaserequestId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPurchaseRequest found with id: {}", vpurchaserequestId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPurchaseRequest> findByMultipleIds(List<Integer> vpurchaserequestIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPurchaseRequests by ids: {}", vpurchaserequestIds);

        return this.wmGenericDao.findByMultipleIds(vpurchaserequestIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequest update(VPurchaseRequest vpurchaseRequest) {
        LOGGER.debug("Updating VPurchaseRequest with information: {}", vpurchaseRequest);

        this.wmGenericDao.update(vpurchaseRequest);
        this.wmGenericDao.refresh(vpurchaseRequest);

        return vpurchaseRequest;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequest partialUpdate(Integer vpurchaserequestId, Map<String, Object>vpurchaseRequestPatch) {
        LOGGER.debug("Partially Updating the VPurchaseRequest with id: {}", vpurchaserequestId);

        VPurchaseRequest vpurchaseRequest = getById(vpurchaserequestId);

        try {
            ObjectReader vpurchaseRequestReader = this.objectMapper.reader().forType(VPurchaseRequest.class).withValueToUpdate(vpurchaseRequest);
            vpurchaseRequest = vpurchaseRequestReader.readValue(this.objectMapper.writeValueAsString(vpurchaseRequestPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpurchaseRequestPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpurchaseRequest = update(vpurchaseRequest);

        return vpurchaseRequest;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequest delete(Integer vpurchaserequestId) {
        LOGGER.debug("Deleting VPurchaseRequest with id: {}", vpurchaserequestId);
        VPurchaseRequest deleted = this.wmGenericDao.findById(vpurchaserequestId);
        if (deleted == null) {
            LOGGER.debug("No VPurchaseRequest found with id: {}", vpurchaserequestId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPurchaseRequest.class.getSimpleName(), vpurchaserequestId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPurchaseRequest vpurchaseRequest) {
        LOGGER.debug("Deleting VPurchaseRequest with {}", vpurchaseRequest);
        this.wmGenericDao.delete(vpurchaseRequest);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseRequest> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseRequests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseRequest> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseRequests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseRequest to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseRequest to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}