/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseRequestHeader;


/**
 * ServiceImpl object for domain model class VPurchaseRequestHeader.
 *
 * @see VPurchaseRequestHeader
 */
@Service("aio_ptp.VPurchaseRequestHeaderService")
@Validated
@EntityService(entityClass = VPurchaseRequestHeader.class, serviceId = "aio_ptp")
public class VPurchaseRequestHeaderServiceImpl implements VPurchaseRequestHeaderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseRequestHeaderServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPurchaseRequestHeaderDao")
    private WMGenericDao<VPurchaseRequestHeader, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPurchaseRequestHeader, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestHeader create(VPurchaseRequestHeader vpurchaseRequestHeader) {
        LOGGER.debug("Creating a new VPurchaseRequestHeader with information: {}", vpurchaseRequestHeader);

        VPurchaseRequestHeader vpurchaseRequestHeaderCreated = this.wmGenericDao.create(vpurchaseRequestHeader);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpurchaseRequestHeaderCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestHeader getById(Integer vpurchaserequestheaderId) {
        LOGGER.debug("Finding VPurchaseRequestHeader by id: {}", vpurchaserequestheaderId);
        return this.wmGenericDao.findById(vpurchaserequestheaderId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestHeader findById(Integer vpurchaserequestheaderId) {
        LOGGER.debug("Finding VPurchaseRequestHeader by id: {}", vpurchaserequestheaderId);
        try {
            return this.wmGenericDao.findById(vpurchaserequestheaderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPurchaseRequestHeader found with id: {}", vpurchaserequestheaderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPurchaseRequestHeader> findByMultipleIds(List<Integer> vpurchaserequestheaderIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPurchaseRequestHeaders by ids: {}", vpurchaserequestheaderIds);

        return this.wmGenericDao.findByMultipleIds(vpurchaserequestheaderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestHeader update(VPurchaseRequestHeader vpurchaseRequestHeader) {
        LOGGER.debug("Updating VPurchaseRequestHeader with information: {}", vpurchaseRequestHeader);

        this.wmGenericDao.update(vpurchaseRequestHeader);
        this.wmGenericDao.refresh(vpurchaseRequestHeader);

        return vpurchaseRequestHeader;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestHeader partialUpdate(Integer vpurchaserequestheaderId, Map<String, Object>vpurchaseRequestHeaderPatch) {
        LOGGER.debug("Partially Updating the VPurchaseRequestHeader with id: {}", vpurchaserequestheaderId);

        VPurchaseRequestHeader vpurchaseRequestHeader = getById(vpurchaserequestheaderId);

        try {
            ObjectReader vpurchaseRequestHeaderReader = this.objectMapper.reader().forType(VPurchaseRequestHeader.class).withValueToUpdate(vpurchaseRequestHeader);
            vpurchaseRequestHeader = vpurchaseRequestHeaderReader.readValue(this.objectMapper.writeValueAsString(vpurchaseRequestHeaderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpurchaseRequestHeaderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpurchaseRequestHeader = update(vpurchaseRequestHeader);

        return vpurchaseRequestHeader;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestHeader delete(Integer vpurchaserequestheaderId) {
        LOGGER.debug("Deleting VPurchaseRequestHeader with id: {}", vpurchaserequestheaderId);
        VPurchaseRequestHeader deleted = this.wmGenericDao.findById(vpurchaserequestheaderId);
        if (deleted == null) {
            LOGGER.debug("No VPurchaseRequestHeader found with id: {}", vpurchaserequestheaderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPurchaseRequestHeader.class.getSimpleName(), vpurchaserequestheaderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPurchaseRequestHeader vpurchaseRequestHeader) {
        LOGGER.debug("Deleting VPurchaseRequestHeader with {}", vpurchaseRequestHeader);
        this.wmGenericDao.delete(vpurchaseRequestHeader);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseRequestHeader> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseRequestHeaders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseRequestHeader> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseRequestHeaders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseRequestHeader to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseRequestHeader to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}