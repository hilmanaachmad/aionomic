/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.TblMDepartment;
import id.co.aio.procure_to_pay.aio_ptp.TblTPr;


/**
 * ServiceImpl object for domain model class TblMDepartment.
 *
 * @see TblMDepartment
 */
@Service("aio_ptp.TblMDepartmentService")
@Validated
@EntityService(entityClass = TblMDepartment.class, serviceId = "aio_ptp")
public class TblMDepartmentServiceImpl implements TblMDepartmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMDepartmentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("aio_ptp.TblTPrService")
    private TblTPrService tblTPrService;

    @Autowired
    @Qualifier("aio_ptp.TblMDepartmentDao")
    private WMGenericDao<TblMDepartment, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TblMDepartment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMDepartment create(TblMDepartment tblMdepartment) {
        LOGGER.debug("Creating a new TblMDepartment with information: {}", tblMdepartment);

        TblMDepartment tblMdepartmentCreated = this.wmGenericDao.create(tblMdepartment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblMdepartmentCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMDepartment getById(Integer tblmdepartmentId) {
        LOGGER.debug("Finding TblMDepartment by id: {}", tblmdepartmentId);
        return this.wmGenericDao.findById(tblmdepartmentId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public TblMDepartment findById(Integer tblmdepartmentId) {
        LOGGER.debug("Finding TblMDepartment by id: {}", tblmdepartmentId);
        try {
            return this.wmGenericDao.findById(tblmdepartmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TblMDepartment found with id: {}", tblmdepartmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<TblMDepartment> findByMultipleIds(List<Integer> tblmdepartmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding TblMDepartments by ids: {}", tblmdepartmentIds);

        return this.wmGenericDao.findByMultipleIds(tblmdepartmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public TblMDepartment update(TblMDepartment tblMdepartment) {
        LOGGER.debug("Updating TblMDepartment with information: {}", tblMdepartment);

        this.wmGenericDao.update(tblMdepartment);
        this.wmGenericDao.refresh(tblMdepartment);

        return tblMdepartment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMDepartment partialUpdate(Integer tblmdepartmentId, Map<String, Object>tblMdepartmentPatch) {
        LOGGER.debug("Partially Updating the TblMDepartment with id: {}", tblmdepartmentId);

        TblMDepartment tblMdepartment = getById(tblmdepartmentId);

        try {
            ObjectReader tblMdepartmentReader = this.objectMapper.reader().forType(TblMDepartment.class).withValueToUpdate(tblMdepartment);
            tblMdepartment = tblMdepartmentReader.readValue(this.objectMapper.writeValueAsString(tblMdepartmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tblMdepartmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tblMdepartment = update(tblMdepartment);

        return tblMdepartment;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public TblMDepartment delete(Integer tblmdepartmentId) {
        LOGGER.debug("Deleting TblMDepartment with id: {}", tblmdepartmentId);
        TblMDepartment deleted = this.wmGenericDao.findById(tblmdepartmentId);
        if (deleted == null) {
            LOGGER.debug("No TblMDepartment found with id: {}", tblmdepartmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TblMDepartment.class.getSimpleName(), tblmdepartmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(TblMDepartment tblMdepartment) {
        LOGGER.debug("Deleting TblMDepartment with {}", tblMdepartment);
        this.wmGenericDao.delete(tblMdepartment);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMDepartment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblMDepartments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblMDepartment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblMDepartments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMDepartment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table TblMDepartment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<TblTPr> findAssociatedTblTprs(Integer departmentId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblTprs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblMdepartment.departmentId = '" + departmentId + "'");

        return tblTPrService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TblTPrService instance
     */
    protected void setTblTPrService(TblTPrService service) {
        this.tblTPrService = service;
    }

}