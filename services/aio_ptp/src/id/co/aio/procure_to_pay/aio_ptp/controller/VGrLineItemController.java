/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.VGrLineItem;
import id.co.aio.procure_to_pay.aio_ptp.service.VGrLineItemService;


/**
 * Controller object for domain model class VGrLineItem.
 * @see VGrLineItem
 */
@RestController("aio_ptp.VGrLineItemController")
@Api(value = "VGrLineItemController", description = "Exposes APIs to work with VGrLineItem resource.")
@RequestMapping("/aio_ptp/VGrLineItem")
public class VGrLineItemController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VGrLineItemController.class);

    @Autowired
	@Qualifier("aio_ptp.VGrLineItemService")
	private VGrLineItemService vGrLineItemService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VGrLineItem instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrLineItem createVGrLineItem(@RequestBody VGrLineItem vgrLineItem) {
		LOGGER.debug("Create VGrLineItem with information: {}" , vgrLineItem);

		vgrLineItem = vGrLineItemService.create(vgrLineItem);
		LOGGER.debug("Created VGrLineItem with information: {}" , vgrLineItem);

	    return vgrLineItem;
	}

    @ApiOperation(value = "Returns the VGrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrLineItem getVGrLineItem(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VGrLineItem with id: {}" , id);

        VGrLineItem foundVGrLineItem = vGrLineItemService.getById(id);
        LOGGER.debug("VGrLineItem details with id: {}" , foundVGrLineItem);

        return foundVGrLineItem;
    }

    @ApiOperation(value = "Updates the VGrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrLineItem editVGrLineItem(@PathVariable("id") Integer id, @RequestBody VGrLineItem vgrLineItem) {
        LOGGER.debug("Editing VGrLineItem with id: {}" , vgrLineItem.getId());

        vgrLineItem.setId(id);
        vgrLineItem = vGrLineItemService.update(vgrLineItem);
        LOGGER.debug("VGrLineItem details with id: {}" , vgrLineItem);

        return vgrLineItem;
    }
    
    @ApiOperation(value = "Partially updates the VGrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VGrLineItem patchVGrLineItem(@PathVariable("id") Integer id, @RequestBody @MapTo(VGrLineItem.class) Map<String, Object> vgrLineItemPatch) {
        LOGGER.debug("Partially updating VGrLineItem with id: {}" , id);

        VGrLineItem vgrLineItem = vGrLineItemService.partialUpdate(id, vgrLineItemPatch);
        LOGGER.debug("VGrLineItem details after partial update: {}" , vgrLineItem);

        return vgrLineItem;
    }

    @ApiOperation(value = "Deletes the VGrLineItem instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVGrLineItem(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VGrLineItem with id: {}" , id);

        VGrLineItem deletedVGrLineItem = vGrLineItemService.delete(id);

        return deletedVGrLineItem != null;
    }

    /**
     * @deprecated Use {@link #findVGrLineItems(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VGrLineItem instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrLineItem> searchVGrLineItemsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VGrLineItems list by query filter:{}", (Object) queryFilters);
        return vGrLineItemService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrLineItem instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrLineItem> findVGrLineItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrLineItems list by filter:", query);
        return vGrLineItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VGrLineItem instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VGrLineItem> filterVGrLineItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VGrLineItems list by filter", query);
        return vGrLineItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVGrLineItems(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vGrLineItemService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVGrLineItemsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VGrLineItem.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vGrLineItemService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VGrLineItem instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVGrLineItems( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VGrLineItems");
		return vGrLineItemService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVGrLineItemAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vGrLineItemService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VGrLineItemService instance
	 */
	protected void setVGrLineItemService(VGrLineItemService service) {
		this.vGrLineItemService = service;
	}

}