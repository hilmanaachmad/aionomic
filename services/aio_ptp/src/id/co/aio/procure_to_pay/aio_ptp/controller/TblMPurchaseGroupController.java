/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_ptp.TblMPurchaseGroup;
import id.co.aio.procure_to_pay.aio_ptp.service.TblMPurchaseGroupService;


/**
 * Controller object for domain model class TblMPurchaseGroup.
 * @see TblMPurchaseGroup
 */
@RestController("aio_ptp.TblMPurchaseGroupController")
@Api(value = "TblMPurchaseGroupController", description = "Exposes APIs to work with TblMPurchaseGroup resource.")
@RequestMapping("/aio_ptp/TblMPurchaseGroup")
public class TblMPurchaseGroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblMPurchaseGroupController.class);

    @Autowired
	@Qualifier("aio_ptp.TblMPurchaseGroupService")
	private TblMPurchaseGroupService tblMPurchaseGroupService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TblMPurchaseGroup instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMPurchaseGroup createTblMPurchaseGroup(@RequestBody TblMPurchaseGroup tblMpurchaseGroup) {
		LOGGER.debug("Create TblMPurchaseGroup with information: {}" , tblMpurchaseGroup);

		tblMpurchaseGroup = tblMPurchaseGroupService.create(tblMpurchaseGroup);
		LOGGER.debug("Created TblMPurchaseGroup with information: {}" , tblMpurchaseGroup);

	    return tblMpurchaseGroup;
	}

    @ApiOperation(value = "Returns the TblMPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMPurchaseGroup getTblMPurchaseGroup(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TblMPurchaseGroup with id: {}" , id);

        TblMPurchaseGroup foundTblMPurchaseGroup = tblMPurchaseGroupService.getById(id);
        LOGGER.debug("TblMPurchaseGroup details with id: {}" , foundTblMPurchaseGroup);

        return foundTblMPurchaseGroup;
    }

    @ApiOperation(value = "Updates the TblMPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMPurchaseGroup editTblMPurchaseGroup(@PathVariable("id") Integer id, @RequestBody TblMPurchaseGroup tblMpurchaseGroup) {
        LOGGER.debug("Editing TblMPurchaseGroup with id: {}" , tblMpurchaseGroup.getId());

        tblMpurchaseGroup.setId(id);
        tblMpurchaseGroup = tblMPurchaseGroupService.update(tblMpurchaseGroup);
        LOGGER.debug("TblMPurchaseGroup details with id: {}" , tblMpurchaseGroup);

        return tblMpurchaseGroup;
    }
    
    @ApiOperation(value = "Partially updates the TblMPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblMPurchaseGroup patchTblMPurchaseGroup(@PathVariable("id") Integer id, @RequestBody @MapTo(TblMPurchaseGroup.class) Map<String, Object> tblMpurchaseGroupPatch) {
        LOGGER.debug("Partially updating TblMPurchaseGroup with id: {}" , id);

        TblMPurchaseGroup tblMpurchaseGroup = tblMPurchaseGroupService.partialUpdate(id, tblMpurchaseGroupPatch);
        LOGGER.debug("TblMPurchaseGroup details after partial update: {}" , tblMpurchaseGroup);

        return tblMpurchaseGroup;
    }

    @ApiOperation(value = "Deletes the TblMPurchaseGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblMPurchaseGroup(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TblMPurchaseGroup with id: {}" , id);

        TblMPurchaseGroup deletedTblMPurchaseGroup = tblMPurchaseGroupService.delete(id);

        return deletedTblMPurchaseGroup != null;
    }

    /**
     * @deprecated Use {@link #findTblMPurchaseGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblMPurchaseGroup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMPurchaseGroup> searchTblMPurchaseGroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblMPurchaseGroups list by query filter:{}", (Object) queryFilters);
        return tblMPurchaseGroupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMPurchaseGroup instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMPurchaseGroup> findTblMPurchaseGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMPurchaseGroups list by filter:", query);
        return tblMPurchaseGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblMPurchaseGroup instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblMPurchaseGroup> filterTblMPurchaseGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblMPurchaseGroups list by filter", query);
        return tblMPurchaseGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblMPurchaseGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblMPurchaseGroupService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTblMPurchaseGroupsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TblMPurchaseGroup.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tblMPurchaseGroupService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TblMPurchaseGroup instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblMPurchaseGroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblMPurchaseGroups");
		return tblMPurchaseGroupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblMPurchaseGroupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblMPurchaseGroupService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblMPurchaseGroupService instance
	 */
	protected void setTblMPurchaseGroupService(TblMPurchaseGroupService service) {
		this.tblMPurchaseGroupService = service;
	}

}