/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_ptp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_ptp.VPurchaseRequestExport;


/**
 * ServiceImpl object for domain model class VPurchaseRequestExport.
 *
 * @see VPurchaseRequestExport
 */
@Service("aio_ptp.VPurchaseRequestExportService")
@Validated
@EntityService(entityClass = VPurchaseRequestExport.class, serviceId = "aio_ptp")
public class VPurchaseRequestExportServiceImpl implements VPurchaseRequestExportService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPurchaseRequestExportServiceImpl.class);


    @Autowired
    @Qualifier("aio_ptp.VPurchaseRequestExportDao")
    private WMGenericDao<VPurchaseRequestExport, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPurchaseRequestExport, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestExport create(VPurchaseRequestExport vpurchaseRequestExport) {
        LOGGER.debug("Creating a new VPurchaseRequestExport with information: {}", vpurchaseRequestExport);

        VPurchaseRequestExport vpurchaseRequestExportCreated = this.wmGenericDao.create(vpurchaseRequestExport);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpurchaseRequestExportCreated);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestExport getById(Integer vpurchaserequestexportId) {
        LOGGER.debug("Finding VPurchaseRequestExport by id: {}", vpurchaserequestexportId);
        return this.wmGenericDao.findById(vpurchaserequestexportId);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestExport findById(Integer vpurchaserequestexportId) {
        LOGGER.debug("Finding VPurchaseRequestExport by id: {}", vpurchaserequestexportId);
        try {
            return this.wmGenericDao.findById(vpurchaserequestexportId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPurchaseRequestExport found with id: {}", vpurchaserequestexportId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public List<VPurchaseRequestExport> findByMultipleIds(List<Integer> vpurchaserequestexportIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPurchaseRequestExports by ids: {}", vpurchaserequestexportIds);

        return this.wmGenericDao.findByMultipleIds(vpurchaserequestexportIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestExport update(VPurchaseRequestExport vpurchaseRequestExport) {
        LOGGER.debug("Updating VPurchaseRequestExport with information: {}", vpurchaseRequestExport);

        this.wmGenericDao.update(vpurchaseRequestExport);
        this.wmGenericDao.refresh(vpurchaseRequestExport);

        return vpurchaseRequestExport;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestExport partialUpdate(Integer vpurchaserequestexportId, Map<String, Object>vpurchaseRequestExportPatch) {
        LOGGER.debug("Partially Updating the VPurchaseRequestExport with id: {}", vpurchaserequestexportId);

        VPurchaseRequestExport vpurchaseRequestExport = getById(vpurchaserequestexportId);

        try {
            ObjectReader vpurchaseRequestExportReader = this.objectMapper.reader().forType(VPurchaseRequestExport.class).withValueToUpdate(vpurchaseRequestExport);
            vpurchaseRequestExport = vpurchaseRequestExportReader.readValue(this.objectMapper.writeValueAsString(vpurchaseRequestExportPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpurchaseRequestExportPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpurchaseRequestExport = update(vpurchaseRequestExport);

        return vpurchaseRequestExport;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public VPurchaseRequestExport delete(Integer vpurchaserequestexportId) {
        LOGGER.debug("Deleting VPurchaseRequestExport with id: {}", vpurchaserequestexportId);
        VPurchaseRequestExport deleted = this.wmGenericDao.findById(vpurchaserequestexportId);
        if (deleted == null) {
            LOGGER.debug("No VPurchaseRequestExport found with id: {}", vpurchaserequestexportId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPurchaseRequestExport.class.getSimpleName(), vpurchaserequestexportId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_ptpTransactionManager")
    @Override
    public void delete(VPurchaseRequestExport vpurchaseRequestExport) {
        LOGGER.debug("Deleting VPurchaseRequestExport with {}", vpurchaseRequestExport);
        this.wmGenericDao.delete(vpurchaseRequestExport);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseRequestExport> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseRequestExports");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<VPurchaseRequestExport> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPurchaseRequestExports");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseRequestExport to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_ptp for table VPurchaseRequestExport to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_ptpTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}