<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<beans xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd" xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <import resource="${security.session.persistence.type}_session_config.xml"/>
    <bean class="com.wavemaker.runtime.security.SecurityService" id="securityService"/>
    <bean class="com.wavemaker.runtime.security.controller.SecurityController" id="securityController"/>
    <bean class="com.wavemaker.runtime.web.filter.SSLSecureFilter" id="sslSecureFilter"/>
    <bean class="com.wavemaker.runtime.security.xss.filter.WMXSSFilter" id="wmXSSFilter"/>
    <bean class="com.wavemaker.runtime.web.filter.ContentSecurityPolicyFilter" id="contentSecurityPolicyFilter"/>
    <bean class="com.wavemaker.runtime.security.filter.WMFrameOptionsHeaderFilter" id="wmFrameOptionsFilter">
        <property name="frameOptions" ref="frameOptions"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.FrameOptions" id="frameOptions">
        <property name="enabled" value="${security.general.frameOptions.enabled}"/>
        <property name="mode" value="${security.general.frameOptions.mode}"/>
        <property name="allowFromUrl" value="${security.general.frameOptions.allowFromUrl}"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.filter.WMXContentTypeOptionsFilter" id="wmXContentTypeOptionsFilter"/>
    <bean class="org.springframework.web.filter.CorsFilter" id="corsFilter">
        <constructor-arg ref="corsConfigurationSource"/>
    </bean>
    <bean class="org.springframework.web.cors.UrlBasedCorsConfigurationSource" id="corsConfigurationSource"/>
    <bean class="com.wavemaker.runtime.cors.CorsBeanPostProcessor" id="corsBeanPostProcessor"/>
    <bean class="org.springframework.security.web.FilterChainProxy" id="wmCompositeSecurityFilter">
        <constructor-arg>
            <security:filter-chain pattern="/**" filters="contentSecurityPolicyFilter, sslSecureFilter, wmXSSFilter, wmFrameOptionsFilter, wmXContentTypeOptionsFilter,corsFilter"/>
        </constructor-arg>
    </bean>
    <bean class="com.wavemaker.runtime.security.config.WMAppSecurityConfig" id="WMAppSecurityConfig">
        <property name="sslConfig" ref="sslConfig"/>
        <property name="xssConfig" ref="xssConfig"/>
        <property name="enforceSecurity">
            <value>${security.enabled}</value>
        </property>
        <property name="rolesConfig" ref="rolesConfig"/>
        <property name="loginConfig" ref="loginConfig"/>
        <property name="rememberMeConfig" ref="rememberMeConfig"/>
        <property name="tokenAuthConfig" ref="tokenAuthConfig"/>
        <property name="csrfConfig" ref="csrfConfig"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.SSLConfig" id="sslConfig">
        <property name="useSSL" value="${security.general.ssl.enabled}"/>
        <property name="sslPort" value="${security.general.ssl.port}"/>
        <property name="excludedUrls" value="#{null}"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.XSSConfig" id="xssConfig">
        <property name="enforceXssSecurity" value="${security.general.xss.enabled}"/>
        <property name="policyFile" value="wm-xss-policies.xml"/>
        <property name="xssFilterStrategy" value="ENCODE"/>
        <property name="dataBackwardCompatibility" value="${security.general.xss.dataBackwardCompatibility}"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.CorsConfig" id="corsConfig">
        <property name="enabled" value="${security.general.cors.enabled}"/>
        <property name="maxAge" value="${security.general.cors.maxAge}"/>
        <property name="allowCredentials" value="${security.general.cors.allowCredentials}"/>
        <property name="pathEntries">
            <list>
                <bean class="com.wavemaker.commons.model.security.PathEntry" id="root">
                    <property name="name" value="root"/>
                    <property name="path" value="/**"/>
                    <property name="allowedOrigins" value="${security.general.cors.root.allowedOrigins}"/>
                </bean>
            </list>
        </property>
    </bean>
    <security:global-method-security pre-post-annotations="enabled" authentication-manager-ref="authenticationManager"/>
    <security:http pattern="/app.css" security="none"/>
    <security:http pattern="/app.js" security="none"/>
    <security:http pattern="/app.variables.json" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/favicon.png" security="none"/>
    <security:http pattern="/print.css" security="none"/>
    <security:http pattern="/wmProperties.js" security="none"/>
    <security:http pattern="/**/*.js" security="none"/>
    <security:http pattern="/**/*.css" security="none"/>
    <security:http pattern="/ng-bundle/**" security="none"/>
    <security:http pattern="/config.json" security="none"/>
    <security:http pattern="/types.js" security="none"/>
    <security:http pattern="/pages/Common/**" security="none"/>
    <security:http pattern="/pages/Login/**" security="none"/>
    <security:http pattern="/themes/**" security="none"/>
    <security:http pattern="/resources/**" security="none"/>
    <security:http pattern="/**/wmapp/**" security="none"/>
    <security:http pattern="/**/wmmobile/**" security="none"/>
    <security:http pattern="/app/prefabs/**" security="none"/>
    <security:http pattern="/services/application/wmProperties.js" security="none"/>
    <security:http pattern="/services/webprocess/**" security="none"/>
    <security:http pattern="/manifest.json" security="none"/>
    <security:http pattern="/ngsw.json" security="none"/>
    <security:http auto-config="false" use-expressions="true" create-session="never" security-context-repository-ref="securityContextRepository" entry-point-ref="appAuthenticationEntryPoint" disable-url-rewriting="true" name="interceptUrlsBean" authentication-manager-ref="authenticationManager">
        <security:intercept-url pattern="/index.html" access="permitAll"/>
        <security:intercept-url pattern="/j_spring_security_check" access="permitAll"/>
        <security:intercept-url pattern="/j_spring_security_logout" access="permitAll"/>
        <security:intercept-url pattern="/pages/CompanyDomicilie/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/ForgotPassword/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/ForgotUserList/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/FormNewPassword/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/HeadforRegVendor/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/LandingPageUser/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/Login/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/LoginAIO/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/QuotationFormVendor/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/QuotationFormVendorDone/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/RFQEmailPage/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/ReclassPage/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/RegVendorSucces/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/RegistrationVendorLocal/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/RegistrationVendorLocalEdit/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/RegistrationVendorOverseas/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/RegistrationVendorOverseasEdit/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/footer/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/header/**" access="permitAll"/>
        <security:intercept-url pattern="/services/AVM2/queryExecutor/queries/qCheckUserEmailVen/export" access="isAuthenticated()" method="POST"/>
        <security:intercept-url pattern="/services/AVM2/queryExecutor/queries/qCheckUserEmailVen" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/AVM2/queryExecutor/queries/qForgotPassVen" access="permitAll" method="PUT"/>
        <security:intercept-url pattern="/services/AVM2/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aioEmailService/api/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_employee/Employee/count" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_employee/Employee/filter" access="permitAll" method="POST"/>
        <security:intercept-url pattern="/services/aio_employee/EmployeeRamco/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_employee/**" access="isAuthenticated()"/>
        <security:intercept-url pattern="/services/aio_ptp/TblMUserData/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_ptp/TblMUserDep/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_ptp/TblTInbox" access="permitAll" method="POST"/>
        <security:intercept-url pattern="/services/aio_ptp/TblTInbox/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_ptp/TblTRfqVendor" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_ptp/TblTRfqVendor/*" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_ptp/TblTRfqVendor/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_ptp/VRfqItemQuotation/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_ptp/VRfqQuotationHeader/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/changeRFQItemQuotation" access="permitAll" method="PUT"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/countUnseenInbox" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/getDelegatedRoles" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/getUnseenNotification" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/getUserRole" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/reminderTasklistQuery" access="permitAll" method="POST"/>
        <security:intercept-url pattern="/services/aio_ptp/queryExecutor/queries/tickNotificationLastSeen" access="permitAll" method="PUT"/>
        <security:intercept-url pattern="/services/aio_ptp/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_xspeed_user/PhpMsLogin/**" access="permitAll"/>
        <security:intercept-url pattern="/services/aio_xspeed_user/queryExecutor/queries/getEmployeeData" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_xspeed_user/queryExecutor/queries/qCheckUserEmailNik" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/aio_xspeed_user/queryExecutor/queries/qForgotPassEmp" access="permitAll" method="PUT"/>
        <security:intercept-url pattern="/services/aio_xspeed_user/**" access="isAuthenticated()"/>
        <security:intercept-url pattern="/services/application/i18n/**" access="permitAll"/>
        <security:intercept-url pattern="/services/cloudflareIpCheck/trace/**" access="permitAll"/>
        <security:intercept-url pattern="/services/email/**" access="permitAll"/>
        <security:intercept-url pattern="/services/file/downloadFile" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/file/downloadFileAsInline" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/file/file" access="permitAll" method="DELETE"/>
        <security:intercept-url pattern="/services/file/uploadFile" access="permitAll" method="POST"/>
        <security:intercept-url pattern="/services/file/**" access="permitAll"/>
        <security:intercept-url pattern="/services/logAudit/api/**" access="permitAll"/>
        <security:intercept-url pattern="/services/prefabs/**/servicedefs" access="permitAll"/>
        <security:intercept-url pattern="/services/sap_master/VPtpTop/**" access="permitAll"/>
        <security:intercept-url pattern="/services/sap_master/queryExecutor/queries/getCurrencyPRLineItem" access="permitAll" method="GET"/>
        <security:intercept-url pattern="/services/security/**" access="permitAll"/>
        <security:intercept-url pattern="/services/servicedefs" access="permitAll"/>
        <security:intercept-url pattern="/services/svNotifyEmailVendor/api/**" access="permitAll"/>
        <security:intercept-url pattern="/**" access="permitAll" method="OPTIONS"/>
        <security:intercept-url pattern="/" access="isAuthenticated()"/>
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <security:session-management session-fixation-protection="migrateSession">
            <security:concurrency-control max-sessions="-1" error-if-maximum-exceeded="false" session-registry-ref="sessionRegistry"/>
        </security:session-management>
        <security:headers disabled="true"/>
        <security:csrf disabled="true"/>
        <security:request-cache ref="nullRequestCache"/>
        <security:custom-filter position="FIRST" ref="sessionRepositoryFilter"/>
        <security:custom-filter position="CSRF_FILTER" ref="wmcsrfFilter"/>
        <security:custom-filter before="PRE_AUTH_FILTER" ref="wmTokenBasedPreAuthenticatedProcessingFilter"/>
        <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter"/>
        <security:custom-filter after="SECURITY_CONTEXT_FILTER" ref="loginWebProcessFilter"/>
        <security:custom-filter position="BASIC_AUTH_FILTER" ref="WMBasicAuthenticationFilter"/>
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="WMSecAuthFilter"/>
    </security:http>
    <bean class="org.springframework.session.web.http.DefaultCookieSerializer" id="defaultCookieSerializer">
        <property name="sameSite" value="#{null}"/>
        <property name="cookieMaxAge" value="#{${security.general.cookie.maxAge} * 60}"/>
    </bean>
    <bean class="org.springframework.session.web.http.CookieHttpSessionIdResolver" id="httpSessionIdResolver">
        <property name="cookieSerializer" ref="defaultCookieSerializer"/>
    </bean>
    <bean class="org.springframework.session.web.http.SessionRepositoryFilter" id="sessionRepositoryFilter">
        <constructor-arg ref="sessionRepository"/>
        <property name="httpSessionIdResolver" ref="httpSessionIdResolver"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfFilter" id="wmcsrfFilter">
        <constructor-arg ref="csrfTokenRepository"/>
        <constructor-arg ref="csrfSecurityRequestMatcher"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.entrypoint.WMCompositeAuthenticationEntryPoint" id="appAuthenticationEntryPoint"/>
    <bean class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy" id="compositeSessionAuthenticationStrategy"/>
    <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" id="sessionFixationProtectionStrategy"/>
    <bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy" id="csrfAuthenticationStrategy">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider ref="wmCustomAuthenticationProvider"/>
    </security:authentication-manager>
    <bean class="com.wavemaker.runtime.security.WMAppAccessDeniedHandler" id="wmAppAccessDeniedHandler"/>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfTokenRepository" id="csrfTokenRepository">
        <constructor-arg>
            <bean class="com.wavemaker.runtime.security.csrf.WMHttpSessionCsrfTokenRepository">
                <property name="csrfConfig" ref="csrfConfig"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.CsrfSecurityRequestMatcher" id="csrfSecurityRequestMatcher">
        <property name="csrfConfig" ref="csrfConfig"/>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.LogoutFilter" id="logoutFilter">
        <constructor-arg ref="logoutSuccessHandler"/>
        <constructor-arg>
            <list>
                <ref bean="securityContextLogoutHandler"/>
                <ref bean="wmCsrfLogoutHandler"/>
            </list>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/j_spring_security_logout"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfLogoutHandler" id="wmCsrfLogoutHandler">
        <constructor-arg>
            <bean class="org.springframework.security.web.csrf.CsrfLogoutHandler">
                <constructor-arg ref="csrfTokenRepository"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" id="securityContextLogoutHandler"/>
    <bean class="org.springframework.security.web.savedrequest.NullRequestCache" id="nullRequestCache"/>
    <bean class="com.wavemaker.runtime.security.filter.WMTokenBasedPreAuthenticatedProcessingFilter" id="wmTokenBasedPreAuthenticatedProcessingFilter">
        <constructor-arg ref="authenticationManager"/>
        <constructor-arg ref="wmTokenBasedAuthenticationService"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.token.repository.WMTokenRepository" id="tokenRepository"/>
    <bean class="com.wavemaker.runtime.security.token.WMTokenBasedAuthenticationService" id="wmTokenBasedAuthenticationService"/>
    <bean class="com.wavemaker.runtime.security.handler.WMApplicationAuthenticationSuccessHandler" id="successHandler">
        <property name="defaultSuccessHandlerList">
            <list>
                <ref bean="wmSecurityContextRepositorySuccessHandler"/>
                <ref bean="wmCsrfTokenRepositorySuccessHandler"/>
                <ref bean="wmCsrfTokenResponseWriterAuthenticationSuccessHandler"/>
            </list>
        </property>
        <property name="authenticationSuccessRedirectionHandler" ref="wmAuthenticationSuccessRedirectionHandler"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.handler.WMAuthenticationSuccessRedirectionHandler" id="wmAuthenticationSuccessRedirectionHandler"/>
    <bean class="com.wavemaker.runtime.security.handler.WMCsrfTokenRepositorySuccessHandler" id="wmCsrfTokenRepositorySuccessHandler">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.handler.WMCsrfTokenResponseWriterAuthenticationSuccessHandler" id="wmCsrfTokenResponseWriterAuthenticationSuccessHandler">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <bean class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" id="securityContextRepository">
        <property name="disableUrlRewriting" value="true"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.handler.WMSecurityContextRepositorySuccessHandler" id="wmSecurityContextRepositorySuccessHandler">
        <constructor-arg ref="securityContextRepository"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.WMApplicationAuthenticationFailureHandler" id="failureHandler"/>
    <bean class="com.wavemaker.commons.model.security.RememberMeConfig" id="rememberMeConfig">
        <property name="enabled" value="${security.general.rememberMe.enabled}"/>
        <property name="tokenValiditySeconds" value="${security.general.rememberMe.timeOut}"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.LoginConfig" id="loginConfig">
        <property name="pageName" value="LoginAIO"/>
        <property name="sessionTimeout">
            <bean class="com.wavemaker.commons.model.security.SessionTimeoutConfig">
                <property name="pageName" value="LoginAIO"/>
                <property name="timeoutValue" value="${security.general.session.timeout}"/>
                <property name="type">
                    <value type="com.wavemaker.commons.model.security.LoginType">PAGE</value>
                </property>
            </bean>
        </property>
        <property name="type">
            <value type="com.wavemaker.commons.model.security.LoginType">PAGE</value>
        </property>
    </bean>
    <bean class="com.wavemaker.commons.model.security.CSRFConfig" id="csrfConfig">
        <property name="enforceCsrfSecurity" value="${security.general.xsrf.enabled}"/>
        <property name="headerName" value="X-WM-XSRF-TOKEN"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.RolesConfig" id="rolesConfig">
        <property name="roleMap">
            <description>Roles based landing page definitions</description>
            <map key-type="java.lang.String" value-type="com.wavemaker.commons.model.security.RoleConfig"/>
        </property>
    </bean>
    <bean class="com.wavemaker.commons.model.security.TokenAuthConfig" id="tokenAuthConfig">
        <property name="enabled" value="${security.general.tokenService.enabled}"/>
        <property name="parameter" value="${security.general.tokenService.parameter}"/>
        <property name="tokenValiditySeconds" value="${security.general.tokenService.tokenValiditySeconds}"/>
    </bean>
    <bean class="com.wavemaker.runtime.webprocess.filter.LoginProcessFilter" id="loginWebProcessFilter"/>
    <bean class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter" id="WMSecAuthFilter">
        <property name="authenticationSuccessHandler" ref="successHandler"/>
        <property name="authenticationFailureHandler" ref="failureHandler"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="filterProcessesUrl" value="/j_spring_security_check"/>
        <property name="usernameParameter" value="j_username"/>
        <property name="passwordParameter" value="j_password"/>
        <property name="sessionAuthenticationStrategy" ref="compositeSessionAuthenticationStrategy"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.filter.WMBasicAuthenticationFilter" id="WMBasicAuthenticationFilter">
        <constructor-arg ref="authenticationManager"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.WMAuthenticationEntryPoint" id="WMSecAuthEntryPoint">
        <constructor-arg value="/index.html"/>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler" id="logoutSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
        <property name="redirectStrategy" ref="redirectStrategyBean"/>
    </bean>
    <bean class="org.springframework.security.web.DefaultRedirectStrategy" id="redirectStrategyBean"/>
    <bean class="com.wavemaker.runtime.security.WMCustomAuthenticationProvider" id="wmCustomAuthenticationProvider">
        <property name="wmCustomAuthenticationManager">
            <bean class="AIOPtpLogin"/>
        </property>
    </bean>
</beans>
