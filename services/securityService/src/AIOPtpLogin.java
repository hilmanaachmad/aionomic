/*Generated by WaveMaker Studio*/


import java.util.ArrayList;
import java.util.List;

// regex
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemaker.runtime.security.AuthRequestContext;
import com.wavemaker.runtime.security.WMCustomAuthenticationManager;
import com.wavemaker.runtime.security.WMUser;
// import com.wavemaker.runtime.security.WMUserBuilder;

import org.springframework.security.core.AuthenticationException;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

// for http request
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

// for request http
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.http.conn.ssl.NoopHostnameVerifier;

// for json data
import org.json.JSONObject;
import org.json.JSONArray;

// services and class
import id.co.aio.procure_to_pay.aio_xspeed_user.PhpMsLogin;
import id.co.aio.procure_to_pay.aio_xspeed_user.service.PhpMsLoginService;
import id.co.aio.procure_to_pay.avm2.VVendorMiro;
import id.co.aio.procure_to_pay.avm2.TlMsVe;
import id.co.aio.procure_to_pay.avm2.service.VVendorMiroService;
import id.co.aio.procure_to_pay.avm2.service.TlMsVeService;

import org.springframework.data.domain.PageRequest;

public class AIOPtpLogin implements WMCustomAuthenticationManager {

    private static final Logger logger=LoggerFactory.getLogger(AIOPtpLogin.class);
    private final PageRequest ONE_PAGE = PageRequest.of(0, 1000);
    
    @Value("${app.environment.AIOApiHost}")
    String AIOApiHost;
    
    @Autowired
    private PhpMsLoginService phpMsLoginService;
    
    @Autowired
    private VVendorMiroService vendorMiroService;
    
    @Autowired
    private TlMsVeService tlMsVeService;
    
    private String adjustedNik(String nik) {
        String firstNik = nik.substring(0,1);
        if(firstNik.equals("0")) {
            return nik.substring(1, nik.length());
        } else {
            return nik;
        }
    }

    public WMUser authenticate(AuthRequestContext authRequestContext) throws AuthenticationException {
        String username = authRequestContext.getUsername();
        String password = authRequestContext.getPassword();
        ArrayList<String> role;
        role = new ArrayList<String>();
        
        // beginning of BAYPASS LOGIN 
        logger.info("username :: " + username);
        logger.info("password :: " + password);
        if (this.isBypassEmpAuth(username, password)) {
            Pattern emailRegex = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
            Matcher matcher = emailRegex.matcher(username);
            
            if (matcher.find()) {
                return new WMUser("ven::" + username, password, new ArrayList<String>());
            } else {
                return new WMUser("emp::" + username, password, new ArrayList<String>());
            }
        }
        // end of BAYPASS LOGIN
        
        if (this.isEmployeeAuth(username, password)) {
            return new WMUser("emp::" + username, password, new ArrayList<String>());
        } else if (this.isVendorAuth(username, password)) {
            logger.info("oioi ");
            role.add(password);
            return new WMUser("ven::" + username, password, role);
        } else {
            throw new BadCredentialsException("Employee Number and/or Password is incorrect or not found!");
        }
    }
    
    private Boolean isBypassEmpAuth(String username, String password) {
        // if (password.equals("Password1!")) {
        if (password.equals("0cef1fb10f60529028a71f58e54ed07b")) { // Password1! MD5 encrypted
            return true;
        }
        return false;
    }
    
    
    private Boolean isEmployeeAuth(String username, String password) {
        // List<NameValuePair> params = new ArrayList<NameValuePair>(2);
        // params.add(new BasicNameValuePair("username", username));
        // params.add(new BasicNameValuePair("password", password));
        
        // try {
        //     String res = this.sendPost(AIOApiHost + "/authentication/login", params);
        //     logger.info("sendPostResponse :: " + res);
        
        //     JSONObject resJson;
        //     resJson = new JSONObject(res); 
        //     logger.info("response" + resJson);
            
        //     if (resJson.get("status").toString().equals("false")) {
        //         logger.info("not employee");
        //         return false;
        //     }
            
        //     return true;
            
        // } catch (Exception e) {
        //     return false;
        // }
        logger.info("isEmployeeAuth");
        if (username != null && password != null) {
            try {
                logger.info("isEmployeeAuth try");
                List<PhpMsLogin> user = phpMsLoginService.findAll("lgNik = '" + username + "' AND lgPassword = '" + password + "' AND lgAktif = '1'", ONE_PAGE).getContent();
                
                if (user.size() > 0) {
                    
                    logger.info("user : " + user.get(0).toString());
                    logger.info("username : " + user.get(0).getLgNik());
                    logger.info("password : " + user.get(0).getLgPassword());
                    logger.info("password input : " + password);
                    logger.info("aktif : " + user.get(0).getLgAktif());
                    
                    if (user.get(0).getLgPassword().equals(password) && user.get(0).getLgAktif().equals("1")) {
                        logger.info("Masuk IF");
                        return true;
                    } else {
                        logger.info("else");
                        return false;
                        // throw new BadCredentialsException("Employee Number and/or Password is incorrect or not found!");
                    }
                } else {
                    logger.info("isEmployeeAuth else");
                    return false;
                }
            } catch (Exception e) {
                logger.info("catch bruh " + e.toString());
                return false;
                // throw new BadCredentialsException("Employee Number and/or Password is incorrect or not found!");
            }
        } else {
            logger.info("isEmployeeAuth else");
            return false;
            // throw new BadCredentialsException(" Error authenticating user");
        }
    }
    
     private Boolean isVendorAuth(String username, String password) {
        // List<NameValuePair> params = new ArrayList<NameValuePair>(2);
        // params.add(new BasicNameValuePair("username", username));
        // params.add(new BasicNameValuePair("password", password));
        
        // try {
        //     String res = this.sendPost(AIOApiHost + "/authentication/login-vendor", params);
        //     logger.info("sendPostResponse :: " + res);
        
        //     JSONObject resJson;
        //     resJson = new JSONObject(res);   
            
        //     if (resJson.get("status").toString().equals("false")) {
        //         logger.info("not vendor");
        //         return false;
        //     }
            
        //     return true;
        // } catch (Exception e) {
        //     return false;
        // }
        logger.info("isVendorAuth");
        if (username != null && password != null) {
            try {
                // List<VVendorMiro> user = vendorMiroService.findAll("sapcode NOT LIKE '%E0%' AND (abEmss = '" + username + "' OR username = '" + username + "') AND password = '" + password + "'", ONE_PAGE).getContent();
                // List<TlMsVe> user = vendorMiroService.findAll("sapcode NOT LIKE '%E0%' AND (abEmss = '" + username + "' OR username = '" + username + "') AND password = '" + password + "'", ONE_PAGE).getContent();
                List<TlMsVe> user = tlMsVeService.findAll("abCoorsa NOT LIKE '%E0%' AND abStor = 8 AND (abEmss = '" + username + "' OR abUme = '" + username + "') AND abPrd = '" + password + "'", ONE_PAGE).getContent();
                
                if (user.size() > 0) {
                    logger.info("username : " + user.get(0).getAbUme());
                    logger.info("emss : " + user.get(0).getAbEmss());
                    logger.info("password : " + user.get(0).getAbPrd());
                    logger.info("password input : " + password);
                    
                    if (user.get(0).getAbPrd().equals(password)) {
                        logger.info("Masuk IF");
                        return true;
                    } else {
                        logger.info("else");
                        return false;
                        // throw new BadCredentialsException("Employee Number and/or Password is incorrect or not found!");
                    }
                } else {
                    return false;
                }
            } catch (Exception e) {
                logger.info("catch bruh");
                return false;
                // throw new BadCredentialsException("Employee Number and/or Password is incorrect or not found!");
            }
        } else {
            return false;
            // throw new BadCredentialsException(" Error authenticating user");
        }
    }
    
    
    
    
    private final CloseableHttpClient httpClient = HttpClients
    .custom()
    .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
    .build();
    
    private void close() throws IOException {
        httpClient.close();
    }
    
    private String sendPost(String url, List<NameValuePair> params) {
        
       
     logger.info("sendPostURL :: " + url);

        HttpPost request = new HttpPost(url);

        // add request headers
        // request.addHeader("custom-key", "mkyong");
        // request.addHeader(HttpHeaders.USER_AGENT, "Googlebot");
        
        // add params
        try {
            request.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
        } catch (Exception e) {
            logger.info(e.toString());
            return "";
        }
        

        try (CloseableHttpResponse response = httpClient.execute(request)) {

            // Get HttpResponse Status
            // System.out.println(response.getStatusLine().toString());

            HttpEntity entity = response.getEntity();
            Header headers = entity.getContentType();
            // System.out.println(headers);

            if (entity != null) {
                // return it as a String
                String result = EntityUtils.toString(entity);
                // System.out.println(result);
                logger.info(result);
                return result;
            } else {
                return "";
            }

        } catch (Exception e) {
            logger.info(e.toString());
            return "";
        }

    }
}
