/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_employee.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.aio_employee.VEmployeeActive;
import id.co.aio.procure_to_pay.aio_employee.service.VEmployeeActiveService;


/**
 * Controller object for domain model class VEmployeeActive.
 * @see VEmployeeActive
 */
@RestController("aio_employee.VEmployeeActiveController")
@Api(value = "VEmployeeActiveController", description = "Exposes APIs to work with VEmployeeActive resource.")
@RequestMapping("/aio_employee/VEmployeeActive")
public class VEmployeeActiveController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VEmployeeActiveController.class);

    @Autowired
	@Qualifier("aio_employee.VEmployeeActiveService")
	private VEmployeeActiveService vEmployeeActiveService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VEmployeeActive instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VEmployeeActive createVEmployeeActive(@RequestBody VEmployeeActive vemployeeActive) {
		LOGGER.debug("Create VEmployeeActive with information: {}" , vemployeeActive);

		vemployeeActive = vEmployeeActiveService.create(vemployeeActive);
		LOGGER.debug("Created VEmployeeActive with information: {}" , vemployeeActive);

	    return vemployeeActive;
	}

    @ApiOperation(value = "Returns the VEmployeeActive instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VEmployeeActive getVEmployeeActive(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting VEmployeeActive with id: {}" , id);

        VEmployeeActive foundVEmployeeActive = vEmployeeActiveService.getById(id);
        LOGGER.debug("VEmployeeActive details with id: {}" , foundVEmployeeActive);

        return foundVEmployeeActive;
    }

    @ApiOperation(value = "Updates the VEmployeeActive instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VEmployeeActive editVEmployeeActive(@PathVariable("id") Integer id, @RequestBody VEmployeeActive vemployeeActive) {
        LOGGER.debug("Editing VEmployeeActive with id: {}" , vemployeeActive.getId());

        vemployeeActive.setId(id);
        vemployeeActive = vEmployeeActiveService.update(vemployeeActive);
        LOGGER.debug("VEmployeeActive details with id: {}" , vemployeeActive);

        return vemployeeActive;
    }
    
    @ApiOperation(value = "Partially updates the VEmployeeActive instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VEmployeeActive patchVEmployeeActive(@PathVariable("id") Integer id, @RequestBody @MapTo(VEmployeeActive.class) Map<String, Object> vemployeeActivePatch) {
        LOGGER.debug("Partially updating VEmployeeActive with id: {}" , id);

        VEmployeeActive vemployeeActive = vEmployeeActiveService.partialUpdate(id, vemployeeActivePatch);
        LOGGER.debug("VEmployeeActive details after partial update: {}" , vemployeeActive);

        return vemployeeActive;
    }

    @ApiOperation(value = "Deletes the VEmployeeActive instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVEmployeeActive(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting VEmployeeActive with id: {}" , id);

        VEmployeeActive deletedVEmployeeActive = vEmployeeActiveService.delete(id);

        return deletedVEmployeeActive != null;
    }

    /**
     * @deprecated Use {@link #findVEmployeeActives(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VEmployeeActive instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VEmployeeActive> searchVEmployeeActivesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VEmployeeActives list by query filter:{}", (Object) queryFilters);
        return vEmployeeActiveService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VEmployeeActive instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VEmployeeActive> findVEmployeeActives(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VEmployeeActives list by filter:", query);
        return vEmployeeActiveService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VEmployeeActive instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VEmployeeActive> filterVEmployeeActives(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VEmployeeActives list by filter", query);
        return vEmployeeActiveService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVEmployeeActives(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vEmployeeActiveService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVEmployeeActivesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VEmployeeActive.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vEmployeeActiveService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VEmployeeActive instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVEmployeeActives( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VEmployeeActives");
		return vEmployeeActiveService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVEmployeeActiveAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vEmployeeActiveService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VEmployeeActiveService instance
	 */
	protected void setVEmployeeActiveService(VEmployeeActiveService service) {
		this.vEmployeeActiveService = service;
	}

}