/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_employee.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_employee.VEmployeeActive;

/**
 * Service object for domain model class {@link VEmployeeActive}.
 */
public interface VEmployeeActiveService {

    /**
     * Creates a new VEmployeeActive. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VEmployeeActive if any.
     *
     * @param vemployeeActive Details of the VEmployeeActive to be created; value cannot be null.
     * @return The newly created VEmployeeActive.
     */
    VEmployeeActive create(@Valid VEmployeeActive vemployeeActive);


	/**
     * Returns VEmployeeActive by given id if exists.
     *
     * @param vemployeeactiveId The id of the VEmployeeActive to get; value cannot be null.
     * @return VEmployeeActive associated with the given vemployeeactiveId.
	 * @throws EntityNotFoundException If no VEmployeeActive is found.
     */
    VEmployeeActive getById(Integer vemployeeactiveId);

    /**
     * Find and return the VEmployeeActive by given id if exists, returns null otherwise.
     *
     * @param vemployeeactiveId The id of the VEmployeeActive to get; value cannot be null.
     * @return VEmployeeActive associated with the given vemployeeactiveId.
     */
    VEmployeeActive findById(Integer vemployeeactiveId);

	/**
     * Find and return the list of VEmployeeActives by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vemployeeactiveIds The id's of the VEmployeeActive to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VEmployeeActives associated with the given vemployeeactiveIds.
     */
    List<VEmployeeActive> findByMultipleIds(List<Integer> vemployeeactiveIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VEmployeeActive. It replaces all fields of the existing VEmployeeActive with the given vemployeeActive.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VEmployeeActive if any.
     *
     * @param vemployeeActive The details of the VEmployeeActive to be updated; value cannot be null.
     * @return The updated VEmployeeActive.
     * @throws EntityNotFoundException if no VEmployeeActive is found with given input.
     */
    VEmployeeActive update(@Valid VEmployeeActive vemployeeActive);


    /**
     * Partially updates the details of an existing VEmployeeActive. It updates only the
     * fields of the existing VEmployeeActive which are passed in the vemployeeActivePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VEmployeeActive if any.
     *
     * @param vemployeeactiveId The id of the VEmployeeActive to be deleted; value cannot be null.
     * @param vemployeeActivePatch The partial data of VEmployeeActive which is supposed to be updated; value cannot be null.
     * @return The updated VEmployeeActive.
     * @throws EntityNotFoundException if no VEmployeeActive is found with given input.
     */
    VEmployeeActive partialUpdate(Integer vemployeeactiveId, Map<String, Object> vemployeeActivePatch);

    /**
     * Deletes an existing VEmployeeActive with the given id.
     *
     * @param vemployeeactiveId The id of the VEmployeeActive to be deleted; value cannot be null.
     * @return The deleted VEmployeeActive.
     * @throws EntityNotFoundException if no VEmployeeActive found with the given id.
     */
    VEmployeeActive delete(Integer vemployeeactiveId);

    /**
     * Deletes an existing VEmployeeActive with the given object.
     *
     * @param vemployeeActive The instance of the VEmployeeActive to be deleted; value cannot be null.
     */
    void delete(VEmployeeActive vemployeeActive);

    /**
     * Find all VEmployeeActives matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VEmployeeActives.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VEmployeeActive> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VEmployeeActives matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VEmployeeActives.
     *
     * @see Pageable
     * @see Page
     */
    Page<VEmployeeActive> findAll(String query, Pageable pageable);

    /**
     * Exports all VEmployeeActives matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VEmployeeActives matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VEmployeeActives in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VEmployeeActive.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}