/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_employee.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_employee.EmployeeData;


/**
 * ServiceImpl object for domain model class EmployeeData.
 *
 * @see EmployeeData
 */
@Service("aio_employee.EmployeeDataService")
@Validated
@EntityService(entityClass = EmployeeData.class, serviceId = "aio_employee")
public class EmployeeDataServiceImpl implements EmployeeDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeDataServiceImpl.class);


    @Autowired
    @Qualifier("aio_employee.EmployeeDataDao")
    private WMGenericDao<EmployeeData, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<EmployeeData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public EmployeeData create(EmployeeData employeeData) {
        LOGGER.debug("Creating a new EmployeeData with information: {}", employeeData);

        EmployeeData employeeDataCreated = this.wmGenericDao.create(employeeData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employeeDataCreated);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public EmployeeData getById(Integer employeedataId) {
        LOGGER.debug("Finding EmployeeData by id: {}", employeedataId);
        return this.wmGenericDao.findById(employeedataId);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public EmployeeData findById(Integer employeedataId) {
        LOGGER.debug("Finding EmployeeData by id: {}", employeedataId);
        try {
            return this.wmGenericDao.findById(employeedataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmployeeData found with id: {}", employeedataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public List<EmployeeData> findByMultipleIds(List<Integer> employeedataIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmployeeDatas by ids: {}", employeedataIds);

        return this.wmGenericDao.findByMultipleIds(employeedataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_employeeTransactionManager")
    @Override
    public EmployeeData update(EmployeeData employeeData) {
        LOGGER.debug("Updating EmployeeData with information: {}", employeeData);

        this.wmGenericDao.update(employeeData);
        this.wmGenericDao.refresh(employeeData);

        return employeeData;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public EmployeeData partialUpdate(Integer employeedataId, Map<String, Object>employeeDataPatch) {
        LOGGER.debug("Partially Updating the EmployeeData with id: {}", employeedataId);

        EmployeeData employeeData = getById(employeedataId);

        try {
            ObjectReader employeeDataReader = this.objectMapper.reader().forType(EmployeeData.class).withValueToUpdate(employeeData);
            employeeData = employeeDataReader.readValue(this.objectMapper.writeValueAsString(employeeDataPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", employeeDataPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        employeeData = update(employeeData);

        return employeeData;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public EmployeeData delete(Integer employeedataId) {
        LOGGER.debug("Deleting EmployeeData with id: {}", employeedataId);
        EmployeeData deleted = this.wmGenericDao.findById(employeedataId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeData found with id: {}", employeedataId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EmployeeData.class.getSimpleName(), employeedataId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public void delete(EmployeeData employeeData) {
        LOGGER.debug("Deleting EmployeeData with {}", employeeData);
        this.wmGenericDao.delete(employeeData);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public Page<EmployeeData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public Page<EmployeeData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_employee for table EmployeeData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_employee for table EmployeeData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}