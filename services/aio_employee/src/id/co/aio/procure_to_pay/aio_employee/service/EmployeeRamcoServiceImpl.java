/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_employee.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.aio_employee.EmployeeRamco;


/**
 * ServiceImpl object for domain model class EmployeeRamco.
 *
 * @see EmployeeRamco
 */
@Service("aio_employee.EmployeeRamcoService")
@Validated
@EntityService(entityClass = EmployeeRamco.class, serviceId = "aio_employee")
public class EmployeeRamcoServiceImpl implements EmployeeRamcoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeRamcoServiceImpl.class);


    @Autowired
    @Qualifier("aio_employee.EmployeeRamcoDao")
    private WMGenericDao<EmployeeRamco, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<EmployeeRamco, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public EmployeeRamco create(EmployeeRamco employeeRamco) {
        LOGGER.debug("Creating a new EmployeeRamco with information: {}", employeeRamco);

        EmployeeRamco employeeRamcoCreated = this.wmGenericDao.create(employeeRamco);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employeeRamcoCreated);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public EmployeeRamco getById(Integer employeeramcoId) {
        LOGGER.debug("Finding EmployeeRamco by id: {}", employeeramcoId);
        return this.wmGenericDao.findById(employeeramcoId);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public EmployeeRamco findById(Integer employeeramcoId) {
        LOGGER.debug("Finding EmployeeRamco by id: {}", employeeramcoId);
        try {
            return this.wmGenericDao.findById(employeeramcoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmployeeRamco found with id: {}", employeeramcoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public List<EmployeeRamco> findByMultipleIds(List<Integer> employeeramcoIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmployeeRamcos by ids: {}", employeeramcoIds);

        return this.wmGenericDao.findByMultipleIds(employeeramcoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "aio_employeeTransactionManager")
    @Override
    public EmployeeRamco update(EmployeeRamco employeeRamco) {
        LOGGER.debug("Updating EmployeeRamco with information: {}", employeeRamco);

        this.wmGenericDao.update(employeeRamco);
        this.wmGenericDao.refresh(employeeRamco);

        return employeeRamco;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public EmployeeRamco partialUpdate(Integer employeeramcoId, Map<String, Object>employeeRamcoPatch) {
        LOGGER.debug("Partially Updating the EmployeeRamco with id: {}", employeeramcoId);

        EmployeeRamco employeeRamco = getById(employeeramcoId);

        try {
            ObjectReader employeeRamcoReader = this.objectMapper.reader().forType(EmployeeRamco.class).withValueToUpdate(employeeRamco);
            employeeRamco = employeeRamcoReader.readValue(this.objectMapper.writeValueAsString(employeeRamcoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", employeeRamcoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        employeeRamco = update(employeeRamco);

        return employeeRamco;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public EmployeeRamco delete(Integer employeeramcoId) {
        LOGGER.debug("Deleting EmployeeRamco with id: {}", employeeramcoId);
        EmployeeRamco deleted = this.wmGenericDao.findById(employeeramcoId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeRamco found with id: {}", employeeramcoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EmployeeRamco.class.getSimpleName(), employeeramcoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "aio_employeeTransactionManager")
    @Override
    public void delete(EmployeeRamco employeeRamco) {
        LOGGER.debug("Deleting EmployeeRamco with {}", employeeRamco);
        this.wmGenericDao.delete(employeeRamco);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public Page<EmployeeRamco> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeRamcos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public Page<EmployeeRamco> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeRamcos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service aio_employee for table EmployeeRamco to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service aio_employee for table EmployeeRamco to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "aio_employeeTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}