/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.CategoryVendor;
import id.co.aio.procure_to_pay.avm2.CategoryVendorId;


/**
 * ServiceImpl object for domain model class CategoryVendor.
 *
 * @see CategoryVendor
 */
@Service("AVM2.CategoryVendorService")
@Validated
@EntityService(entityClass = CategoryVendor.class, serviceId = "AVM2")
public class CategoryVendorServiceImpl implements CategoryVendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CategoryVendorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.CategoryVendorDao")
    private WMGenericDao<CategoryVendor, CategoryVendorId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CategoryVendor, CategoryVendorId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public CategoryVendor create(CategoryVendor categoryVendor) {
        LOGGER.debug("Creating a new CategoryVendor with information: {}", categoryVendor);

        CategoryVendor categoryVendorCreated = this.wmGenericDao.create(categoryVendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(categoryVendorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public CategoryVendor getById(CategoryVendorId categoryvendorId) {
        LOGGER.debug("Finding CategoryVendor by id: {}", categoryvendorId);
        return this.wmGenericDao.findById(categoryvendorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public CategoryVendor findById(CategoryVendorId categoryvendorId) {
        LOGGER.debug("Finding CategoryVendor by id: {}", categoryvendorId);
        try {
            return this.wmGenericDao.findById(categoryvendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CategoryVendor found with id: {}", categoryvendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<CategoryVendor> findByMultipleIds(List<CategoryVendorId> categoryvendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding CategoryVendors by ids: {}", categoryvendorIds);

        return this.wmGenericDao.findByMultipleIds(categoryvendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public CategoryVendor update(CategoryVendor categoryVendor) {
        LOGGER.debug("Updating CategoryVendor with information: {}", categoryVendor);

        this.wmGenericDao.update(categoryVendor);
        this.wmGenericDao.refresh(categoryVendor);

        return categoryVendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public CategoryVendor partialUpdate(CategoryVendorId categoryvendorId, Map<String, Object>categoryVendorPatch) {
        LOGGER.debug("Partially Updating the CategoryVendor with id: {}", categoryvendorId);

        CategoryVendor categoryVendor = getById(categoryvendorId);

        try {
            ObjectReader categoryVendorReader = this.objectMapper.reader().forType(CategoryVendor.class).withValueToUpdate(categoryVendor);
            categoryVendor = categoryVendorReader.readValue(this.objectMapper.writeValueAsString(categoryVendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", categoryVendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        categoryVendor = update(categoryVendor);

        return categoryVendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public CategoryVendor delete(CategoryVendorId categoryvendorId) {
        LOGGER.debug("Deleting CategoryVendor with id: {}", categoryvendorId);
        CategoryVendor deleted = this.wmGenericDao.findById(categoryvendorId);
        if (deleted == null) {
            LOGGER.debug("No CategoryVendor found with id: {}", categoryvendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CategoryVendor.class.getSimpleName(), categoryvendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(CategoryVendor categoryVendor) {
        LOGGER.debug("Deleting CategoryVendor with {}", categoryVendor);
        this.wmGenericDao.delete(categoryVendor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<CategoryVendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CategoryVendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<CategoryVendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CategoryVendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table CategoryVendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table CategoryVendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}