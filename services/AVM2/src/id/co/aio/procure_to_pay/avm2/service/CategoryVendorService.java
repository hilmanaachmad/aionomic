/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.CategoryVendor;
import id.co.aio.procure_to_pay.avm2.CategoryVendorId;

/**
 * Service object for domain model class {@link CategoryVendor}.
 */
public interface CategoryVendorService {

    /**
     * Creates a new CategoryVendor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CategoryVendor if any.
     *
     * @param categoryVendor Details of the CategoryVendor to be created; value cannot be null.
     * @return The newly created CategoryVendor.
     */
    CategoryVendor create(@Valid CategoryVendor categoryVendor);


	/**
     * Returns CategoryVendor by given id if exists.
     *
     * @param categoryvendorId The id of the CategoryVendor to get; value cannot be null.
     * @return CategoryVendor associated with the given categoryvendorId.
	 * @throws EntityNotFoundException If no CategoryVendor is found.
     */
    CategoryVendor getById(CategoryVendorId categoryvendorId);

    /**
     * Find and return the CategoryVendor by given id if exists, returns null otherwise.
     *
     * @param categoryvendorId The id of the CategoryVendor to get; value cannot be null.
     * @return CategoryVendor associated with the given categoryvendorId.
     */
    CategoryVendor findById(CategoryVendorId categoryvendorId);

	/**
     * Find and return the list of CategoryVendors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param categoryvendorIds The id's of the CategoryVendor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CategoryVendors associated with the given categoryvendorIds.
     */
    List<CategoryVendor> findByMultipleIds(List<CategoryVendorId> categoryvendorIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CategoryVendor. It replaces all fields of the existing CategoryVendor with the given categoryVendor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CategoryVendor if any.
     *
     * @param categoryVendor The details of the CategoryVendor to be updated; value cannot be null.
     * @return The updated CategoryVendor.
     * @throws EntityNotFoundException if no CategoryVendor is found with given input.
     */
    CategoryVendor update(@Valid CategoryVendor categoryVendor);


    /**
     * Partially updates the details of an existing CategoryVendor. It updates only the
     * fields of the existing CategoryVendor which are passed in the categoryVendorPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CategoryVendor if any.
     *
     * @param categoryvendorId The id of the CategoryVendor to be deleted; value cannot be null.
     * @param categoryVendorPatch The partial data of CategoryVendor which is supposed to be updated; value cannot be null.
     * @return The updated CategoryVendor.
     * @throws EntityNotFoundException if no CategoryVendor is found with given input.
     */
    CategoryVendor partialUpdate(CategoryVendorId categoryvendorId, Map<String, Object> categoryVendorPatch);

    /**
     * Deletes an existing CategoryVendor with the given id.
     *
     * @param categoryvendorId The id of the CategoryVendor to be deleted; value cannot be null.
     * @return The deleted CategoryVendor.
     * @throws EntityNotFoundException if no CategoryVendor found with the given id.
     */
    CategoryVendor delete(CategoryVendorId categoryvendorId);

    /**
     * Deletes an existing CategoryVendor with the given object.
     *
     * @param categoryVendor The instance of the CategoryVendor to be deleted; value cannot be null.
     */
    void delete(CategoryVendor categoryVendor);

    /**
     * Find all CategoryVendors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CategoryVendors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CategoryVendor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CategoryVendors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CategoryVendors.
     *
     * @see Pageable
     * @see Page
     */
    Page<CategoryVendor> findAll(String query, Pageable pageable);

    /**
     * Exports all CategoryVendors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CategoryVendors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CategoryVendors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CategoryVendor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}