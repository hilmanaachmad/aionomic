/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTrCatalog;
import id.co.aio.procure_to_pay.avm2.service.TlTrCatalogService;


/**
 * Controller object for domain model class TlTrCatalog.
 * @see TlTrCatalog
 */
@RestController("AVM2.TlTrCatalogController")
@Api(value = "TlTrCatalogController", description = "Exposes APIs to work with TlTrCatalog resource.")
@RequestMapping("/AVM2/TlTrCatalog")
public class TlTrCatalogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrCatalogController.class);

    @Autowired
	@Qualifier("AVM2.TlTrCatalogService")
	private TlTrCatalogService tlTrCatalogService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTrCatalog instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCatalog createTlTrCatalog(@RequestBody TlTrCatalog tlTrCatalog) {
		LOGGER.debug("Create TlTrCatalog with information: {}" , tlTrCatalog);

		tlTrCatalog = tlTrCatalogService.create(tlTrCatalog);
		LOGGER.debug("Created TlTrCatalog with information: {}" , tlTrCatalog);

	    return tlTrCatalog;
	}

    @ApiOperation(value = "Returns the TlTrCatalog instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCatalog getTlTrCatalog(@PathVariable("caId") Integer caId) {
        LOGGER.debug("Getting TlTrCatalog with id: {}" , caId);

        TlTrCatalog foundTlTrCatalog = tlTrCatalogService.getById(caId);
        LOGGER.debug("TlTrCatalog details with id: {}" , foundTlTrCatalog);

        return foundTlTrCatalog;
    }

    @ApiOperation(value = "Updates the TlTrCatalog instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCatalog editTlTrCatalog(@PathVariable("caId") Integer caId, @RequestBody TlTrCatalog tlTrCatalog) {
        LOGGER.debug("Editing TlTrCatalog with id: {}" , tlTrCatalog.getCaId());

        tlTrCatalog.setCaId(caId);
        tlTrCatalog = tlTrCatalogService.update(tlTrCatalog);
        LOGGER.debug("TlTrCatalog details with id: {}" , tlTrCatalog);

        return tlTrCatalog;
    }
    
    @ApiOperation(value = "Partially updates the TlTrCatalog instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCatalog patchTlTrCatalog(@PathVariable("caId") Integer caId, @RequestBody @MapTo(TlTrCatalog.class) Map<String, Object> tlTrCatalogPatch) {
        LOGGER.debug("Partially updating TlTrCatalog with id: {}" , caId);

        TlTrCatalog tlTrCatalog = tlTrCatalogService.partialUpdate(caId, tlTrCatalogPatch);
        LOGGER.debug("TlTrCatalog details after partial update: {}" , tlTrCatalog);

        return tlTrCatalog;
    }

    @ApiOperation(value = "Deletes the TlTrCatalog instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTrCatalog(@PathVariable("caId") Integer caId) {
        LOGGER.debug("Deleting TlTrCatalog with id: {}" , caId);

        TlTrCatalog deletedTlTrCatalog = tlTrCatalogService.delete(caId);

        return deletedTlTrCatalog != null;
    }

    /**
     * @deprecated Use {@link #findTlTrCatalogs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTrCatalog instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrCatalog> searchTlTrCatalogsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTrCatalogs list by query filter:{}", (Object) queryFilters);
        return tlTrCatalogService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrCatalog instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrCatalog> findTlTrCatalogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrCatalogs list by filter:", query);
        return tlTrCatalogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrCatalog instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrCatalog> filterTlTrCatalogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrCatalogs list by filter", query);
        return tlTrCatalogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTrCatalogs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTrCatalogService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTrCatalogsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTrCatalog.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTrCatalogService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTrCatalog instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTrCatalogs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTrCatalogs");
		return tlTrCatalogService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTrCatalogAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTrCatalogService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTrCatalogService instance
	 */
	protected void setTlTrCatalogService(TlTrCatalogService service) {
		this.tlTrCatalogService = service;
	}

}