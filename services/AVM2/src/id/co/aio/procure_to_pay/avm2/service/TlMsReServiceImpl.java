/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsRe;
import id.co.aio.procure_to_pay.avm2.TlMsReId;


/**
 * ServiceImpl object for domain model class TlMsRe.
 *
 * @see TlMsRe
 */
@Service("AVM2.TlMsReService")
@Validated
@EntityService(entityClass = TlMsRe.class, serviceId = "AVM2")
public class TlMsReServiceImpl implements TlMsReService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsReServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsReDao")
    private WMGenericDao<TlMsRe, TlMsReId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsRe, TlMsReId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsRe create(TlMsRe tlMsRe) {
        LOGGER.debug("Creating a new TlMsRe with information: {}", tlMsRe);

        TlMsRe tlMsReCreated = this.wmGenericDao.create(tlMsRe);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsReCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsRe getById(TlMsReId tlmsreId) {
        LOGGER.debug("Finding TlMsRe by id: {}", tlmsreId);
        return this.wmGenericDao.findById(tlmsreId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsRe findById(TlMsReId tlmsreId) {
        LOGGER.debug("Finding TlMsRe by id: {}", tlmsreId);
        try {
            return this.wmGenericDao.findById(tlmsreId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsRe found with id: {}", tlmsreId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsRe> findByMultipleIds(List<TlMsReId> tlmsreIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsRes by ids: {}", tlmsreIds);

        return this.wmGenericDao.findByMultipleIds(tlmsreIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsRe update(TlMsRe tlMsRe) {
        LOGGER.debug("Updating TlMsRe with information: {}", tlMsRe);

        this.wmGenericDao.update(tlMsRe);
        this.wmGenericDao.refresh(tlMsRe);

        return tlMsRe;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsRe partialUpdate(TlMsReId tlmsreId, Map<String, Object>tlMsRePatch) {
        LOGGER.debug("Partially Updating the TlMsRe with id: {}", tlmsreId);

        TlMsRe tlMsRe = getById(tlmsreId);

        try {
            ObjectReader tlMsReReader = this.objectMapper.reader().forType(TlMsRe.class).withValueToUpdate(tlMsRe);
            tlMsRe = tlMsReReader.readValue(this.objectMapper.writeValueAsString(tlMsRePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsRePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsRe = update(tlMsRe);

        return tlMsRe;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsRe delete(TlMsReId tlmsreId) {
        LOGGER.debug("Deleting TlMsRe with id: {}", tlmsreId);
        TlMsRe deleted = this.wmGenericDao.findById(tlmsreId);
        if (deleted == null) {
            LOGGER.debug("No TlMsRe found with id: {}", tlmsreId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsRe.class.getSimpleName(), tlmsreId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsRe tlMsRe) {
        LOGGER.debug("Deleting TlMsRe with {}", tlMsRe);
        this.wmGenericDao.delete(tlMsRe);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsRe> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsRes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsRe> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsRes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsRe to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsRe to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}