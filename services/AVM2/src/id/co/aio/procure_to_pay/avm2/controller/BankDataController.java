/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.BankData;
import id.co.aio.procure_to_pay.avm2.BankDataId;
import id.co.aio.procure_to_pay.avm2.service.BankDataService;


/**
 * Controller object for domain model class BankData.
 * @see BankData
 */
@RestController("AVM2.BankDataController")
@Api(value = "BankDataController", description = "Exposes APIs to work with BankData resource.")
@RequestMapping("/AVM2/BankData")
public class BankDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BankDataController.class);

    @Autowired
	@Qualifier("AVM2.BankDataService")
	private BankDataService bankDataService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BankData instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BankData createBankData(@RequestBody BankData bankData) {
		LOGGER.debug("Create BankData with information: {}" , bankData);

		bankData = bankDataService.create(bankData);
		LOGGER.debug("Created BankData with information: {}" , bankData);

	    return bankData;
	}

    @ApiOperation(value = "Returns the BankData instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BankData getBankData(@RequestParam("mandt") String mandt, @RequestParam("lifnr") String lifnr) {

        BankDataId bankdataId = new BankDataId();
        bankdataId.setMandt(mandt);
        bankdataId.setLifnr(lifnr);

        LOGGER.debug("Getting BankData with id: {}" , bankdataId);
        BankData bankData = bankDataService.getById(bankdataId);
        LOGGER.debug("BankData details with id: {}" , bankData);

        return bankData;
    }



    @ApiOperation(value = "Updates the BankData instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BankData editBankData(@RequestParam("mandt") String mandt, @RequestParam("lifnr") String lifnr, @RequestBody BankData bankData) {

        bankData.setMandt(mandt);
        bankData.setLifnr(lifnr);

        LOGGER.debug("BankData details with id is updated with: {}" , bankData);

        return bankDataService.update(bankData);
    }

	@ApiOperation(value = "Partially updates the  BankData instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BankData patchBankData(@RequestParam("mandt") String mandt, @RequestParam("lifnr") String lifnr, @RequestBody @MapTo(BankData.class) Map<String, Object> bankDataPatch) {

        BankDataId bankdataId = new BankDataId();
        bankdataId.setMandt(mandt);
        bankdataId.setLifnr(lifnr);
        LOGGER.debug("Partially updating BankData with id: {}" , bankdataId);

        BankData bankData = bankDataService.partialUpdate(bankdataId, bankDataPatch);
        LOGGER.debug("BankData details after partial update: {}" , bankData);

        return bankData;
    }


    @ApiOperation(value = "Deletes the BankData instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBankData(@RequestParam("mandt") String mandt, @RequestParam("lifnr") String lifnr) {

        BankDataId bankdataId = new BankDataId();
        bankdataId.setMandt(mandt);
        bankdataId.setLifnr(lifnr);

        LOGGER.debug("Deleting BankData with id: {}" , bankdataId);
        BankData bankData = bankDataService.delete(bankdataId);

        return bankData != null;
    }


    /**
     * @deprecated Use {@link #findBankDatas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BankData instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BankData> searchBankDatasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BankDatas list by query filter:{}", (Object) queryFilters);
        return bankDataService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BankData instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BankData> findBankDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BankDatas list by filter:", query);
        return bankDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BankData instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BankData> filterBankDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BankDatas list by filter", query);
        return bankDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBankDatas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bankDataService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBankDatasAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BankData.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> bankDataService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BankData instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBankDatas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BankDatas");
		return bankDataService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBankDataAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return bankDataService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BankDataService instance
	 */
	protected void setBankDataService(BankDataService service) {
		this.bankDataService = service;
	}

}