/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VwListagree;
import id.co.aio.procure_to_pay.avm2.service.VwListagreeService;


/**
 * Controller object for domain model class VwListagree.
 * @see VwListagree
 */
@RestController("AVM2.VwListagreeController")
@Api(value = "VwListagreeController", description = "Exposes APIs to work with VwListagree resource.")
@RequestMapping("/AVM2/VwListagree")
public class VwListagreeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwListagreeController.class);

    @Autowired
	@Qualifier("AVM2.VwListagreeService")
	private VwListagreeService vwListagreeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VwListagree instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwListagree createVwListagree(@RequestBody VwListagree vwListagree) {
		LOGGER.debug("Create VwListagree with information: {}" , vwListagree);

		vwListagree = vwListagreeService.create(vwListagree);
		LOGGER.debug("Created VwListagree with information: {}" , vwListagree);

	    return vwListagree;
	}

    @ApiOperation(value = "Returns the VwListagree instance associated with the given id.")
    @RequestMapping(value = "/{abVsi:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwListagree getVwListagree(@PathVariable("abVsi") Long abVsi) {
        LOGGER.debug("Getting VwListagree with id: {}" , abVsi);

        VwListagree foundVwListagree = vwListagreeService.getById(abVsi);
        LOGGER.debug("VwListagree details with id: {}" , foundVwListagree);

        return foundVwListagree;
    }

    @ApiOperation(value = "Updates the VwListagree instance associated with the given id.")
    @RequestMapping(value = "/{abVsi:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwListagree editVwListagree(@PathVariable("abVsi") Long abVsi, @RequestBody VwListagree vwListagree) {
        LOGGER.debug("Editing VwListagree with id: {}" , vwListagree.getAbVsi());

        vwListagree.setAbVsi(abVsi);
        vwListagree = vwListagreeService.update(vwListagree);
        LOGGER.debug("VwListagree details with id: {}" , vwListagree);

        return vwListagree;
    }
    
    @ApiOperation(value = "Partially updates the VwListagree instance associated with the given id.")
    @RequestMapping(value = "/{abVsi:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwListagree patchVwListagree(@PathVariable("abVsi") Long abVsi, @RequestBody @MapTo(VwListagree.class) Map<String, Object> vwListagreePatch) {
        LOGGER.debug("Partially updating VwListagree with id: {}" , abVsi);

        VwListagree vwListagree = vwListagreeService.partialUpdate(abVsi, vwListagreePatch);
        LOGGER.debug("VwListagree details after partial update: {}" , vwListagree);

        return vwListagree;
    }

    @ApiOperation(value = "Deletes the VwListagree instance associated with the given id.")
    @RequestMapping(value = "/{abVsi:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVwListagree(@PathVariable("abVsi") Long abVsi) {
        LOGGER.debug("Deleting VwListagree with id: {}" , abVsi);

        VwListagree deletedVwListagree = vwListagreeService.delete(abVsi);

        return deletedVwListagree != null;
    }

    /**
     * @deprecated Use {@link #findVwListagrees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VwListagree instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwListagree> searchVwListagreesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VwListagrees list by query filter:{}", (Object) queryFilters);
        return vwListagreeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwListagree instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwListagree> findVwListagrees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwListagrees list by filter:", query);
        return vwListagreeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwListagree instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwListagree> filterVwListagrees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwListagrees list by filter", query);
        return vwListagreeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVwListagrees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vwListagreeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVwListagreesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VwListagree.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vwListagreeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VwListagree instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVwListagrees( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VwListagrees");
		return vwListagreeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVwListagreeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vwListagreeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VwListagreeService instance
	 */
	protected void setVwListagreeService(VwListagreeService service) {
		this.vwListagreeService = service;
	}

}