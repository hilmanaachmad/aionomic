/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VBank;
import id.co.aio.procure_to_pay.avm2.VBankId;
import id.co.aio.procure_to_pay.avm2.service.VBankService;


/**
 * Controller object for domain model class VBank.
 * @see VBank
 */
@RestController("AVM2.VBankController")
@Api(value = "VBankController", description = "Exposes APIs to work with VBank resource.")
@RequestMapping("/AVM2/VBank")
public class VBankController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBankController.class);

    @Autowired
	@Qualifier("AVM2.VBankService")
	private VBankService vBankService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VBank instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBank createVBank(@RequestBody VBank vbank) {
		LOGGER.debug("Create VBank with information: {}" , vbank);

		vbank = vBankService.create(vbank);
		LOGGER.debug("Created VBank with information: {}" , vbank);

	    return vbank;
	}

    @ApiOperation(value = "Returns the VBank instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBank getVBank(@RequestParam("countryKey") String countryKey, @RequestParam("bankKey") String bankKey) {

        VBankId vbankId = new VBankId();
        vbankId.setCountryKey(countryKey);
        vbankId.setBankKey(bankKey);

        LOGGER.debug("Getting VBank with id: {}" , vbankId);
        VBank vbank = vBankService.getById(vbankId);
        LOGGER.debug("VBank details with id: {}" , vbank);

        return vbank;
    }



    @ApiOperation(value = "Updates the VBank instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBank editVBank(@RequestParam("countryKey") String countryKey, @RequestParam("bankKey") String bankKey, @RequestBody VBank vbank) {

        vbank.setCountryKey(countryKey);
        vbank.setBankKey(bankKey);

        LOGGER.debug("VBank details with id is updated with: {}" , vbank);

        return vBankService.update(vbank);
    }

	@ApiOperation(value = "Partially updates the  VBank instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VBank patchVBank(@RequestParam("countryKey") String countryKey, @RequestParam("bankKey") String bankKey, @RequestBody @MapTo(VBank.class) Map<String, Object> vbankPatch) {

        VBankId vbankId = new VBankId();
        vbankId.setCountryKey(countryKey);
        vbankId.setBankKey(bankKey);
        LOGGER.debug("Partially updating VBank with id: {}" , vbankId);

        VBank vbank = vBankService.partialUpdate(vbankId, vbankPatch);
        LOGGER.debug("VBank details after partial update: {}" , vbank);

        return vbank;
    }


    @ApiOperation(value = "Deletes the VBank instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVBank(@RequestParam("countryKey") String countryKey, @RequestParam("bankKey") String bankKey) {

        VBankId vbankId = new VBankId();
        vbankId.setCountryKey(countryKey);
        vbankId.setBankKey(bankKey);

        LOGGER.debug("Deleting VBank with id: {}" , vbankId);
        VBank vbank = vBankService.delete(vbankId);

        return vbank != null;
    }


    /**
     * @deprecated Use {@link #findVBanks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VBank instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBank> searchVBanksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VBanks list by query filter:{}", (Object) queryFilters);
        return vBankService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBank instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBank> findVBanks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBanks list by filter:", query);
        return vBankService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VBank instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VBank> filterVBanks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VBanks list by filter", query);
        return vBankService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVBanks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vBankService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVBanksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VBank.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vBankService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VBank instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVBanks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VBanks");
		return vBankService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVBankAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vBankService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VBankService instance
	 */
	protected void setVBankService(VBankService service) {
		this.vBankService = service;
	}

}