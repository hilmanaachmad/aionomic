/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsAgpe;
import id.co.aio.procure_to_pay.avm2.service.TlMsAgpeService;


/**
 * Controller object for domain model class TlMsAgpe.
 * @see TlMsAgpe
 */
@RestController("AVM2.TlMsAgpeController")
@Api(value = "TlMsAgpeController", description = "Exposes APIs to work with TlMsAgpe resource.")
@RequestMapping("/AVM2/TlMsAgpe")
public class TlMsAgpeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAgpeController.class);

    @Autowired
	@Qualifier("AVM2.TlMsAgpeService")
	private TlMsAgpeService tlMsAgpeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsAgpe instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAgpe createTlMsAgpe(@RequestBody TlMsAgpe tlMsAgpe) {
		LOGGER.debug("Create TlMsAgpe with information: {}" , tlMsAgpe);

		tlMsAgpe = tlMsAgpeService.create(tlMsAgpe);
		LOGGER.debug("Created TlMsAgpe with information: {}" , tlMsAgpe);

	    return tlMsAgpe;
	}

    @ApiOperation(value = "Returns the TlMsAgpe instance associated with the given id.")
    @RequestMapping(value = "/{abIdagpe:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAgpe getTlMsAgpe(@PathVariable("abIdagpe") Integer abIdagpe) {
        LOGGER.debug("Getting TlMsAgpe with id: {}" , abIdagpe);

        TlMsAgpe foundTlMsAgpe = tlMsAgpeService.getById(abIdagpe);
        LOGGER.debug("TlMsAgpe details with id: {}" , foundTlMsAgpe);

        return foundTlMsAgpe;
    }

    @ApiOperation(value = "Updates the TlMsAgpe instance associated with the given id.")
    @RequestMapping(value = "/{abIdagpe:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAgpe editTlMsAgpe(@PathVariable("abIdagpe") Integer abIdagpe, @RequestBody TlMsAgpe tlMsAgpe) {
        LOGGER.debug("Editing TlMsAgpe with id: {}" , tlMsAgpe.getAbIdagpe());

        tlMsAgpe.setAbIdagpe(abIdagpe);
        tlMsAgpe = tlMsAgpeService.update(tlMsAgpe);
        LOGGER.debug("TlMsAgpe details with id: {}" , tlMsAgpe);

        return tlMsAgpe;
    }
    
    @ApiOperation(value = "Partially updates the TlMsAgpe instance associated with the given id.")
    @RequestMapping(value = "/{abIdagpe:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAgpe patchTlMsAgpe(@PathVariable("abIdagpe") Integer abIdagpe, @RequestBody @MapTo(TlMsAgpe.class) Map<String, Object> tlMsAgpePatch) {
        LOGGER.debug("Partially updating TlMsAgpe with id: {}" , abIdagpe);

        TlMsAgpe tlMsAgpe = tlMsAgpeService.partialUpdate(abIdagpe, tlMsAgpePatch);
        LOGGER.debug("TlMsAgpe details after partial update: {}" , tlMsAgpe);

        return tlMsAgpe;
    }

    @ApiOperation(value = "Deletes the TlMsAgpe instance associated with the given id.")
    @RequestMapping(value = "/{abIdagpe:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsAgpe(@PathVariable("abIdagpe") Integer abIdagpe) {
        LOGGER.debug("Deleting TlMsAgpe with id: {}" , abIdagpe);

        TlMsAgpe deletedTlMsAgpe = tlMsAgpeService.delete(abIdagpe);

        return deletedTlMsAgpe != null;
    }

    /**
     * @deprecated Use {@link #findTlMsAgpes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsAgpe instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAgpe> searchTlMsAgpesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsAgpes list by query filter:{}", (Object) queryFilters);
        return tlMsAgpeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAgpe instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAgpe> findTlMsAgpes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAgpes list by filter:", query);
        return tlMsAgpeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAgpe instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAgpe> filterTlMsAgpes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAgpes list by filter", query);
        return tlMsAgpeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsAgpes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsAgpeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsAgpesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsAgpe.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsAgpeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsAgpe instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsAgpes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsAgpes");
		return tlMsAgpeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsAgpeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsAgpeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsAgpeService instance
	 */
	protected void setTlMsAgpeService(TlMsAgpeService service) {
		this.tlMsAgpeService = service;
	}

}