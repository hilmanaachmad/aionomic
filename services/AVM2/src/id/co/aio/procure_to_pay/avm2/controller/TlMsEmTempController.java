/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsEmTemp;
import id.co.aio.procure_to_pay.avm2.service.TlMsEmTempService;


/**
 * Controller object for domain model class TlMsEmTemp.
 * @see TlMsEmTemp
 */
@RestController("AVM2.TlMsEmTempController")
@Api(value = "TlMsEmTempController", description = "Exposes APIs to work with TlMsEmTemp resource.")
@RequestMapping("/AVM2/TlMsEmTemp")
public class TlMsEmTempController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsEmTempController.class);

    @Autowired
	@Qualifier("AVM2.TlMsEmTempService")
	private TlMsEmTempService tlMsEmTempService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsEmTemp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsEmTemp createTlMsEmTemp(@RequestBody TlMsEmTemp tlMsEmTemp) {
		LOGGER.debug("Create TlMsEmTemp with information: {}" , tlMsEmTemp);

		tlMsEmTemp = tlMsEmTempService.create(tlMsEmTemp);
		LOGGER.debug("Created TlMsEmTemp with information: {}" , tlMsEmTemp);

	    return tlMsEmTemp;
	}

    @ApiOperation(value = "Returns the TlMsEmTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdil:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsEmTemp getTlMsEmTemp(@PathVariable("abIdil") Integer abIdil) {
        LOGGER.debug("Getting TlMsEmTemp with id: {}" , abIdil);

        TlMsEmTemp foundTlMsEmTemp = tlMsEmTempService.getById(abIdil);
        LOGGER.debug("TlMsEmTemp details with id: {}" , foundTlMsEmTemp);

        return foundTlMsEmTemp;
    }

    @ApiOperation(value = "Updates the TlMsEmTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdil:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsEmTemp editTlMsEmTemp(@PathVariable("abIdil") Integer abIdil, @RequestBody TlMsEmTemp tlMsEmTemp) {
        LOGGER.debug("Editing TlMsEmTemp with id: {}" , tlMsEmTemp.getAbIdil());

        tlMsEmTemp.setAbIdil(abIdil);
        tlMsEmTemp = tlMsEmTempService.update(tlMsEmTemp);
        LOGGER.debug("TlMsEmTemp details with id: {}" , tlMsEmTemp);

        return tlMsEmTemp;
    }
    
    @ApiOperation(value = "Partially updates the TlMsEmTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdil:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsEmTemp patchTlMsEmTemp(@PathVariable("abIdil") Integer abIdil, @RequestBody @MapTo(TlMsEmTemp.class) Map<String, Object> tlMsEmTempPatch) {
        LOGGER.debug("Partially updating TlMsEmTemp with id: {}" , abIdil);

        TlMsEmTemp tlMsEmTemp = tlMsEmTempService.partialUpdate(abIdil, tlMsEmTempPatch);
        LOGGER.debug("TlMsEmTemp details after partial update: {}" , tlMsEmTemp);

        return tlMsEmTemp;
    }

    @ApiOperation(value = "Deletes the TlMsEmTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdil:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsEmTemp(@PathVariable("abIdil") Integer abIdil) {
        LOGGER.debug("Deleting TlMsEmTemp with id: {}" , abIdil);

        TlMsEmTemp deletedTlMsEmTemp = tlMsEmTempService.delete(abIdil);

        return deletedTlMsEmTemp != null;
    }

    /**
     * @deprecated Use {@link #findTlMsEmTemps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsEmTemp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsEmTemp> searchTlMsEmTempsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsEmTemps list by query filter:{}", (Object) queryFilters);
        return tlMsEmTempService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsEmTemp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsEmTemp> findTlMsEmTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsEmTemps list by filter:", query);
        return tlMsEmTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsEmTemp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsEmTemp> filterTlMsEmTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsEmTemps list by filter", query);
        return tlMsEmTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsEmTemps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsEmTempService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsEmTempsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsEmTemp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsEmTempService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsEmTemp instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsEmTemps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsEmTemps");
		return tlMsEmTempService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsEmTempAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsEmTempService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsEmTempService instance
	 */
	protected void setTlMsEmTempService(TlMsEmTempService service) {
		this.tlMsEmTempService = service;
	}

}