/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrStce;
import id.co.aio.procure_to_pay.avm2.TlTrStceId;


/**
 * ServiceImpl object for domain model class TlTrStce.
 *
 * @see TlTrStce
 */
@Service("AVM2.TlTrStceService")
@Validated
@EntityService(entityClass = TlTrStce.class, serviceId = "AVM2")
public class TlTrStceServiceImpl implements TlTrStceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrStceServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrStceDao")
    private WMGenericDao<TlTrStce, TlTrStceId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrStce, TlTrStceId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrStce create(TlTrStce tlTrStce) {
        LOGGER.debug("Creating a new TlTrStce with information: {}", tlTrStce);

        TlTrStce tlTrStceCreated = this.wmGenericDao.create(tlTrStce);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrStceCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrStce getById(TlTrStceId tltrstceId) {
        LOGGER.debug("Finding TlTrStce by id: {}", tltrstceId);
        return this.wmGenericDao.findById(tltrstceId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrStce findById(TlTrStceId tltrstceId) {
        LOGGER.debug("Finding TlTrStce by id: {}", tltrstceId);
        try {
            return this.wmGenericDao.findById(tltrstceId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrStce found with id: {}", tltrstceId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrStce> findByMultipleIds(List<TlTrStceId> tltrstceIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrStces by ids: {}", tltrstceIds);

        return this.wmGenericDao.findByMultipleIds(tltrstceIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrStce update(TlTrStce tlTrStce) {
        LOGGER.debug("Updating TlTrStce with information: {}", tlTrStce);

        this.wmGenericDao.update(tlTrStce);
        this.wmGenericDao.refresh(tlTrStce);

        return tlTrStce;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrStce partialUpdate(TlTrStceId tltrstceId, Map<String, Object>tlTrStcePatch) {
        LOGGER.debug("Partially Updating the TlTrStce with id: {}", tltrstceId);

        TlTrStce tlTrStce = getById(tltrstceId);

        try {
            ObjectReader tlTrStceReader = this.objectMapper.reader().forType(TlTrStce.class).withValueToUpdate(tlTrStce);
            tlTrStce = tlTrStceReader.readValue(this.objectMapper.writeValueAsString(tlTrStcePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrStcePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrStce = update(tlTrStce);

        return tlTrStce;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrStce delete(TlTrStceId tltrstceId) {
        LOGGER.debug("Deleting TlTrStce with id: {}", tltrstceId);
        TlTrStce deleted = this.wmGenericDao.findById(tltrstceId);
        if (deleted == null) {
            LOGGER.debug("No TlTrStce found with id: {}", tltrstceId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrStce.class.getSimpleName(), tltrstceId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrStce tlTrStce) {
        LOGGER.debug("Deleting TlTrStce with {}", tlTrStce);
        this.wmGenericDao.delete(tlTrStce);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrStce> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrStces");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrStce> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrStces");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrStce to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrStce to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}