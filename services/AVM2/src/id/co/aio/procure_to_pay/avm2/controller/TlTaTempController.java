/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTaTemp;
import id.co.aio.procure_to_pay.avm2.service.TlTaTempService;


/**
 * Controller object for domain model class TlTaTemp.
 * @see TlTaTemp
 */
@RestController("AVM2.TlTaTempController")
@Api(value = "TlTaTempController", description = "Exposes APIs to work with TlTaTemp resource.")
@RequestMapping("/AVM2/TlTaTemp")
public class TlTaTempController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTaTempController.class);

    @Autowired
	@Qualifier("AVM2.TlTaTempService")
	private TlTaTempService tlTaTempService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTaTemp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTaTemp createTlTaTemp(@RequestBody TlTaTemp tlTaTemp) {
		LOGGER.debug("Create TlTaTemp with information: {}" , tlTaTemp);

		tlTaTemp = tlTaTempService.create(tlTaTemp);
		LOGGER.debug("Created TlTaTemp with information: {}" , tlTaTemp);

	    return tlTaTemp;
	}

    @ApiOperation(value = "Returns the TlTaTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdor:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTaTemp getTlTaTemp(@PathVariable("abIdor") Integer abIdor) {
        LOGGER.debug("Getting TlTaTemp with id: {}" , abIdor);

        TlTaTemp foundTlTaTemp = tlTaTempService.getById(abIdor);
        LOGGER.debug("TlTaTemp details with id: {}" , foundTlTaTemp);

        return foundTlTaTemp;
    }

    @ApiOperation(value = "Updates the TlTaTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdor:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTaTemp editTlTaTemp(@PathVariable("abIdor") Integer abIdor, @RequestBody TlTaTemp tlTaTemp) {
        LOGGER.debug("Editing TlTaTemp with id: {}" , tlTaTemp.getAbIdor());

        tlTaTemp.setAbIdor(abIdor);
        tlTaTemp = tlTaTempService.update(tlTaTemp);
        LOGGER.debug("TlTaTemp details with id: {}" , tlTaTemp);

        return tlTaTemp;
    }
    
    @ApiOperation(value = "Partially updates the TlTaTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdor:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTaTemp patchTlTaTemp(@PathVariable("abIdor") Integer abIdor, @RequestBody @MapTo(TlTaTemp.class) Map<String, Object> tlTaTempPatch) {
        LOGGER.debug("Partially updating TlTaTemp with id: {}" , abIdor);

        TlTaTemp tlTaTemp = tlTaTempService.partialUpdate(abIdor, tlTaTempPatch);
        LOGGER.debug("TlTaTemp details after partial update: {}" , tlTaTemp);

        return tlTaTemp;
    }

    @ApiOperation(value = "Deletes the TlTaTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdor:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTaTemp(@PathVariable("abIdor") Integer abIdor) {
        LOGGER.debug("Deleting TlTaTemp with id: {}" , abIdor);

        TlTaTemp deletedTlTaTemp = tlTaTempService.delete(abIdor);

        return deletedTlTaTemp != null;
    }

    /**
     * @deprecated Use {@link #findTlTaTemps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTaTemp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTaTemp> searchTlTaTempsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTaTemps list by query filter:{}", (Object) queryFilters);
        return tlTaTempService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTaTemp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTaTemp> findTlTaTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTaTemps list by filter:", query);
        return tlTaTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTaTemp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTaTemp> filterTlTaTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTaTemps list by filter", query);
        return tlTaTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTaTemps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTaTempService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTaTempsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTaTemp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTaTempService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTaTemp instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTaTemps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTaTemps");
		return tlTaTempService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTaTempAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTaTempService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTaTempService instance
	 */
	protected void setTlTaTempService(TlTaTempService service) {
		this.tlTaTempService = service;
	}

}