/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsLo;
import id.co.aio.procure_to_pay.avm2.service.TlMsLoService;


/**
 * Controller object for domain model class TlMsLo.
 * @see TlMsLo
 */
@RestController("AVM2.TlMsLoController")
@Api(value = "TlMsLoController", description = "Exposes APIs to work with TlMsLo resource.")
@RequestMapping("/AVM2/TlMsLo")
public class TlMsLoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsLoController.class);

    @Autowired
	@Qualifier("AVM2.TlMsLoService")
	private TlMsLoService tlMsLoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsLo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLo createTlMsLo(@RequestBody TlMsLo tlMsLo) {
		LOGGER.debug("Create TlMsLo with information: {}" , tlMsLo);

		tlMsLo = tlMsLoService.create(tlMsLo);
		LOGGER.debug("Created TlMsLo with information: {}" , tlMsLo);

	    return tlMsLo;
	}

    @ApiOperation(value = "Returns the TlMsLo instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLo getTlMsLo(@PathVariable("abNoukka") String abNoukka) {
        LOGGER.debug("Getting TlMsLo with id: {}" , abNoukka);

        TlMsLo foundTlMsLo = tlMsLoService.getById(abNoukka);
        LOGGER.debug("TlMsLo details with id: {}" , foundTlMsLo);

        return foundTlMsLo;
    }

    @ApiOperation(value = "Updates the TlMsLo instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLo editTlMsLo(@PathVariable("abNoukka") String abNoukka, @RequestBody TlMsLo tlMsLo) {
        LOGGER.debug("Editing TlMsLo with id: {}" , tlMsLo.getAbNoukka());

        tlMsLo.setAbNoukka(abNoukka);
        tlMsLo = tlMsLoService.update(tlMsLo);
        LOGGER.debug("TlMsLo details with id: {}" , tlMsLo);

        return tlMsLo;
    }
    
    @ApiOperation(value = "Partially updates the TlMsLo instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLo patchTlMsLo(@PathVariable("abNoukka") String abNoukka, @RequestBody @MapTo(TlMsLo.class) Map<String, Object> tlMsLoPatch) {
        LOGGER.debug("Partially updating TlMsLo with id: {}" , abNoukka);

        TlMsLo tlMsLo = tlMsLoService.partialUpdate(abNoukka, tlMsLoPatch);
        LOGGER.debug("TlMsLo details after partial update: {}" , tlMsLo);

        return tlMsLo;
    }

    @ApiOperation(value = "Deletes the TlMsLo instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsLo(@PathVariable("abNoukka") String abNoukka) {
        LOGGER.debug("Deleting TlMsLo with id: {}" , abNoukka);

        TlMsLo deletedTlMsLo = tlMsLoService.delete(abNoukka);

        return deletedTlMsLo != null;
    }

    /**
     * @deprecated Use {@link #findTlMsLos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsLo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsLo> searchTlMsLosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsLos list by query filter:{}", (Object) queryFilters);
        return tlMsLoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsLo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsLo> findTlMsLos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsLos list by filter:", query);
        return tlMsLoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsLo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsLo> filterTlMsLos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsLos list by filter", query);
        return tlMsLoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsLos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsLoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsLosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsLo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsLoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsLo instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsLos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsLos");
		return tlMsLoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsLoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsLoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsLoService instance
	 */
	protected void setTlMsLoService(TlMsLoService service) {
		this.tlMsLoService = service;
	}

}