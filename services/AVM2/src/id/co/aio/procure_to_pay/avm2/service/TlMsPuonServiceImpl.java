/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsPuon;


/**
 * ServiceImpl object for domain model class TlMsPuon.
 *
 * @see TlMsPuon
 */
@Service("AVM2.TlMsPuonService")
@Validated
@EntityService(entityClass = TlMsPuon.class, serviceId = "AVM2")
public class TlMsPuonServiceImpl implements TlMsPuonService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsPuonServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsPuonDao")
    private WMGenericDao<TlMsPuon, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsPuon, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuon create(TlMsPuon tlMsPuon) {
        LOGGER.debug("Creating a new TlMsPuon with information: {}", tlMsPuon);

        TlMsPuon tlMsPuonCreated = this.wmGenericDao.create(tlMsPuon);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsPuonCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsPuon getById(Integer tlmspuonId) {
        LOGGER.debug("Finding TlMsPuon by id: {}", tlmspuonId);
        return this.wmGenericDao.findById(tlmspuonId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsPuon findById(Integer tlmspuonId) {
        LOGGER.debug("Finding TlMsPuon by id: {}", tlmspuonId);
        try {
            return this.wmGenericDao.findById(tlmspuonId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsPuon found with id: {}", tlmspuonId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsPuon> findByMultipleIds(List<Integer> tlmspuonIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsPuons by ids: {}", tlmspuonIds);

        return this.wmGenericDao.findByMultipleIds(tlmspuonIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsPuon update(TlMsPuon tlMsPuon) {
        LOGGER.debug("Updating TlMsPuon with information: {}", tlMsPuon);

        this.wmGenericDao.update(tlMsPuon);
        this.wmGenericDao.refresh(tlMsPuon);

        return tlMsPuon;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuon partialUpdate(Integer tlmspuonId, Map<String, Object>tlMsPuonPatch) {
        LOGGER.debug("Partially Updating the TlMsPuon with id: {}", tlmspuonId);

        TlMsPuon tlMsPuon = getById(tlmspuonId);

        try {
            ObjectReader tlMsPuonReader = this.objectMapper.reader().forType(TlMsPuon.class).withValueToUpdate(tlMsPuon);
            tlMsPuon = tlMsPuonReader.readValue(this.objectMapper.writeValueAsString(tlMsPuonPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsPuonPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsPuon = update(tlMsPuon);

        return tlMsPuon;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuon delete(Integer tlmspuonId) {
        LOGGER.debug("Deleting TlMsPuon with id: {}", tlmspuonId);
        TlMsPuon deleted = this.wmGenericDao.findById(tlmspuonId);
        if (deleted == null) {
            LOGGER.debug("No TlMsPuon found with id: {}", tlmspuonId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsPuon.class.getSimpleName(), tlmspuonId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsPuon tlMsPuon) {
        LOGGER.debug("Deleting TlMsPuon with {}", tlMsPuon);
        this.wmGenericDao.delete(tlMsPuon);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsPuon> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsPuons");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsPuon> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsPuons");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsPuon to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsPuon to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}