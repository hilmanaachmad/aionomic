/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsPuonFina;


/**
 * ServiceImpl object for domain model class TlMsPuonFina.
 *
 * @see TlMsPuonFina
 */
@Service("AVM2.TlMsPuonFinaService")
@Validated
@EntityService(entityClass = TlMsPuonFina.class, serviceId = "AVM2")
public class TlMsPuonFinaServiceImpl implements TlMsPuonFinaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsPuonFinaServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsPuonFinaDao")
    private WMGenericDao<TlMsPuonFina, Double> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsPuonFina, Double> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuonFina create(TlMsPuonFina tlMsPuonFina) {
        LOGGER.debug("Creating a new TlMsPuonFina with information: {}", tlMsPuonFina);

        TlMsPuonFina tlMsPuonFinaCreated = this.wmGenericDao.create(tlMsPuonFina);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsPuonFinaCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsPuonFina getById(Double tlmspuonfinaId) {
        LOGGER.debug("Finding TlMsPuonFina by id: {}", tlmspuonfinaId);
        return this.wmGenericDao.findById(tlmspuonfinaId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsPuonFina findById(Double tlmspuonfinaId) {
        LOGGER.debug("Finding TlMsPuonFina by id: {}", tlmspuonfinaId);
        try {
            return this.wmGenericDao.findById(tlmspuonfinaId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsPuonFina found with id: {}", tlmspuonfinaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsPuonFina> findByMultipleIds(List<Double> tlmspuonfinaIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsPuonFinas by ids: {}", tlmspuonfinaIds);

        return this.wmGenericDao.findByMultipleIds(tlmspuonfinaIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsPuonFina update(TlMsPuonFina tlMsPuonFina) {
        LOGGER.debug("Updating TlMsPuonFina with information: {}", tlMsPuonFina);

        this.wmGenericDao.update(tlMsPuonFina);
        this.wmGenericDao.refresh(tlMsPuonFina);

        return tlMsPuonFina;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuonFina partialUpdate(Double tlmspuonfinaId, Map<String, Object>tlMsPuonFinaPatch) {
        LOGGER.debug("Partially Updating the TlMsPuonFina with id: {}", tlmspuonfinaId);

        TlMsPuonFina tlMsPuonFina = getById(tlmspuonfinaId);

        try {
            ObjectReader tlMsPuonFinaReader = this.objectMapper.reader().forType(TlMsPuonFina.class).withValueToUpdate(tlMsPuonFina);
            tlMsPuonFina = tlMsPuonFinaReader.readValue(this.objectMapper.writeValueAsString(tlMsPuonFinaPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsPuonFinaPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsPuonFina = update(tlMsPuonFina);

        return tlMsPuonFina;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuonFina delete(Double tlmspuonfinaId) {
        LOGGER.debug("Deleting TlMsPuonFina with id: {}", tlmspuonfinaId);
        TlMsPuonFina deleted = this.wmGenericDao.findById(tlmspuonfinaId);
        if (deleted == null) {
            LOGGER.debug("No TlMsPuonFina found with id: {}", tlmspuonfinaId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsPuonFina.class.getSimpleName(), tlmspuonfinaId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsPuonFina tlMsPuonFina) {
        LOGGER.debug("Deleting TlMsPuonFina with {}", tlMsPuonFina);
        this.wmGenericDao.delete(tlMsPuonFina);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsPuonFina> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsPuonFinas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsPuonFina> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsPuonFinas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsPuonFina to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsPuonFina to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}