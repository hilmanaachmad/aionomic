/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAgpe;


/**
 * ServiceImpl object for domain model class TlMsAgpe.
 *
 * @see TlMsAgpe
 */
@Service("AVM2.TlMsAgpeService")
@Validated
@EntityService(entityClass = TlMsAgpe.class, serviceId = "AVM2")
public class TlMsAgpeServiceImpl implements TlMsAgpeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAgpeServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsAgpeDao")
    private WMGenericDao<TlMsAgpe, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsAgpe, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAgpe create(TlMsAgpe tlMsAgpe) {
        LOGGER.debug("Creating a new TlMsAgpe with information: {}", tlMsAgpe);

        TlMsAgpe tlMsAgpeCreated = this.wmGenericDao.create(tlMsAgpe);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsAgpeCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAgpe getById(Integer tlmsagpeId) {
        LOGGER.debug("Finding TlMsAgpe by id: {}", tlmsagpeId);
        return this.wmGenericDao.findById(tlmsagpeId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAgpe findById(Integer tlmsagpeId) {
        LOGGER.debug("Finding TlMsAgpe by id: {}", tlmsagpeId);
        try {
            return this.wmGenericDao.findById(tlmsagpeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsAgpe found with id: {}", tlmsagpeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsAgpe> findByMultipleIds(List<Integer> tlmsagpeIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsAgpes by ids: {}", tlmsagpeIds);

        return this.wmGenericDao.findByMultipleIds(tlmsagpeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsAgpe update(TlMsAgpe tlMsAgpe) {
        LOGGER.debug("Updating TlMsAgpe with information: {}", tlMsAgpe);

        this.wmGenericDao.update(tlMsAgpe);
        this.wmGenericDao.refresh(tlMsAgpe);

        return tlMsAgpe;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAgpe partialUpdate(Integer tlmsagpeId, Map<String, Object>tlMsAgpePatch) {
        LOGGER.debug("Partially Updating the TlMsAgpe with id: {}", tlmsagpeId);

        TlMsAgpe tlMsAgpe = getById(tlmsagpeId);

        try {
            ObjectReader tlMsAgpeReader = this.objectMapper.reader().forType(TlMsAgpe.class).withValueToUpdate(tlMsAgpe);
            tlMsAgpe = tlMsAgpeReader.readValue(this.objectMapper.writeValueAsString(tlMsAgpePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsAgpePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsAgpe = update(tlMsAgpe);

        return tlMsAgpe;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAgpe delete(Integer tlmsagpeId) {
        LOGGER.debug("Deleting TlMsAgpe with id: {}", tlmsagpeId);
        TlMsAgpe deleted = this.wmGenericDao.findById(tlmsagpeId);
        if (deleted == null) {
            LOGGER.debug("No TlMsAgpe found with id: {}", tlmsagpeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsAgpe.class.getSimpleName(), tlmsagpeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsAgpe tlMsAgpe) {
        LOGGER.debug("Deleting TlMsAgpe with {}", tlMsAgpe);
        this.wmGenericDao.delete(tlMsAgpe);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAgpe> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAgpes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAgpe> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAgpes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAgpe to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAgpe to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}