/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VwKontrakOri;
import id.co.aio.procure_to_pay.avm2.service.VwKontrakOriService;


/**
 * Controller object for domain model class VwKontrakOri.
 * @see VwKontrakOri
 */
@RestController("AVM2.VwKontrakOriController")
@Api(value = "VwKontrakOriController", description = "Exposes APIs to work with VwKontrakOri resource.")
@RequestMapping("/AVM2/VwKontrakOri")
public class VwKontrakOriController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwKontrakOriController.class);

    @Autowired
	@Qualifier("AVM2.VwKontrakOriService")
	private VwKontrakOriService vwKontrakOriService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VwKontrakOri instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrakOri createVwKontrakOri(@RequestBody VwKontrakOri vwKontrakOri) {
		LOGGER.debug("Create VwKontrakOri with information: {}" , vwKontrakOri);

		vwKontrakOri = vwKontrakOriService.create(vwKontrakOri);
		LOGGER.debug("Created VwKontrakOri with information: {}" , vwKontrakOri);

	    return vwKontrakOri;
	}

    @ApiOperation(value = "Returns the VwKontrakOri instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrakOri getVwKontrakOri(@PathVariable("abNaor") String abNaor) {
        LOGGER.debug("Getting VwKontrakOri with id: {}" , abNaor);

        VwKontrakOri foundVwKontrakOri = vwKontrakOriService.getById(abNaor);
        LOGGER.debug("VwKontrakOri details with id: {}" , foundVwKontrakOri);

        return foundVwKontrakOri;
    }

    @ApiOperation(value = "Updates the VwKontrakOri instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrakOri editVwKontrakOri(@PathVariable("abNaor") String abNaor, @RequestBody VwKontrakOri vwKontrakOri) {
        LOGGER.debug("Editing VwKontrakOri with id: {}" , vwKontrakOri.getAbNaor());

        vwKontrakOri.setAbNaor(abNaor);
        vwKontrakOri = vwKontrakOriService.update(vwKontrakOri);
        LOGGER.debug("VwKontrakOri details with id: {}" , vwKontrakOri);

        return vwKontrakOri;
    }
    
    @ApiOperation(value = "Partially updates the VwKontrakOri instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrakOri patchVwKontrakOri(@PathVariable("abNaor") String abNaor, @RequestBody @MapTo(VwKontrakOri.class) Map<String, Object> vwKontrakOriPatch) {
        LOGGER.debug("Partially updating VwKontrakOri with id: {}" , abNaor);

        VwKontrakOri vwKontrakOri = vwKontrakOriService.partialUpdate(abNaor, vwKontrakOriPatch);
        LOGGER.debug("VwKontrakOri details after partial update: {}" , vwKontrakOri);

        return vwKontrakOri;
    }

    @ApiOperation(value = "Deletes the VwKontrakOri instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVwKontrakOri(@PathVariable("abNaor") String abNaor) {
        LOGGER.debug("Deleting VwKontrakOri with id: {}" , abNaor);

        VwKontrakOri deletedVwKontrakOri = vwKontrakOriService.delete(abNaor);

        return deletedVwKontrakOri != null;
    }

    /**
     * @deprecated Use {@link #findVwKontrakOris(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VwKontrakOri instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwKontrakOri> searchVwKontrakOrisByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VwKontrakOris list by query filter:{}", (Object) queryFilters);
        return vwKontrakOriService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwKontrakOri instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwKontrakOri> findVwKontrakOris(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwKontrakOris list by filter:", query);
        return vwKontrakOriService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwKontrakOri instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwKontrakOri> filterVwKontrakOris(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwKontrakOris list by filter", query);
        return vwKontrakOriService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVwKontrakOris(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vwKontrakOriService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVwKontrakOrisAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VwKontrakOri.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vwKontrakOriService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VwKontrakOri instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVwKontrakOris( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VwKontrakOris");
		return vwKontrakOriService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVwKontrakOriAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vwKontrakOriService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VwKontrakOriService instance
	 */
	protected void setVwKontrakOriService(VwKontrakOriService service) {
		this.vwKontrakOriService = service;
	}

}