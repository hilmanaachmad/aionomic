/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VBank;
import id.co.aio.procure_to_pay.avm2.VBankId;


/**
 * ServiceImpl object for domain model class VBank.
 *
 * @see VBank
 */
@Service("AVM2.VBankService")
@Validated
@EntityService(entityClass = VBank.class, serviceId = "AVM2")
public class VBankServiceImpl implements VBankService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VBankServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VBankDao")
    private WMGenericDao<VBank, VBankId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VBank, VBankId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VBank create(VBank vbank) {
        LOGGER.debug("Creating a new VBank with information: {}", vbank);

        VBank vbankCreated = this.wmGenericDao.create(vbank);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vbankCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VBank getById(VBankId vbankId) {
        LOGGER.debug("Finding VBank by id: {}", vbankId);
        return this.wmGenericDao.findById(vbankId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VBank findById(VBankId vbankId) {
        LOGGER.debug("Finding VBank by id: {}", vbankId);
        try {
            return this.wmGenericDao.findById(vbankId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VBank found with id: {}", vbankId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VBank> findByMultipleIds(List<VBankId> vbankIds, boolean orderedReturn) {
        LOGGER.debug("Finding VBanks by ids: {}", vbankIds);

        return this.wmGenericDao.findByMultipleIds(vbankIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VBank update(VBank vbank) {
        LOGGER.debug("Updating VBank with information: {}", vbank);

        this.wmGenericDao.update(vbank);
        this.wmGenericDao.refresh(vbank);

        return vbank;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VBank partialUpdate(VBankId vbankId, Map<String, Object>vbankPatch) {
        LOGGER.debug("Partially Updating the VBank with id: {}", vbankId);

        VBank vbank = getById(vbankId);

        try {
            ObjectReader vbankReader = this.objectMapper.reader().forType(VBank.class).withValueToUpdate(vbank);
            vbank = vbankReader.readValue(this.objectMapper.writeValueAsString(vbankPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vbankPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vbank = update(vbank);

        return vbank;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VBank delete(VBankId vbankId) {
        LOGGER.debug("Deleting VBank with id: {}", vbankId);
        VBank deleted = this.wmGenericDao.findById(vbankId);
        if (deleted == null) {
            LOGGER.debug("No VBank found with id: {}", vbankId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VBank.class.getSimpleName(), vbankId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VBank vbank) {
        LOGGER.debug("Deleting VBank with {}", vbank);
        this.wmGenericDao.delete(vbank);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VBank> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VBanks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VBank> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VBanks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VBank to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VBank to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}