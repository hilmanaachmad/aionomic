/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VVendor;
import id.co.aio.procure_to_pay.avm2.service.VVendorService;


/**
 * Controller object for domain model class VVendor.
 * @see VVendor
 */
@RestController("AVM2.VVendorController")
@Api(value = "VVendorController", description = "Exposes APIs to work with VVendor resource.")
@RequestMapping("/AVM2/VVendor")
public class VVendorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VVendorController.class);

    @Autowired
	@Qualifier("AVM2.VVendorService")
	private VVendorService vVendorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VVendor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendor createVVendor(@RequestBody VVendor vvendor) {
		LOGGER.debug("Create VVendor with information: {}" , vvendor);

		vvendor = vVendorService.create(vvendor);
		LOGGER.debug("Created VVendor with information: {}" , vvendor);

	    return vvendor;
	}

    @ApiOperation(value = "Returns the VVendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendor getVVendor(@PathVariable("vendorCode") String vendorCode) {
        LOGGER.debug("Getting VVendor with id: {}" , vendorCode);

        VVendor foundVVendor = vVendorService.getById(vendorCode);
        LOGGER.debug("VVendor details with id: {}" , foundVVendor);

        return foundVVendor;
    }

    @ApiOperation(value = "Updates the VVendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendor editVVendor(@PathVariable("vendorCode") String vendorCode, @RequestBody VVendor vvendor) {
        LOGGER.debug("Editing VVendor with id: {}" , vvendor.getVendorCode());

        vvendor.setVendorCode(vendorCode);
        vvendor = vVendorService.update(vvendor);
        LOGGER.debug("VVendor details with id: {}" , vvendor);

        return vvendor;
    }
    
    @ApiOperation(value = "Partially updates the VVendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendor patchVVendor(@PathVariable("vendorCode") String vendorCode, @RequestBody @MapTo(VVendor.class) Map<String, Object> vvendorPatch) {
        LOGGER.debug("Partially updating VVendor with id: {}" , vendorCode);

        VVendor vvendor = vVendorService.partialUpdate(vendorCode, vvendorPatch);
        LOGGER.debug("VVendor details after partial update: {}" , vvendor);

        return vvendor;
    }

    @ApiOperation(value = "Deletes the VVendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVVendor(@PathVariable("vendorCode") String vendorCode) {
        LOGGER.debug("Deleting VVendor with id: {}" , vendorCode);

        VVendor deletedVVendor = vVendorService.delete(vendorCode);

        return deletedVVendor != null;
    }

    /**
     * @deprecated Use {@link #findVVendors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VVendor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendor> searchVVendorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VVendors list by query filter:{}", (Object) queryFilters);
        return vVendorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VVendor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendor> findVVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VVendors list by filter:", query);
        return vVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VVendor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendor> filterVVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VVendors list by filter", query);
        return vVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVVendors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vVendorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVVendorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VVendor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vVendorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VVendor instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVVendors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VVendors");
		return vVendorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVVendorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vVendorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VVendorService instance
	 */
	protected void setVVendorService(VVendorService service) {
		this.vVendorService = service;
	}

}