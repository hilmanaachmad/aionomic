/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VDataBank;


/**
 * ServiceImpl object for domain model class VDataBank.
 *
 * @see VDataBank
 */
@Service("AVM2.VDataBankService")
@Validated
@EntityService(entityClass = VDataBank.class, serviceId = "AVM2")
public class VDataBankServiceImpl implements VDataBankService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VDataBankServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VDataBankDao")
    private WMGenericDao<VDataBank, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VDataBank, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataBank create(VDataBank vdataBank) {
        LOGGER.debug("Creating a new VDataBank with information: {}", vdataBank);

        VDataBank vdataBankCreated = this.wmGenericDao.create(vdataBank);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vdataBankCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataBank getById(Integer vdatabankId) {
        LOGGER.debug("Finding VDataBank by id: {}", vdatabankId);
        return this.wmGenericDao.findById(vdatabankId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataBank findById(Integer vdatabankId) {
        LOGGER.debug("Finding VDataBank by id: {}", vdatabankId);
        try {
            return this.wmGenericDao.findById(vdatabankId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VDataBank found with id: {}", vdatabankId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VDataBank> findByMultipleIds(List<Integer> vdatabankIds, boolean orderedReturn) {
        LOGGER.debug("Finding VDataBanks by ids: {}", vdatabankIds);

        return this.wmGenericDao.findByMultipleIds(vdatabankIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VDataBank update(VDataBank vdataBank) {
        LOGGER.debug("Updating VDataBank with information: {}", vdataBank);

        this.wmGenericDao.update(vdataBank);
        this.wmGenericDao.refresh(vdataBank);

        return vdataBank;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataBank partialUpdate(Integer vdatabankId, Map<String, Object>vdataBankPatch) {
        LOGGER.debug("Partially Updating the VDataBank with id: {}", vdatabankId);

        VDataBank vdataBank = getById(vdatabankId);

        try {
            ObjectReader vdataBankReader = this.objectMapper.reader().forType(VDataBank.class).withValueToUpdate(vdataBank);
            vdataBank = vdataBankReader.readValue(this.objectMapper.writeValueAsString(vdataBankPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vdataBankPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vdataBank = update(vdataBank);

        return vdataBank;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataBank delete(Integer vdatabankId) {
        LOGGER.debug("Deleting VDataBank with id: {}", vdatabankId);
        VDataBank deleted = this.wmGenericDao.findById(vdatabankId);
        if (deleted == null) {
            LOGGER.debug("No VDataBank found with id: {}", vdatabankId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VDataBank.class.getSimpleName(), vdatabankId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VDataBank vdataBank) {
        LOGGER.debug("Deleting VDataBank with {}", vdataBank);
        this.wmGenericDao.delete(vdataBank);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataBank> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VDataBanks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataBank> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VDataBanks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataBank to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataBank to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}