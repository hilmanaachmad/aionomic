/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrRenk;


/**
 * ServiceImpl object for domain model class TlTrRenk.
 *
 * @see TlTrRenk
 */
@Service("AVM2.TlTrRenkService")
@Validated
@EntityService(entityClass = TlTrRenk.class, serviceId = "AVM2")
public class TlTrRenkServiceImpl implements TlTrRenkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrRenkServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrRenkDao")
    private WMGenericDao<TlTrRenk, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrRenk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrRenk create(TlTrRenk tlTrRenk) {
        LOGGER.debug("Creating a new TlTrRenk with information: {}", tlTrRenk);

        TlTrRenk tlTrRenkCreated = this.wmGenericDao.create(tlTrRenk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrRenkCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrRenk getById(Integer tltrrenkId) {
        LOGGER.debug("Finding TlTrRenk by id: {}", tltrrenkId);
        return this.wmGenericDao.findById(tltrrenkId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrRenk findById(Integer tltrrenkId) {
        LOGGER.debug("Finding TlTrRenk by id: {}", tltrrenkId);
        try {
            return this.wmGenericDao.findById(tltrrenkId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrRenk found with id: {}", tltrrenkId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrRenk> findByMultipleIds(List<Integer> tltrrenkIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrRenks by ids: {}", tltrrenkIds);

        return this.wmGenericDao.findByMultipleIds(tltrrenkIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrRenk update(TlTrRenk tlTrRenk) {
        LOGGER.debug("Updating TlTrRenk with information: {}", tlTrRenk);

        this.wmGenericDao.update(tlTrRenk);
        this.wmGenericDao.refresh(tlTrRenk);

        return tlTrRenk;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrRenk partialUpdate(Integer tltrrenkId, Map<String, Object>tlTrRenkPatch) {
        LOGGER.debug("Partially Updating the TlTrRenk with id: {}", tltrrenkId);

        TlTrRenk tlTrRenk = getById(tltrrenkId);

        try {
            ObjectReader tlTrRenkReader = this.objectMapper.reader().forType(TlTrRenk.class).withValueToUpdate(tlTrRenk);
            tlTrRenk = tlTrRenkReader.readValue(this.objectMapper.writeValueAsString(tlTrRenkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrRenkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrRenk = update(tlTrRenk);

        return tlTrRenk;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrRenk delete(Integer tltrrenkId) {
        LOGGER.debug("Deleting TlTrRenk with id: {}", tltrrenkId);
        TlTrRenk deleted = this.wmGenericDao.findById(tltrrenkId);
        if (deleted == null) {
            LOGGER.debug("No TlTrRenk found with id: {}", tltrrenkId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrRenk.class.getSimpleName(), tltrrenkId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrRenk tlTrRenk) {
        LOGGER.debug("Deleting TlTrRenk with {}", tlTrRenk);
        this.wmGenericDao.delete(tlTrRenk);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrRenk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrRenks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrRenk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrRenks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrRenk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrRenk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}