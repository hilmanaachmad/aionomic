/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VDataTaxLocal;

/**
 * Service object for domain model class {@link VDataTaxLocal}.
 */
public interface VDataTaxLocalService {

    /**
     * Creates a new VDataTaxLocal. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VDataTaxLocal if any.
     *
     * @param vdataTaxLocal Details of the VDataTaxLocal to be created; value cannot be null.
     * @return The newly created VDataTaxLocal.
     */
    VDataTaxLocal create(@Valid VDataTaxLocal vdataTaxLocal);


	/**
     * Returns VDataTaxLocal by given id if exists.
     *
     * @param vdatataxlocalId The id of the VDataTaxLocal to get; value cannot be null.
     * @return VDataTaxLocal associated with the given vdatataxlocalId.
	 * @throws EntityNotFoundException If no VDataTaxLocal is found.
     */
    VDataTaxLocal getById(Integer vdatataxlocalId);

    /**
     * Find and return the VDataTaxLocal by given id if exists, returns null otherwise.
     *
     * @param vdatataxlocalId The id of the VDataTaxLocal to get; value cannot be null.
     * @return VDataTaxLocal associated with the given vdatataxlocalId.
     */
    VDataTaxLocal findById(Integer vdatataxlocalId);

	/**
     * Find and return the list of VDataTaxLocals by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vdatataxlocalIds The id's of the VDataTaxLocal to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VDataTaxLocals associated with the given vdatataxlocalIds.
     */
    List<VDataTaxLocal> findByMultipleIds(List<Integer> vdatataxlocalIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VDataTaxLocal. It replaces all fields of the existing VDataTaxLocal with the given vdataTaxLocal.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VDataTaxLocal if any.
     *
     * @param vdataTaxLocal The details of the VDataTaxLocal to be updated; value cannot be null.
     * @return The updated VDataTaxLocal.
     * @throws EntityNotFoundException if no VDataTaxLocal is found with given input.
     */
    VDataTaxLocal update(@Valid VDataTaxLocal vdataTaxLocal);


    /**
     * Partially updates the details of an existing VDataTaxLocal. It updates only the
     * fields of the existing VDataTaxLocal which are passed in the vdataTaxLocalPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VDataTaxLocal if any.
     *
     * @param vdatataxlocalId The id of the VDataTaxLocal to be deleted; value cannot be null.
     * @param vdataTaxLocalPatch The partial data of VDataTaxLocal which is supposed to be updated; value cannot be null.
     * @return The updated VDataTaxLocal.
     * @throws EntityNotFoundException if no VDataTaxLocal is found with given input.
     */
    VDataTaxLocal partialUpdate(Integer vdatataxlocalId, Map<String, Object> vdataTaxLocalPatch);

    /**
     * Deletes an existing VDataTaxLocal with the given id.
     *
     * @param vdatataxlocalId The id of the VDataTaxLocal to be deleted; value cannot be null.
     * @return The deleted VDataTaxLocal.
     * @throws EntityNotFoundException if no VDataTaxLocal found with the given id.
     */
    VDataTaxLocal delete(Integer vdatataxlocalId);

    /**
     * Deletes an existing VDataTaxLocal with the given object.
     *
     * @param vdataTaxLocal The instance of the VDataTaxLocal to be deleted; value cannot be null.
     */
    void delete(VDataTaxLocal vdataTaxLocal);

    /**
     * Find all VDataTaxLocals matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VDataTaxLocals.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VDataTaxLocal> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VDataTaxLocals matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VDataTaxLocals.
     *
     * @see Pageable
     * @see Page
     */
    Page<VDataTaxLocal> findAll(String query, Pageable pageable);

    /**
     * Exports all VDataTaxLocals matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VDataTaxLocals matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VDataTaxLocals in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VDataTaxLocal.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}