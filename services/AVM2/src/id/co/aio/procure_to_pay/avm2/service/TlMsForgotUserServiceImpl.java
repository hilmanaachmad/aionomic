/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsForgotUser;


/**
 * ServiceImpl object for domain model class TlMsForgotUser.
 *
 * @see TlMsForgotUser
 */
@Service("AVM2.TlMsForgotUserService")
@Validated
@EntityService(entityClass = TlMsForgotUser.class, serviceId = "AVM2")
public class TlMsForgotUserServiceImpl implements TlMsForgotUserService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsForgotUserServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsForgotUserDao")
    private WMGenericDao<TlMsForgotUser, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsForgotUser, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsForgotUser create(TlMsForgotUser tlMsForgotUser) {
        LOGGER.debug("Creating a new TlMsForgotUser with information: {}", tlMsForgotUser);

        TlMsForgotUser tlMsForgotUserCreated = this.wmGenericDao.create(tlMsForgotUser);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsForgotUserCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsForgotUser getById(Integer tlmsforgotuserId) {
        LOGGER.debug("Finding TlMsForgotUser by id: {}", tlmsforgotuserId);
        return this.wmGenericDao.findById(tlmsforgotuserId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsForgotUser findById(Integer tlmsforgotuserId) {
        LOGGER.debug("Finding TlMsForgotUser by id: {}", tlmsforgotuserId);
        try {
            return this.wmGenericDao.findById(tlmsforgotuserId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsForgotUser found with id: {}", tlmsforgotuserId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsForgotUser> findByMultipleIds(List<Integer> tlmsforgotuserIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsForgotUsers by ids: {}", tlmsforgotuserIds);

        return this.wmGenericDao.findByMultipleIds(tlmsforgotuserIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsForgotUser update(TlMsForgotUser tlMsForgotUser) {
        LOGGER.debug("Updating TlMsForgotUser with information: {}", tlMsForgotUser);

        this.wmGenericDao.update(tlMsForgotUser);
        this.wmGenericDao.refresh(tlMsForgotUser);

        return tlMsForgotUser;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsForgotUser partialUpdate(Integer tlmsforgotuserId, Map<String, Object>tlMsForgotUserPatch) {
        LOGGER.debug("Partially Updating the TlMsForgotUser with id: {}", tlmsforgotuserId);

        TlMsForgotUser tlMsForgotUser = getById(tlmsforgotuserId);

        try {
            ObjectReader tlMsForgotUserReader = this.objectMapper.reader().forType(TlMsForgotUser.class).withValueToUpdate(tlMsForgotUser);
            tlMsForgotUser = tlMsForgotUserReader.readValue(this.objectMapper.writeValueAsString(tlMsForgotUserPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsForgotUserPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsForgotUser = update(tlMsForgotUser);

        return tlMsForgotUser;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsForgotUser delete(Integer tlmsforgotuserId) {
        LOGGER.debug("Deleting TlMsForgotUser with id: {}", tlmsforgotuserId);
        TlMsForgotUser deleted = this.wmGenericDao.findById(tlmsforgotuserId);
        if (deleted == null) {
            LOGGER.debug("No TlMsForgotUser found with id: {}", tlmsforgotuserId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsForgotUser.class.getSimpleName(), tlmsforgotuserId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsForgotUser tlMsForgotUser) {
        LOGGER.debug("Deleting TlMsForgotUser with {}", tlMsForgotUser);
        this.wmGenericDao.delete(tlMsForgotUser);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsForgotUser> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsForgotUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsForgotUser> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsForgotUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsForgotUser to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsForgotUser to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}