/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsCo;


/**
 * ServiceImpl object for domain model class TlMsCo.
 *
 * @see TlMsCo
 */
@Service("AVM2.TlMsCoService")
@Validated
@EntityService(entityClass = TlMsCo.class, serviceId = "AVM2")
public class TlMsCoServiceImpl implements TlMsCoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCoServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsCoDao")
    private WMGenericDao<TlMsCo, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsCo, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCo create(TlMsCo tlMsCo) {
        LOGGER.debug("Creating a new TlMsCo with information: {}", tlMsCo);

        TlMsCo tlMsCoCreated = this.wmGenericDao.create(tlMsCo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsCoCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCo getById(String tlmscoId) {
        LOGGER.debug("Finding TlMsCo by id: {}", tlmscoId);
        return this.wmGenericDao.findById(tlmscoId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCo findById(String tlmscoId) {
        LOGGER.debug("Finding TlMsCo by id: {}", tlmscoId);
        try {
            return this.wmGenericDao.findById(tlmscoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsCo found with id: {}", tlmscoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsCo> findByMultipleIds(List<String> tlmscoIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsCos by ids: {}", tlmscoIds);

        return this.wmGenericDao.findByMultipleIds(tlmscoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsCo update(TlMsCo tlMsCo) {
        LOGGER.debug("Updating TlMsCo with information: {}", tlMsCo);

        this.wmGenericDao.update(tlMsCo);
        this.wmGenericDao.refresh(tlMsCo);

        return tlMsCo;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCo partialUpdate(String tlmscoId, Map<String, Object>tlMsCoPatch) {
        LOGGER.debug("Partially Updating the TlMsCo with id: {}", tlmscoId);

        TlMsCo tlMsCo = getById(tlmscoId);

        try {
            ObjectReader tlMsCoReader = this.objectMapper.reader().forType(TlMsCo.class).withValueToUpdate(tlMsCo);
            tlMsCo = tlMsCoReader.readValue(this.objectMapper.writeValueAsString(tlMsCoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsCoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsCo = update(tlMsCo);

        return tlMsCo;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCo delete(String tlmscoId) {
        LOGGER.debug("Deleting TlMsCo with id: {}", tlmscoId);
        TlMsCo deleted = this.wmGenericDao.findById(tlmscoId);
        if (deleted == null) {
            LOGGER.debug("No TlMsCo found with id: {}", tlmscoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsCo.class.getSimpleName(), tlmscoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsCo tlMsCo) {
        LOGGER.debug("Deleting TlMsCo with {}", tlMsCo);
        this.wmGenericDao.delete(tlMsCo);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}