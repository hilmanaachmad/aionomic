/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkSmi3;

/**
 * Service object for domain model class {@link TlMsAcnkSmi3}.
 */
public interface TlMsAcnkSmi3Service {

    /**
     * Creates a new TlMsAcnkSmi3. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkSmi3 if any.
     *
     * @param tlMsAcnkSmi3 Details of the TlMsAcnkSmi3 to be created; value cannot be null.
     * @return The newly created TlMsAcnkSmi3.
     */
    TlMsAcnkSmi3 create(@Valid TlMsAcnkSmi3 tlMsAcnkSmi3);


	/**
     * Returns TlMsAcnkSmi3 by given id if exists.
     *
     * @param tlmsacnksmi3Id The id of the TlMsAcnkSmi3 to get; value cannot be null.
     * @return TlMsAcnkSmi3 associated with the given tlmsacnksmi3Id.
	 * @throws EntityNotFoundException If no TlMsAcnkSmi3 is found.
     */
    TlMsAcnkSmi3 getById(String tlmsacnksmi3Id);

    /**
     * Find and return the TlMsAcnkSmi3 by given id if exists, returns null otherwise.
     *
     * @param tlmsacnksmi3Id The id of the TlMsAcnkSmi3 to get; value cannot be null.
     * @return TlMsAcnkSmi3 associated with the given tlmsacnksmi3Id.
     */
    TlMsAcnkSmi3 findById(String tlmsacnksmi3Id);

	/**
     * Find and return the list of TlMsAcnkSmi3s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsacnksmi3Ids The id's of the TlMsAcnkSmi3 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsAcnkSmi3s associated with the given tlmsacnksmi3Ids.
     */
    List<TlMsAcnkSmi3> findByMultipleIds(List<String> tlmsacnksmi3Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsAcnkSmi3. It replaces all fields of the existing TlMsAcnkSmi3 with the given tlMsAcnkSmi3.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkSmi3 if any.
     *
     * @param tlMsAcnkSmi3 The details of the TlMsAcnkSmi3 to be updated; value cannot be null.
     * @return The updated TlMsAcnkSmi3.
     * @throws EntityNotFoundException if no TlMsAcnkSmi3 is found with given input.
     */
    TlMsAcnkSmi3 update(@Valid TlMsAcnkSmi3 tlMsAcnkSmi3);


    /**
     * Partially updates the details of an existing TlMsAcnkSmi3. It updates only the
     * fields of the existing TlMsAcnkSmi3 which are passed in the tlMsAcnkSmi3Patch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkSmi3 if any.
     *
     * @param tlmsacnksmi3Id The id of the TlMsAcnkSmi3 to be deleted; value cannot be null.
     * @param tlMsAcnkSmi3Patch The partial data of TlMsAcnkSmi3 which is supposed to be updated; value cannot be null.
     * @return The updated TlMsAcnkSmi3.
     * @throws EntityNotFoundException if no TlMsAcnkSmi3 is found with given input.
     */
    TlMsAcnkSmi3 partialUpdate(String tlmsacnksmi3Id, Map<String, Object> tlMsAcnkSmi3Patch);

    /**
     * Deletes an existing TlMsAcnkSmi3 with the given id.
     *
     * @param tlmsacnksmi3Id The id of the TlMsAcnkSmi3 to be deleted; value cannot be null.
     * @return The deleted TlMsAcnkSmi3.
     * @throws EntityNotFoundException if no TlMsAcnkSmi3 found with the given id.
     */
    TlMsAcnkSmi3 delete(String tlmsacnksmi3Id);

    /**
     * Deletes an existing TlMsAcnkSmi3 with the given object.
     *
     * @param tlMsAcnkSmi3 The instance of the TlMsAcnkSmi3 to be deleted; value cannot be null.
     */
    void delete(TlMsAcnkSmi3 tlMsAcnkSmi3);

    /**
     * Find all TlMsAcnkSmi3s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAcnkSmi3s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsAcnkSmi3> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsAcnkSmi3s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAcnkSmi3s.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsAcnkSmi3> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsAcnkSmi3s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsAcnkSmi3s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsAcnkSmi3s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsAcnkSmi3.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}