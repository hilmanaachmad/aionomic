/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VVendorMiro;
import id.co.aio.procure_to_pay.avm2.VVendorMiroId;


/**
 * ServiceImpl object for domain model class VVendorMiro.
 *
 * @see VVendorMiro
 */
@Service("AVM2.VVendorMiroService")
@Validated
@EntityService(entityClass = VVendorMiro.class, serviceId = "AVM2")
public class VVendorMiroServiceImpl implements VVendorMiroService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VVendorMiroServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VVendorMiroDao")
    private WMGenericDao<VVendorMiro, VVendorMiroId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VVendorMiro, VVendorMiroId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VVendorMiro create(VVendorMiro vvendorMiro) {
        LOGGER.debug("Creating a new VVendorMiro with information: {}", vvendorMiro);

        VVendorMiro vvendorMiroCreated = this.wmGenericDao.create(vvendorMiro);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vvendorMiroCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VVendorMiro getById(VVendorMiroId vvendormiroId) {
        LOGGER.debug("Finding VVendorMiro by id: {}", vvendormiroId);
        return this.wmGenericDao.findById(vvendormiroId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VVendorMiro findById(VVendorMiroId vvendormiroId) {
        LOGGER.debug("Finding VVendorMiro by id: {}", vvendormiroId);
        try {
            return this.wmGenericDao.findById(vvendormiroId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VVendorMiro found with id: {}", vvendormiroId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VVendorMiro> findByMultipleIds(List<VVendorMiroId> vvendormiroIds, boolean orderedReturn) {
        LOGGER.debug("Finding VVendorMiros by ids: {}", vvendormiroIds);

        return this.wmGenericDao.findByMultipleIds(vvendormiroIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VVendorMiro update(VVendorMiro vvendorMiro) {
        LOGGER.debug("Updating VVendorMiro with information: {}", vvendorMiro);

        this.wmGenericDao.update(vvendorMiro);
        this.wmGenericDao.refresh(vvendorMiro);

        return vvendorMiro;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VVendorMiro partialUpdate(VVendorMiroId vvendormiroId, Map<String, Object>vvendorMiroPatch) {
        LOGGER.debug("Partially Updating the VVendorMiro with id: {}", vvendormiroId);

        VVendorMiro vvendorMiro = getById(vvendormiroId);

        try {
            ObjectReader vvendorMiroReader = this.objectMapper.reader().forType(VVendorMiro.class).withValueToUpdate(vvendorMiro);
            vvendorMiro = vvendorMiroReader.readValue(this.objectMapper.writeValueAsString(vvendorMiroPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vvendorMiroPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vvendorMiro = update(vvendorMiro);

        return vvendorMiro;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VVendorMiro delete(VVendorMiroId vvendormiroId) {
        LOGGER.debug("Deleting VVendorMiro with id: {}", vvendormiroId);
        VVendorMiro deleted = this.wmGenericDao.findById(vvendormiroId);
        if (deleted == null) {
            LOGGER.debug("No VVendorMiro found with id: {}", vvendormiroId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VVendorMiro.class.getSimpleName(), vvendormiroId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VVendorMiro vvendorMiro) {
        LOGGER.debug("Deleting VVendorMiro with {}", vvendorMiro);
        this.wmGenericDao.delete(vvendorMiro);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VVendorMiro> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VVendorMiros");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VVendorMiro> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VVendorMiros");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VVendorMiro to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VVendorMiro to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}