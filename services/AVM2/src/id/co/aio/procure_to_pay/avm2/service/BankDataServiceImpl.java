/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.BankData;
import id.co.aio.procure_to_pay.avm2.BankDataId;


/**
 * ServiceImpl object for domain model class BankData.
 *
 * @see BankData
 */
@Service("AVM2.BankDataService")
@Validated
@EntityService(entityClass = BankData.class, serviceId = "AVM2")
public class BankDataServiceImpl implements BankDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BankDataServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.BankDataDao")
    private WMGenericDao<BankData, BankDataId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<BankData, BankDataId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public BankData create(BankData bankData) {
        LOGGER.debug("Creating a new BankData with information: {}", bankData);

        BankData bankDataCreated = this.wmGenericDao.create(bankData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(bankDataCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public BankData getById(BankDataId bankdataId) {
        LOGGER.debug("Finding BankData by id: {}", bankdataId);
        return this.wmGenericDao.findById(bankdataId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public BankData findById(BankDataId bankdataId) {
        LOGGER.debug("Finding BankData by id: {}", bankdataId);
        try {
            return this.wmGenericDao.findById(bankdataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BankData found with id: {}", bankdataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<BankData> findByMultipleIds(List<BankDataId> bankdataIds, boolean orderedReturn) {
        LOGGER.debug("Finding BankDatas by ids: {}", bankdataIds);

        return this.wmGenericDao.findByMultipleIds(bankdataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public BankData update(BankData bankData) {
        LOGGER.debug("Updating BankData with information: {}", bankData);

        this.wmGenericDao.update(bankData);
        this.wmGenericDao.refresh(bankData);

        return bankData;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public BankData partialUpdate(BankDataId bankdataId, Map<String, Object>bankDataPatch) {
        LOGGER.debug("Partially Updating the BankData with id: {}", bankdataId);

        BankData bankData = getById(bankdataId);

        try {
            ObjectReader bankDataReader = this.objectMapper.reader().forType(BankData.class).withValueToUpdate(bankData);
            bankData = bankDataReader.readValue(this.objectMapper.writeValueAsString(bankDataPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", bankDataPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        bankData = update(bankData);

        return bankData;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public BankData delete(BankDataId bankdataId) {
        LOGGER.debug("Deleting BankData with id: {}", bankdataId);
        BankData deleted = this.wmGenericDao.findById(bankdataId);
        if (deleted == null) {
            LOGGER.debug("No BankData found with id: {}", bankdataId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), BankData.class.getSimpleName(), bankdataId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(BankData bankData) {
        LOGGER.debug("Deleting BankData with {}", bankData);
        this.wmGenericDao.delete(bankData);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<BankData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BankDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<BankData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BankDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table BankData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table BankData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}