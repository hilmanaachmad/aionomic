/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTrIn;
import id.co.aio.procure_to_pay.avm2.service.TlTrInService;


/**
 * Controller object for domain model class TlTrIn.
 * @see TlTrIn
 */
@RestController("AVM2.TlTrInController")
@Api(value = "TlTrInController", description = "Exposes APIs to work with TlTrIn resource.")
@RequestMapping("/AVM2/TlTrIn")
public class TlTrInController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrInController.class);

    @Autowired
	@Qualifier("AVM2.TlTrInService")
	private TlTrInService tlTrInService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTrIn instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrIn createTlTrIn(@RequestBody TlTrIn tlTrIn) {
		LOGGER.debug("Create TlTrIn with information: {}" , tlTrIn);

		tlTrIn = tlTrInService.create(tlTrIn);
		LOGGER.debug("Created TlTrIn with information: {}" , tlTrIn);

	    return tlTrIn;
	}

    @ApiOperation(value = "Returns the TlTrIn instance associated with the given id.")
    @RequestMapping(value = "/{abIdin:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrIn getTlTrIn(@PathVariable("abIdin") Integer abIdin) {
        LOGGER.debug("Getting TlTrIn with id: {}" , abIdin);

        TlTrIn foundTlTrIn = tlTrInService.getById(abIdin);
        LOGGER.debug("TlTrIn details with id: {}" , foundTlTrIn);

        return foundTlTrIn;
    }

    @ApiOperation(value = "Updates the TlTrIn instance associated with the given id.")
    @RequestMapping(value = "/{abIdin:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrIn editTlTrIn(@PathVariable("abIdin") Integer abIdin, @RequestBody TlTrIn tlTrIn) {
        LOGGER.debug("Editing TlTrIn with id: {}" , tlTrIn.getAbIdin());

        tlTrIn.setAbIdin(abIdin);
        tlTrIn = tlTrInService.update(tlTrIn);
        LOGGER.debug("TlTrIn details with id: {}" , tlTrIn);

        return tlTrIn;
    }
    
    @ApiOperation(value = "Partially updates the TlTrIn instance associated with the given id.")
    @RequestMapping(value = "/{abIdin:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrIn patchTlTrIn(@PathVariable("abIdin") Integer abIdin, @RequestBody @MapTo(TlTrIn.class) Map<String, Object> tlTrInPatch) {
        LOGGER.debug("Partially updating TlTrIn with id: {}" , abIdin);

        TlTrIn tlTrIn = tlTrInService.partialUpdate(abIdin, tlTrInPatch);
        LOGGER.debug("TlTrIn details after partial update: {}" , tlTrIn);

        return tlTrIn;
    }

    @ApiOperation(value = "Deletes the TlTrIn instance associated with the given id.")
    @RequestMapping(value = "/{abIdin:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTrIn(@PathVariable("abIdin") Integer abIdin) {
        LOGGER.debug("Deleting TlTrIn with id: {}" , abIdin);

        TlTrIn deletedTlTrIn = tlTrInService.delete(abIdin);

        return deletedTlTrIn != null;
    }

    /**
     * @deprecated Use {@link #findTlTrIns(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTrIn instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrIn> searchTlTrInsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTrIns list by query filter:{}", (Object) queryFilters);
        return tlTrInService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrIn instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrIn> findTlTrIns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrIns list by filter:", query);
        return tlTrInService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrIn instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrIn> filterTlTrIns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrIns list by filter", query);
        return tlTrInService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTrIns(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTrInService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTrInsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTrIn.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTrInService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTrIn instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTrIns( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTrIns");
		return tlTrInService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTrInAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTrInService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTrInService instance
	 */
	protected void setTlTrInService(TlTrInService service) {
		this.tlTrInService = service;
	}

}