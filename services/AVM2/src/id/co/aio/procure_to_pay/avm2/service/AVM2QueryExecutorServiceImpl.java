/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import id.co.aio.procure_to_pay.avm2.models.query.*;

@Service
public class AVM2QueryExecutorServiceImpl implements AVM2QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AVM2QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("AVM2WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateStatusForgot(QupdateStatusForgotRequest qupdateStatusForgotRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("status", qupdateStatusForgotRequest.getStatus());
        params.put("id", qupdateStatusForgotRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateStatusForgot", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetForgotUserResponse> executeQGetForgotUser(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetForgotUser", params, QgetForgotUserResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetForgotUser(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetForgotUserResponse> queryInput = new QueryProcedureInput<>("qGetForgotUser", params, QgetForgotUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetDataBankResponse> executeQGetDataBank(String userName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        return queryExecutor.executeNamedQuery("qGetDataBank", params, QgetDataBankResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetDataBank(String userName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        QueryProcedureInput<QgetDataBankResponse> queryInput = new QueryProcedureInput<>("qGetDataBank", params, QgetDataBankResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertCertidom(QinsertCertidomRequest qinsertCertidomRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("idVendor", qinsertCertidomRequest.getIdVendor());
        params.put("fileName", qinsertCertidomRequest.getFileName());
        params.put("fileUrl", qinsertCertidomRequest.getFileUrl());

        return queryExecutor.executeNamedQueryForUpdate("qInsertCertidom", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertTaxOverseasTemp(QinsertTaxOverseasTempRequest qinsertTaxOverseasTempRequest) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("vendorCode", qinsertTaxOverseasTempRequest.getVendorCode());
        params.put("userName", qinsertTaxOverseasTempRequest.getUserName());
        params.put("dateFrom", qinsertTaxOverseasTempRequest.getDateFrom());
        params.put("dateTo", qinsertTaxOverseasTempRequest.getDateTo());
        params.put("inputBy", qinsertTaxOverseasTempRequest.getInputBy());
        params.put("companyCode", qinsertTaxOverseasTempRequest.getCompanyCode());

        return queryExecutor.executeNamedQueryForUpdate("qInsertTaxOverseasTemp", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetVendroDataByNameResponse> executeGetVendroDataByName(String vendorName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorName", vendorName);

        return queryExecutor.executeNamedQuery("getVendroDataByName", params, GetVendroDataByNameResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetVendroDataByName(String vendorName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorName", vendorName);

        QueryProcedureInput<GetVendroDataByNameResponse> queryInput = new QueryProcedureInput<>("getVendroDataByName", params, GetVendroDataByNameResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetTaxTypeResponse> executeQGetTaxType(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetTaxType", params, QgetTaxTypeResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetTaxType(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetTaxTypeResponse> queryInput = new QueryProcedureInput<>("qGetTaxType", params, QgetTaxTypeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QcheckUserVendorResponse> executeQCheckUserVendor(String username, String password, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("username", username);
        params.put("password", password);

        return queryExecutor.executeNamedQuery("qCheckUserVendor", params, QcheckUserVendorResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQCheckUserVendor(String username, String password, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("username", username);
        params.put("password", password);

        QueryProcedureInput<QcheckUserVendorResponse> queryInput = new QueryProcedureInput<>("qCheckUserVendor", params, QcheckUserVendorResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetNpwpVendorResponse> executeGetNpwpVendor(String npwp, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("Npwp", npwp);

        return queryExecutor.executeNamedQuery("getNpwpVendor", params, GetNpwpVendorResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetNpwpVendor(String npwp, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("Npwp", npwp);

        QueryProcedureInput<GetNpwpVendorResponse> queryInput = new QueryProcedureInput<>("getNpwpVendor", params, GetNpwpVendorResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetVendorDataByNamesResponse> executeGetVendorDataByNames(String vendorName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorName", vendorName);

        return queryExecutor.executeNamedQuery("getVendorDataByNames", params, GetVendorDataByNamesResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetVendorDataByNames(String vendorName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorName", vendorName);

        QueryProcedureInput<GetVendorDataByNamesResponse> queryInput = new QueryProcedureInput<>("getVendorDataByNames", params, GetVendorDataByNamesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetVendorDataResponse> executeGetVendorData(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getVendorData", params, GetVendorDataResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetVendorData(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetVendorDataResponse> queryInput = new QueryProcedureInput<>("getVendorData", params, GetVendorDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateExemptionFile(QupdateExemptionFileRequest qupdateExemptionFileRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("fileName", qupdateExemptionFileRequest.getFileName());
        params.put("filePath", qupdateExemptionFileRequest.getFilePath());
        params.put("idFileExemption", qupdateExemptionFileRequest.getIdFileExemption());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateExemptionFile", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertSupDoc(QinsertSupDocRequest qinsertSupDocRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("idVendor", qinsertSupDocRequest.getIdVendor());
        params.put("fileName", qinsertSupDocRequest.getFileName());
        params.put("remark", qinsertSupDocRequest.getRemark());
        params.put("docSupUpload", qinsertSupDocRequest.getDocSupUpload());

        return queryExecutor.executeNamedQueryForUpdate("qInsertSupDoc", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateVendorOverseas(QupdateVendorOverseasRequest qupdateVendorOverseasRequest) {
        Map<String, Object> params = new HashMap<>(18);

        params.put("veName", qupdateVendorOverseasRequest.getVeName());
        params.put("companyEmail", qupdateVendorOverseasRequest.getCompanyEmail());
        params.put("officeAddress", qupdateVendorOverseasRequest.getOfficeAddress());
        params.put("province", qupdateVendorOverseasRequest.getProvince());
        params.put("city", qupdateVendorOverseasRequest.getCity());
        params.put("pos", qupdateVendorOverseasRequest.getPos());
        params.put("country", qupdateVendorOverseasRequest.getCountry());
        params.put("telephone", qupdateVendorOverseasRequest.getTelephone());
        params.put("mobilePhone", qupdateVendorOverseasRequest.getMobilePhone());
        params.put("directorEmail", qupdateVendorOverseasRequest.getDirectorEmail());
        params.put("nameDirector", qupdateVendorOverseasRequest.getNameDirector());
        params.put("webCompany", qupdateVendorOverseasRequest.getWebCompany());
        params.put("businessFieldSector", qupdateVendorOverseasRequest.getBusinessFieldSector());
        params.put("radioLocation", qupdateVendorOverseasRequest.getRadioLocation());
        params.put("catUpload", qupdateVendorOverseasRequest.getCatUpload());
        params.put("password", qupdateVendorOverseasRequest.getPassword());
        params.put("catName", qupdateVendorOverseasRequest.getCatName());
        params.put("vendorCode", qupdateVendorOverseasRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateVendorOverseas", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetBankInfoResponse> executeQGetBankInfo(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetBankInfo", params, QgetBankInfoResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetBankInfo(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetBankInfoResponse> queryInput = new QueryProcedureInput<>("qGetBankInfo", params, QgetBankInfoResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertTaxTemp(QinsertTaxTempRequest qinsertTaxTempRequest) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("vendorCode", qinsertTaxTempRequest.getVendorCode());
        params.put("userName", qinsertTaxTempRequest.getUserName());
        params.put("exemptionNumber", qinsertTaxTempRequest.getExemptionNumber());
        params.put("dateFrom", qinsertTaxTempRequest.getDateFrom());
        params.put("dateTo", qinsertTaxTempRequest.getDateTo());
        params.put("effectiveSince", qinsertTaxTempRequest.getEffectiveSince());
        params.put("serviceOffice", qinsertTaxTempRequest.getServiceOffice());
        params.put("serviceOfficeAddress", qinsertTaxTempRequest.getServiceOfficeAddress());
        params.put("exemptionType", qinsertTaxTempRequest.getExemptionType());
        params.put("inputBy", qinsertTaxTempRequest.getInputBy());
        params.put("companyCode", qinsertTaxTempRequest.getCompanyCode());

        return queryExecutor.executeNamedQueryForUpdate("qInsertTaxTemp", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetVendorDataEmailResponse> executeGetVendorDataEmail(String email, String password, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("email", email);
        params.put("password", password);

        return queryExecutor.executeNamedQuery("getVendorDataEmail", params, GetVendorDataEmailResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetVendorDataEmail(String email, String password, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("email", email);
        params.put("password", password);

        QueryProcedureInput<GetVendorDataEmailResponse> queryInput = new QueryProcedureInput<>("getVendorDataEmail", params, GetVendorDataEmailResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertCertificate(QinsertCertificateRequest qinsertCertificateRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("idVendor", qinsertCertificateRequest.getIdVendor());
        params.put("fileName", qinsertCertificateRequest.getFileName());
        params.put("fileUrl", qinsertCertificateRequest.getFileUrl());

        return queryExecutor.executeNamedQueryForUpdate("qInsertCertificate", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertVendorOverseas(QinsertVendorOverseasRequest qinsertVendorOverseasRequest) {
        Map<String, Object> params = new HashMap<>(23);

        params.put("veName", qinsertVendorOverseasRequest.getVeName());
        params.put("officeAddress", qinsertVendorOverseasRequest.getOfficeAddress());
        params.put("region", qinsertVendorOverseasRequest.getRegion());
        params.put("city", qinsertVendorOverseasRequest.getCity());
        params.put("zipCode", qinsertVendorOverseasRequest.getZipCode());
        params.put("country", qinsertVendorOverseasRequest.getCountry());
        params.put("telephone", qinsertVendorOverseasRequest.getTelephone());
        params.put("mobilePhone", qinsertVendorOverseasRequest.getMobilePhone());
        params.put("webCompany", qinsertVendorOverseasRequest.getWebCompany());
        params.put("nameDirector", qinsertVendorOverseasRequest.getNameDirector());
        params.put("directorEmail", qinsertVendorOverseasRequest.getDirectorEmail());
        params.put("companyEmail", qinsertVendorOverseasRequest.getCompanyEmail());
        params.put("businessFieldSector", qinsertVendorOverseasRequest.getBusinessFieldSector());
        params.put("radioLocation", qinsertVendorOverseasRequest.getRadioLocation());
        params.put("catUpload", qinsertVendorOverseasRequest.getCatUpload());
        params.put("catName", qinsertVendorOverseasRequest.getCatName());
        params.put("password", qinsertVendorOverseasRequest.getPassword());
        params.put("npwpNumber", qinsertVendorOverseasRequest.getNpwpNumber());
        params.put("effectiveNpwp", qinsertVendorOverseasRequest.getEffectiveNpwp());
        params.put("vsi", qinsertVendorOverseasRequest.getVsi());
        params.put("ab_npss", qinsertVendorOverseasRequest.getAbNpss());
        params.put("ab_npss2", qinsertVendorOverseasRequest.getAbNpss2());
        params.put("ab_npss3", qinsertVendorOverseasRequest.getAbNpss3());

        return queryExecutor.executeNamedQueryForUpdate("qInsertVendorOverseas", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QmaxVendorResponse> executeQMaxVendor(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qMaxVendor", params, QmaxVendorResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQMaxVendor(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QmaxVendorResponse> queryInput = new QueryProcedureInput<>("qMaxVendor", params, QmaxVendorResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QcheckUserEmailVenResponse> executeQCheckUserEmailVen(String username, String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("username", username);
        params.put("email", email);

        return queryExecutor.executeNamedQuery("qCheckUserEmailVen", params, QcheckUserEmailVenResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQCheckUserEmailVen(String username, String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("username", username);
        params.put("email", email);

        QueryProcedureInput<QcheckUserEmailVenResponse> queryInput = new QueryProcedureInput<>("qCheckUserEmailVen", params, QcheckUserEmailVenResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQRfusDelPIC(QrfusDelPicRequest qrfusDelPicRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorCode", qrfusDelPicRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("qRfusDelPIC", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetVendorUmeResponse> executeGetVendorUme(String username, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("username", username);

        return queryExecutor.executeNamedQuery("getVendorUme", params, GetVendorUmeResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetVendorUme(String username, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("username", username);

        QueryProcedureInput<GetVendorUmeResponse> queryInput = new QueryProcedureInput<>("getVendorUme", params, GetVendorUmeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertNpwp(QinsertNpwpRequest qinsertNpwpRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("idVendor", qinsertNpwpRequest.getIdVendor());
        params.put("fileName", qinsertNpwpRequest.getFileName());
        params.put("fileUrl", qinsertNpwpRequest.getFileUrl());

        return queryExecutor.executeNamedQueryForUpdate("qInsertNpwp", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertPicTemp(QinsertPicTempRequest qinsertPicTempRequest) {
        Map<String, Object> params = new HashMap<>(10);

        params.put("vendorCode", qinsertPicTempRequest.getVendorCode());
        params.put("namePIC", qinsertPicTempRequest.getNamePic());
        params.put("emailPIC", qinsertPicTempRequest.getEmailPic());
        params.put("phonePIC", qinsertPicTempRequest.getPhonePic());
        params.put("selectPositionPIC", qinsertPicTempRequest.getSelectPositionPic());
        params.put("selectAreaPIC", qinsertPicTempRequest.getSelectAreaPic());
        params.put("password", qinsertPicTempRequest.getPassword());
        params.put("userName", qinsertPicTempRequest.getUserName());
        params.put("locationFor", qinsertPicTempRequest.getLocationFor());
        params.put("inputBy", qinsertPicTempRequest.getInputBy());

        return queryExecutor.executeNamedQueryForUpdate("qInsertPicTemp", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateTaxKonf(QupdateTaxKonfRequest qupdateTaxKonfRequest) {
        Map<String, Object> params = new HashMap<>(19);

        params.put("taxId", qupdateTaxKonfRequest.getTaxId());
        params.put("typeNpwp", qupdateTaxKonfRequest.getTypeNpwp());
        params.put("nameNpwp", qupdateTaxKonfRequest.getNameNpwp());
        params.put("addressNpwp", qupdateTaxKonfRequest.getAddressNpwp());
        params.put("effectiveNpwp", qupdateTaxKonfRequest.getEffectiveNpwp());
        params.put("taxConfirmationNumber", qupdateTaxKonfRequest.getTaxConfirmationNumber());
        params.put("taxServiceOffice", qupdateTaxKonfRequest.getTaxServiceOffice());
        params.put("addressTaxService", qupdateTaxKonfRequest.getAddressTaxService());
        params.put("taxCertificateNumber", qupdateTaxKonfRequest.getTaxCertificateNumber());
        params.put("typeCertificateNpwp", qupdateTaxKonfRequest.getTypeCertificateNpwp());
        params.put("validCertificateFrom", qupdateTaxKonfRequest.getValidCertificateFrom());
        params.put("validCertificateTo", qupdateTaxKonfRequest.getValidCertificateTo());
        params.put("npwpUpload", qupdateTaxKonfRequest.getNpwpUpload());
        params.put("nameNpwpUpload", qupdateTaxKonfRequest.getNameNpwpUpload());
        params.put("sppkpUpload", qupdateTaxKonfRequest.getSppkpUpload());
        params.put("nameSppkpUpload", qupdateTaxKonfRequest.getNameSppkpUpload());
        params.put("taxCertiUpload", qupdateTaxKonfRequest.getTaxCertiUpload());
        params.put("nameCertiUpload", qupdateTaxKonfRequest.getNameCertiUpload());
        params.put("id", qupdateTaxKonfRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateTaxKonf", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetBankInfoKonfResponse> executeQGetBankInfoKonf(String sveCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("sVeCode", sveCode);

        return queryExecutor.executeNamedQuery("qGetBankInfoKonf", params, QgetBankInfoKonfResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetBankInfoKonf(String sveCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("sVeCode", sveCode);

        QueryProcedureInput<QgetBankInfoKonfResponse> queryInput = new QueryProcedureInput<>("qGetBankInfoKonf", params, QgetBankInfoKonfResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQDeleteTaxKonf(String id) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQueryForUpdate("qDeleteTaxKonf", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateSppkp(QupdateSppkpRequest qupdateSppkpRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("fileName", qupdateSppkpRequest.getFileName());
        params.put("filePath", qupdateSppkpRequest.getFilePath());
        params.put("idFileSppkp", qupdateSppkpRequest.getIdFileSppkp());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateSppkp", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateNpwpFile(QupdateNpwpFileRequest qupdateNpwpFileRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("fileName", qupdateNpwpFileRequest.getFileName());
        params.put("filePath", qupdateNpwpFileRequest.getFilePath());
        params.put("idFileNpwp", qupdateNpwpFileRequest.getIdFileNpwp());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateNpwpFile", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetTaxKonfResponse> executeQGetTaxKonf(String sveCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("sVeCode", sveCode);

        return queryExecutor.executeNamedQuery("qGetTaxKonf", params, QgetTaxKonfResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetTaxKonf(String sveCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("sVeCode", sveCode);

        QueryProcedureInput<QgetTaxKonfResponse> queryInput = new QueryProcedureInput<>("qGetTaxKonf", params, QgetTaxKonfResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQChangePasswordVen(QchangePasswordVenRequest qchangePasswordVenRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("password", qchangePasswordVenRequest.getPassword());
        params.put("username", qchangePasswordVenRequest.getUsername());

        return queryExecutor.executeNamedQueryForUpdate("qChangePasswordVen", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertVendor(QinsertVendorRequest qinsertVendorRequest) {
        Map<String, Object> params = new HashMap<>(37);

        params.put("tittle", qinsertVendorRequest.getTittle());
        params.put("veName", qinsertVendorRequest.getVeName());
        params.put("companyEmail", qinsertVendorRequest.getCompanyEmail());
        params.put("officeAddress", qinsertVendorRequest.getOfficeAddress());
        params.put("city", qinsertVendorRequest.getCity());
        params.put("nib", qinsertVendorRequest.getNib());
        params.put("doi", qinsertVendorRequest.getDoi());
        params.put("telephone", qinsertVendorRequest.getTelephone());
        params.put("mobilePhone", qinsertVendorRequest.getMobilePhone());
        params.put("rtRw", qinsertVendorRequest.getRtRw());
        params.put("kelurahan", qinsertVendorRequest.getKelurahan());
        params.put("kecamatan", qinsertVendorRequest.getKecamatan());
        params.put("pos", qinsertVendorRequest.getPos());
        params.put("province", qinsertVendorRequest.getProvince());
        params.put("directorEmail", qinsertVendorRequest.getDirectorEmail());
        params.put("nameDirector", qinsertVendorRequest.getNameDirector());
        params.put("idDirector", qinsertVendorRequest.getIdDirector());
        params.put("webCompany", qinsertVendorRequest.getWebCompany());
        params.put("businessFieldSector", qinsertVendorRequest.getBusinessFieldSector());
        params.put("radioLocation", qinsertVendorRequest.getRadioLocation());
        params.put("picUpload", qinsertVendorRequest.getPicUpload());
        params.put("catUpload", qinsertVendorRequest.getCatUpload());
        params.put("password", qinsertVendorRequest.getPassword());
        params.put("picName", qinsertVendorRequest.getPicName());
        params.put("catName", qinsertVendorRequest.getCatName());
        params.put("npwpNumber", qinsertVendorRequest.getNpwpNumber());
        params.put("npwpType", qinsertVendorRequest.getNpwpType());
        params.put("npwpAddress", qinsertVendorRequest.getNpwpAddress());
        params.put("npwpAddress2", qinsertVendorRequest.getNpwpAddress2());
        params.put("npwpAddress3", qinsertVendorRequest.getNpwpAddress3());
        params.put("npwpName", qinsertVendorRequest.getNpwpName());
        params.put("npwpEffective", qinsertVendorRequest.getNpwpEffective());
        params.put("sppkpNumber", qinsertVendorRequest.getSppkpNumber());
        params.put("statSppkp", qinsertVendorRequest.getStatSppkp());
        params.put("vsi", qinsertVendorRequest.getVsi());
        params.put("serviceOffice", qinsertVendorRequest.getServiceOffice());
        params.put("addServiceOffice", qinsertVendorRequest.getAddServiceOffice());

        return queryExecutor.executeNamedQueryForUpdate("qInsertVendor", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertForgotUser(QinsertForgotUserRequest qinsertForgotUserRequest) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("userName", qinsertForgotUserRequest.getUserName());
        params.put("companyName", qinsertForgotUserRequest.getCompanyName());
        params.put("companyNpwp", qinsertForgotUserRequest.getCompanyNpwp());
        params.put("companyEmail", qinsertForgotUserRequest.getCompanyEmail());
        params.put("ktp", qinsertForgotUserRequest.getKtp());
        params.put("location", qinsertForgotUserRequest.getLocation());

        return queryExecutor.executeNamedQueryForUpdate("qInsertForgotUser", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertTax(QinsertTaxRequest qinsertTaxRequest) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("vendorCode", qinsertTaxRequest.getVendorCode());
        params.put("userName", qinsertTaxRequest.getUserName());
        params.put("exemptionNumber", qinsertTaxRequest.getExemptionNumber());
        params.put("dateFrom", qinsertTaxRequest.getDateFrom());
        params.put("dateTo", qinsertTaxRequest.getDateTo());
        params.put("exemptionType", qinsertTaxRequest.getExemptionType());
        params.put("companyCode", qinsertTaxRequest.getCompanyCode());

        return queryExecutor.executeNamedQueryForUpdate("qInsertTax", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertBank(QinsertBankRequest qinsertBankRequest) {
        Map<String, Object> params = new HashMap<>(9);

        params.put("countryCode", qinsertBankRequest.getCountryCode());
        params.put("bankName", qinsertBankRequest.getBankName());
        params.put("userName", qinsertBankRequest.getUserName());
        params.put("accountNumber", qinsertBankRequest.getAccountNumber());
        params.put("accountName", qinsertBankRequest.getAccountName());
        params.put("branch", qinsertBankRequest.getBranch());
        params.put("currency", qinsertBankRequest.getCurrency());
        params.put("beneficiaryType", qinsertBankRequest.getBeneficiaryType());
        params.put("beneficiaryStatus", qinsertBankRequest.getBeneficiaryStatus());

        return queryExecutor.executeNamedQueryForUpdate("qInsertBank", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetTaxOverseasResponse> executeGetTaxOverseas(String userName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        return queryExecutor.executeNamedQuery("getTaxOverseas", params, GetTaxOverseasResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTaxOverseas(String userName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        QueryProcedureInput<GetTaxOverseasResponse> queryInput = new QueryProcedureInput<>("getTaxOverseas", params, GetTaxOverseasResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdatePic(QupdatePicRequest qupdatePicRequest) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("namePic", qupdatePicRequest.getNamePic());
        params.put("emailPic", qupdatePicRequest.getEmailPic());
        params.put("phonePic", qupdatePicRequest.getPhonePic());
        params.put("positionPic", qupdatePicRequest.getPositionPic());
        params.put("areaPic", qupdatePicRequest.getAreaPic());
        params.put("reason", qupdatePicRequest.getReason());
        params.put("idPIC", qupdatePicRequest.getIdPic());

        return queryExecutor.executeNamedQueryForUpdate("qUpdatePic", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQRfusUpdateBank(QrfusUpdateBankRequest qrfusUpdateBankRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorCode", qrfusUpdateBankRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("qRfusUpdateBank", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetIvendorDataOverseasResponse> executeGetIvendorDataOverseas(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getIvendorDataOverseas", params, GetIvendorDataOverseasResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetIvendorDataOverseas(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetIvendorDataOverseasResponse> queryInput = new QueryProcedureInput<>("getIvendorDataOverseas", params, GetIvendorDataOverseasResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetRegionResponse> executeQGetRegion(String country, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("country", country);

        return queryExecutor.executeNamedQuery("qGetRegion", params, QgetRegionResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetRegion(String country, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("country", country);

        QueryProcedureInput<QgetRegionResponse> queryInput = new QueryProcedureInput<>("qGetRegion", params, QgetRegionResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateTaxKonfOverseeas(QupdateTaxKonfOverseeasRequest qupdateTaxKonfOverseeasRequest) {
        Map<String, Object> params = new HashMap<>(10);

        params.put("taxNumber", qupdateTaxKonfOverseeasRequest.getTaxNumber());
        params.put("sVeCodeOverseas", qupdateTaxKonfOverseeasRequest.getSveCodeOverseas());
        params.put("taxEffective", qupdateTaxKonfOverseeasRequest.getTaxEffective());
        params.put("taxFileUpload", qupdateTaxKonfOverseeasRequest.getTaxFileUpload());
        params.put("taxFileName", qupdateTaxKonfOverseeasRequest.getTaxFileName());
        params.put("certiDomUpload", qupdateTaxKonfOverseeasRequest.getCertiDomUpload());
        params.put("certiDomFileName", qupdateTaxKonfOverseeasRequest.getCertiDomFileName());
        params.put("validFrom", qupdateTaxKonfOverseeasRequest.getValidFrom());
        params.put("validTo", qupdateTaxKonfOverseeasRequest.getValidTo());
        params.put("id", qupdateTaxKonfOverseeasRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateTaxKonfOverseeas", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetVvendorResponse> executeQGetVVendor(String vcode, String vname, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("VCode", vcode);
        params.put("VName", vname);

        return queryExecutor.executeNamedQuery("qGetVVendor", params, QgetVvendorResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetVVendor(String vcode, String vname, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("VCode", vcode);
        params.put("VName", vname);

        QueryProcedureInput<QgetVvendorResponse> queryInput = new QueryProcedureInput<>("qGetVVendor", params, QgetVvendorResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetBankNameByCountryResponse> executeQGetBankNameByCountry(String countryCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("countryCode", countryCode);

        return queryExecutor.executeNamedQuery("qGetBankNameByCountry", params, QgetBankNameByCountryResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetBankNameByCountry(String countryCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("countryCode", countryCode);

        QueryProcedureInput<QgetBankNameByCountryResponse> queryInput = new QueryProcedureInput<>("qGetBankNameByCountry", params, QgetBankNameByCountryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeSvUpdateUserTax(SvUpdateUserTaxRequest svUpdateUserTaxRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("userName", svUpdateUserTaxRequest.getUserName());
        params.put("vendorCode", svUpdateUserTaxRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("svUpdateUserTax", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateUserPIC(QupdateUserPicRequest qupdateUserPicRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("userName", qupdateUserPicRequest.getUserName());
        params.put("vendorCode", qupdateUserPicRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateUserPIC", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetDocBankResponse> executeQGetDocBank(String vendorCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorCode", vendorCode);

        return queryExecutor.executeNamedQuery("qGetDocBank", params, QgetDocBankResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetDocBank(String vendorCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorCode", vendorCode);

        QueryProcedureInput<QgetDocBankResponse> queryInput = new QueryProcedureInput<>("qGetDocBank", params, QgetDocBankResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertPIC(QinsertPicRequest qinsertPicRequest) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("namePIC", qinsertPicRequest.getNamePic());
        params.put("emailPIC", qinsertPicRequest.getEmailPic());
        params.put("phonePIC", qinsertPicRequest.getPhonePic());
        params.put("selectPositionPIC", qinsertPicRequest.getSelectPositionPic());
        params.put("selectAreaPIC", qinsertPicRequest.getSelectAreaPic());
        params.put("password", qinsertPicRequest.getPassword());
        params.put("userName", qinsertPicRequest.getUserName());

        return queryExecutor.executeNamedQueryForUpdate("qInsertPIC", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateDataBank(QupdateDataBankRequest qupdateDataBankRequest) {
        Map<String, Object> params = new HashMap<>(10);

        params.put("vendorCode", qupdateDataBankRequest.getVendorCode());
        params.put("countryCode", qupdateDataBankRequest.getCountryCode());
        params.put("bankKey", qupdateDataBankRequest.getBankKey());
        params.put("userName", qupdateDataBankRequest.getUserName());
        params.put("accountNumber", qupdateDataBankRequest.getAccountNumber());
        params.put("accountName", qupdateDataBankRequest.getAccountName());
        params.put("branch", qupdateDataBankRequest.getBranch());
        params.put("currency", qupdateDataBankRequest.getCurrency());
        params.put("beneficiaryType", qupdateDataBankRequest.getBeneficiaryType());
        params.put("beneficiaryStatus", qupdateDataBankRequest.getBeneficiaryStatus());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateDataBank", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetVendorDataForgotUserResponse> executeGetVendorDataForgotUser(String npwpNumber, String idDirector, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("npwpNumber", npwpNumber);
        params.put("idDirector", idDirector);

        return queryExecutor.executeNamedQuery("getVendorDataForgotUser", params, GetVendorDataForgotUserResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetVendorDataForgotUser(String npwpNumber, String idDirector, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("npwpNumber", npwpNumber);
        params.put("idDirector", idDirector);

        QueryProcedureInput<GetVendorDataForgotUserResponse> queryInput = new QueryProcedureInput<>("getVendorDataForgotUser", params, GetVendorDataForgotUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertDocBank(QinsertDocBankRequest qinsertDocBankRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("idVendor", qinsertDocBankRequest.getIdVendor());
        params.put("fileName", qinsertDocBankRequest.getFileName());
        params.put("fileUrl", qinsertDocBankRequest.getFileUrl());

        return queryExecutor.executeNamedQueryForUpdate("qInsertDocBank", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeUpdateIVendorData(UpdateIvendorDataRequest updateIvendorDataRequest) {
        Map<String, Object> params = new HashMap<>(20);

        params.put("selectTitle", updateIvendorDataRequest.getSelectTitle());
        params.put("veName", updateIvendorDataRequest.getVeName());
        params.put("officeAddress", updateIvendorDataRequest.getOfficeAddress());
        params.put("rtRw", updateIvendorDataRequest.getRtRw());
        params.put("kelurahan", updateIvendorDataRequest.getKelurahan());
        params.put("kecamatan", updateIvendorDataRequest.getKecamatan());
        params.put("pos", updateIvendorDataRequest.getPos());
        params.put("city", updateIvendorDataRequest.getCity());
        params.put("picUpload", updateIvendorDataRequest.getPicUpload());
        params.put("telephone", updateIvendorDataRequest.getTelephone());
        params.put("mobilePhone", updateIvendorDataRequest.getMobilePhone());
        params.put("webCompany", updateIvendorDataRequest.getWebCompany());
        params.put("directorEmail", updateIvendorDataRequest.getDirectorEmail());
        params.put("directorName", updateIvendorDataRequest.getDirectorName());
        params.put("idDirector", updateIvendorDataRequest.getIdDirector());
        params.put("companyEmail", updateIvendorDataRequest.getCompanyEmail());
        params.put("location", updateIvendorDataRequest.getLocation());
        params.put("businessFieldSector", updateIvendorDataRequest.getBusinessFieldSector());
        params.put("catUpload", updateIvendorDataRequest.getCatUpload());
        params.put("sVeCodeLocal", updateIvendorDataRequest.getSveCodeLocal());

        return queryExecutor.executeNamedQueryForUpdate("updateIVendorData", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetPicResponse> executeGetPic(String userName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        return queryExecutor.executeNamedQuery("getPic", params, GetPicResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPic(String userName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        QueryProcedureInput<GetPicResponse> queryInput = new QueryProcedureInput<>("getPic", params, GetPicResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateDocBank(QupdateDocBankRequest qupdateDocBankRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("fileName", qupdateDocBankRequest.getFileName());
        params.put("filePath", qupdateDocBankRequest.getFilePath());
        params.put("idDocBank", qupdateDocBankRequest.getIdDocBank());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateDocBank", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdatePassword(QupdatePasswordRequest qupdatePasswordRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("userName", qupdatePasswordRequest.getUserName());
        params.put("email", qupdatePasswordRequest.getEmail());
        params.put("password", qupdatePasswordRequest.getPassword());
        params.put("vendorCode", qupdatePasswordRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("qUpdatePassword", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateVendor(QupdateVendorRequest qupdateVendorRequest) {
        Map<String, Object> params = new HashMap<>(27);

        params.put("tittle", qupdateVendorRequest.getTittle());
        params.put("veName", qupdateVendorRequest.getVeName());
        params.put("companyEmail", qupdateVendorRequest.getCompanyEmail());
        params.put("officeAddress", qupdateVendorRequest.getOfficeAddress());
        params.put("city", qupdateVendorRequest.getCity());
        params.put("nib", qupdateVendorRequest.getNib());
        params.put("doi", qupdateVendorRequest.getDoi());
        params.put("telephone", qupdateVendorRequest.getTelephone());
        params.put("mobilePhone", qupdateVendorRequest.getMobilePhone());
        params.put("rtRw", qupdateVendorRequest.getRtRw());
        params.put("kelurahan", qupdateVendorRequest.getKelurahan());
        params.put("kecamatan", qupdateVendorRequest.getKecamatan());
        params.put("pos", qupdateVendorRequest.getPos());
        params.put("province", qupdateVendorRequest.getProvince());
        params.put("directorEmail", qupdateVendorRequest.getDirectorEmail());
        params.put("nameDirector", qupdateVendorRequest.getNameDirector());
        params.put("idDirector", qupdateVendorRequest.getIdDirector());
        params.put("webCompany", qupdateVendorRequest.getWebCompany());
        params.put("businessFieldSector", qupdateVendorRequest.getBusinessFieldSector());
        params.put("radioLocation", qupdateVendorRequest.getRadioLocation());
        params.put("picUpload", qupdateVendorRequest.getPicUpload());
        params.put("catUpload", qupdateVendorRequest.getCatUpload());
        params.put("password", qupdateVendorRequest.getPassword());
        params.put("picName", qupdateVendorRequest.getPicName());
        params.put("catName", qupdateVendorRequest.getCatName());
        params.put("vendorCode", qupdateVendorRequest.getVendorCode());
        params.put("username", qupdateVendorRequest.getUsername());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateVendor", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQForgotPassVen(QforgotPassVenRequest qforgotPassVenRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("password", qforgotPassVenRequest.getPassword());
        params.put("username", qforgotPassVenRequest.getUsername());
        params.put("email", qforgotPassVenRequest.getEmail());

        return queryExecutor.executeNamedQueryForUpdate("qForgotPassVen", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertHistory(QinsertHistoryRequest qinsertHistoryRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("inputBy", qinsertHistoryRequest.getInputBy());
        params.put("History", qinsertHistoryRequest.getHistory());

        return queryExecutor.executeNamedQueryForUpdate("qInsertHistory", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateSupDoc(QupdateSupDocRequest qupdateSupDocRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("fileName", qupdateSupDocRequest.getFileName());
        params.put("filePath", qupdateSupDocRequest.getFilePath());
        params.put("remark", qupdateSupDocRequest.getRemark());
        params.put("idSupDoc", qupdateSupDocRequest.getIdSupDoc());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateSupDoc", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetEmailListResponse> executeGetEmailList(String puon, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("puon", puon);

        return queryExecutor.executeNamedQuery("getEmailList", params, GetEmailListResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetEmailList(String puon, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("puon", puon);

        QueryProcedureInput<GetEmailListResponse> queryInput = new QueryProcedureInput<>("getEmailList", params, GetEmailListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GrtrackingVendorInfoResponse> executeGRTrackingVendorInfo(String vendorcode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorcode", vendorcode);

        return queryExecutor.executeNamedQuery("GRTrackingVendorInfo", params, GrtrackingVendorInfoResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGRTrackingVendorInfo(String vendorcode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendorcode", vendorcode);

        QueryProcedureInput<GrtrackingVendorInfoResponse> queryInput = new QueryProcedureInput<>("GRTrackingVendorInfo", params, GrtrackingVendorInfoResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertTaxOverseas(QinsertTaxOverseasRequest qinsertTaxOverseasRequest) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("vendorCode", qinsertTaxOverseasRequest.getVendorCode());
        params.put("userName", qinsertTaxOverseasRequest.getUserName());
        params.put("dateFrom", qinsertTaxOverseasRequest.getDateFrom());
        params.put("dateTo", qinsertTaxOverseasRequest.getDateTo());
        params.put("companyCode", qinsertTaxOverseasRequest.getCompanyCode());

        return queryExecutor.executeNamedQueryForUpdate("qInsertTaxOverseas", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetCurrencyDataResponse> executeQGetCurrencyData(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetCurrencyData", params, QgetCurrencyDataResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetCurrencyData(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetCurrencyDataResponse> queryInput = new QueryProcedureInput<>("qGetCurrencyData", params, QgetCurrencyDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQInsertSppkp(QinsertSppkpRequest qinsertSppkpRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("idVendor", qinsertSppkpRequest.getIdVendor());
        params.put("fileName", qinsertSppkpRequest.getFileName());
        params.put("fileUrl", qinsertSppkpRequest.getFileUrl());

        return queryExecutor.executeNamedQueryForUpdate("qInsertSppkp", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeUpdateVendorData(UpdateVendorDataRequest updateVendorDataRequest) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("veName", updateVendorDataRequest.getVeName());
        params.put("selectTitle", updateVendorDataRequest.getSelectTitle());
        params.put("city", updateVendorDataRequest.getCity());
        params.put("directorEmail", updateVendorDataRequest.getDirectorEmail());
        params.put("telephone", updateVendorDataRequest.getTelephone());
        params.put("mobilePhone", updateVendorDataRequest.getMobilePhone());
        params.put("sVeCodeLocal", updateVendorDataRequest.getSveCodeLocal());

        return queryExecutor.executeNamedQueryForUpdate("updateVendorData", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetBankNameByBankeyResponse> executeQGetBankNameByBankey(String countryCode, String bankCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("countryCode", countryCode);
        params.put("bankCode", bankCode);

        return queryExecutor.executeNamedQuery("qGetBankNameByBankey", params, QgetBankNameByBankeyResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetBankNameByBankey(String countryCode, String bankCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("countryCode", countryCode);
        params.put("bankCode", bankCode);

        QueryProcedureInput<QgetBankNameByBankeyResponse> queryInput = new QueryProcedureInput<>("qGetBankNameByBankey", params, QgetBankNameByBankeyResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateBank(QupdateBankRequest qupdateBankRequest) {
        Map<String, Object> params = new HashMap<>(9);

        params.put("sCountryCode", qupdateBankRequest.getScountryCode());
        params.put("bankName", qupdateBankRequest.getBankName());
        params.put("accountNumber", qupdateBankRequest.getAccountNumber());
        params.put("accountName", qupdateBankRequest.getAccountName());
        params.put("branch", qupdateBankRequest.getBranch());
        params.put("currency", qupdateBankRequest.getCurrency());
        params.put("beneficiaryType", qupdateBankRequest.getBeneficiaryType());
        params.put("beneficiaryStatus", qupdateBankRequest.getBeneficiaryStatus());
        params.put("id", qupdateBankRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateBank", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetCountyDataResponse> executeQGetCountyData(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetCountyData", params, QgetCountyDataResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetCountyData(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetCountyDataResponse> queryInput = new QueryProcedureInput<>("qGetCountyData", params, QgetCountyDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateUserBank(QupdateUserBankRequest qupdateUserBankRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("userName", qupdateUserBankRequest.getUserName());
        params.put("vendorCode", qupdateUserBankRequest.getVendorCode());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateUserBank", params);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQUpdateCertiDom(QupdateCertiDomRequest qupdateCertiDomRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("fileName", qupdateCertiDomRequest.getFileName());
        params.put("filePath", qupdateCertiDomRequest.getFilePath());
        params.put("idCertiDom", qupdateCertiDomRequest.getIdCertiDom());

        return queryExecutor.executeNamedQueryForUpdate("qUpdateCertiDom", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetSupDocResponse> executeGetSupDoc(String idVendor, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("idVendor", idVendor);

        return queryExecutor.executeNamedQuery("getSupDoc", params, GetSupDocResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetSupDoc(String idVendor, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("idVendor", idVendor);

        QueryProcedureInput<GetSupDocResponse> queryInput = new QueryProcedureInput<>("getSupDoc", params, GetSupDocResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetIvendorDataResponse> executeGetIvendorData(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("getIvendorData", params, GetIvendorDataResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetIvendorData(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput<GetIvendorDataResponse> queryInput = new QueryProcedureInput<>("getIvendorData", params, GetIvendorDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public Integer executeQDeleteBankKonf(String id) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQueryForUpdate("qDeleteBankKonf", params);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetTaxResponse> executeGetTax(String userName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        return queryExecutor.executeNamedQuery("getTax", params, GetTaxResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTax(String userName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userName", userName);

        QueryProcedureInput<GetTaxResponse> queryInput = new QueryProcedureInput<>("getTax", params, GetTaxResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<GetDataVendorByCodeResponse> executeGetDataVendorByCode(String vendorCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendor_code", vendorCode);

        return queryExecutor.executeNamedQuery("GetDataVendorByCode", params, GetDataVendorByCodeResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDataVendorByCode(String vendorCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("vendor_code", vendorCode);

        QueryProcedureInput<GetDataVendorByCodeResponse> queryInput = new QueryProcedureInput<>("GetDataVendorByCode", params, GetDataVendorByCodeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AVM2TransactionManager", readOnly = true)
    @Override
    public Page<QgetRegIndoResponse> executeQGetRegIndo(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetRegIndo", params, QgetRegIndoResponse.class, pageable);
    }

    @Transactional(value = "AVM2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetRegIndo(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetRegIndoResponse> queryInput = new QueryProcedureInput<>("qGetRegIndo", params, QgetRegIndoResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}