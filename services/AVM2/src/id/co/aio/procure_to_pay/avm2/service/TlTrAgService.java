/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrAg;

/**
 * Service object for domain model class {@link TlTrAg}.
 */
public interface TlTrAgService {

    /**
     * Creates a new TlTrAg. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrAg if any.
     *
     * @param tlTrAg Details of the TlTrAg to be created; value cannot be null.
     * @return The newly created TlTrAg.
     */
    TlTrAg create(@Valid TlTrAg tlTrAg);


	/**
     * Returns TlTrAg by given id if exists.
     *
     * @param tltragId The id of the TlTrAg to get; value cannot be null.
     * @return TlTrAg associated with the given tltragId.
	 * @throws EntityNotFoundException If no TlTrAg is found.
     */
    TlTrAg getById(Integer tltragId);

    /**
     * Find and return the TlTrAg by given id if exists, returns null otherwise.
     *
     * @param tltragId The id of the TlTrAg to get; value cannot be null.
     * @return TlTrAg associated with the given tltragId.
     */
    TlTrAg findById(Integer tltragId);

	/**
     * Find and return the list of TlTrAgs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tltragIds The id's of the TlTrAg to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlTrAgs associated with the given tltragIds.
     */
    List<TlTrAg> findByMultipleIds(List<Integer> tltragIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlTrAg. It replaces all fields of the existing TlTrAg with the given tlTrAg.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrAg if any.
     *
     * @param tlTrAg The details of the TlTrAg to be updated; value cannot be null.
     * @return The updated TlTrAg.
     * @throws EntityNotFoundException if no TlTrAg is found with given input.
     */
    TlTrAg update(@Valid TlTrAg tlTrAg);


    /**
     * Partially updates the details of an existing TlTrAg. It updates only the
     * fields of the existing TlTrAg which are passed in the tlTrAgPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrAg if any.
     *
     * @param tltragId The id of the TlTrAg to be deleted; value cannot be null.
     * @param tlTrAgPatch The partial data of TlTrAg which is supposed to be updated; value cannot be null.
     * @return The updated TlTrAg.
     * @throws EntityNotFoundException if no TlTrAg is found with given input.
     */
    TlTrAg partialUpdate(Integer tltragId, Map<String, Object> tlTrAgPatch);

    /**
     * Deletes an existing TlTrAg with the given id.
     *
     * @param tltragId The id of the TlTrAg to be deleted; value cannot be null.
     * @return The deleted TlTrAg.
     * @throws EntityNotFoundException if no TlTrAg found with the given id.
     */
    TlTrAg delete(Integer tltragId);

    /**
     * Deletes an existing TlTrAg with the given object.
     *
     * @param tlTrAg The instance of the TlTrAg to be deleted; value cannot be null.
     */
    void delete(TlTrAg tlTrAg);

    /**
     * Find all TlTrAgs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrAgs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlTrAg> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlTrAgs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrAgs.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlTrAg> findAll(String query, Pageable pageable);

    /**
     * Exports all TlTrAgs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlTrAgs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlTrAgs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlTrAg.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}