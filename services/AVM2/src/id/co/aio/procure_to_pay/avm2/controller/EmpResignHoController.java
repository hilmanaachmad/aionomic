/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.EmpResignHo;
import id.co.aio.procure_to_pay.avm2.EmpResignHoId;
import id.co.aio.procure_to_pay.avm2.service.EmpResignHoService;


/**
 * Controller object for domain model class EmpResignHo.
 * @see EmpResignHo
 */
@RestController("AVM2.EmpResignHoController")
@Api(value = "EmpResignHoController", description = "Exposes APIs to work with EmpResignHo resource.")
@RequestMapping("/AVM2/EmpResignHo")
public class EmpResignHoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpResignHoController.class);

    @Autowired
	@Qualifier("AVM2.EmpResignHoService")
	private EmpResignHoService empResignHoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EmpResignHo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpResignHo createEmpResignHo(@RequestBody EmpResignHo empResignHo) {
		LOGGER.debug("Create EmpResignHo with information: {}" , empResignHo);

		empResignHo = empResignHoService.create(empResignHo);
		LOGGER.debug("Created EmpResignHo with information: {}" , empResignHo);

	    return empResignHo;
	}

    @ApiOperation(value = "Returns the EmpResignHo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpResignHo getEmpResignHo(@RequestParam("nik") String nik, @RequestParam("sapcode") String sapcode) {

        EmpResignHoId empresignhoId = new EmpResignHoId();
        empresignhoId.setNik(nik);
        empresignhoId.setSapcode(sapcode);

        LOGGER.debug("Getting EmpResignHo with id: {}" , empresignhoId);
        EmpResignHo empResignHo = empResignHoService.getById(empresignhoId);
        LOGGER.debug("EmpResignHo details with id: {}" , empResignHo);

        return empResignHo;
    }



    @ApiOperation(value = "Updates the EmpResignHo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpResignHo editEmpResignHo(@RequestParam("nik") String nik, @RequestParam("sapcode") String sapcode, @RequestBody EmpResignHo empResignHo) {

        empResignHo.setNik(nik);
        empResignHo.setSapcode(sapcode);

        LOGGER.debug("EmpResignHo details with id is updated with: {}" , empResignHo);

        return empResignHoService.update(empResignHo);
    }

	@ApiOperation(value = "Partially updates the  EmpResignHo instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpResignHo patchEmpResignHo(@RequestParam("nik") String nik, @RequestParam("sapcode") String sapcode, @RequestBody @MapTo(EmpResignHo.class) Map<String, Object> empResignHoPatch) {

        EmpResignHoId empresignhoId = new EmpResignHoId();
        empresignhoId.setNik(nik);
        empresignhoId.setSapcode(sapcode);
        LOGGER.debug("Partially updating EmpResignHo with id: {}" , empresignhoId);

        EmpResignHo empResignHo = empResignHoService.partialUpdate(empresignhoId, empResignHoPatch);
        LOGGER.debug("EmpResignHo details after partial update: {}" , empResignHo);

        return empResignHo;
    }


    @ApiOperation(value = "Deletes the EmpResignHo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmpResignHo(@RequestParam("nik") String nik, @RequestParam("sapcode") String sapcode) {

        EmpResignHoId empresignhoId = new EmpResignHoId();
        empresignhoId.setNik(nik);
        empresignhoId.setSapcode(sapcode);

        LOGGER.debug("Deleting EmpResignHo with id: {}" , empresignhoId);
        EmpResignHo empResignHo = empResignHoService.delete(empresignhoId);

        return empResignHo != null;
    }


    /**
     * @deprecated Use {@link #findEmpResignHos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmpResignHo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpResignHo> searchEmpResignHosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmpResignHos list by query filter:{}", (Object) queryFilters);
        return empResignHoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpResignHo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpResignHo> findEmpResignHos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpResignHos list by filter:", query);
        return empResignHoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpResignHo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpResignHo> filterEmpResignHos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpResignHos list by filter", query);
        return empResignHoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmpResignHos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return empResignHoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEmpResignHosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EmpResignHo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> empResignHoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EmpResignHo instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmpResignHos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmpResignHos");
		return empResignHoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmpResignHoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return empResignHoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmpResignHoService instance
	 */
	protected void setEmpResignHoService(EmpResignHoService service) {
		this.empResignHoService = service;
	}

}