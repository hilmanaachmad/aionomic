/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsCu;


/**
 * ServiceImpl object for domain model class TlMsCu.
 *
 * @see TlMsCu
 */
@Service("AVM2.TlMsCuService")
@Validated
@EntityService(entityClass = TlMsCu.class, serviceId = "AVM2")
public class TlMsCuServiceImpl implements TlMsCuService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCuServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsCuDao")
    private WMGenericDao<TlMsCu, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsCu, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCu create(TlMsCu tlMsCu) {
        LOGGER.debug("Creating a new TlMsCu with information: {}", tlMsCu);

        TlMsCu tlMsCuCreated = this.wmGenericDao.create(tlMsCu);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsCuCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCu getById(Integer tlmscuId) {
        LOGGER.debug("Finding TlMsCu by id: {}", tlmscuId);
        return this.wmGenericDao.findById(tlmscuId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCu findById(Integer tlmscuId) {
        LOGGER.debug("Finding TlMsCu by id: {}", tlmscuId);
        try {
            return this.wmGenericDao.findById(tlmscuId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsCu found with id: {}", tlmscuId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsCu> findByMultipleIds(List<Integer> tlmscuIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsCus by ids: {}", tlmscuIds);

        return this.wmGenericDao.findByMultipleIds(tlmscuIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsCu update(TlMsCu tlMsCu) {
        LOGGER.debug("Updating TlMsCu with information: {}", tlMsCu);

        this.wmGenericDao.update(tlMsCu);
        this.wmGenericDao.refresh(tlMsCu);

        return tlMsCu;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCu partialUpdate(Integer tlmscuId, Map<String, Object>tlMsCuPatch) {
        LOGGER.debug("Partially Updating the TlMsCu with id: {}", tlmscuId);

        TlMsCu tlMsCu = getById(tlmscuId);

        try {
            ObjectReader tlMsCuReader = this.objectMapper.reader().forType(TlMsCu.class).withValueToUpdate(tlMsCu);
            tlMsCu = tlMsCuReader.readValue(this.objectMapper.writeValueAsString(tlMsCuPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsCuPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsCu = update(tlMsCu);

        return tlMsCu;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCu delete(Integer tlmscuId) {
        LOGGER.debug("Deleting TlMsCu with id: {}", tlmscuId);
        TlMsCu deleted = this.wmGenericDao.findById(tlmscuId);
        if (deleted == null) {
            LOGGER.debug("No TlMsCu found with id: {}", tlmscuId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsCu.class.getSimpleName(), tlmscuId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsCu tlMsCu) {
        LOGGER.debug("Deleting TlMsCu with {}", tlMsCu);
        this.wmGenericDao.delete(tlMsCu);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCu> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCus");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCu> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCus");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCu to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCu to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}