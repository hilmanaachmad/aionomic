/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsDeNew;

/**
 * Service object for domain model class {@link TlMsDeNew}.
 */
public interface TlMsDeNewService {

    /**
     * Creates a new TlMsDeNew. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsDeNew if any.
     *
     * @param tlMsDeNew Details of the TlMsDeNew to be created; value cannot be null.
     * @return The newly created TlMsDeNew.
     */
    TlMsDeNew create(@Valid TlMsDeNew tlMsDeNew);


	/**
     * Returns TlMsDeNew by given id if exists.
     *
     * @param tlmsdenewId The id of the TlMsDeNew to get; value cannot be null.
     * @return TlMsDeNew associated with the given tlmsdenewId.
	 * @throws EntityNotFoundException If no TlMsDeNew is found.
     */
    TlMsDeNew getById(Integer tlmsdenewId);

    /**
     * Find and return the TlMsDeNew by given id if exists, returns null otherwise.
     *
     * @param tlmsdenewId The id of the TlMsDeNew to get; value cannot be null.
     * @return TlMsDeNew associated with the given tlmsdenewId.
     */
    TlMsDeNew findById(Integer tlmsdenewId);

	/**
     * Find and return the list of TlMsDeNews by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsdenewIds The id's of the TlMsDeNew to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsDeNews associated with the given tlmsdenewIds.
     */
    List<TlMsDeNew> findByMultipleIds(List<Integer> tlmsdenewIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsDeNew. It replaces all fields of the existing TlMsDeNew with the given tlMsDeNew.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsDeNew if any.
     *
     * @param tlMsDeNew The details of the TlMsDeNew to be updated; value cannot be null.
     * @return The updated TlMsDeNew.
     * @throws EntityNotFoundException if no TlMsDeNew is found with given input.
     */
    TlMsDeNew update(@Valid TlMsDeNew tlMsDeNew);


    /**
     * Partially updates the details of an existing TlMsDeNew. It updates only the
     * fields of the existing TlMsDeNew which are passed in the tlMsDeNewPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsDeNew if any.
     *
     * @param tlmsdenewId The id of the TlMsDeNew to be deleted; value cannot be null.
     * @param tlMsDeNewPatch The partial data of TlMsDeNew which is supposed to be updated; value cannot be null.
     * @return The updated TlMsDeNew.
     * @throws EntityNotFoundException if no TlMsDeNew is found with given input.
     */
    TlMsDeNew partialUpdate(Integer tlmsdenewId, Map<String, Object> tlMsDeNewPatch);

    /**
     * Deletes an existing TlMsDeNew with the given id.
     *
     * @param tlmsdenewId The id of the TlMsDeNew to be deleted; value cannot be null.
     * @return The deleted TlMsDeNew.
     * @throws EntityNotFoundException if no TlMsDeNew found with the given id.
     */
    TlMsDeNew delete(Integer tlmsdenewId);

    /**
     * Deletes an existing TlMsDeNew with the given object.
     *
     * @param tlMsDeNew The instance of the TlMsDeNew to be deleted; value cannot be null.
     */
    void delete(TlMsDeNew tlMsDeNew);

    /**
     * Find all TlMsDeNews matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsDeNews.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsDeNew> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsDeNews matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsDeNews.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsDeNew> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsDeNews matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsDeNews matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsDeNews in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsDeNew.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}