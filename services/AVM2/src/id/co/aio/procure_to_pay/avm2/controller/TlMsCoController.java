/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsCo;
import id.co.aio.procure_to_pay.avm2.service.TlMsCoService;


/**
 * Controller object for domain model class TlMsCo.
 * @see TlMsCo
 */
@RestController("AVM2.TlMsCoController")
@Api(value = "TlMsCoController", description = "Exposes APIs to work with TlMsCo resource.")
@RequestMapping("/AVM2/TlMsCo")
public class TlMsCoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCoController.class);

    @Autowired
	@Qualifier("AVM2.TlMsCoService")
	private TlMsCoService tlMsCoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsCo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCo createTlMsCo(@RequestBody TlMsCo tlMsCo) {
		LOGGER.debug("Create TlMsCo with information: {}" , tlMsCo);

		tlMsCo = tlMsCoService.create(tlMsCo);
		LOGGER.debug("Created TlMsCo with information: {}" , tlMsCo);

	    return tlMsCo;
	}

    @ApiOperation(value = "Returns the TlMsCo instance associated with the given id.")
    @RequestMapping(value = "/{abCoey:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCo getTlMsCo(@PathVariable("abCoey") String abCoey) {
        LOGGER.debug("Getting TlMsCo with id: {}" , abCoey);

        TlMsCo foundTlMsCo = tlMsCoService.getById(abCoey);
        LOGGER.debug("TlMsCo details with id: {}" , foundTlMsCo);

        return foundTlMsCo;
    }

    @ApiOperation(value = "Updates the TlMsCo instance associated with the given id.")
    @RequestMapping(value = "/{abCoey:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCo editTlMsCo(@PathVariable("abCoey") String abCoey, @RequestBody TlMsCo tlMsCo) {
        LOGGER.debug("Editing TlMsCo with id: {}" , tlMsCo.getAbCoey());

        tlMsCo.setAbCoey(abCoey);
        tlMsCo = tlMsCoService.update(tlMsCo);
        LOGGER.debug("TlMsCo details with id: {}" , tlMsCo);

        return tlMsCo;
    }
    
    @ApiOperation(value = "Partially updates the TlMsCo instance associated with the given id.")
    @RequestMapping(value = "/{abCoey:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCo patchTlMsCo(@PathVariable("abCoey") String abCoey, @RequestBody @MapTo(TlMsCo.class) Map<String, Object> tlMsCoPatch) {
        LOGGER.debug("Partially updating TlMsCo with id: {}" , abCoey);

        TlMsCo tlMsCo = tlMsCoService.partialUpdate(abCoey, tlMsCoPatch);
        LOGGER.debug("TlMsCo details after partial update: {}" , tlMsCo);

        return tlMsCo;
    }

    @ApiOperation(value = "Deletes the TlMsCo instance associated with the given id.")
    @RequestMapping(value = "/{abCoey:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsCo(@PathVariable("abCoey") String abCoey) {
        LOGGER.debug("Deleting TlMsCo with id: {}" , abCoey);

        TlMsCo deletedTlMsCo = tlMsCoService.delete(abCoey);

        return deletedTlMsCo != null;
    }

    /**
     * @deprecated Use {@link #findTlMsCos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsCo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsCo> searchTlMsCosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsCos list by query filter:{}", (Object) queryFilters);
        return tlMsCoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsCo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsCo> findTlMsCos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsCos list by filter:", query);
        return tlMsCoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsCo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsCo> filterTlMsCos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsCos list by filter", query);
        return tlMsCoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsCos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsCoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsCosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsCo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsCoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsCo instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsCos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsCos");
		return tlMsCoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsCoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsCoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsCoService instance
	 */
	protected void setTlMsCoService(TlMsCoService service) {
		this.tlMsCoService = service;
	}

}