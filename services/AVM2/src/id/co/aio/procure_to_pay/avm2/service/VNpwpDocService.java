/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VNpwpDoc;

/**
 * Service object for domain model class {@link VNpwpDoc}.
 */
public interface VNpwpDocService {

    /**
     * Creates a new VNpwpDoc. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VNpwpDoc if any.
     *
     * @param vnpwpDoc Details of the VNpwpDoc to be created; value cannot be null.
     * @return The newly created VNpwpDoc.
     */
    VNpwpDoc create(@Valid VNpwpDoc vnpwpDoc);


	/**
     * Returns VNpwpDoc by given id if exists.
     *
     * @param vnpwpdocId The id of the VNpwpDoc to get; value cannot be null.
     * @return VNpwpDoc associated with the given vnpwpdocId.
	 * @throws EntityNotFoundException If no VNpwpDoc is found.
     */
    VNpwpDoc getById(Integer vnpwpdocId);

    /**
     * Find and return the VNpwpDoc by given id if exists, returns null otherwise.
     *
     * @param vnpwpdocId The id of the VNpwpDoc to get; value cannot be null.
     * @return VNpwpDoc associated with the given vnpwpdocId.
     */
    VNpwpDoc findById(Integer vnpwpdocId);

	/**
     * Find and return the list of VNpwpDocs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vnpwpdocIds The id's of the VNpwpDoc to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VNpwpDocs associated with the given vnpwpdocIds.
     */
    List<VNpwpDoc> findByMultipleIds(List<Integer> vnpwpdocIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VNpwpDoc. It replaces all fields of the existing VNpwpDoc with the given vnpwpDoc.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VNpwpDoc if any.
     *
     * @param vnpwpDoc The details of the VNpwpDoc to be updated; value cannot be null.
     * @return The updated VNpwpDoc.
     * @throws EntityNotFoundException if no VNpwpDoc is found with given input.
     */
    VNpwpDoc update(@Valid VNpwpDoc vnpwpDoc);


    /**
     * Partially updates the details of an existing VNpwpDoc. It updates only the
     * fields of the existing VNpwpDoc which are passed in the vnpwpDocPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VNpwpDoc if any.
     *
     * @param vnpwpdocId The id of the VNpwpDoc to be deleted; value cannot be null.
     * @param vnpwpDocPatch The partial data of VNpwpDoc which is supposed to be updated; value cannot be null.
     * @return The updated VNpwpDoc.
     * @throws EntityNotFoundException if no VNpwpDoc is found with given input.
     */
    VNpwpDoc partialUpdate(Integer vnpwpdocId, Map<String, Object> vnpwpDocPatch);

    /**
     * Deletes an existing VNpwpDoc with the given id.
     *
     * @param vnpwpdocId The id of the VNpwpDoc to be deleted; value cannot be null.
     * @return The deleted VNpwpDoc.
     * @throws EntityNotFoundException if no VNpwpDoc found with the given id.
     */
    VNpwpDoc delete(Integer vnpwpdocId);

    /**
     * Deletes an existing VNpwpDoc with the given object.
     *
     * @param vnpwpDoc The instance of the VNpwpDoc to be deleted; value cannot be null.
     */
    void delete(VNpwpDoc vnpwpDoc);

    /**
     * Find all VNpwpDocs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VNpwpDocs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VNpwpDoc> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VNpwpDocs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VNpwpDocs.
     *
     * @see Pageable
     * @see Page
     */
    Page<VNpwpDoc> findAll(String query, Pageable pageable);

    /**
     * Exports all VNpwpDocs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VNpwpDocs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VNpwpDocs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VNpwpDoc.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}