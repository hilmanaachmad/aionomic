/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkSmi3;


/**
 * ServiceImpl object for domain model class TlMsAcnkSmi3.
 *
 * @see TlMsAcnkSmi3
 */
@Service("AVM2.TlMsAcnkSmi3Service")
@Validated
@EntityService(entityClass = TlMsAcnkSmi3.class, serviceId = "AVM2")
public class TlMsAcnkSmi3ServiceImpl implements TlMsAcnkSmi3Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAcnkSmi3ServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsAcnkSmi3Dao")
    private WMGenericDao<TlMsAcnkSmi3, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsAcnkSmi3, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkSmi3 create(TlMsAcnkSmi3 tlMsAcnkSmi3) {
        LOGGER.debug("Creating a new TlMsAcnkSmi3 with information: {}", tlMsAcnkSmi3);

        TlMsAcnkSmi3 tlMsAcnkSmi3Created = this.wmGenericDao.create(tlMsAcnkSmi3);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsAcnkSmi3Created);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkSmi3 getById(String tlmsacnksmi3Id) {
        LOGGER.debug("Finding TlMsAcnkSmi3 by id: {}", tlmsacnksmi3Id);
        return this.wmGenericDao.findById(tlmsacnksmi3Id);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkSmi3 findById(String tlmsacnksmi3Id) {
        LOGGER.debug("Finding TlMsAcnkSmi3 by id: {}", tlmsacnksmi3Id);
        try {
            return this.wmGenericDao.findById(tlmsacnksmi3Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsAcnkSmi3 found with id: {}", tlmsacnksmi3Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsAcnkSmi3> findByMultipleIds(List<String> tlmsacnksmi3Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsAcnkSmi3s by ids: {}", tlmsacnksmi3Ids);

        return this.wmGenericDao.findByMultipleIds(tlmsacnksmi3Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkSmi3 update(TlMsAcnkSmi3 tlMsAcnkSmi3) {
        LOGGER.debug("Updating TlMsAcnkSmi3 with information: {}", tlMsAcnkSmi3);

        this.wmGenericDao.update(tlMsAcnkSmi3);
        this.wmGenericDao.refresh(tlMsAcnkSmi3);

        return tlMsAcnkSmi3;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkSmi3 partialUpdate(String tlmsacnksmi3Id, Map<String, Object>tlMsAcnkSmi3Patch) {
        LOGGER.debug("Partially Updating the TlMsAcnkSmi3 with id: {}", tlmsacnksmi3Id);

        TlMsAcnkSmi3 tlMsAcnkSmi3 = getById(tlmsacnksmi3Id);

        try {
            ObjectReader tlMsAcnkSmi3Reader = this.objectMapper.reader().forType(TlMsAcnkSmi3.class).withValueToUpdate(tlMsAcnkSmi3);
            tlMsAcnkSmi3 = tlMsAcnkSmi3Reader.readValue(this.objectMapper.writeValueAsString(tlMsAcnkSmi3Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsAcnkSmi3Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsAcnkSmi3 = update(tlMsAcnkSmi3);

        return tlMsAcnkSmi3;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkSmi3 delete(String tlmsacnksmi3Id) {
        LOGGER.debug("Deleting TlMsAcnkSmi3 with id: {}", tlmsacnksmi3Id);
        TlMsAcnkSmi3 deleted = this.wmGenericDao.findById(tlmsacnksmi3Id);
        if (deleted == null) {
            LOGGER.debug("No TlMsAcnkSmi3 found with id: {}", tlmsacnksmi3Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsAcnkSmi3.class.getSimpleName(), tlmsacnksmi3Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsAcnkSmi3 tlMsAcnkSmi3) {
        LOGGER.debug("Deleting TlMsAcnkSmi3 with {}", tlMsAcnkSmi3);
        this.wmGenericDao.delete(tlMsAcnkSmi3);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAcnkSmi3> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAcnkSmi3s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAcnkSmi3> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAcnkSmi3s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAcnkSmi3 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAcnkSmi3 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}