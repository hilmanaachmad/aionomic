/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsLoEntity;


/**
 * ServiceImpl object for domain model class TlMsLoEntity.
 *
 * @see TlMsLoEntity
 */
@Service("AVM2.TlMsLoEntityService")
@Validated
@EntityService(entityClass = TlMsLoEntity.class, serviceId = "AVM2")
public class TlMsLoEntityServiceImpl implements TlMsLoEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsLoEntityServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsLoEntityDao")
    private WMGenericDao<TlMsLoEntity, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsLoEntity, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLoEntity create(TlMsLoEntity tlMsLoEntity) {
        LOGGER.debug("Creating a new TlMsLoEntity with information: {}", tlMsLoEntity);

        TlMsLoEntity tlMsLoEntityCreated = this.wmGenericDao.create(tlMsLoEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsLoEntityCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsLoEntity getById(String tlmsloentityId) {
        LOGGER.debug("Finding TlMsLoEntity by id: {}", tlmsloentityId);
        return this.wmGenericDao.findById(tlmsloentityId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsLoEntity findById(String tlmsloentityId) {
        LOGGER.debug("Finding TlMsLoEntity by id: {}", tlmsloentityId);
        try {
            return this.wmGenericDao.findById(tlmsloentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsLoEntity found with id: {}", tlmsloentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsLoEntity> findByMultipleIds(List<String> tlmsloentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsLoEntities by ids: {}", tlmsloentityIds);

        return this.wmGenericDao.findByMultipleIds(tlmsloentityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsLoEntity update(TlMsLoEntity tlMsLoEntity) {
        LOGGER.debug("Updating TlMsLoEntity with information: {}", tlMsLoEntity);

        this.wmGenericDao.update(tlMsLoEntity);
        this.wmGenericDao.refresh(tlMsLoEntity);

        return tlMsLoEntity;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLoEntity partialUpdate(String tlmsloentityId, Map<String, Object>tlMsLoEntityPatch) {
        LOGGER.debug("Partially Updating the TlMsLoEntity with id: {}", tlmsloentityId);

        TlMsLoEntity tlMsLoEntity = getById(tlmsloentityId);

        try {
            ObjectReader tlMsLoEntityReader = this.objectMapper.reader().forType(TlMsLoEntity.class).withValueToUpdate(tlMsLoEntity);
            tlMsLoEntity = tlMsLoEntityReader.readValue(this.objectMapper.writeValueAsString(tlMsLoEntityPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsLoEntityPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsLoEntity = update(tlMsLoEntity);

        return tlMsLoEntity;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLoEntity delete(String tlmsloentityId) {
        LOGGER.debug("Deleting TlMsLoEntity with id: {}", tlmsloentityId);
        TlMsLoEntity deleted = this.wmGenericDao.findById(tlmsloentityId);
        if (deleted == null) {
            LOGGER.debug("No TlMsLoEntity found with id: {}", tlmsloentityId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsLoEntity.class.getSimpleName(), tlmsloentityId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsLoEntity tlMsLoEntity) {
        LOGGER.debug("Deleting TlMsLoEntity with {}", tlMsLoEntity);
        this.wmGenericDao.delete(tlMsLoEntity);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsLoEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsLoEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsLoEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsLoEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsLoEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsLoEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}