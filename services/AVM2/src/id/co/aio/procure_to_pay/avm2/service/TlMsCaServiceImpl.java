/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsCa;


/**
 * ServiceImpl object for domain model class TlMsCa.
 *
 * @see TlMsCa
 */
@Service("AVM2.TlMsCaService")
@Validated
@EntityService(entityClass = TlMsCa.class, serviceId = "AVM2")
public class TlMsCaServiceImpl implements TlMsCaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCaServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsCaDao")
    private WMGenericDao<TlMsCa, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsCa, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCa create(TlMsCa tlMsCa) {
        LOGGER.debug("Creating a new TlMsCa with information: {}", tlMsCa);

        TlMsCa tlMsCaCreated = this.wmGenericDao.create(tlMsCa);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsCaCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCa getById(Integer tlmscaId) {
        LOGGER.debug("Finding TlMsCa by id: {}", tlmscaId);
        return this.wmGenericDao.findById(tlmscaId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCa findById(Integer tlmscaId) {
        LOGGER.debug("Finding TlMsCa by id: {}", tlmscaId);
        try {
            return this.wmGenericDao.findById(tlmscaId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsCa found with id: {}", tlmscaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsCa> findByMultipleIds(List<Integer> tlmscaIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsCas by ids: {}", tlmscaIds);

        return this.wmGenericDao.findByMultipleIds(tlmscaIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsCa update(TlMsCa tlMsCa) {
        LOGGER.debug("Updating TlMsCa with information: {}", tlMsCa);

        this.wmGenericDao.update(tlMsCa);
        this.wmGenericDao.refresh(tlMsCa);

        return tlMsCa;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCa partialUpdate(Integer tlmscaId, Map<String, Object>tlMsCaPatch) {
        LOGGER.debug("Partially Updating the TlMsCa with id: {}", tlmscaId);

        TlMsCa tlMsCa = getById(tlmscaId);

        try {
            ObjectReader tlMsCaReader = this.objectMapper.reader().forType(TlMsCa.class).withValueToUpdate(tlMsCa);
            tlMsCa = tlMsCaReader.readValue(this.objectMapper.writeValueAsString(tlMsCaPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsCaPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsCa = update(tlMsCa);

        return tlMsCa;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCa delete(Integer tlmscaId) {
        LOGGER.debug("Deleting TlMsCa with id: {}", tlmscaId);
        TlMsCa deleted = this.wmGenericDao.findById(tlmscaId);
        if (deleted == null) {
            LOGGER.debug("No TlMsCa found with id: {}", tlmscaId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsCa.class.getSimpleName(), tlmscaId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsCa tlMsCa) {
        LOGGER.debug("Deleting TlMsCa with {}", tlMsCa);
        this.wmGenericDao.delete(tlMsCa);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCa> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCa> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCa to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCa to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}