/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.PhpMsLogin;

/**
 * Service object for domain model class {@link PhpMsLogin}.
 */
public interface PhpMsLoginService {

    /**
     * Creates a new PhpMsLogin. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PhpMsLogin if any.
     *
     * @param phpMsLogin Details of the PhpMsLogin to be created; value cannot be null.
     * @return The newly created PhpMsLogin.
     */
    PhpMsLogin create(@Valid PhpMsLogin phpMsLogin);


	/**
     * Returns PhpMsLogin by given id if exists.
     *
     * @param phpmsloginId The id of the PhpMsLogin to get; value cannot be null.
     * @return PhpMsLogin associated with the given phpmsloginId.
	 * @throws EntityNotFoundException If no PhpMsLogin is found.
     */
    PhpMsLogin getById(String phpmsloginId);

    /**
     * Find and return the PhpMsLogin by given id if exists, returns null otherwise.
     *
     * @param phpmsloginId The id of the PhpMsLogin to get; value cannot be null.
     * @return PhpMsLogin associated with the given phpmsloginId.
     */
    PhpMsLogin findById(String phpmsloginId);

	/**
     * Find and return the list of PhpMsLogins by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param phpmsloginIds The id's of the PhpMsLogin to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PhpMsLogins associated with the given phpmsloginIds.
     */
    List<PhpMsLogin> findByMultipleIds(List<String> phpmsloginIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PhpMsLogin. It replaces all fields of the existing PhpMsLogin with the given phpMsLogin.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PhpMsLogin if any.
     *
     * @param phpMsLogin The details of the PhpMsLogin to be updated; value cannot be null.
     * @return The updated PhpMsLogin.
     * @throws EntityNotFoundException if no PhpMsLogin is found with given input.
     */
    PhpMsLogin update(@Valid PhpMsLogin phpMsLogin);


    /**
     * Partially updates the details of an existing PhpMsLogin. It updates only the
     * fields of the existing PhpMsLogin which are passed in the phpMsLoginPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PhpMsLogin if any.
     *
     * @param phpmsloginId The id of the PhpMsLogin to be deleted; value cannot be null.
     * @param phpMsLoginPatch The partial data of PhpMsLogin which is supposed to be updated; value cannot be null.
     * @return The updated PhpMsLogin.
     * @throws EntityNotFoundException if no PhpMsLogin is found with given input.
     */
    PhpMsLogin partialUpdate(String phpmsloginId, Map<String, Object> phpMsLoginPatch);

    /**
     * Deletes an existing PhpMsLogin with the given id.
     *
     * @param phpmsloginId The id of the PhpMsLogin to be deleted; value cannot be null.
     * @return The deleted PhpMsLogin.
     * @throws EntityNotFoundException if no PhpMsLogin found with the given id.
     */
    PhpMsLogin delete(String phpmsloginId);

    /**
     * Deletes an existing PhpMsLogin with the given object.
     *
     * @param phpMsLogin The instance of the PhpMsLogin to be deleted; value cannot be null.
     */
    void delete(PhpMsLogin phpMsLogin);

    /**
     * Find all PhpMsLogins matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PhpMsLogins.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PhpMsLogin> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PhpMsLogins matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PhpMsLogins.
     *
     * @see Pageable
     * @see Page
     */
    Page<PhpMsLogin> findAll(String query, Pageable pageable);

    /**
     * Exports all PhpMsLogins matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PhpMsLogins matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PhpMsLogins in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PhpMsLogin.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}