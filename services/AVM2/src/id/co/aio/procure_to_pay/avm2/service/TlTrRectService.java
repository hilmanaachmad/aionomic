/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrRect;

/**
 * Service object for domain model class {@link TlTrRect}.
 */
public interface TlTrRectService {

    /**
     * Creates a new TlTrRect. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrRect if any.
     *
     * @param tlTrRect Details of the TlTrRect to be created; value cannot be null.
     * @return The newly created TlTrRect.
     */
    TlTrRect create(@Valid TlTrRect tlTrRect);


	/**
     * Returns TlTrRect by given id if exists.
     *
     * @param tltrrectId The id of the TlTrRect to get; value cannot be null.
     * @return TlTrRect associated with the given tltrrectId.
	 * @throws EntityNotFoundException If no TlTrRect is found.
     */
    TlTrRect getById(Integer tltrrectId);

    /**
     * Find and return the TlTrRect by given id if exists, returns null otherwise.
     *
     * @param tltrrectId The id of the TlTrRect to get; value cannot be null.
     * @return TlTrRect associated with the given tltrrectId.
     */
    TlTrRect findById(Integer tltrrectId);

	/**
     * Find and return the list of TlTrRects by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tltrrectIds The id's of the TlTrRect to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlTrRects associated with the given tltrrectIds.
     */
    List<TlTrRect> findByMultipleIds(List<Integer> tltrrectIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlTrRect. It replaces all fields of the existing TlTrRect with the given tlTrRect.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrRect if any.
     *
     * @param tlTrRect The details of the TlTrRect to be updated; value cannot be null.
     * @return The updated TlTrRect.
     * @throws EntityNotFoundException if no TlTrRect is found with given input.
     */
    TlTrRect update(@Valid TlTrRect tlTrRect);


    /**
     * Partially updates the details of an existing TlTrRect. It updates only the
     * fields of the existing TlTrRect which are passed in the tlTrRectPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrRect if any.
     *
     * @param tltrrectId The id of the TlTrRect to be deleted; value cannot be null.
     * @param tlTrRectPatch The partial data of TlTrRect which is supposed to be updated; value cannot be null.
     * @return The updated TlTrRect.
     * @throws EntityNotFoundException if no TlTrRect is found with given input.
     */
    TlTrRect partialUpdate(Integer tltrrectId, Map<String, Object> tlTrRectPatch);

    /**
     * Deletes an existing TlTrRect with the given id.
     *
     * @param tltrrectId The id of the TlTrRect to be deleted; value cannot be null.
     * @return The deleted TlTrRect.
     * @throws EntityNotFoundException if no TlTrRect found with the given id.
     */
    TlTrRect delete(Integer tltrrectId);

    /**
     * Deletes an existing TlTrRect with the given object.
     *
     * @param tlTrRect The instance of the TlTrRect to be deleted; value cannot be null.
     */
    void delete(TlTrRect tlTrRect);

    /**
     * Find all TlTrRects matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrRects.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlTrRect> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlTrRects matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrRects.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlTrRect> findAll(String query, Pageable pageable);

    /**
     * Exports all TlTrRects matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlTrRects matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlTrRects in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlTrRect.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}