/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkOld;


/**
 * ServiceImpl object for domain model class TlMsAcnkOld.
 *
 * @see TlMsAcnkOld
 */
@Service("AVM2.TlMsAcnkOldService")
@Validated
@EntityService(entityClass = TlMsAcnkOld.class, serviceId = "AVM2")
public class TlMsAcnkOldServiceImpl implements TlMsAcnkOldService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAcnkOldServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsAcnkOldDao")
    private WMGenericDao<TlMsAcnkOld, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsAcnkOld, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkOld create(TlMsAcnkOld tlMsAcnkOld) {
        LOGGER.debug("Creating a new TlMsAcnkOld with information: {}", tlMsAcnkOld);

        TlMsAcnkOld tlMsAcnkOldCreated = this.wmGenericDao.create(tlMsAcnkOld);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsAcnkOldCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkOld getById(Integer tlmsacnkoldId) {
        LOGGER.debug("Finding TlMsAcnkOld by id: {}", tlmsacnkoldId);
        return this.wmGenericDao.findById(tlmsacnkoldId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkOld findById(Integer tlmsacnkoldId) {
        LOGGER.debug("Finding TlMsAcnkOld by id: {}", tlmsacnkoldId);
        try {
            return this.wmGenericDao.findById(tlmsacnkoldId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsAcnkOld found with id: {}", tlmsacnkoldId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsAcnkOld> findByMultipleIds(List<Integer> tlmsacnkoldIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsAcnkOlds by ids: {}", tlmsacnkoldIds);

        return this.wmGenericDao.findByMultipleIds(tlmsacnkoldIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkOld update(TlMsAcnkOld tlMsAcnkOld) {
        LOGGER.debug("Updating TlMsAcnkOld with information: {}", tlMsAcnkOld);

        this.wmGenericDao.update(tlMsAcnkOld);
        this.wmGenericDao.refresh(tlMsAcnkOld);

        return tlMsAcnkOld;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkOld partialUpdate(Integer tlmsacnkoldId, Map<String, Object>tlMsAcnkOldPatch) {
        LOGGER.debug("Partially Updating the TlMsAcnkOld with id: {}", tlmsacnkoldId);

        TlMsAcnkOld tlMsAcnkOld = getById(tlmsacnkoldId);

        try {
            ObjectReader tlMsAcnkOldReader = this.objectMapper.reader().forType(TlMsAcnkOld.class).withValueToUpdate(tlMsAcnkOld);
            tlMsAcnkOld = tlMsAcnkOldReader.readValue(this.objectMapper.writeValueAsString(tlMsAcnkOldPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsAcnkOldPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsAcnkOld = update(tlMsAcnkOld);

        return tlMsAcnkOld;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkOld delete(Integer tlmsacnkoldId) {
        LOGGER.debug("Deleting TlMsAcnkOld with id: {}", tlmsacnkoldId);
        TlMsAcnkOld deleted = this.wmGenericDao.findById(tlmsacnkoldId);
        if (deleted == null) {
            LOGGER.debug("No TlMsAcnkOld found with id: {}", tlmsacnkoldId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsAcnkOld.class.getSimpleName(), tlmsacnkoldId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsAcnkOld tlMsAcnkOld) {
        LOGGER.debug("Deleting TlMsAcnkOld with {}", tlMsAcnkOld);
        this.wmGenericDao.delete(tlMsAcnkOld);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAcnkOld> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAcnkOlds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAcnkOld> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAcnkOlds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAcnkOld to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAcnkOld to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}