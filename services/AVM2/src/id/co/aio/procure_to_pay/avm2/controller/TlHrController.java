/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlHr;
import id.co.aio.procure_to_pay.avm2.service.TlHrService;


/**
 * Controller object for domain model class TlHr.
 * @see TlHr
 */
@RestController("AVM2.TlHrController")
@Api(value = "TlHrController", description = "Exposes APIs to work with TlHr resource.")
@RequestMapping("/AVM2/TlHr")
public class TlHrController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlHrController.class);

    @Autowired
	@Qualifier("AVM2.TlHrService")
	private TlHrService tlHrService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlHr instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHr createTlHr(@RequestBody TlHr tlHr) {
		LOGGER.debug("Create TlHr with information: {}" , tlHr);

		tlHr = tlHrService.create(tlHr);
		LOGGER.debug("Created TlHr with information: {}" , tlHr);

	    return tlHr;
	}

    @ApiOperation(value = "Returns the TlHr instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHr getTlHr(@PathVariable("abIdry") Integer abIdry) {
        LOGGER.debug("Getting TlHr with id: {}" , abIdry);

        TlHr foundTlHr = tlHrService.getById(abIdry);
        LOGGER.debug("TlHr details with id: {}" , foundTlHr);

        return foundTlHr;
    }

    @ApiOperation(value = "Updates the TlHr instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHr editTlHr(@PathVariable("abIdry") Integer abIdry, @RequestBody TlHr tlHr) {
        LOGGER.debug("Editing TlHr with id: {}" , tlHr.getAbIdry());

        tlHr.setAbIdry(abIdry);
        tlHr = tlHrService.update(tlHr);
        LOGGER.debug("TlHr details with id: {}" , tlHr);

        return tlHr;
    }
    
    @ApiOperation(value = "Partially updates the TlHr instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHr patchTlHr(@PathVariable("abIdry") Integer abIdry, @RequestBody @MapTo(TlHr.class) Map<String, Object> tlHrPatch) {
        LOGGER.debug("Partially updating TlHr with id: {}" , abIdry);

        TlHr tlHr = tlHrService.partialUpdate(abIdry, tlHrPatch);
        LOGGER.debug("TlHr details after partial update: {}" , tlHr);

        return tlHr;
    }

    @ApiOperation(value = "Deletes the TlHr instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlHr(@PathVariable("abIdry") Integer abIdry) {
        LOGGER.debug("Deleting TlHr with id: {}" , abIdry);

        TlHr deletedTlHr = tlHrService.delete(abIdry);

        return deletedTlHr != null;
    }

    /**
     * @deprecated Use {@link #findTlHrs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlHr instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlHr> searchTlHrsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlHrs list by query filter:{}", (Object) queryFilters);
        return tlHrService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlHr instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlHr> findTlHrs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlHrs list by filter:", query);
        return tlHrService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlHr instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlHr> filterTlHrs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlHrs list by filter", query);
        return tlHrService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlHrs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlHrService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlHrsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlHr.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlHrService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlHr instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlHrs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlHrs");
		return tlHrService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlHrAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlHrService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlHrService instance
	 */
	protected void setTlHrService(TlHrService service) {
		this.tlHrService = service;
	}

}