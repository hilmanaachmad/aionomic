/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsReOld;


/**
 * ServiceImpl object for domain model class TlMsReOld.
 *
 * @see TlMsReOld
 */
@Service("AVM2.TlMsReOldService")
@Validated
@EntityService(entityClass = TlMsReOld.class, serviceId = "AVM2")
public class TlMsReOldServiceImpl implements TlMsReOldService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsReOldServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsReOldDao")
    private WMGenericDao<TlMsReOld, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsReOld, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsReOld create(TlMsReOld tlMsReOld) {
        LOGGER.debug("Creating a new TlMsReOld with information: {}", tlMsReOld);

        TlMsReOld tlMsReOldCreated = this.wmGenericDao.create(tlMsReOld);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsReOldCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsReOld getById(String tlmsreoldId) {
        LOGGER.debug("Finding TlMsReOld by id: {}", tlmsreoldId);
        return this.wmGenericDao.findById(tlmsreoldId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsReOld findById(String tlmsreoldId) {
        LOGGER.debug("Finding TlMsReOld by id: {}", tlmsreoldId);
        try {
            return this.wmGenericDao.findById(tlmsreoldId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsReOld found with id: {}", tlmsreoldId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsReOld> findByMultipleIds(List<String> tlmsreoldIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsReOlds by ids: {}", tlmsreoldIds);

        return this.wmGenericDao.findByMultipleIds(tlmsreoldIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsReOld update(TlMsReOld tlMsReOld) {
        LOGGER.debug("Updating TlMsReOld with information: {}", tlMsReOld);

        this.wmGenericDao.update(tlMsReOld);
        this.wmGenericDao.refresh(tlMsReOld);

        return tlMsReOld;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsReOld partialUpdate(String tlmsreoldId, Map<String, Object>tlMsReOldPatch) {
        LOGGER.debug("Partially Updating the TlMsReOld with id: {}", tlmsreoldId);

        TlMsReOld tlMsReOld = getById(tlmsreoldId);

        try {
            ObjectReader tlMsReOldReader = this.objectMapper.reader().forType(TlMsReOld.class).withValueToUpdate(tlMsReOld);
            tlMsReOld = tlMsReOldReader.readValue(this.objectMapper.writeValueAsString(tlMsReOldPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsReOldPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsReOld = update(tlMsReOld);

        return tlMsReOld;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsReOld delete(String tlmsreoldId) {
        LOGGER.debug("Deleting TlMsReOld with id: {}", tlmsreoldId);
        TlMsReOld deleted = this.wmGenericDao.findById(tlmsreoldId);
        if (deleted == null) {
            LOGGER.debug("No TlMsReOld found with id: {}", tlmsreoldId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsReOld.class.getSimpleName(), tlmsreoldId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsReOld tlMsReOld) {
        LOGGER.debug("Deleting TlMsReOld with {}", tlMsReOld);
        this.wmGenericDao.delete(tlMsReOld);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsReOld> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsReOlds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsReOld> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsReOlds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsReOld to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsReOld to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}