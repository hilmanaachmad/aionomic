/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsPuonTemp;
import id.co.aio.procure_to_pay.avm2.service.TlMsPuonTempService;


/**
 * Controller object for domain model class TlMsPuonTemp.
 * @see TlMsPuonTemp
 */
@RestController("AVM2.TlMsPuonTempController")
@Api(value = "TlMsPuonTempController", description = "Exposes APIs to work with TlMsPuonTemp resource.")
@RequestMapping("/AVM2/TlMsPuonTemp")
public class TlMsPuonTempController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsPuonTempController.class);

    @Autowired
	@Qualifier("AVM2.TlMsPuonTempService")
	private TlMsPuonTempService tlMsPuonTempService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsPuonTemp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuonTemp createTlMsPuonTemp(@RequestBody TlMsPuonTemp tlMsPuonTemp) {
		LOGGER.debug("Create TlMsPuonTemp with information: {}" , tlMsPuonTemp);

		tlMsPuonTemp = tlMsPuonTempService.create(tlMsPuonTemp);
		LOGGER.debug("Created TlMsPuonTemp with information: {}" , tlMsPuonTemp);

	    return tlMsPuonTemp;
	}

    @ApiOperation(value = "Returns the TlMsPuonTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuonTemp getTlMsPuonTemp(@PathVariable("abIdseon") Integer abIdseon) {
        LOGGER.debug("Getting TlMsPuonTemp with id: {}" , abIdseon);

        TlMsPuonTemp foundTlMsPuonTemp = tlMsPuonTempService.getById(abIdseon);
        LOGGER.debug("TlMsPuonTemp details with id: {}" , foundTlMsPuonTemp);

        return foundTlMsPuonTemp;
    }

    @ApiOperation(value = "Updates the TlMsPuonTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuonTemp editTlMsPuonTemp(@PathVariable("abIdseon") Integer abIdseon, @RequestBody TlMsPuonTemp tlMsPuonTemp) {
        LOGGER.debug("Editing TlMsPuonTemp with id: {}" , tlMsPuonTemp.getAbIdseon());

        tlMsPuonTemp.setAbIdseon(abIdseon);
        tlMsPuonTemp = tlMsPuonTempService.update(tlMsPuonTemp);
        LOGGER.debug("TlMsPuonTemp details with id: {}" , tlMsPuonTemp);

        return tlMsPuonTemp;
    }
    
    @ApiOperation(value = "Partially updates the TlMsPuonTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuonTemp patchTlMsPuonTemp(@PathVariable("abIdseon") Integer abIdseon, @RequestBody @MapTo(TlMsPuonTemp.class) Map<String, Object> tlMsPuonTempPatch) {
        LOGGER.debug("Partially updating TlMsPuonTemp with id: {}" , abIdseon);

        TlMsPuonTemp tlMsPuonTemp = tlMsPuonTempService.partialUpdate(abIdseon, tlMsPuonTempPatch);
        LOGGER.debug("TlMsPuonTemp details after partial update: {}" , tlMsPuonTemp);

        return tlMsPuonTemp;
    }

    @ApiOperation(value = "Deletes the TlMsPuonTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsPuonTemp(@PathVariable("abIdseon") Integer abIdseon) {
        LOGGER.debug("Deleting TlMsPuonTemp with id: {}" , abIdseon);

        TlMsPuonTemp deletedTlMsPuonTemp = tlMsPuonTempService.delete(abIdseon);

        return deletedTlMsPuonTemp != null;
    }

    /**
     * @deprecated Use {@link #findTlMsPuonTemps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsPuonTemp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsPuonTemp> searchTlMsPuonTempsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsPuonTemps list by query filter:{}", (Object) queryFilters);
        return tlMsPuonTempService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsPuonTemp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsPuonTemp> findTlMsPuonTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsPuonTemps list by filter:", query);
        return tlMsPuonTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsPuonTemp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsPuonTemp> filterTlMsPuonTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsPuonTemps list by filter", query);
        return tlMsPuonTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsPuonTemps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsPuonTempService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsPuonTempsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsPuonTemp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsPuonTempService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsPuonTemp instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsPuonTemps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsPuonTemps");
		return tlMsPuonTempService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsPuonTempAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsPuonTempService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsPuonTempService instance
	 */
	protected void setTlMsPuonTempService(TlMsPuonTempService service) {
		this.tlMsPuonTempService = service;
	}

}