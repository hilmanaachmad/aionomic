/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsVeKonf;


/**
 * ServiceImpl object for domain model class TlMsVeKonf.
 *
 * @see TlMsVeKonf
 */
@Service("AVM2.TlMsVeKonfService")
@Validated
@EntityService(entityClass = TlMsVeKonf.class, serviceId = "AVM2")
public class TlMsVeKonfServiceImpl implements TlMsVeKonfService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsVeKonfServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsVeKonfDao")
    private WMGenericDao<TlMsVeKonf, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsVeKonf, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsVeKonf create(TlMsVeKonf tlMsVeKonf) {
        LOGGER.debug("Creating a new TlMsVeKonf with information: {}", tlMsVeKonf);

        TlMsVeKonf tlMsVeKonfCreated = this.wmGenericDao.create(tlMsVeKonf);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsVeKonfCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsVeKonf getById(String tlmsvekonfId) {
        LOGGER.debug("Finding TlMsVeKonf by id: {}", tlmsvekonfId);
        return this.wmGenericDao.findById(tlmsvekonfId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsVeKonf findById(String tlmsvekonfId) {
        LOGGER.debug("Finding TlMsVeKonf by id: {}", tlmsvekonfId);
        try {
            return this.wmGenericDao.findById(tlmsvekonfId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsVeKonf found with id: {}", tlmsvekonfId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsVeKonf> findByMultipleIds(List<String> tlmsvekonfIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsVeKonfs by ids: {}", tlmsvekonfIds);

        return this.wmGenericDao.findByMultipleIds(tlmsvekonfIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsVeKonf update(TlMsVeKonf tlMsVeKonf) {
        LOGGER.debug("Updating TlMsVeKonf with information: {}", tlMsVeKonf);

        this.wmGenericDao.update(tlMsVeKonf);
        this.wmGenericDao.refresh(tlMsVeKonf);

        return tlMsVeKonf;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsVeKonf partialUpdate(String tlmsvekonfId, Map<String, Object>tlMsVeKonfPatch) {
        LOGGER.debug("Partially Updating the TlMsVeKonf with id: {}", tlmsvekonfId);

        TlMsVeKonf tlMsVeKonf = getById(tlmsvekonfId);

        try {
            ObjectReader tlMsVeKonfReader = this.objectMapper.reader().forType(TlMsVeKonf.class).withValueToUpdate(tlMsVeKonf);
            tlMsVeKonf = tlMsVeKonfReader.readValue(this.objectMapper.writeValueAsString(tlMsVeKonfPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsVeKonfPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsVeKonf = update(tlMsVeKonf);

        return tlMsVeKonf;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsVeKonf delete(String tlmsvekonfId) {
        LOGGER.debug("Deleting TlMsVeKonf with id: {}", tlmsvekonfId);
        TlMsVeKonf deleted = this.wmGenericDao.findById(tlmsvekonfId);
        if (deleted == null) {
            LOGGER.debug("No TlMsVeKonf found with id: {}", tlmsvekonfId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsVeKonf.class.getSimpleName(), tlmsvekonfId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsVeKonf tlMsVeKonf) {
        LOGGER.debug("Deleting TlMsVeKonf with {}", tlMsVeKonf);
        this.wmGenericDao.delete(tlMsVeKonf);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsVeKonf> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsVeKonfs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsVeKonf> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsVeKonfs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsVeKonf to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsVeKonf to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}