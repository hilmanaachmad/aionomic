/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkOld;

/**
 * Service object for domain model class {@link TlMsAcnkOld}.
 */
public interface TlMsAcnkOldService {

    /**
     * Creates a new TlMsAcnkOld. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkOld if any.
     *
     * @param tlMsAcnkOld Details of the TlMsAcnkOld to be created; value cannot be null.
     * @return The newly created TlMsAcnkOld.
     */
    TlMsAcnkOld create(@Valid TlMsAcnkOld tlMsAcnkOld);


	/**
     * Returns TlMsAcnkOld by given id if exists.
     *
     * @param tlmsacnkoldId The id of the TlMsAcnkOld to get; value cannot be null.
     * @return TlMsAcnkOld associated with the given tlmsacnkoldId.
	 * @throws EntityNotFoundException If no TlMsAcnkOld is found.
     */
    TlMsAcnkOld getById(Integer tlmsacnkoldId);

    /**
     * Find and return the TlMsAcnkOld by given id if exists, returns null otherwise.
     *
     * @param tlmsacnkoldId The id of the TlMsAcnkOld to get; value cannot be null.
     * @return TlMsAcnkOld associated with the given tlmsacnkoldId.
     */
    TlMsAcnkOld findById(Integer tlmsacnkoldId);

	/**
     * Find and return the list of TlMsAcnkOlds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsacnkoldIds The id's of the TlMsAcnkOld to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsAcnkOlds associated with the given tlmsacnkoldIds.
     */
    List<TlMsAcnkOld> findByMultipleIds(List<Integer> tlmsacnkoldIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsAcnkOld. It replaces all fields of the existing TlMsAcnkOld with the given tlMsAcnkOld.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkOld if any.
     *
     * @param tlMsAcnkOld The details of the TlMsAcnkOld to be updated; value cannot be null.
     * @return The updated TlMsAcnkOld.
     * @throws EntityNotFoundException if no TlMsAcnkOld is found with given input.
     */
    TlMsAcnkOld update(@Valid TlMsAcnkOld tlMsAcnkOld);


    /**
     * Partially updates the details of an existing TlMsAcnkOld. It updates only the
     * fields of the existing TlMsAcnkOld which are passed in the tlMsAcnkOldPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkOld if any.
     *
     * @param tlmsacnkoldId The id of the TlMsAcnkOld to be deleted; value cannot be null.
     * @param tlMsAcnkOldPatch The partial data of TlMsAcnkOld which is supposed to be updated; value cannot be null.
     * @return The updated TlMsAcnkOld.
     * @throws EntityNotFoundException if no TlMsAcnkOld is found with given input.
     */
    TlMsAcnkOld partialUpdate(Integer tlmsacnkoldId, Map<String, Object> tlMsAcnkOldPatch);

    /**
     * Deletes an existing TlMsAcnkOld with the given id.
     *
     * @param tlmsacnkoldId The id of the TlMsAcnkOld to be deleted; value cannot be null.
     * @return The deleted TlMsAcnkOld.
     * @throws EntityNotFoundException if no TlMsAcnkOld found with the given id.
     */
    TlMsAcnkOld delete(Integer tlmsacnkoldId);

    /**
     * Deletes an existing TlMsAcnkOld with the given object.
     *
     * @param tlMsAcnkOld The instance of the TlMsAcnkOld to be deleted; value cannot be null.
     */
    void delete(TlMsAcnkOld tlMsAcnkOld);

    /**
     * Find all TlMsAcnkOlds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAcnkOlds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsAcnkOld> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsAcnkOlds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAcnkOlds.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsAcnkOld> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsAcnkOlds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsAcnkOlds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsAcnkOlds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsAcnkOld.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}