/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTrCaor;
import id.co.aio.procure_to_pay.avm2.service.TlTrCaorService;


/**
 * Controller object for domain model class TlTrCaor.
 * @see TlTrCaor
 */
@RestController("AVM2.TlTrCaorController")
@Api(value = "TlTrCaorController", description = "Exposes APIs to work with TlTrCaor resource.")
@RequestMapping("/AVM2/TlTrCaor")
public class TlTrCaorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrCaorController.class);

    @Autowired
	@Qualifier("AVM2.TlTrCaorService")
	private TlTrCaorService tlTrCaorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTrCaor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCaor createTlTrCaor(@RequestBody TlTrCaor tlTrCaor) {
		LOGGER.debug("Create TlTrCaor with information: {}" , tlTrCaor);

		tlTrCaor = tlTrCaorService.create(tlTrCaor);
		LOGGER.debug("Created TlTrCaor with information: {}" , tlTrCaor);

	    return tlTrCaor;
	}

    @ApiOperation(value = "Returns the TlTrCaor instance associated with the given id.")
    @RequestMapping(value = "/{abIdryve:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCaor getTlTrCaor(@PathVariable("abIdryve") Integer abIdryve) {
        LOGGER.debug("Getting TlTrCaor with id: {}" , abIdryve);

        TlTrCaor foundTlTrCaor = tlTrCaorService.getById(abIdryve);
        LOGGER.debug("TlTrCaor details with id: {}" , foundTlTrCaor);

        return foundTlTrCaor;
    }

    @ApiOperation(value = "Updates the TlTrCaor instance associated with the given id.")
    @RequestMapping(value = "/{abIdryve:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCaor editTlTrCaor(@PathVariable("abIdryve") Integer abIdryve, @RequestBody TlTrCaor tlTrCaor) {
        LOGGER.debug("Editing TlTrCaor with id: {}" , tlTrCaor.getAbIdryve());

        tlTrCaor.setAbIdryve(abIdryve);
        tlTrCaor = tlTrCaorService.update(tlTrCaor);
        LOGGER.debug("TlTrCaor details with id: {}" , tlTrCaor);

        return tlTrCaor;
    }
    
    @ApiOperation(value = "Partially updates the TlTrCaor instance associated with the given id.")
    @RequestMapping(value = "/{abIdryve:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrCaor patchTlTrCaor(@PathVariable("abIdryve") Integer abIdryve, @RequestBody @MapTo(TlTrCaor.class) Map<String, Object> tlTrCaorPatch) {
        LOGGER.debug("Partially updating TlTrCaor with id: {}" , abIdryve);

        TlTrCaor tlTrCaor = tlTrCaorService.partialUpdate(abIdryve, tlTrCaorPatch);
        LOGGER.debug("TlTrCaor details after partial update: {}" , tlTrCaor);

        return tlTrCaor;
    }

    @ApiOperation(value = "Deletes the TlTrCaor instance associated with the given id.")
    @RequestMapping(value = "/{abIdryve:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTrCaor(@PathVariable("abIdryve") Integer abIdryve) {
        LOGGER.debug("Deleting TlTrCaor with id: {}" , abIdryve);

        TlTrCaor deletedTlTrCaor = tlTrCaorService.delete(abIdryve);

        return deletedTlTrCaor != null;
    }

    /**
     * @deprecated Use {@link #findTlTrCaors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTrCaor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrCaor> searchTlTrCaorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTrCaors list by query filter:{}", (Object) queryFilters);
        return tlTrCaorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrCaor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrCaor> findTlTrCaors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrCaors list by filter:", query);
        return tlTrCaorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrCaor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrCaor> filterTlTrCaors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrCaors list by filter", query);
        return tlTrCaorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTrCaors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTrCaorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTrCaorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTrCaor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTrCaorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTrCaor instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTrCaors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTrCaors");
		return tlTrCaorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTrCaorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTrCaorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTrCaorService instance
	 */
	protected void setTlTrCaorService(TlTrCaorService service) {
		this.tlTrCaorService = service;
	}

}