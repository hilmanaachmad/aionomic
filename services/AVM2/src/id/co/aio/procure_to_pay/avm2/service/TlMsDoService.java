/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsDo;

/**
 * Service object for domain model class {@link TlMsDo}.
 */
public interface TlMsDoService {

    /**
     * Creates a new TlMsDo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsDo if any.
     *
     * @param tlMsDo Details of the TlMsDo to be created; value cannot be null.
     * @return The newly created TlMsDo.
     */
    TlMsDo create(@Valid TlMsDo tlMsDo);


	/**
     * Returns TlMsDo by given id if exists.
     *
     * @param tlmsdoId The id of the TlMsDo to get; value cannot be null.
     * @return TlMsDo associated with the given tlmsdoId.
	 * @throws EntityNotFoundException If no TlMsDo is found.
     */
    TlMsDo getById(Integer tlmsdoId);

    /**
     * Find and return the TlMsDo by given id if exists, returns null otherwise.
     *
     * @param tlmsdoId The id of the TlMsDo to get; value cannot be null.
     * @return TlMsDo associated with the given tlmsdoId.
     */
    TlMsDo findById(Integer tlmsdoId);

	/**
     * Find and return the list of TlMsDos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsdoIds The id's of the TlMsDo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsDos associated with the given tlmsdoIds.
     */
    List<TlMsDo> findByMultipleIds(List<Integer> tlmsdoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsDo. It replaces all fields of the existing TlMsDo with the given tlMsDo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsDo if any.
     *
     * @param tlMsDo The details of the TlMsDo to be updated; value cannot be null.
     * @return The updated TlMsDo.
     * @throws EntityNotFoundException if no TlMsDo is found with given input.
     */
    TlMsDo update(@Valid TlMsDo tlMsDo);


    /**
     * Partially updates the details of an existing TlMsDo. It updates only the
     * fields of the existing TlMsDo which are passed in the tlMsDoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsDo if any.
     *
     * @param tlmsdoId The id of the TlMsDo to be deleted; value cannot be null.
     * @param tlMsDoPatch The partial data of TlMsDo which is supposed to be updated; value cannot be null.
     * @return The updated TlMsDo.
     * @throws EntityNotFoundException if no TlMsDo is found with given input.
     */
    TlMsDo partialUpdate(Integer tlmsdoId, Map<String, Object> tlMsDoPatch);

    /**
     * Deletes an existing TlMsDo with the given id.
     *
     * @param tlmsdoId The id of the TlMsDo to be deleted; value cannot be null.
     * @return The deleted TlMsDo.
     * @throws EntityNotFoundException if no TlMsDo found with the given id.
     */
    TlMsDo delete(Integer tlmsdoId);

    /**
     * Deletes an existing TlMsDo with the given object.
     *
     * @param tlMsDo The instance of the TlMsDo to be deleted; value cannot be null.
     */
    void delete(TlMsDo tlMsDo);

    /**
     * Find all TlMsDos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsDos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsDo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsDos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsDos.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsDo> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsDos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsDos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsDos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsDo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}