/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VRegIndo;

/**
 * Service object for domain model class {@link VRegIndo}.
 */
public interface VRegIndoService {

    /**
     * Creates a new VRegIndo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRegIndo if any.
     *
     * @param vregIndo Details of the VRegIndo to be created; value cannot be null.
     * @return The newly created VRegIndo.
     */
    VRegIndo create(@Valid VRegIndo vregIndo);


	/**
     * Returns VRegIndo by given id if exists.
     *
     * @param vregindoId The id of the VRegIndo to get; value cannot be null.
     * @return VRegIndo associated with the given vregindoId.
	 * @throws EntityNotFoundException If no VRegIndo is found.
     */
    VRegIndo getById(String vregindoId);

    /**
     * Find and return the VRegIndo by given id if exists, returns null otherwise.
     *
     * @param vregindoId The id of the VRegIndo to get; value cannot be null.
     * @return VRegIndo associated with the given vregindoId.
     */
    VRegIndo findById(String vregindoId);

	/**
     * Find and return the list of VRegIndos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vregindoIds The id's of the VRegIndo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VRegIndos associated with the given vregindoIds.
     */
    List<VRegIndo> findByMultipleIds(List<String> vregindoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VRegIndo. It replaces all fields of the existing VRegIndo with the given vregIndo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRegIndo if any.
     *
     * @param vregIndo The details of the VRegIndo to be updated; value cannot be null.
     * @return The updated VRegIndo.
     * @throws EntityNotFoundException if no VRegIndo is found with given input.
     */
    VRegIndo update(@Valid VRegIndo vregIndo);


    /**
     * Partially updates the details of an existing VRegIndo. It updates only the
     * fields of the existing VRegIndo which are passed in the vregIndoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VRegIndo if any.
     *
     * @param vregindoId The id of the VRegIndo to be deleted; value cannot be null.
     * @param vregIndoPatch The partial data of VRegIndo which is supposed to be updated; value cannot be null.
     * @return The updated VRegIndo.
     * @throws EntityNotFoundException if no VRegIndo is found with given input.
     */
    VRegIndo partialUpdate(String vregindoId, Map<String, Object> vregIndoPatch);

    /**
     * Deletes an existing VRegIndo with the given id.
     *
     * @param vregindoId The id of the VRegIndo to be deleted; value cannot be null.
     * @return The deleted VRegIndo.
     * @throws EntityNotFoundException if no VRegIndo found with the given id.
     */
    VRegIndo delete(String vregindoId);

    /**
     * Deletes an existing VRegIndo with the given object.
     *
     * @param vregIndo The instance of the VRegIndo to be deleted; value cannot be null.
     */
    void delete(VRegIndo vregIndo);

    /**
     * Find all VRegIndos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VRegIndos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VRegIndo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VRegIndos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VRegIndos.
     *
     * @see Pageable
     * @see Page
     */
    Page<VRegIndo> findAll(String query, Pageable pageable);

    /**
     * Exports all VRegIndos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VRegIndos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VRegIndos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VRegIndo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}