/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TableVendor;


/**
 * ServiceImpl object for domain model class TableVendor.
 *
 * @see TableVendor
 */
@Service("AVM2.TableVendorService")
@Validated
@EntityService(entityClass = TableVendor.class, serviceId = "AVM2")
public class TableVendorServiceImpl implements TableVendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TableVendorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TableVendorDao")
    private WMGenericDao<TableVendor, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TableVendor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TableVendor create(TableVendor tableVendor) {
        LOGGER.debug("Creating a new TableVendor with information: {}", tableVendor);

        TableVendor tableVendorCreated = this.wmGenericDao.create(tableVendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tableVendorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TableVendor getById(Integer tablevendorId) {
        LOGGER.debug("Finding TableVendor by id: {}", tablevendorId);
        return this.wmGenericDao.findById(tablevendorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TableVendor findById(Integer tablevendorId) {
        LOGGER.debug("Finding TableVendor by id: {}", tablevendorId);
        try {
            return this.wmGenericDao.findById(tablevendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TableVendor found with id: {}", tablevendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TableVendor> findByMultipleIds(List<Integer> tablevendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding TableVendors by ids: {}", tablevendorIds);

        return this.wmGenericDao.findByMultipleIds(tablevendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TableVendor update(TableVendor tableVendor) {
        LOGGER.debug("Updating TableVendor with information: {}", tableVendor);

        this.wmGenericDao.update(tableVendor);
        this.wmGenericDao.refresh(tableVendor);

        return tableVendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TableVendor partialUpdate(Integer tablevendorId, Map<String, Object>tableVendorPatch) {
        LOGGER.debug("Partially Updating the TableVendor with id: {}", tablevendorId);

        TableVendor tableVendor = getById(tablevendorId);

        try {
            ObjectReader tableVendorReader = this.objectMapper.reader().forType(TableVendor.class).withValueToUpdate(tableVendor);
            tableVendor = tableVendorReader.readValue(this.objectMapper.writeValueAsString(tableVendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tableVendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tableVendor = update(tableVendor);

        return tableVendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TableVendor delete(Integer tablevendorId) {
        LOGGER.debug("Deleting TableVendor with id: {}", tablevendorId);
        TableVendor deleted = this.wmGenericDao.findById(tablevendorId);
        if (deleted == null) {
            LOGGER.debug("No TableVendor found with id: {}", tablevendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TableVendor.class.getSimpleName(), tablevendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TableVendor tableVendor) {
        LOGGER.debug("Deleting TableVendor with {}", tableVendor);
        this.wmGenericDao.delete(tableVendor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TableVendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TableVendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TableVendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TableVendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TableVendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TableVendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}