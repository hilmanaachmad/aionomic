/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.EmpResignHo;
import id.co.aio.procure_to_pay.avm2.EmpResignHoId;

/**
 * Service object for domain model class {@link EmpResignHo}.
 */
public interface EmpResignHoService {

    /**
     * Creates a new EmpResignHo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmpResignHo if any.
     *
     * @param empResignHo Details of the EmpResignHo to be created; value cannot be null.
     * @return The newly created EmpResignHo.
     */
    EmpResignHo create(@Valid EmpResignHo empResignHo);


	/**
     * Returns EmpResignHo by given id if exists.
     *
     * @param empresignhoId The id of the EmpResignHo to get; value cannot be null.
     * @return EmpResignHo associated with the given empresignhoId.
	 * @throws EntityNotFoundException If no EmpResignHo is found.
     */
    EmpResignHo getById(EmpResignHoId empresignhoId);

    /**
     * Find and return the EmpResignHo by given id if exists, returns null otherwise.
     *
     * @param empresignhoId The id of the EmpResignHo to get; value cannot be null.
     * @return EmpResignHo associated with the given empresignhoId.
     */
    EmpResignHo findById(EmpResignHoId empresignhoId);

	/**
     * Find and return the list of EmpResignHos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param empresignhoIds The id's of the EmpResignHo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return EmpResignHos associated with the given empresignhoIds.
     */
    List<EmpResignHo> findByMultipleIds(List<EmpResignHoId> empresignhoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing EmpResignHo. It replaces all fields of the existing EmpResignHo with the given empResignHo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmpResignHo if any.
     *
     * @param empResignHo The details of the EmpResignHo to be updated; value cannot be null.
     * @return The updated EmpResignHo.
     * @throws EntityNotFoundException if no EmpResignHo is found with given input.
     */
    EmpResignHo update(@Valid EmpResignHo empResignHo);


    /**
     * Partially updates the details of an existing EmpResignHo. It updates only the
     * fields of the existing EmpResignHo which are passed in the empResignHoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmpResignHo if any.
     *
     * @param empresignhoId The id of the EmpResignHo to be deleted; value cannot be null.
     * @param empResignHoPatch The partial data of EmpResignHo which is supposed to be updated; value cannot be null.
     * @return The updated EmpResignHo.
     * @throws EntityNotFoundException if no EmpResignHo is found with given input.
     */
    EmpResignHo partialUpdate(EmpResignHoId empresignhoId, Map<String, Object> empResignHoPatch);

    /**
     * Deletes an existing EmpResignHo with the given id.
     *
     * @param empresignhoId The id of the EmpResignHo to be deleted; value cannot be null.
     * @return The deleted EmpResignHo.
     * @throws EntityNotFoundException if no EmpResignHo found with the given id.
     */
    EmpResignHo delete(EmpResignHoId empresignhoId);

    /**
     * Deletes an existing EmpResignHo with the given object.
     *
     * @param empResignHo The instance of the EmpResignHo to be deleted; value cannot be null.
     */
    void delete(EmpResignHo empResignHo);

    /**
     * Find all EmpResignHos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmpResignHos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<EmpResignHo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all EmpResignHos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmpResignHos.
     *
     * @see Pageable
     * @see Page
     */
    Page<EmpResignHo> findAll(String query, Pageable pageable);

    /**
     * Exports all EmpResignHos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all EmpResignHos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the EmpResignHos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the EmpResignHo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}