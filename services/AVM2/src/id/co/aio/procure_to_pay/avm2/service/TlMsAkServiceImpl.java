/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAk;


/**
 * ServiceImpl object for domain model class TlMsAk.
 *
 * @see TlMsAk
 */
@Service("AVM2.TlMsAkService")
@Validated
@EntityService(entityClass = TlMsAk.class, serviceId = "AVM2")
public class TlMsAkServiceImpl implements TlMsAkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAkServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsAkDao")
    private WMGenericDao<TlMsAk, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsAk, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAk create(TlMsAk tlMsAk) {
        LOGGER.debug("Creating a new TlMsAk with information: {}", tlMsAk);

        TlMsAk tlMsAkCreated = this.wmGenericDao.create(tlMsAk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsAkCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAk getById(String tlmsakId) {
        LOGGER.debug("Finding TlMsAk by id: {}", tlmsakId);
        return this.wmGenericDao.findById(tlmsakId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAk findById(String tlmsakId) {
        LOGGER.debug("Finding TlMsAk by id: {}", tlmsakId);
        try {
            return this.wmGenericDao.findById(tlmsakId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsAk found with id: {}", tlmsakId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsAk> findByMultipleIds(List<String> tlmsakIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsAks by ids: {}", tlmsakIds);

        return this.wmGenericDao.findByMultipleIds(tlmsakIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsAk update(TlMsAk tlMsAk) {
        LOGGER.debug("Updating TlMsAk with information: {}", tlMsAk);

        this.wmGenericDao.update(tlMsAk);
        this.wmGenericDao.refresh(tlMsAk);

        return tlMsAk;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAk partialUpdate(String tlmsakId, Map<String, Object>tlMsAkPatch) {
        LOGGER.debug("Partially Updating the TlMsAk with id: {}", tlmsakId);

        TlMsAk tlMsAk = getById(tlmsakId);

        try {
            ObjectReader tlMsAkReader = this.objectMapper.reader().forType(TlMsAk.class).withValueToUpdate(tlMsAk);
            tlMsAk = tlMsAkReader.readValue(this.objectMapper.writeValueAsString(tlMsAkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsAkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsAk = update(tlMsAk);

        return tlMsAk;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAk delete(String tlmsakId) {
        LOGGER.debug("Deleting TlMsAk with id: {}", tlmsakId);
        TlMsAk deleted = this.wmGenericDao.findById(tlmsakId);
        if (deleted == null) {
            LOGGER.debug("No TlMsAk found with id: {}", tlmsakId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsAk.class.getSimpleName(), tlmsakId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsAk tlMsAk) {
        LOGGER.debug("Deleting TlMsAk with {}", tlMsAk);
        this.wmGenericDao.delete(tlMsAk);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}