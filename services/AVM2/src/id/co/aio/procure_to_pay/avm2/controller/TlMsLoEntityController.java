/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsLoEntity;
import id.co.aio.procure_to_pay.avm2.service.TlMsLoEntityService;


/**
 * Controller object for domain model class TlMsLoEntity.
 * @see TlMsLoEntity
 */
@RestController("AVM2.TlMsLoEntityController")
@Api(value = "TlMsLoEntityController", description = "Exposes APIs to work with TlMsLoEntity resource.")
@RequestMapping("/AVM2/TlMsLoEntity")
public class TlMsLoEntityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsLoEntityController.class);

    @Autowired
	@Qualifier("AVM2.TlMsLoEntityService")
	private TlMsLoEntityService tlMsLoEntityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsLoEntity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLoEntity createTlMsLoEntity(@RequestBody TlMsLoEntity tlMsLoEntity) {
		LOGGER.debug("Create TlMsLoEntity with information: {}" , tlMsLoEntity);

		tlMsLoEntity = tlMsLoEntityService.create(tlMsLoEntity);
		LOGGER.debug("Created TlMsLoEntity with information: {}" , tlMsLoEntity);

	    return tlMsLoEntity;
	}

    @ApiOperation(value = "Returns the TlMsLoEntity instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLoEntity getTlMsLoEntity(@PathVariable("abNoukka") String abNoukka) {
        LOGGER.debug("Getting TlMsLoEntity with id: {}" , abNoukka);

        TlMsLoEntity foundTlMsLoEntity = tlMsLoEntityService.getById(abNoukka);
        LOGGER.debug("TlMsLoEntity details with id: {}" , foundTlMsLoEntity);

        return foundTlMsLoEntity;
    }

    @ApiOperation(value = "Updates the TlMsLoEntity instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLoEntity editTlMsLoEntity(@PathVariable("abNoukka") String abNoukka, @RequestBody TlMsLoEntity tlMsLoEntity) {
        LOGGER.debug("Editing TlMsLoEntity with id: {}" , tlMsLoEntity.getAbNoukka());

        tlMsLoEntity.setAbNoukka(abNoukka);
        tlMsLoEntity = tlMsLoEntityService.update(tlMsLoEntity);
        LOGGER.debug("TlMsLoEntity details with id: {}" , tlMsLoEntity);

        return tlMsLoEntity;
    }
    
    @ApiOperation(value = "Partially updates the TlMsLoEntity instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsLoEntity patchTlMsLoEntity(@PathVariable("abNoukka") String abNoukka, @RequestBody @MapTo(TlMsLoEntity.class) Map<String, Object> tlMsLoEntityPatch) {
        LOGGER.debug("Partially updating TlMsLoEntity with id: {}" , abNoukka);

        TlMsLoEntity tlMsLoEntity = tlMsLoEntityService.partialUpdate(abNoukka, tlMsLoEntityPatch);
        LOGGER.debug("TlMsLoEntity details after partial update: {}" , tlMsLoEntity);

        return tlMsLoEntity;
    }

    @ApiOperation(value = "Deletes the TlMsLoEntity instance associated with the given id.")
    @RequestMapping(value = "/{abNoukka:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsLoEntity(@PathVariable("abNoukka") String abNoukka) {
        LOGGER.debug("Deleting TlMsLoEntity with id: {}" , abNoukka);

        TlMsLoEntity deletedTlMsLoEntity = tlMsLoEntityService.delete(abNoukka);

        return deletedTlMsLoEntity != null;
    }

    /**
     * @deprecated Use {@link #findTlMsLoEntities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsLoEntity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsLoEntity> searchTlMsLoEntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsLoEntities list by query filter:{}", (Object) queryFilters);
        return tlMsLoEntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsLoEntity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsLoEntity> findTlMsLoEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsLoEntities list by filter:", query);
        return tlMsLoEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsLoEntity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsLoEntity> filterTlMsLoEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsLoEntities list by filter", query);
        return tlMsLoEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsLoEntities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsLoEntityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsLoEntitiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsLoEntity.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsLoEntityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsLoEntity instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsLoEntities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsLoEntities");
		return tlMsLoEntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsLoEntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsLoEntityService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsLoEntityService instance
	 */
	protected void setTlMsLoEntityService(TlMsLoEntityService service) {
		this.tlMsLoEntityService = service;
	}

}