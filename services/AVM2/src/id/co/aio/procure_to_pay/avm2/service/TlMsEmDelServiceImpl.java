/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsEmDel;


/**
 * ServiceImpl object for domain model class TlMsEmDel.
 *
 * @see TlMsEmDel
 */
@Service("AVM2.TlMsEmDelService")
@Validated
@EntityService(entityClass = TlMsEmDel.class, serviceId = "AVM2")
public class TlMsEmDelServiceImpl implements TlMsEmDelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsEmDelServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsEmDelDao")
    private WMGenericDao<TlMsEmDel, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsEmDel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsEmDel create(TlMsEmDel tlMsEmDel) {
        LOGGER.debug("Creating a new TlMsEmDel with information: {}", tlMsEmDel);

        TlMsEmDel tlMsEmDelCreated = this.wmGenericDao.create(tlMsEmDel);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsEmDelCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsEmDel getById(Integer tlmsemdelId) {
        LOGGER.debug("Finding TlMsEmDel by id: {}", tlmsemdelId);
        return this.wmGenericDao.findById(tlmsemdelId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsEmDel findById(Integer tlmsemdelId) {
        LOGGER.debug("Finding TlMsEmDel by id: {}", tlmsemdelId);
        try {
            return this.wmGenericDao.findById(tlmsemdelId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsEmDel found with id: {}", tlmsemdelId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsEmDel> findByMultipleIds(List<Integer> tlmsemdelIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsEmDels by ids: {}", tlmsemdelIds);

        return this.wmGenericDao.findByMultipleIds(tlmsemdelIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsEmDel update(TlMsEmDel tlMsEmDel) {
        LOGGER.debug("Updating TlMsEmDel with information: {}", tlMsEmDel);

        this.wmGenericDao.update(tlMsEmDel);
        this.wmGenericDao.refresh(tlMsEmDel);

        return tlMsEmDel;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsEmDel partialUpdate(Integer tlmsemdelId, Map<String, Object>tlMsEmDelPatch) {
        LOGGER.debug("Partially Updating the TlMsEmDel with id: {}", tlmsemdelId);

        TlMsEmDel tlMsEmDel = getById(tlmsemdelId);

        try {
            ObjectReader tlMsEmDelReader = this.objectMapper.reader().forType(TlMsEmDel.class).withValueToUpdate(tlMsEmDel);
            tlMsEmDel = tlMsEmDelReader.readValue(this.objectMapper.writeValueAsString(tlMsEmDelPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsEmDelPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsEmDel = update(tlMsEmDel);

        return tlMsEmDel;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsEmDel delete(Integer tlmsemdelId) {
        LOGGER.debug("Deleting TlMsEmDel with id: {}", tlmsemdelId);
        TlMsEmDel deleted = this.wmGenericDao.findById(tlmsemdelId);
        if (deleted == null) {
            LOGGER.debug("No TlMsEmDel found with id: {}", tlmsemdelId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsEmDel.class.getSimpleName(), tlmsemdelId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsEmDel tlMsEmDel) {
        LOGGER.debug("Deleting TlMsEmDel with {}", tlMsEmDel);
        this.wmGenericDao.delete(tlMsEmDel);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsEmDel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsEmDels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsEmDel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsEmDels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsEmDel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsEmDel to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}