/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsCc;


/**
 * ServiceImpl object for domain model class TlMsCc.
 *
 * @see TlMsCc
 */
@Service("AVM2.TlMsCcService")
@Validated
@EntityService(entityClass = TlMsCc.class, serviceId = "AVM2")
public class TlMsCcServiceImpl implements TlMsCcService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCcServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsCcDao")
    private WMGenericDao<TlMsCc, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsCc, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCc create(TlMsCc tlMsCc) {
        LOGGER.debug("Creating a new TlMsCc with information: {}", tlMsCc);

        TlMsCc tlMsCcCreated = this.wmGenericDao.create(tlMsCc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsCcCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCc getById(String tlmsccId) {
        LOGGER.debug("Finding TlMsCc by id: {}", tlmsccId);
        return this.wmGenericDao.findById(tlmsccId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCc findById(String tlmsccId) {
        LOGGER.debug("Finding TlMsCc by id: {}", tlmsccId);
        try {
            return this.wmGenericDao.findById(tlmsccId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsCc found with id: {}", tlmsccId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsCc> findByMultipleIds(List<String> tlmsccIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsCcs by ids: {}", tlmsccIds);

        return this.wmGenericDao.findByMultipleIds(tlmsccIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsCc update(TlMsCc tlMsCc) {
        LOGGER.debug("Updating TlMsCc with information: {}", tlMsCc);

        this.wmGenericDao.update(tlMsCc);
        this.wmGenericDao.refresh(tlMsCc);

        return tlMsCc;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCc partialUpdate(String tlmsccId, Map<String, Object>tlMsCcPatch) {
        LOGGER.debug("Partially Updating the TlMsCc with id: {}", tlmsccId);

        TlMsCc tlMsCc = getById(tlmsccId);

        try {
            ObjectReader tlMsCcReader = this.objectMapper.reader().forType(TlMsCc.class).withValueToUpdate(tlMsCc);
            tlMsCc = tlMsCcReader.readValue(this.objectMapper.writeValueAsString(tlMsCcPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsCcPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsCc = update(tlMsCc);

        return tlMsCc;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCc delete(String tlmsccId) {
        LOGGER.debug("Deleting TlMsCc with id: {}", tlmsccId);
        TlMsCc deleted = this.wmGenericDao.findById(tlmsccId);
        if (deleted == null) {
            LOGGER.debug("No TlMsCc found with id: {}", tlmsccId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsCc.class.getSimpleName(), tlmsccId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsCc tlMsCc) {
        LOGGER.debug("Deleting TlMsCc with {}", tlMsCc);
        this.wmGenericDao.delete(tlMsCc);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCcs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCcs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}