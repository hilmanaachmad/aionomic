/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsNotifEmail;
import id.co.aio.procure_to_pay.avm2.service.TlMsNotifEmailService;


/**
 * Controller object for domain model class TlMsNotifEmail.
 * @see TlMsNotifEmail
 */
@RestController("AVM2.TlMsNotifEmailController")
@Api(value = "TlMsNotifEmailController", description = "Exposes APIs to work with TlMsNotifEmail resource.")
@RequestMapping("/AVM2/TlMsNotifEmail")
public class TlMsNotifEmailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsNotifEmailController.class);

    @Autowired
	@Qualifier("AVM2.TlMsNotifEmailService")
	private TlMsNotifEmailService tlMsNotifEmailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsNotifEmail instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsNotifEmail createTlMsNotifEmail(@RequestBody TlMsNotifEmail tlMsNotifEmail) {
		LOGGER.debug("Create TlMsNotifEmail with information: {}" , tlMsNotifEmail);

		tlMsNotifEmail = tlMsNotifEmailService.create(tlMsNotifEmail);
		LOGGER.debug("Created TlMsNotifEmail with information: {}" , tlMsNotifEmail);

	    return tlMsNotifEmail;
	}

    @ApiOperation(value = "Returns the TlMsNotifEmail instance associated with the given id.")
    @RequestMapping(value = "/{abId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsNotifEmail getTlMsNotifEmail(@PathVariable("abId") Integer abId) {
        LOGGER.debug("Getting TlMsNotifEmail with id: {}" , abId);

        TlMsNotifEmail foundTlMsNotifEmail = tlMsNotifEmailService.getById(abId);
        LOGGER.debug("TlMsNotifEmail details with id: {}" , foundTlMsNotifEmail);

        return foundTlMsNotifEmail;
    }

    @ApiOperation(value = "Updates the TlMsNotifEmail instance associated with the given id.")
    @RequestMapping(value = "/{abId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsNotifEmail editTlMsNotifEmail(@PathVariable("abId") Integer abId, @RequestBody TlMsNotifEmail tlMsNotifEmail) {
        LOGGER.debug("Editing TlMsNotifEmail with id: {}" , tlMsNotifEmail.getAbId());

        tlMsNotifEmail.setAbId(abId);
        tlMsNotifEmail = tlMsNotifEmailService.update(tlMsNotifEmail);
        LOGGER.debug("TlMsNotifEmail details with id: {}" , tlMsNotifEmail);

        return tlMsNotifEmail;
    }
    
    @ApiOperation(value = "Partially updates the TlMsNotifEmail instance associated with the given id.")
    @RequestMapping(value = "/{abId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsNotifEmail patchTlMsNotifEmail(@PathVariable("abId") Integer abId, @RequestBody @MapTo(TlMsNotifEmail.class) Map<String, Object> tlMsNotifEmailPatch) {
        LOGGER.debug("Partially updating TlMsNotifEmail with id: {}" , abId);

        TlMsNotifEmail tlMsNotifEmail = tlMsNotifEmailService.partialUpdate(abId, tlMsNotifEmailPatch);
        LOGGER.debug("TlMsNotifEmail details after partial update: {}" , tlMsNotifEmail);

        return tlMsNotifEmail;
    }

    @ApiOperation(value = "Deletes the TlMsNotifEmail instance associated with the given id.")
    @RequestMapping(value = "/{abId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsNotifEmail(@PathVariable("abId") Integer abId) {
        LOGGER.debug("Deleting TlMsNotifEmail with id: {}" , abId);

        TlMsNotifEmail deletedTlMsNotifEmail = tlMsNotifEmailService.delete(abId);

        return deletedTlMsNotifEmail != null;
    }

    /**
     * @deprecated Use {@link #findTlMsNotifEmails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsNotifEmail instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsNotifEmail> searchTlMsNotifEmailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsNotifEmails list by query filter:{}", (Object) queryFilters);
        return tlMsNotifEmailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsNotifEmail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsNotifEmail> findTlMsNotifEmails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsNotifEmails list by filter:", query);
        return tlMsNotifEmailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsNotifEmail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsNotifEmail> filterTlMsNotifEmails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsNotifEmails list by filter", query);
        return tlMsNotifEmailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsNotifEmails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsNotifEmailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsNotifEmailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsNotifEmail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsNotifEmailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsNotifEmail instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsNotifEmails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsNotifEmails");
		return tlMsNotifEmailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsNotifEmailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsNotifEmailService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsNotifEmailService instance
	 */
	protected void setTlMsNotifEmailService(TlMsNotifEmailService service) {
		this.tlMsNotifEmailService = service;
	}

}