/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTrAgReal;
import id.co.aio.procure_to_pay.avm2.service.TlTrAgRealService;


/**
 * Controller object for domain model class TlTrAgReal.
 * @see TlTrAgReal
 */
@RestController("AVM2.TlTrAgRealController")
@Api(value = "TlTrAgRealController", description = "Exposes APIs to work with TlTrAgReal resource.")
@RequestMapping("/AVM2/TlTrAgReal")
public class TlTrAgRealController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrAgRealController.class);

    @Autowired
	@Qualifier("AVM2.TlTrAgRealService")
	private TlTrAgRealService tlTrAgRealService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTrAgReal instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrAgReal createTlTrAgReal(@RequestBody TlTrAgReal tlTrAgReal) {
		LOGGER.debug("Create TlTrAgReal with information: {}" , tlTrAgReal);

		tlTrAgReal = tlTrAgRealService.create(tlTrAgReal);
		LOGGER.debug("Created TlTrAgReal with information: {}" , tlTrAgReal);

	    return tlTrAgReal;
	}

    @ApiOperation(value = "Returns the TlTrAgReal instance associated with the given id.")
    @RequestMapping(value = "/{abIdag:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrAgReal getTlTrAgReal(@PathVariable("abIdag") Integer abIdag) {
        LOGGER.debug("Getting TlTrAgReal with id: {}" , abIdag);

        TlTrAgReal foundTlTrAgReal = tlTrAgRealService.getById(abIdag);
        LOGGER.debug("TlTrAgReal details with id: {}" , foundTlTrAgReal);

        return foundTlTrAgReal;
    }

    @ApiOperation(value = "Updates the TlTrAgReal instance associated with the given id.")
    @RequestMapping(value = "/{abIdag:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrAgReal editTlTrAgReal(@PathVariable("abIdag") Integer abIdag, @RequestBody TlTrAgReal tlTrAgReal) {
        LOGGER.debug("Editing TlTrAgReal with id: {}" , tlTrAgReal.getAbIdag());

        tlTrAgReal.setAbIdag(abIdag);
        tlTrAgReal = tlTrAgRealService.update(tlTrAgReal);
        LOGGER.debug("TlTrAgReal details with id: {}" , tlTrAgReal);

        return tlTrAgReal;
    }
    
    @ApiOperation(value = "Partially updates the TlTrAgReal instance associated with the given id.")
    @RequestMapping(value = "/{abIdag:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrAgReal patchTlTrAgReal(@PathVariable("abIdag") Integer abIdag, @RequestBody @MapTo(TlTrAgReal.class) Map<String, Object> tlTrAgRealPatch) {
        LOGGER.debug("Partially updating TlTrAgReal with id: {}" , abIdag);

        TlTrAgReal tlTrAgReal = tlTrAgRealService.partialUpdate(abIdag, tlTrAgRealPatch);
        LOGGER.debug("TlTrAgReal details after partial update: {}" , tlTrAgReal);

        return tlTrAgReal;
    }

    @ApiOperation(value = "Deletes the TlTrAgReal instance associated with the given id.")
    @RequestMapping(value = "/{abIdag:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTrAgReal(@PathVariable("abIdag") Integer abIdag) {
        LOGGER.debug("Deleting TlTrAgReal with id: {}" , abIdag);

        TlTrAgReal deletedTlTrAgReal = tlTrAgRealService.delete(abIdag);

        return deletedTlTrAgReal != null;
    }

    /**
     * @deprecated Use {@link #findTlTrAgReals(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTrAgReal instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrAgReal> searchTlTrAgRealsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTrAgReals list by query filter:{}", (Object) queryFilters);
        return tlTrAgRealService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrAgReal instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrAgReal> findTlTrAgReals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrAgReals list by filter:", query);
        return tlTrAgRealService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrAgReal instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrAgReal> filterTlTrAgReals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrAgReals list by filter", query);
        return tlTrAgRealService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTrAgReals(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTrAgRealService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTrAgRealsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTrAgReal.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTrAgRealService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTrAgReal instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTrAgReals( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTrAgReals");
		return tlTrAgRealService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTrAgRealAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTrAgRealService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTrAgRealService instance
	 */
	protected void setTlTrAgRealService(TlTrAgRealService service) {
		this.tlTrAgRealService = service;
	}

}