/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsDo;
import id.co.aio.procure_to_pay.avm2.service.TlMsDoService;


/**
 * Controller object for domain model class TlMsDo.
 * @see TlMsDo
 */
@RestController("AVM2.TlMsDoController")
@Api(value = "TlMsDoController", description = "Exposes APIs to work with TlMsDo resource.")
@RequestMapping("/AVM2/TlMsDo")
public class TlMsDoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsDoController.class);

    @Autowired
	@Qualifier("AVM2.TlMsDoService")
	private TlMsDoService tlMsDoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsDo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDo createTlMsDo(@RequestBody TlMsDo tlMsDo) {
		LOGGER.debug("Create TlMsDo with information: {}" , tlMsDo);

		tlMsDo = tlMsDoService.create(tlMsDo);
		LOGGER.debug("Created TlMsDo with information: {}" , tlMsDo);

	    return tlMsDo;
	}

    @ApiOperation(value = "Returns the TlMsDo instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDo getTlMsDo(@PathVariable("abIdnt") Integer abIdnt) {
        LOGGER.debug("Getting TlMsDo with id: {}" , abIdnt);

        TlMsDo foundTlMsDo = tlMsDoService.getById(abIdnt);
        LOGGER.debug("TlMsDo details with id: {}" , foundTlMsDo);

        return foundTlMsDo;
    }

    @ApiOperation(value = "Updates the TlMsDo instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDo editTlMsDo(@PathVariable("abIdnt") Integer abIdnt, @RequestBody TlMsDo tlMsDo) {
        LOGGER.debug("Editing TlMsDo with id: {}" , tlMsDo.getAbIdnt());

        tlMsDo.setAbIdnt(abIdnt);
        tlMsDo = tlMsDoService.update(tlMsDo);
        LOGGER.debug("TlMsDo details with id: {}" , tlMsDo);

        return tlMsDo;
    }
    
    @ApiOperation(value = "Partially updates the TlMsDo instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDo patchTlMsDo(@PathVariable("abIdnt") Integer abIdnt, @RequestBody @MapTo(TlMsDo.class) Map<String, Object> tlMsDoPatch) {
        LOGGER.debug("Partially updating TlMsDo with id: {}" , abIdnt);

        TlMsDo tlMsDo = tlMsDoService.partialUpdate(abIdnt, tlMsDoPatch);
        LOGGER.debug("TlMsDo details after partial update: {}" , tlMsDo);

        return tlMsDo;
    }

    @ApiOperation(value = "Deletes the TlMsDo instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsDo(@PathVariable("abIdnt") Integer abIdnt) {
        LOGGER.debug("Deleting TlMsDo with id: {}" , abIdnt);

        TlMsDo deletedTlMsDo = tlMsDoService.delete(abIdnt);

        return deletedTlMsDo != null;
    }

    /**
     * @deprecated Use {@link #findTlMsDos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsDo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsDo> searchTlMsDosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsDos list by query filter:{}", (Object) queryFilters);
        return tlMsDoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsDo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsDo> findTlMsDos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsDos list by filter:", query);
        return tlMsDoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsDo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsDo> filterTlMsDos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsDos list by filter", query);
        return tlMsDoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsDos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsDoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsDosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsDo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsDoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsDo instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsDos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsDos");
		return tlMsDoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsDoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsDoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsDoService instance
	 */
	protected void setTlMsDoService(TlMsDoService service) {
		this.tlMsDoService = service;
	}

}