/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsTape;
import id.co.aio.procure_to_pay.avm2.service.TlMsTapeService;


/**
 * Controller object for domain model class TlMsTape.
 * @see TlMsTape
 */
@RestController("AVM2.TlMsTapeController")
@Api(value = "TlMsTapeController", description = "Exposes APIs to work with TlMsTape resource.")
@RequestMapping("/AVM2/TlMsTape")
public class TlMsTapeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsTapeController.class);

    @Autowired
	@Qualifier("AVM2.TlMsTapeService")
	private TlMsTapeService tlMsTapeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsTape instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsTape createTlMsTape(@RequestBody TlMsTape tlMsTape) {
		LOGGER.debug("Create TlMsTape with information: {}" , tlMsTape);

		tlMsTape = tlMsTapeService.create(tlMsTape);
		LOGGER.debug("Created TlMsTape with information: {}" , tlMsTape);

	    return tlMsTape;
	}

    @ApiOperation(value = "Returns the TlMsTape instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsTape getTlMsTape(@PathVariable("tlId") Integer tlId) {
        LOGGER.debug("Getting TlMsTape with id: {}" , tlId);

        TlMsTape foundTlMsTape = tlMsTapeService.getById(tlId);
        LOGGER.debug("TlMsTape details with id: {}" , foundTlMsTape);

        return foundTlMsTape;
    }

    @ApiOperation(value = "Updates the TlMsTape instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsTape editTlMsTape(@PathVariable("tlId") Integer tlId, @RequestBody TlMsTape tlMsTape) {
        LOGGER.debug("Editing TlMsTape with id: {}" , tlMsTape.getTlId());

        tlMsTape.setTlId(tlId);
        tlMsTape = tlMsTapeService.update(tlMsTape);
        LOGGER.debug("TlMsTape details with id: {}" , tlMsTape);

        return tlMsTape;
    }
    
    @ApiOperation(value = "Partially updates the TlMsTape instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsTape patchTlMsTape(@PathVariable("tlId") Integer tlId, @RequestBody @MapTo(TlMsTape.class) Map<String, Object> tlMsTapePatch) {
        LOGGER.debug("Partially updating TlMsTape with id: {}" , tlId);

        TlMsTape tlMsTape = tlMsTapeService.partialUpdate(tlId, tlMsTapePatch);
        LOGGER.debug("TlMsTape details after partial update: {}" , tlMsTape);

        return tlMsTape;
    }

    @ApiOperation(value = "Deletes the TlMsTape instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsTape(@PathVariable("tlId") Integer tlId) {
        LOGGER.debug("Deleting TlMsTape with id: {}" , tlId);

        TlMsTape deletedTlMsTape = tlMsTapeService.delete(tlId);

        return deletedTlMsTape != null;
    }

    /**
     * @deprecated Use {@link #findTlMsTapes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsTape instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsTape> searchTlMsTapesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsTapes list by query filter:{}", (Object) queryFilters);
        return tlMsTapeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsTape instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsTape> findTlMsTapes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsTapes list by filter:", query);
        return tlMsTapeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsTape instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsTape> filterTlMsTapes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsTapes list by filter", query);
        return tlMsTapeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsTapes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsTapeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsTapesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsTape.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsTapeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsTape instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsTapes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsTapes");
		return tlMsTapeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsTapeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsTapeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsTapeService instance
	 */
	protected void setTlMsTapeService(TlMsTapeService service) {
		this.tlMsTapeService = service;
	}

}