/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsTape;

/**
 * Service object for domain model class {@link TlMsTape}.
 */
public interface TlMsTapeService {

    /**
     * Creates a new TlMsTape. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsTape if any.
     *
     * @param tlMsTape Details of the TlMsTape to be created; value cannot be null.
     * @return The newly created TlMsTape.
     */
    TlMsTape create(@Valid TlMsTape tlMsTape);


	/**
     * Returns TlMsTape by given id if exists.
     *
     * @param tlmstapeId The id of the TlMsTape to get; value cannot be null.
     * @return TlMsTape associated with the given tlmstapeId.
	 * @throws EntityNotFoundException If no TlMsTape is found.
     */
    TlMsTape getById(Integer tlmstapeId);

    /**
     * Find and return the TlMsTape by given id if exists, returns null otherwise.
     *
     * @param tlmstapeId The id of the TlMsTape to get; value cannot be null.
     * @return TlMsTape associated with the given tlmstapeId.
     */
    TlMsTape findById(Integer tlmstapeId);

	/**
     * Find and return the list of TlMsTapes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmstapeIds The id's of the TlMsTape to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsTapes associated with the given tlmstapeIds.
     */
    List<TlMsTape> findByMultipleIds(List<Integer> tlmstapeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsTape. It replaces all fields of the existing TlMsTape with the given tlMsTape.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsTape if any.
     *
     * @param tlMsTape The details of the TlMsTape to be updated; value cannot be null.
     * @return The updated TlMsTape.
     * @throws EntityNotFoundException if no TlMsTape is found with given input.
     */
    TlMsTape update(@Valid TlMsTape tlMsTape);


    /**
     * Partially updates the details of an existing TlMsTape. It updates only the
     * fields of the existing TlMsTape which are passed in the tlMsTapePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsTape if any.
     *
     * @param tlmstapeId The id of the TlMsTape to be deleted; value cannot be null.
     * @param tlMsTapePatch The partial data of TlMsTape which is supposed to be updated; value cannot be null.
     * @return The updated TlMsTape.
     * @throws EntityNotFoundException if no TlMsTape is found with given input.
     */
    TlMsTape partialUpdate(Integer tlmstapeId, Map<String, Object> tlMsTapePatch);

    /**
     * Deletes an existing TlMsTape with the given id.
     *
     * @param tlmstapeId The id of the TlMsTape to be deleted; value cannot be null.
     * @return The deleted TlMsTape.
     * @throws EntityNotFoundException if no TlMsTape found with the given id.
     */
    TlMsTape delete(Integer tlmstapeId);

    /**
     * Deletes an existing TlMsTape with the given object.
     *
     * @param tlMsTape The instance of the TlMsTape to be deleted; value cannot be null.
     */
    void delete(TlMsTape tlMsTape);

    /**
     * Find all TlMsTapes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsTapes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsTape> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsTapes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsTapes.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsTape> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsTapes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsTapes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsTapes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsTape.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}