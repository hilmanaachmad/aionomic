/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsCategory;

/**
 * Service object for domain model class {@link TlMsCategory}.
 */
public interface TlMsCategoryService {

    /**
     * Creates a new TlMsCategory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsCategory if any.
     *
     * @param tlMsCategory Details of the TlMsCategory to be created; value cannot be null.
     * @return The newly created TlMsCategory.
     */
    TlMsCategory create(@Valid TlMsCategory tlMsCategory);


	/**
     * Returns TlMsCategory by given id if exists.
     *
     * @param tlmscategoryId The id of the TlMsCategory to get; value cannot be null.
     * @return TlMsCategory associated with the given tlmscategoryId.
	 * @throws EntityNotFoundException If no TlMsCategory is found.
     */
    TlMsCategory getById(Integer tlmscategoryId);

    /**
     * Find and return the TlMsCategory by given id if exists, returns null otherwise.
     *
     * @param tlmscategoryId The id of the TlMsCategory to get; value cannot be null.
     * @return TlMsCategory associated with the given tlmscategoryId.
     */
    TlMsCategory findById(Integer tlmscategoryId);

	/**
     * Find and return the list of TlMsCategories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmscategoryIds The id's of the TlMsCategory to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsCategories associated with the given tlmscategoryIds.
     */
    List<TlMsCategory> findByMultipleIds(List<Integer> tlmscategoryIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsCategory. It replaces all fields of the existing TlMsCategory with the given tlMsCategory.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsCategory if any.
     *
     * @param tlMsCategory The details of the TlMsCategory to be updated; value cannot be null.
     * @return The updated TlMsCategory.
     * @throws EntityNotFoundException if no TlMsCategory is found with given input.
     */
    TlMsCategory update(@Valid TlMsCategory tlMsCategory);


    /**
     * Partially updates the details of an existing TlMsCategory. It updates only the
     * fields of the existing TlMsCategory which are passed in the tlMsCategoryPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsCategory if any.
     *
     * @param tlmscategoryId The id of the TlMsCategory to be deleted; value cannot be null.
     * @param tlMsCategoryPatch The partial data of TlMsCategory which is supposed to be updated; value cannot be null.
     * @return The updated TlMsCategory.
     * @throws EntityNotFoundException if no TlMsCategory is found with given input.
     */
    TlMsCategory partialUpdate(Integer tlmscategoryId, Map<String, Object> tlMsCategoryPatch);

    /**
     * Deletes an existing TlMsCategory with the given id.
     *
     * @param tlmscategoryId The id of the TlMsCategory to be deleted; value cannot be null.
     * @return The deleted TlMsCategory.
     * @throws EntityNotFoundException if no TlMsCategory found with the given id.
     */
    TlMsCategory delete(Integer tlmscategoryId);

    /**
     * Deletes an existing TlMsCategory with the given object.
     *
     * @param tlMsCategory The instance of the TlMsCategory to be deleted; value cannot be null.
     */
    void delete(TlMsCategory tlMsCategory);

    /**
     * Find all TlMsCategories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsCategories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsCategory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsCategories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsCategories.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsCategory> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsCategories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsCategories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsCategories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsCategory.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}