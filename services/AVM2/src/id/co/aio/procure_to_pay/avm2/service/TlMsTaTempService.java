/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsTaTemp;

/**
 * Service object for domain model class {@link TlMsTaTemp}.
 */
public interface TlMsTaTempService {

    /**
     * Creates a new TlMsTaTemp. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsTaTemp if any.
     *
     * @param tlMsTaTemp Details of the TlMsTaTemp to be created; value cannot be null.
     * @return The newly created TlMsTaTemp.
     */
    TlMsTaTemp create(@Valid TlMsTaTemp tlMsTaTemp);


	/**
     * Returns TlMsTaTemp by given id if exists.
     *
     * @param tlmstatempId The id of the TlMsTaTemp to get; value cannot be null.
     * @return TlMsTaTemp associated with the given tlmstatempId.
	 * @throws EntityNotFoundException If no TlMsTaTemp is found.
     */
    TlMsTaTemp getById(Integer tlmstatempId);

    /**
     * Find and return the TlMsTaTemp by given id if exists, returns null otherwise.
     *
     * @param tlmstatempId The id of the TlMsTaTemp to get; value cannot be null.
     * @return TlMsTaTemp associated with the given tlmstatempId.
     */
    TlMsTaTemp findById(Integer tlmstatempId);

	/**
     * Find and return the list of TlMsTaTemps by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmstatempIds The id's of the TlMsTaTemp to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsTaTemps associated with the given tlmstatempIds.
     */
    List<TlMsTaTemp> findByMultipleIds(List<Integer> tlmstatempIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsTaTemp. It replaces all fields of the existing TlMsTaTemp with the given tlMsTaTemp.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsTaTemp if any.
     *
     * @param tlMsTaTemp The details of the TlMsTaTemp to be updated; value cannot be null.
     * @return The updated TlMsTaTemp.
     * @throws EntityNotFoundException if no TlMsTaTemp is found with given input.
     */
    TlMsTaTemp update(@Valid TlMsTaTemp tlMsTaTemp);


    /**
     * Partially updates the details of an existing TlMsTaTemp. It updates only the
     * fields of the existing TlMsTaTemp which are passed in the tlMsTaTempPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsTaTemp if any.
     *
     * @param tlmstatempId The id of the TlMsTaTemp to be deleted; value cannot be null.
     * @param tlMsTaTempPatch The partial data of TlMsTaTemp which is supposed to be updated; value cannot be null.
     * @return The updated TlMsTaTemp.
     * @throws EntityNotFoundException if no TlMsTaTemp is found with given input.
     */
    TlMsTaTemp partialUpdate(Integer tlmstatempId, Map<String, Object> tlMsTaTempPatch);

    /**
     * Deletes an existing TlMsTaTemp with the given id.
     *
     * @param tlmstatempId The id of the TlMsTaTemp to be deleted; value cannot be null.
     * @return The deleted TlMsTaTemp.
     * @throws EntityNotFoundException if no TlMsTaTemp found with the given id.
     */
    TlMsTaTemp delete(Integer tlmstatempId);

    /**
     * Deletes an existing TlMsTaTemp with the given object.
     *
     * @param tlMsTaTemp The instance of the TlMsTaTemp to be deleted; value cannot be null.
     */
    void delete(TlMsTaTemp tlMsTaTemp);

    /**
     * Find all TlMsTaTemps matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsTaTemps.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsTaTemp> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsTaTemps matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsTaTemps.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsTaTemp> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsTaTemps matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsTaTemps matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsTaTemps in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsTaTemp.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}