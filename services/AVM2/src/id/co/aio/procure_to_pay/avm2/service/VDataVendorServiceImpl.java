/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VDataVendor;


/**
 * ServiceImpl object for domain model class VDataVendor.
 *
 * @see VDataVendor
 */
@Service("AVM2.VDataVendorService")
@Validated
@EntityService(entityClass = VDataVendor.class, serviceId = "AVM2")
public class VDataVendorServiceImpl implements VDataVendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VDataVendorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VDataVendorDao")
    private WMGenericDao<VDataVendor, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VDataVendor, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataVendor create(VDataVendor vdataVendor) {
        LOGGER.debug("Creating a new VDataVendor with information: {}", vdataVendor);

        VDataVendor vdataVendorCreated = this.wmGenericDao.create(vdataVendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vdataVendorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataVendor getById(String vdatavendorId) {
        LOGGER.debug("Finding VDataVendor by id: {}", vdatavendorId);
        return this.wmGenericDao.findById(vdatavendorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataVendor findById(String vdatavendorId) {
        LOGGER.debug("Finding VDataVendor by id: {}", vdatavendorId);
        try {
            return this.wmGenericDao.findById(vdatavendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VDataVendor found with id: {}", vdatavendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VDataVendor> findByMultipleIds(List<String> vdatavendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding VDataVendors by ids: {}", vdatavendorIds);

        return this.wmGenericDao.findByMultipleIds(vdatavendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VDataVendor update(VDataVendor vdataVendor) {
        LOGGER.debug("Updating VDataVendor with information: {}", vdataVendor);

        this.wmGenericDao.update(vdataVendor);
        this.wmGenericDao.refresh(vdataVendor);

        return vdataVendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataVendor partialUpdate(String vdatavendorId, Map<String, Object>vdataVendorPatch) {
        LOGGER.debug("Partially Updating the VDataVendor with id: {}", vdatavendorId);

        VDataVendor vdataVendor = getById(vdatavendorId);

        try {
            ObjectReader vdataVendorReader = this.objectMapper.reader().forType(VDataVendor.class).withValueToUpdate(vdataVendor);
            vdataVendor = vdataVendorReader.readValue(this.objectMapper.writeValueAsString(vdataVendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vdataVendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vdataVendor = update(vdataVendor);

        return vdataVendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataVendor delete(String vdatavendorId) {
        LOGGER.debug("Deleting VDataVendor with id: {}", vdatavendorId);
        VDataVendor deleted = this.wmGenericDao.findById(vdatavendorId);
        if (deleted == null) {
            LOGGER.debug("No VDataVendor found with id: {}", vdatavendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VDataVendor.class.getSimpleName(), vdatavendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VDataVendor vdataVendor) {
        LOGGER.debug("Deleting VDataVendor with {}", vdataVendor);
        this.wmGenericDao.delete(vdataVendor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataVendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VDataVendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataVendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VDataVendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataVendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataVendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}