/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsLocNew;


/**
 * ServiceImpl object for domain model class TlMsLocNew.
 *
 * @see TlMsLocNew
 */
@Service("AVM2.TlMsLocNewService")
@Validated
@EntityService(entityClass = TlMsLocNew.class, serviceId = "AVM2")
public class TlMsLocNewServiceImpl implements TlMsLocNewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsLocNewServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsLocNewDao")
    private WMGenericDao<TlMsLocNew, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsLocNew, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLocNew create(TlMsLocNew tlMsLocNew) {
        LOGGER.debug("Creating a new TlMsLocNew with information: {}", tlMsLocNew);

        TlMsLocNew tlMsLocNewCreated = this.wmGenericDao.create(tlMsLocNew);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsLocNewCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsLocNew getById(Integer tlmslocnewId) {
        LOGGER.debug("Finding TlMsLocNew by id: {}", tlmslocnewId);
        return this.wmGenericDao.findById(tlmslocnewId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsLocNew findById(Integer tlmslocnewId) {
        LOGGER.debug("Finding TlMsLocNew by id: {}", tlmslocnewId);
        try {
            return this.wmGenericDao.findById(tlmslocnewId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsLocNew found with id: {}", tlmslocnewId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsLocNew> findByMultipleIds(List<Integer> tlmslocnewIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsLocNews by ids: {}", tlmslocnewIds);

        return this.wmGenericDao.findByMultipleIds(tlmslocnewIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsLocNew update(TlMsLocNew tlMsLocNew) {
        LOGGER.debug("Updating TlMsLocNew with information: {}", tlMsLocNew);

        this.wmGenericDao.update(tlMsLocNew);
        this.wmGenericDao.refresh(tlMsLocNew);

        return tlMsLocNew;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLocNew partialUpdate(Integer tlmslocnewId, Map<String, Object>tlMsLocNewPatch) {
        LOGGER.debug("Partially Updating the TlMsLocNew with id: {}", tlmslocnewId);

        TlMsLocNew tlMsLocNew = getById(tlmslocnewId);

        try {
            ObjectReader tlMsLocNewReader = this.objectMapper.reader().forType(TlMsLocNew.class).withValueToUpdate(tlMsLocNew);
            tlMsLocNew = tlMsLocNewReader.readValue(this.objectMapper.writeValueAsString(tlMsLocNewPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsLocNewPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsLocNew = update(tlMsLocNew);

        return tlMsLocNew;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLocNew delete(Integer tlmslocnewId) {
        LOGGER.debug("Deleting TlMsLocNew with id: {}", tlmslocnewId);
        TlMsLocNew deleted = this.wmGenericDao.findById(tlmslocnewId);
        if (deleted == null) {
            LOGGER.debug("No TlMsLocNew found with id: {}", tlmslocnewId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsLocNew.class.getSimpleName(), tlmslocnewId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsLocNew tlMsLocNew) {
        LOGGER.debug("Deleting TlMsLocNew with {}", tlMsLocNew);
        this.wmGenericDao.delete(tlMsLocNew);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsLocNew> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsLocNews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsLocNew> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsLocNews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsLocNew to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsLocNew to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}