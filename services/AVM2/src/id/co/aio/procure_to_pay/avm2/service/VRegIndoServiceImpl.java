/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VRegIndo;


/**
 * ServiceImpl object for domain model class VRegIndo.
 *
 * @see VRegIndo
 */
@Service("AVM2.VRegIndoService")
@Validated
@EntityService(entityClass = VRegIndo.class, serviceId = "AVM2")
public class VRegIndoServiceImpl implements VRegIndoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VRegIndoServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VRegIndoDao")
    private WMGenericDao<VRegIndo, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VRegIndo, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VRegIndo create(VRegIndo vregIndo) {
        LOGGER.debug("Creating a new VRegIndo with information: {}", vregIndo);

        VRegIndo vregIndoCreated = this.wmGenericDao.create(vregIndo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vregIndoCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VRegIndo getById(String vregindoId) {
        LOGGER.debug("Finding VRegIndo by id: {}", vregindoId);
        return this.wmGenericDao.findById(vregindoId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VRegIndo findById(String vregindoId) {
        LOGGER.debug("Finding VRegIndo by id: {}", vregindoId);
        try {
            return this.wmGenericDao.findById(vregindoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VRegIndo found with id: {}", vregindoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VRegIndo> findByMultipleIds(List<String> vregindoIds, boolean orderedReturn) {
        LOGGER.debug("Finding VRegIndos by ids: {}", vregindoIds);

        return this.wmGenericDao.findByMultipleIds(vregindoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VRegIndo update(VRegIndo vregIndo) {
        LOGGER.debug("Updating VRegIndo with information: {}", vregIndo);

        this.wmGenericDao.update(vregIndo);
        this.wmGenericDao.refresh(vregIndo);

        return vregIndo;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VRegIndo partialUpdate(String vregindoId, Map<String, Object>vregIndoPatch) {
        LOGGER.debug("Partially Updating the VRegIndo with id: {}", vregindoId);

        VRegIndo vregIndo = getById(vregindoId);

        try {
            ObjectReader vregIndoReader = this.objectMapper.reader().forType(VRegIndo.class).withValueToUpdate(vregIndo);
            vregIndo = vregIndoReader.readValue(this.objectMapper.writeValueAsString(vregIndoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vregIndoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vregIndo = update(vregIndo);

        return vregIndo;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VRegIndo delete(String vregindoId) {
        LOGGER.debug("Deleting VRegIndo with id: {}", vregindoId);
        VRegIndo deleted = this.wmGenericDao.findById(vregindoId);
        if (deleted == null) {
            LOGGER.debug("No VRegIndo found with id: {}", vregindoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VRegIndo.class.getSimpleName(), vregindoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VRegIndo vregIndo) {
        LOGGER.debug("Deleting VRegIndo with {}", vregIndo);
        this.wmGenericDao.delete(vregIndo);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VRegIndo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VRegIndos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VRegIndo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VRegIndos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VRegIndo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VRegIndo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}