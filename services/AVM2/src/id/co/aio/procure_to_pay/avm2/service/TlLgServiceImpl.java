/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlLg;


/**
 * ServiceImpl object for domain model class TlLg.
 *
 * @see TlLg
 */
@Service("AVM2.TlLgService")
@Validated
@EntityService(entityClass = TlLg.class, serviceId = "AVM2")
public class TlLgServiceImpl implements TlLgService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlLgServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlLgDao")
    private WMGenericDao<TlLg, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlLg, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlLg create(TlLg tlLg) {
        LOGGER.debug("Creating a new TlLg with information: {}", tlLg);

        TlLg tlLgCreated = this.wmGenericDao.create(tlLg);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlLgCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlLg getById(Integer tllgId) {
        LOGGER.debug("Finding TlLg by id: {}", tllgId);
        return this.wmGenericDao.findById(tllgId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlLg findById(Integer tllgId) {
        LOGGER.debug("Finding TlLg by id: {}", tllgId);
        try {
            return this.wmGenericDao.findById(tllgId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlLg found with id: {}", tllgId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlLg> findByMultipleIds(List<Integer> tllgIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlLgs by ids: {}", tllgIds);

        return this.wmGenericDao.findByMultipleIds(tllgIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlLg update(TlLg tlLg) {
        LOGGER.debug("Updating TlLg with information: {}", tlLg);

        this.wmGenericDao.update(tlLg);
        this.wmGenericDao.refresh(tlLg);

        return tlLg;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlLg partialUpdate(Integer tllgId, Map<String, Object>tlLgPatch) {
        LOGGER.debug("Partially Updating the TlLg with id: {}", tllgId);

        TlLg tlLg = getById(tllgId);

        try {
            ObjectReader tlLgReader = this.objectMapper.reader().forType(TlLg.class).withValueToUpdate(tlLg);
            tlLg = tlLgReader.readValue(this.objectMapper.writeValueAsString(tlLgPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlLgPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlLg = update(tlLg);

        return tlLg;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlLg delete(Integer tllgId) {
        LOGGER.debug("Deleting TlLg with id: {}", tllgId);
        TlLg deleted = this.wmGenericDao.findById(tllgId);
        if (deleted == null) {
            LOGGER.debug("No TlLg found with id: {}", tllgId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlLg.class.getSimpleName(), tllgId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlLg tlLg) {
        LOGGER.debug("Deleting TlLg with {}", tlLg);
        this.wmGenericDao.delete(tlLg);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlLg> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlLgs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlLg> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlLgs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlLg to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlLg to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}