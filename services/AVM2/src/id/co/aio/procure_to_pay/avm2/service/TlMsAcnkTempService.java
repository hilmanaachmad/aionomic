/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkTemp;

/**
 * Service object for domain model class {@link TlMsAcnkTemp}.
 */
public interface TlMsAcnkTempService {

    /**
     * Creates a new TlMsAcnkTemp. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkTemp if any.
     *
     * @param tlMsAcnkTemp Details of the TlMsAcnkTemp to be created; value cannot be null.
     * @return The newly created TlMsAcnkTemp.
     */
    TlMsAcnkTemp create(@Valid TlMsAcnkTemp tlMsAcnkTemp);


	/**
     * Returns TlMsAcnkTemp by given id if exists.
     *
     * @param tlmsacnktempId The id of the TlMsAcnkTemp to get; value cannot be null.
     * @return TlMsAcnkTemp associated with the given tlmsacnktempId.
	 * @throws EntityNotFoundException If no TlMsAcnkTemp is found.
     */
    TlMsAcnkTemp getById(Integer tlmsacnktempId);

    /**
     * Find and return the TlMsAcnkTemp by given id if exists, returns null otherwise.
     *
     * @param tlmsacnktempId The id of the TlMsAcnkTemp to get; value cannot be null.
     * @return TlMsAcnkTemp associated with the given tlmsacnktempId.
     */
    TlMsAcnkTemp findById(Integer tlmsacnktempId);

	/**
     * Find and return the list of TlMsAcnkTemps by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsacnktempIds The id's of the TlMsAcnkTemp to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsAcnkTemps associated with the given tlmsacnktempIds.
     */
    List<TlMsAcnkTemp> findByMultipleIds(List<Integer> tlmsacnktempIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsAcnkTemp. It replaces all fields of the existing TlMsAcnkTemp with the given tlMsAcnkTemp.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkTemp if any.
     *
     * @param tlMsAcnkTemp The details of the TlMsAcnkTemp to be updated; value cannot be null.
     * @return The updated TlMsAcnkTemp.
     * @throws EntityNotFoundException if no TlMsAcnkTemp is found with given input.
     */
    TlMsAcnkTemp update(@Valid TlMsAcnkTemp tlMsAcnkTemp);


    /**
     * Partially updates the details of an existing TlMsAcnkTemp. It updates only the
     * fields of the existing TlMsAcnkTemp which are passed in the tlMsAcnkTempPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAcnkTemp if any.
     *
     * @param tlmsacnktempId The id of the TlMsAcnkTemp to be deleted; value cannot be null.
     * @param tlMsAcnkTempPatch The partial data of TlMsAcnkTemp which is supposed to be updated; value cannot be null.
     * @return The updated TlMsAcnkTemp.
     * @throws EntityNotFoundException if no TlMsAcnkTemp is found with given input.
     */
    TlMsAcnkTemp partialUpdate(Integer tlmsacnktempId, Map<String, Object> tlMsAcnkTempPatch);

    /**
     * Deletes an existing TlMsAcnkTemp with the given id.
     *
     * @param tlmsacnktempId The id of the TlMsAcnkTemp to be deleted; value cannot be null.
     * @return The deleted TlMsAcnkTemp.
     * @throws EntityNotFoundException if no TlMsAcnkTemp found with the given id.
     */
    TlMsAcnkTemp delete(Integer tlmsacnktempId);

    /**
     * Deletes an existing TlMsAcnkTemp with the given object.
     *
     * @param tlMsAcnkTemp The instance of the TlMsAcnkTemp to be deleted; value cannot be null.
     */
    void delete(TlMsAcnkTemp tlMsAcnkTemp);

    /**
     * Find all TlMsAcnkTemps matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAcnkTemps.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsAcnkTemp> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsAcnkTemps matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAcnkTemps.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsAcnkTemp> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsAcnkTemps matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsAcnkTemps matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsAcnkTemps in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsAcnkTemp.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}