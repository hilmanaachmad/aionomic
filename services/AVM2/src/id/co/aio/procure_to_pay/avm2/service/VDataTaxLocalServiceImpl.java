/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VDataTaxLocal;


/**
 * ServiceImpl object for domain model class VDataTaxLocal.
 *
 * @see VDataTaxLocal
 */
@Service("AVM2.VDataTaxLocalService")
@Validated
@EntityService(entityClass = VDataTaxLocal.class, serviceId = "AVM2")
public class VDataTaxLocalServiceImpl implements VDataTaxLocalService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VDataTaxLocalServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VDataTaxLocalDao")
    private WMGenericDao<VDataTaxLocal, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VDataTaxLocal, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataTaxLocal create(VDataTaxLocal vdataTaxLocal) {
        LOGGER.debug("Creating a new VDataTaxLocal with information: {}", vdataTaxLocal);

        VDataTaxLocal vdataTaxLocalCreated = this.wmGenericDao.create(vdataTaxLocal);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vdataTaxLocalCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataTaxLocal getById(Integer vdatataxlocalId) {
        LOGGER.debug("Finding VDataTaxLocal by id: {}", vdatataxlocalId);
        return this.wmGenericDao.findById(vdatataxlocalId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataTaxLocal findById(Integer vdatataxlocalId) {
        LOGGER.debug("Finding VDataTaxLocal by id: {}", vdatataxlocalId);
        try {
            return this.wmGenericDao.findById(vdatataxlocalId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VDataTaxLocal found with id: {}", vdatataxlocalId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VDataTaxLocal> findByMultipleIds(List<Integer> vdatataxlocalIds, boolean orderedReturn) {
        LOGGER.debug("Finding VDataTaxLocals by ids: {}", vdatataxlocalIds);

        return this.wmGenericDao.findByMultipleIds(vdatataxlocalIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VDataTaxLocal update(VDataTaxLocal vdataTaxLocal) {
        LOGGER.debug("Updating VDataTaxLocal with information: {}", vdataTaxLocal);

        this.wmGenericDao.update(vdataTaxLocal);
        this.wmGenericDao.refresh(vdataTaxLocal);

        return vdataTaxLocal;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataTaxLocal partialUpdate(Integer vdatataxlocalId, Map<String, Object>vdataTaxLocalPatch) {
        LOGGER.debug("Partially Updating the VDataTaxLocal with id: {}", vdatataxlocalId);

        VDataTaxLocal vdataTaxLocal = getById(vdatataxlocalId);

        try {
            ObjectReader vdataTaxLocalReader = this.objectMapper.reader().forType(VDataTaxLocal.class).withValueToUpdate(vdataTaxLocal);
            vdataTaxLocal = vdataTaxLocalReader.readValue(this.objectMapper.writeValueAsString(vdataTaxLocalPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vdataTaxLocalPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vdataTaxLocal = update(vdataTaxLocal);

        return vdataTaxLocal;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataTaxLocal delete(Integer vdatataxlocalId) {
        LOGGER.debug("Deleting VDataTaxLocal with id: {}", vdatataxlocalId);
        VDataTaxLocal deleted = this.wmGenericDao.findById(vdatataxlocalId);
        if (deleted == null) {
            LOGGER.debug("No VDataTaxLocal found with id: {}", vdatataxlocalId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VDataTaxLocal.class.getSimpleName(), vdatataxlocalId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VDataTaxLocal vdataTaxLocal) {
        LOGGER.debug("Deleting VDataTaxLocal with {}", vdataTaxLocal);
        this.wmGenericDao.delete(vdataTaxLocal);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataTaxLocal> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VDataTaxLocals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataTaxLocal> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VDataTaxLocals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataTaxLocal to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataTaxLocal to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}