/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrAgReal;


/**
 * ServiceImpl object for domain model class TlTrAgReal.
 *
 * @see TlTrAgReal
 */
@Service("AVM2.TlTrAgRealService")
@Validated
@EntityService(entityClass = TlTrAgReal.class, serviceId = "AVM2")
public class TlTrAgRealServiceImpl implements TlTrAgRealService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrAgRealServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrAgRealDao")
    private WMGenericDao<TlTrAgReal, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrAgReal, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAgReal create(TlTrAgReal tlTrAgReal) {
        LOGGER.debug("Creating a new TlTrAgReal with information: {}", tlTrAgReal);

        TlTrAgReal tlTrAgRealCreated = this.wmGenericDao.create(tlTrAgReal);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrAgRealCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrAgReal getById(Integer tltragrealId) {
        LOGGER.debug("Finding TlTrAgReal by id: {}", tltragrealId);
        return this.wmGenericDao.findById(tltragrealId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrAgReal findById(Integer tltragrealId) {
        LOGGER.debug("Finding TlTrAgReal by id: {}", tltragrealId);
        try {
            return this.wmGenericDao.findById(tltragrealId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrAgReal found with id: {}", tltragrealId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrAgReal> findByMultipleIds(List<Integer> tltragrealIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrAgReals by ids: {}", tltragrealIds);

        return this.wmGenericDao.findByMultipleIds(tltragrealIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrAgReal update(TlTrAgReal tlTrAgReal) {
        LOGGER.debug("Updating TlTrAgReal with information: {}", tlTrAgReal);

        this.wmGenericDao.update(tlTrAgReal);
        this.wmGenericDao.refresh(tlTrAgReal);

        return tlTrAgReal;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAgReal partialUpdate(Integer tltragrealId, Map<String, Object>tlTrAgRealPatch) {
        LOGGER.debug("Partially Updating the TlTrAgReal with id: {}", tltragrealId);

        TlTrAgReal tlTrAgReal = getById(tltragrealId);

        try {
            ObjectReader tlTrAgRealReader = this.objectMapper.reader().forType(TlTrAgReal.class).withValueToUpdate(tlTrAgReal);
            tlTrAgReal = tlTrAgRealReader.readValue(this.objectMapper.writeValueAsString(tlTrAgRealPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrAgRealPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrAgReal = update(tlTrAgReal);

        return tlTrAgReal;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAgReal delete(Integer tltragrealId) {
        LOGGER.debug("Deleting TlTrAgReal with id: {}", tltragrealId);
        TlTrAgReal deleted = this.wmGenericDao.findById(tltragrealId);
        if (deleted == null) {
            LOGGER.debug("No TlTrAgReal found with id: {}", tltragrealId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrAgReal.class.getSimpleName(), tltragrealId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrAgReal tlTrAgReal) {
        LOGGER.debug("Deleting TlTrAgReal with {}", tlTrAgReal);
        this.wmGenericDao.delete(tlTrAgReal);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrAgReal> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrAgReals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrAgReal> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrAgReals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrAgReal to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrAgReal to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}