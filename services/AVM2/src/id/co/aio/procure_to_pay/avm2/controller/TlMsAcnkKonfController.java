/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkKonf;
import id.co.aio.procure_to_pay.avm2.service.TlMsAcnkKonfService;


/**
 * Controller object for domain model class TlMsAcnkKonf.
 * @see TlMsAcnkKonf
 */
@RestController("AVM2.TlMsAcnkKonfController")
@Api(value = "TlMsAcnkKonfController", description = "Exposes APIs to work with TlMsAcnkKonf resource.")
@RequestMapping("/AVM2/TlMsAcnkKonf")
public class TlMsAcnkKonfController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAcnkKonfController.class);

    @Autowired
	@Qualifier("AVM2.TlMsAcnkKonfService")
	private TlMsAcnkKonfService tlMsAcnkKonfService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsAcnkKonf instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkKonf createTlMsAcnkKonf(@RequestBody TlMsAcnkKonf tlMsAcnkKonf) {
		LOGGER.debug("Create TlMsAcnkKonf with information: {}" , tlMsAcnkKonf);

		tlMsAcnkKonf = tlMsAcnkKonfService.create(tlMsAcnkKonf);
		LOGGER.debug("Created TlMsAcnkKonf with information: {}" , tlMsAcnkKonf);

	    return tlMsAcnkKonf;
	}

    @ApiOperation(value = "Returns the TlMsAcnkKonf instance associated with the given id.")
    @RequestMapping(value = "/{abIdAcnkKonf:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkKonf getTlMsAcnkKonf(@PathVariable("abIdAcnkKonf") Integer abIdAcnkKonf) {
        LOGGER.debug("Getting TlMsAcnkKonf with id: {}" , abIdAcnkKonf);

        TlMsAcnkKonf foundTlMsAcnkKonf = tlMsAcnkKonfService.getById(abIdAcnkKonf);
        LOGGER.debug("TlMsAcnkKonf details with id: {}" , foundTlMsAcnkKonf);

        return foundTlMsAcnkKonf;
    }

    @ApiOperation(value = "Updates the TlMsAcnkKonf instance associated with the given id.")
    @RequestMapping(value = "/{abIdAcnkKonf:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkKonf editTlMsAcnkKonf(@PathVariable("abIdAcnkKonf") Integer abIdAcnkKonf, @RequestBody TlMsAcnkKonf tlMsAcnkKonf) {
        LOGGER.debug("Editing TlMsAcnkKonf with id: {}" , tlMsAcnkKonf.getAbIdAcnkKonf());

        tlMsAcnkKonf.setAbIdAcnkKonf(abIdAcnkKonf);
        tlMsAcnkKonf = tlMsAcnkKonfService.update(tlMsAcnkKonf);
        LOGGER.debug("TlMsAcnkKonf details with id: {}" , tlMsAcnkKonf);

        return tlMsAcnkKonf;
    }
    
    @ApiOperation(value = "Partially updates the TlMsAcnkKonf instance associated with the given id.")
    @RequestMapping(value = "/{abIdAcnkKonf:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkKonf patchTlMsAcnkKonf(@PathVariable("abIdAcnkKonf") Integer abIdAcnkKonf, @RequestBody @MapTo(TlMsAcnkKonf.class) Map<String, Object> tlMsAcnkKonfPatch) {
        LOGGER.debug("Partially updating TlMsAcnkKonf with id: {}" , abIdAcnkKonf);

        TlMsAcnkKonf tlMsAcnkKonf = tlMsAcnkKonfService.partialUpdate(abIdAcnkKonf, tlMsAcnkKonfPatch);
        LOGGER.debug("TlMsAcnkKonf details after partial update: {}" , tlMsAcnkKonf);

        return tlMsAcnkKonf;
    }

    @ApiOperation(value = "Deletes the TlMsAcnkKonf instance associated with the given id.")
    @RequestMapping(value = "/{abIdAcnkKonf:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsAcnkKonf(@PathVariable("abIdAcnkKonf") Integer abIdAcnkKonf) {
        LOGGER.debug("Deleting TlMsAcnkKonf with id: {}" , abIdAcnkKonf);

        TlMsAcnkKonf deletedTlMsAcnkKonf = tlMsAcnkKonfService.delete(abIdAcnkKonf);

        return deletedTlMsAcnkKonf != null;
    }

    /**
     * @deprecated Use {@link #findTlMsAcnkKonfs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsAcnkKonf instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkKonf> searchTlMsAcnkKonfsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsAcnkKonfs list by query filter:{}", (Object) queryFilters);
        return tlMsAcnkKonfService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAcnkKonf instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkKonf> findTlMsAcnkKonfs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAcnkKonfs list by filter:", query);
        return tlMsAcnkKonfService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAcnkKonf instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkKonf> filterTlMsAcnkKonfs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAcnkKonfs list by filter", query);
        return tlMsAcnkKonfService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsAcnkKonfs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsAcnkKonfService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsAcnkKonfsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsAcnkKonf.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsAcnkKonfService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsAcnkKonf instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsAcnkKonfs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsAcnkKonfs");
		return tlMsAcnkKonfService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsAcnkKonfAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsAcnkKonfService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsAcnkKonfService instance
	 */
	protected void setTlMsAcnkKonfService(TlMsAcnkKonfService service) {
		this.tlMsAcnkKonfService = service;
	}

}