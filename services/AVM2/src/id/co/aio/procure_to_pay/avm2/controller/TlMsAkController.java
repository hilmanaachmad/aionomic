/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsAk;
import id.co.aio.procure_to_pay.avm2.service.TlMsAkService;


/**
 * Controller object for domain model class TlMsAk.
 * @see TlMsAk
 */
@RestController("AVM2.TlMsAkController")
@Api(value = "TlMsAkController", description = "Exposes APIs to work with TlMsAk resource.")
@RequestMapping("/AVM2/TlMsAk")
public class TlMsAkController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAkController.class);

    @Autowired
	@Qualifier("AVM2.TlMsAkService")
	private TlMsAkService tlMsAkService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsAk instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAk createTlMsAk(@RequestBody TlMsAk tlMsAk) {
		LOGGER.debug("Create TlMsAk with information: {}" , tlMsAk);

		tlMsAk = tlMsAkService.create(tlMsAk);
		LOGGER.debug("Created TlMsAk with information: {}" , tlMsAk);

	    return tlMsAk;
	}

    @ApiOperation(value = "Returns the TlMsAk instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAk getTlMsAk(@PathVariable("abCoorsa") String abCoorsa) {
        LOGGER.debug("Getting TlMsAk with id: {}" , abCoorsa);

        TlMsAk foundTlMsAk = tlMsAkService.getById(abCoorsa);
        LOGGER.debug("TlMsAk details with id: {}" , foundTlMsAk);

        return foundTlMsAk;
    }

    @ApiOperation(value = "Updates the TlMsAk instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAk editTlMsAk(@PathVariable("abCoorsa") String abCoorsa, @RequestBody TlMsAk tlMsAk) {
        LOGGER.debug("Editing TlMsAk with id: {}" , tlMsAk.getAbCoorsa());

        tlMsAk.setAbCoorsa(abCoorsa);
        tlMsAk = tlMsAkService.update(tlMsAk);
        LOGGER.debug("TlMsAk details with id: {}" , tlMsAk);

        return tlMsAk;
    }
    
    @ApiOperation(value = "Partially updates the TlMsAk instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAk patchTlMsAk(@PathVariable("abCoorsa") String abCoorsa, @RequestBody @MapTo(TlMsAk.class) Map<String, Object> tlMsAkPatch) {
        LOGGER.debug("Partially updating TlMsAk with id: {}" , abCoorsa);

        TlMsAk tlMsAk = tlMsAkService.partialUpdate(abCoorsa, tlMsAkPatch);
        LOGGER.debug("TlMsAk details after partial update: {}" , tlMsAk);

        return tlMsAk;
    }

    @ApiOperation(value = "Deletes the TlMsAk instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsAk(@PathVariable("abCoorsa") String abCoorsa) {
        LOGGER.debug("Deleting TlMsAk with id: {}" , abCoorsa);

        TlMsAk deletedTlMsAk = tlMsAkService.delete(abCoorsa);

        return deletedTlMsAk != null;
    }

    /**
     * @deprecated Use {@link #findTlMsAks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsAk instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAk> searchTlMsAksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsAks list by query filter:{}", (Object) queryFilters);
        return tlMsAkService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAk instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAk> findTlMsAks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAks list by filter:", query);
        return tlMsAkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAk instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAk> filterTlMsAks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAks list by filter", query);
        return tlMsAkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsAks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsAkService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsAksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsAk.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsAkService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsAk instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsAks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsAks");
		return tlMsAkService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsAkAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsAkService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsAkService instance
	 */
	protected void setTlMsAkService(TlMsAkService service) {
		this.tlMsAkService = service;
	}

}