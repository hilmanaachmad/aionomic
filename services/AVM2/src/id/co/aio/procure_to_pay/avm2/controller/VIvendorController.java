/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VIvendor;
import id.co.aio.procure_to_pay.avm2.service.VIvendorService;


/**
 * Controller object for domain model class VIvendor.
 * @see VIvendor
 */
@RestController("AVM2.VIvendorController")
@Api(value = "VIvendorController", description = "Exposes APIs to work with VIvendor resource.")
@RequestMapping("/AVM2/VIvendor")
public class VIvendorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VIvendorController.class);

    @Autowired
	@Qualifier("AVM2.VIvendorService")
	private VIvendorService vIvendorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VIvendor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VIvendor createVIvendor(@RequestBody VIvendor vivendor) {
		LOGGER.debug("Create VIvendor with information: {}" , vivendor);

		vivendor = vIvendorService.create(vivendor);
		LOGGER.debug("Created VIvendor with information: {}" , vivendor);

	    return vivendor;
	}

    @ApiOperation(value = "Returns the VIvendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VIvendor getVIvendor(@PathVariable("vendorCode") String vendorCode) {
        LOGGER.debug("Getting VIvendor with id: {}" , vendorCode);

        VIvendor foundVIvendor = vIvendorService.getById(vendorCode);
        LOGGER.debug("VIvendor details with id: {}" , foundVIvendor);

        return foundVIvendor;
    }

    @ApiOperation(value = "Updates the VIvendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VIvendor editVIvendor(@PathVariable("vendorCode") String vendorCode, @RequestBody VIvendor vivendor) {
        LOGGER.debug("Editing VIvendor with id: {}" , vivendor.getVendorCode());

        vivendor.setVendorCode(vendorCode);
        vivendor = vIvendorService.update(vivendor);
        LOGGER.debug("VIvendor details with id: {}" , vivendor);

        return vivendor;
    }
    
    @ApiOperation(value = "Partially updates the VIvendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VIvendor patchVIvendor(@PathVariable("vendorCode") String vendorCode, @RequestBody @MapTo(VIvendor.class) Map<String, Object> vivendorPatch) {
        LOGGER.debug("Partially updating VIvendor with id: {}" , vendorCode);

        VIvendor vivendor = vIvendorService.partialUpdate(vendorCode, vivendorPatch);
        LOGGER.debug("VIvendor details after partial update: {}" , vivendor);

        return vivendor;
    }

    @ApiOperation(value = "Deletes the VIvendor instance associated with the given id.")
    @RequestMapping(value = "/{vendorCode:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVIvendor(@PathVariable("vendorCode") String vendorCode) {
        LOGGER.debug("Deleting VIvendor with id: {}" , vendorCode);

        VIvendor deletedVIvendor = vIvendorService.delete(vendorCode);

        return deletedVIvendor != null;
    }

    /**
     * @deprecated Use {@link #findVIvendors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VIvendor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VIvendor> searchVIvendorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VIvendors list by query filter:{}", (Object) queryFilters);
        return vIvendorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VIvendor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VIvendor> findVIvendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VIvendors list by filter:", query);
        return vIvendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VIvendor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VIvendor> filterVIvendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VIvendors list by filter", query);
        return vIvendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVIvendors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vIvendorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVIvendorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VIvendor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vIvendorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VIvendor instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVIvendors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VIvendors");
		return vIvendorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVIvendorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vIvendorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VIvendorService instance
	 */
	protected void setVIvendorService(VIvendorService service) {
		this.vIvendorService = service;
	}

}