/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsPuon;
import id.co.aio.procure_to_pay.avm2.service.TlMsPuonService;


/**
 * Controller object for domain model class TlMsPuon.
 * @see TlMsPuon
 */
@RestController("AVM2.TlMsPuonController")
@Api(value = "TlMsPuonController", description = "Exposes APIs to work with TlMsPuon resource.")
@RequestMapping("/AVM2/TlMsPuon")
public class TlMsPuonController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsPuonController.class);

    @Autowired
	@Qualifier("AVM2.TlMsPuonService")
	private TlMsPuonService tlMsPuonService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsPuon instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuon createTlMsPuon(@RequestBody TlMsPuon tlMsPuon) {
		LOGGER.debug("Create TlMsPuon with information: {}" , tlMsPuon);

		tlMsPuon = tlMsPuonService.create(tlMsPuon);
		LOGGER.debug("Created TlMsPuon with information: {}" , tlMsPuon);

	    return tlMsPuon;
	}

    @ApiOperation(value = "Returns the TlMsPuon instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuon getTlMsPuon(@PathVariable("abIdseon") Integer abIdseon) {
        LOGGER.debug("Getting TlMsPuon with id: {}" , abIdseon);

        TlMsPuon foundTlMsPuon = tlMsPuonService.getById(abIdseon);
        LOGGER.debug("TlMsPuon details with id: {}" , foundTlMsPuon);

        return foundTlMsPuon;
    }

    @ApiOperation(value = "Updates the TlMsPuon instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuon editTlMsPuon(@PathVariable("abIdseon") Integer abIdseon, @RequestBody TlMsPuon tlMsPuon) {
        LOGGER.debug("Editing TlMsPuon with id: {}" , tlMsPuon.getAbIdseon());

        tlMsPuon.setAbIdseon(abIdseon);
        tlMsPuon = tlMsPuonService.update(tlMsPuon);
        LOGGER.debug("TlMsPuon details with id: {}" , tlMsPuon);

        return tlMsPuon;
    }
    
    @ApiOperation(value = "Partially updates the TlMsPuon instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsPuon patchTlMsPuon(@PathVariable("abIdseon") Integer abIdseon, @RequestBody @MapTo(TlMsPuon.class) Map<String, Object> tlMsPuonPatch) {
        LOGGER.debug("Partially updating TlMsPuon with id: {}" , abIdseon);

        TlMsPuon tlMsPuon = tlMsPuonService.partialUpdate(abIdseon, tlMsPuonPatch);
        LOGGER.debug("TlMsPuon details after partial update: {}" , tlMsPuon);

        return tlMsPuon;
    }

    @ApiOperation(value = "Deletes the TlMsPuon instance associated with the given id.")
    @RequestMapping(value = "/{abIdseon:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsPuon(@PathVariable("abIdseon") Integer abIdseon) {
        LOGGER.debug("Deleting TlMsPuon with id: {}" , abIdseon);

        TlMsPuon deletedTlMsPuon = tlMsPuonService.delete(abIdseon);

        return deletedTlMsPuon != null;
    }

    /**
     * @deprecated Use {@link #findTlMsPuons(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsPuon instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsPuon> searchTlMsPuonsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsPuons list by query filter:{}", (Object) queryFilters);
        return tlMsPuonService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsPuon instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsPuon> findTlMsPuons(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsPuons list by filter:", query);
        return tlMsPuonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsPuon instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsPuon> filterTlMsPuons(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsPuons list by filter", query);
        return tlMsPuonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsPuons(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsPuonService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsPuonsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsPuon.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsPuonService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsPuon instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsPuons( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsPuons");
		return tlMsPuonService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsPuonAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsPuonService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsPuonService instance
	 */
	protected void setTlMsPuonService(TlMsPuonService service) {
		this.tlMsPuonService = service;
	}

}