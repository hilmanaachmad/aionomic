/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlHr;


/**
 * ServiceImpl object for domain model class TlHr.
 *
 * @see TlHr
 */
@Service("AVM2.TlHrService")
@Validated
@EntityService(entityClass = TlHr.class, serviceId = "AVM2")
public class TlHrServiceImpl implements TlHrService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlHrServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlHrDao")
    private WMGenericDao<TlHr, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlHr, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlHr create(TlHr tlHr) {
        LOGGER.debug("Creating a new TlHr with information: {}", tlHr);

        TlHr tlHrCreated = this.wmGenericDao.create(tlHr);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlHrCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlHr getById(Integer tlhrId) {
        LOGGER.debug("Finding TlHr by id: {}", tlhrId);
        return this.wmGenericDao.findById(tlhrId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlHr findById(Integer tlhrId) {
        LOGGER.debug("Finding TlHr by id: {}", tlhrId);
        try {
            return this.wmGenericDao.findById(tlhrId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlHr found with id: {}", tlhrId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlHr> findByMultipleIds(List<Integer> tlhrIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlHrs by ids: {}", tlhrIds);

        return this.wmGenericDao.findByMultipleIds(tlhrIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlHr update(TlHr tlHr) {
        LOGGER.debug("Updating TlHr with information: {}", tlHr);

        this.wmGenericDao.update(tlHr);
        this.wmGenericDao.refresh(tlHr);

        return tlHr;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlHr partialUpdate(Integer tlhrId, Map<String, Object>tlHrPatch) {
        LOGGER.debug("Partially Updating the TlHr with id: {}", tlhrId);

        TlHr tlHr = getById(tlhrId);

        try {
            ObjectReader tlHrReader = this.objectMapper.reader().forType(TlHr.class).withValueToUpdate(tlHr);
            tlHr = tlHrReader.readValue(this.objectMapper.writeValueAsString(tlHrPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlHrPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlHr = update(tlHr);

        return tlHr;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlHr delete(Integer tlhrId) {
        LOGGER.debug("Deleting TlHr with id: {}", tlhrId);
        TlHr deleted = this.wmGenericDao.findById(tlhrId);
        if (deleted == null) {
            LOGGER.debug("No TlHr found with id: {}", tlhrId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlHr.class.getSimpleName(), tlhrId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlHr tlHr) {
        LOGGER.debug("Deleting TlHr with {}", tlHr);
        this.wmGenericDao.delete(tlHr);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlHr> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlHrs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlHr> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlHrs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlHr to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlHr to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}