/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VwKontrak;


/**
 * ServiceImpl object for domain model class VwKontrak.
 *
 * @see VwKontrak
 */
@Service("AVM2.VwKontrakService")
@Validated
@EntityService(entityClass = VwKontrak.class, serviceId = "AVM2")
public class VwKontrakServiceImpl implements VwKontrakService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwKontrakServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VwKontrakDao")
    private WMGenericDao<VwKontrak, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VwKontrak, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VwKontrak create(VwKontrak vwKontrak) {
        LOGGER.debug("Creating a new VwKontrak with information: {}", vwKontrak);

        VwKontrak vwKontrakCreated = this.wmGenericDao.create(vwKontrak);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vwKontrakCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VwKontrak getById(String vwkontrakId) {
        LOGGER.debug("Finding VwKontrak by id: {}", vwkontrakId);
        return this.wmGenericDao.findById(vwkontrakId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VwKontrak findById(String vwkontrakId) {
        LOGGER.debug("Finding VwKontrak by id: {}", vwkontrakId);
        try {
            return this.wmGenericDao.findById(vwkontrakId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VwKontrak found with id: {}", vwkontrakId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VwKontrak> findByMultipleIds(List<String> vwkontrakIds, boolean orderedReturn) {
        LOGGER.debug("Finding VwKontraks by ids: {}", vwkontrakIds);

        return this.wmGenericDao.findByMultipleIds(vwkontrakIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VwKontrak update(VwKontrak vwKontrak) {
        LOGGER.debug("Updating VwKontrak with information: {}", vwKontrak);

        this.wmGenericDao.update(vwKontrak);
        this.wmGenericDao.refresh(vwKontrak);

        return vwKontrak;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VwKontrak partialUpdate(String vwkontrakId, Map<String, Object>vwKontrakPatch) {
        LOGGER.debug("Partially Updating the VwKontrak with id: {}", vwkontrakId);

        VwKontrak vwKontrak = getById(vwkontrakId);

        try {
            ObjectReader vwKontrakReader = this.objectMapper.reader().forType(VwKontrak.class).withValueToUpdate(vwKontrak);
            vwKontrak = vwKontrakReader.readValue(this.objectMapper.writeValueAsString(vwKontrakPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vwKontrakPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vwKontrak = update(vwKontrak);

        return vwKontrak;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VwKontrak delete(String vwkontrakId) {
        LOGGER.debug("Deleting VwKontrak with id: {}", vwkontrakId);
        VwKontrak deleted = this.wmGenericDao.findById(vwkontrakId);
        if (deleted == null) {
            LOGGER.debug("No VwKontrak found with id: {}", vwkontrakId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VwKontrak.class.getSimpleName(), vwkontrakId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VwKontrak vwKontrak) {
        LOGGER.debug("Deleting VwKontrak with {}", vwKontrak);
        this.wmGenericDao.delete(vwKontrak);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VwKontrak> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VwKontraks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VwKontrak> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VwKontraks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VwKontrak to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VwKontrak to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}