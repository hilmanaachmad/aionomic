/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsBa;


/**
 * ServiceImpl object for domain model class TlMsBa.
 *
 * @see TlMsBa
 */
@Service("AVM2.TlMsBaService")
@Validated
@EntityService(entityClass = TlMsBa.class, serviceId = "AVM2")
public class TlMsBaServiceImpl implements TlMsBaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsBaServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsBaDao")
    private WMGenericDao<TlMsBa, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsBa, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsBa create(TlMsBa tlMsBa) {
        LOGGER.debug("Creating a new TlMsBa with information: {}", tlMsBa);

        TlMsBa tlMsBaCreated = this.wmGenericDao.create(tlMsBa);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsBaCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsBa getById(Integer tlmsbaId) {
        LOGGER.debug("Finding TlMsBa by id: {}", tlmsbaId);
        return this.wmGenericDao.findById(tlmsbaId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsBa findById(Integer tlmsbaId) {
        LOGGER.debug("Finding TlMsBa by id: {}", tlmsbaId);
        try {
            return this.wmGenericDao.findById(tlmsbaId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsBa found with id: {}", tlmsbaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsBa> findByMultipleIds(List<Integer> tlmsbaIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsBas by ids: {}", tlmsbaIds);

        return this.wmGenericDao.findByMultipleIds(tlmsbaIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsBa update(TlMsBa tlMsBa) {
        LOGGER.debug("Updating TlMsBa with information: {}", tlMsBa);

        this.wmGenericDao.update(tlMsBa);
        this.wmGenericDao.refresh(tlMsBa);

        return tlMsBa;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsBa partialUpdate(Integer tlmsbaId, Map<String, Object>tlMsBaPatch) {
        LOGGER.debug("Partially Updating the TlMsBa with id: {}", tlmsbaId);

        TlMsBa tlMsBa = getById(tlmsbaId);

        try {
            ObjectReader tlMsBaReader = this.objectMapper.reader().forType(TlMsBa.class).withValueToUpdate(tlMsBa);
            tlMsBa = tlMsBaReader.readValue(this.objectMapper.writeValueAsString(tlMsBaPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsBaPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsBa = update(tlMsBa);

        return tlMsBa;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsBa delete(Integer tlmsbaId) {
        LOGGER.debug("Deleting TlMsBa with id: {}", tlmsbaId);
        TlMsBa deleted = this.wmGenericDao.findById(tlmsbaId);
        if (deleted == null) {
            LOGGER.debug("No TlMsBa found with id: {}", tlmsbaId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsBa.class.getSimpleName(), tlmsbaId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsBa tlMsBa) {
        LOGGER.debug("Deleting TlMsBa with {}", tlMsBa);
        this.wmGenericDao.delete(tlMsBa);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsBa> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsBas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsBa> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsBas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsBa to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsBa to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}