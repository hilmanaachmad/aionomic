/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrAgReal;

/**
 * Service object for domain model class {@link TlTrAgReal}.
 */
public interface TlTrAgRealService {

    /**
     * Creates a new TlTrAgReal. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrAgReal if any.
     *
     * @param tlTrAgReal Details of the TlTrAgReal to be created; value cannot be null.
     * @return The newly created TlTrAgReal.
     */
    TlTrAgReal create(@Valid TlTrAgReal tlTrAgReal);


	/**
     * Returns TlTrAgReal by given id if exists.
     *
     * @param tltragrealId The id of the TlTrAgReal to get; value cannot be null.
     * @return TlTrAgReal associated with the given tltragrealId.
	 * @throws EntityNotFoundException If no TlTrAgReal is found.
     */
    TlTrAgReal getById(Integer tltragrealId);

    /**
     * Find and return the TlTrAgReal by given id if exists, returns null otherwise.
     *
     * @param tltragrealId The id of the TlTrAgReal to get; value cannot be null.
     * @return TlTrAgReal associated with the given tltragrealId.
     */
    TlTrAgReal findById(Integer tltragrealId);

	/**
     * Find and return the list of TlTrAgReals by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tltragrealIds The id's of the TlTrAgReal to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlTrAgReals associated with the given tltragrealIds.
     */
    List<TlTrAgReal> findByMultipleIds(List<Integer> tltragrealIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlTrAgReal. It replaces all fields of the existing TlTrAgReal with the given tlTrAgReal.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrAgReal if any.
     *
     * @param tlTrAgReal The details of the TlTrAgReal to be updated; value cannot be null.
     * @return The updated TlTrAgReal.
     * @throws EntityNotFoundException if no TlTrAgReal is found with given input.
     */
    TlTrAgReal update(@Valid TlTrAgReal tlTrAgReal);


    /**
     * Partially updates the details of an existing TlTrAgReal. It updates only the
     * fields of the existing TlTrAgReal which are passed in the tlTrAgRealPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrAgReal if any.
     *
     * @param tltragrealId The id of the TlTrAgReal to be deleted; value cannot be null.
     * @param tlTrAgRealPatch The partial data of TlTrAgReal which is supposed to be updated; value cannot be null.
     * @return The updated TlTrAgReal.
     * @throws EntityNotFoundException if no TlTrAgReal is found with given input.
     */
    TlTrAgReal partialUpdate(Integer tltragrealId, Map<String, Object> tlTrAgRealPatch);

    /**
     * Deletes an existing TlTrAgReal with the given id.
     *
     * @param tltragrealId The id of the TlTrAgReal to be deleted; value cannot be null.
     * @return The deleted TlTrAgReal.
     * @throws EntityNotFoundException if no TlTrAgReal found with the given id.
     */
    TlTrAgReal delete(Integer tltragrealId);

    /**
     * Deletes an existing TlTrAgReal with the given object.
     *
     * @param tlTrAgReal The instance of the TlTrAgReal to be deleted; value cannot be null.
     */
    void delete(TlTrAgReal tlTrAgReal);

    /**
     * Find all TlTrAgReals matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrAgReals.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlTrAgReal> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlTrAgReals matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrAgReals.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlTrAgReal> findAll(String query, Pageable pageable);

    /**
     * Exports all TlTrAgReals matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlTrAgReals matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlTrAgReals in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlTrAgReal.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}