/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VwListagree;


/**
 * ServiceImpl object for domain model class VwListagree.
 *
 * @see VwListagree
 */
@Service("AVM2.VwListagreeService")
@Validated
@EntityService(entityClass = VwListagree.class, serviceId = "AVM2")
public class VwListagreeServiceImpl implements VwListagreeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwListagreeServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VwListagreeDao")
    private WMGenericDao<VwListagree, Long> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VwListagree, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VwListagree create(VwListagree vwListagree) {
        LOGGER.debug("Creating a new VwListagree with information: {}", vwListagree);

        VwListagree vwListagreeCreated = this.wmGenericDao.create(vwListagree);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vwListagreeCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VwListagree getById(Long vwlistagreeId) {
        LOGGER.debug("Finding VwListagree by id: {}", vwlistagreeId);
        return this.wmGenericDao.findById(vwlistagreeId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VwListagree findById(Long vwlistagreeId) {
        LOGGER.debug("Finding VwListagree by id: {}", vwlistagreeId);
        try {
            return this.wmGenericDao.findById(vwlistagreeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VwListagree found with id: {}", vwlistagreeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VwListagree> findByMultipleIds(List<Long> vwlistagreeIds, boolean orderedReturn) {
        LOGGER.debug("Finding VwListagrees by ids: {}", vwlistagreeIds);

        return this.wmGenericDao.findByMultipleIds(vwlistagreeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VwListagree update(VwListagree vwListagree) {
        LOGGER.debug("Updating VwListagree with information: {}", vwListagree);

        this.wmGenericDao.update(vwListagree);
        this.wmGenericDao.refresh(vwListagree);

        return vwListagree;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VwListagree partialUpdate(Long vwlistagreeId, Map<String, Object>vwListagreePatch) {
        LOGGER.debug("Partially Updating the VwListagree with id: {}", vwlistagreeId);

        VwListagree vwListagree = getById(vwlistagreeId);

        try {
            ObjectReader vwListagreeReader = this.objectMapper.reader().forType(VwListagree.class).withValueToUpdate(vwListagree);
            vwListagree = vwListagreeReader.readValue(this.objectMapper.writeValueAsString(vwListagreePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vwListagreePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vwListagree = update(vwListagree);

        return vwListagree;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VwListagree delete(Long vwlistagreeId) {
        LOGGER.debug("Deleting VwListagree with id: {}", vwlistagreeId);
        VwListagree deleted = this.wmGenericDao.findById(vwlistagreeId);
        if (deleted == null) {
            LOGGER.debug("No VwListagree found with id: {}", vwlistagreeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VwListagree.class.getSimpleName(), vwlistagreeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VwListagree vwListagree) {
        LOGGER.debug("Deleting VwListagree with {}", vwListagree);
        this.wmGenericDao.delete(vwListagree);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VwListagree> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VwListagrees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VwListagree> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VwListagrees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VwListagree to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VwListagree to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}