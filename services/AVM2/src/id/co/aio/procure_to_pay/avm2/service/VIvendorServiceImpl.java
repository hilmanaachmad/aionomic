/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VIvendor;


/**
 * ServiceImpl object for domain model class VIvendor.
 *
 * @see VIvendor
 */
@Service("AVM2.VIvendorService")
@Validated
@EntityService(entityClass = VIvendor.class, serviceId = "AVM2")
public class VIvendorServiceImpl implements VIvendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VIvendorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VIvendorDao")
    private WMGenericDao<VIvendor, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VIvendor, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VIvendor create(VIvendor vivendor) {
        LOGGER.debug("Creating a new VIvendor with information: {}", vivendor);

        VIvendor vivendorCreated = this.wmGenericDao.create(vivendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vivendorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VIvendor getById(String vivendorId) {
        LOGGER.debug("Finding VIvendor by id: {}", vivendorId);
        return this.wmGenericDao.findById(vivendorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VIvendor findById(String vivendorId) {
        LOGGER.debug("Finding VIvendor by id: {}", vivendorId);
        try {
            return this.wmGenericDao.findById(vivendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VIvendor found with id: {}", vivendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VIvendor> findByMultipleIds(List<String> vivendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding VIvendors by ids: {}", vivendorIds);

        return this.wmGenericDao.findByMultipleIds(vivendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VIvendor update(VIvendor vivendor) {
        LOGGER.debug("Updating VIvendor with information: {}", vivendor);

        this.wmGenericDao.update(vivendor);
        this.wmGenericDao.refresh(vivendor);

        return vivendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VIvendor partialUpdate(String vivendorId, Map<String, Object>vivendorPatch) {
        LOGGER.debug("Partially Updating the VIvendor with id: {}", vivendorId);

        VIvendor vivendor = getById(vivendorId);

        try {
            ObjectReader vivendorReader = this.objectMapper.reader().forType(VIvendor.class).withValueToUpdate(vivendor);
            vivendor = vivendorReader.readValue(this.objectMapper.writeValueAsString(vivendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vivendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vivendor = update(vivendor);

        return vivendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VIvendor delete(String vivendorId) {
        LOGGER.debug("Deleting VIvendor with id: {}", vivendorId);
        VIvendor deleted = this.wmGenericDao.findById(vivendorId);
        if (deleted == null) {
            LOGGER.debug("No VIvendor found with id: {}", vivendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VIvendor.class.getSimpleName(), vivendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VIvendor vivendor) {
        LOGGER.debug("Deleting VIvendor with {}", vivendor);
        this.wmGenericDao.delete(vivendor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VIvendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VIvendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VIvendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VIvendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VIvendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VIvendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}