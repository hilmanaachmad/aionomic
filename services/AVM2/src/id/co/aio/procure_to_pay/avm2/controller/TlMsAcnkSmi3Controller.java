/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkSmi3;
import id.co.aio.procure_to_pay.avm2.service.TlMsAcnkSmi3Service;


/**
 * Controller object for domain model class TlMsAcnkSmi3.
 * @see TlMsAcnkSmi3
 */
@RestController("AVM2.TlMsAcnkSmi3Controller")
@Api(value = "TlMsAcnkSmi3Controller", description = "Exposes APIs to work with TlMsAcnkSmi3 resource.")
@RequestMapping("/AVM2/TlMsAcnkSmi3")
public class TlMsAcnkSmi3Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAcnkSmi3Controller.class);

    @Autowired
	@Qualifier("AVM2.TlMsAcnkSmi3Service")
	private TlMsAcnkSmi3Service tlMsAcnkSmi3Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsAcnkSmi3 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkSmi3 createTlMsAcnkSmi3(@RequestBody TlMsAcnkSmi3 tlMsAcnkSmi3) {
		LOGGER.debug("Create TlMsAcnkSmi3 with information: {}" , tlMsAcnkSmi3);

		tlMsAcnkSmi3 = tlMsAcnkSmi3Service.create(tlMsAcnkSmi3);
		LOGGER.debug("Created TlMsAcnkSmi3 with information: {}" , tlMsAcnkSmi3);

	    return tlMsAcnkSmi3;
	}

    @ApiOperation(value = "Returns the TlMsAcnkSmi3 instance associated with the given id.")
    @RequestMapping(value = "/{bankKey1:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkSmi3 getTlMsAcnkSmi3(@PathVariable("bankKey1") String bankKey1) {
        LOGGER.debug("Getting TlMsAcnkSmi3 with id: {}" , bankKey1);

        TlMsAcnkSmi3 foundTlMsAcnkSmi3 = tlMsAcnkSmi3Service.getById(bankKey1);
        LOGGER.debug("TlMsAcnkSmi3 details with id: {}" , foundTlMsAcnkSmi3);

        return foundTlMsAcnkSmi3;
    }

    @ApiOperation(value = "Updates the TlMsAcnkSmi3 instance associated with the given id.")
    @RequestMapping(value = "/{bankKey1:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkSmi3 editTlMsAcnkSmi3(@PathVariable("bankKey1") String bankKey1, @RequestBody TlMsAcnkSmi3 tlMsAcnkSmi3) {
        LOGGER.debug("Editing TlMsAcnkSmi3 with id: {}" , tlMsAcnkSmi3.getBankKey1());

        tlMsAcnkSmi3.setBankKey1(bankKey1);
        tlMsAcnkSmi3 = tlMsAcnkSmi3Service.update(tlMsAcnkSmi3);
        LOGGER.debug("TlMsAcnkSmi3 details with id: {}" , tlMsAcnkSmi3);

        return tlMsAcnkSmi3;
    }
    
    @ApiOperation(value = "Partially updates the TlMsAcnkSmi3 instance associated with the given id.")
    @RequestMapping(value = "/{bankKey1:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkSmi3 patchTlMsAcnkSmi3(@PathVariable("bankKey1") String bankKey1, @RequestBody @MapTo(TlMsAcnkSmi3.class) Map<String, Object> tlMsAcnkSmi3Patch) {
        LOGGER.debug("Partially updating TlMsAcnkSmi3 with id: {}" , bankKey1);

        TlMsAcnkSmi3 tlMsAcnkSmi3 = tlMsAcnkSmi3Service.partialUpdate(bankKey1, tlMsAcnkSmi3Patch);
        LOGGER.debug("TlMsAcnkSmi3 details after partial update: {}" , tlMsAcnkSmi3);

        return tlMsAcnkSmi3;
    }

    @ApiOperation(value = "Deletes the TlMsAcnkSmi3 instance associated with the given id.")
    @RequestMapping(value = "/{bankKey1:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsAcnkSmi3(@PathVariable("bankKey1") String bankKey1) {
        LOGGER.debug("Deleting TlMsAcnkSmi3 with id: {}" , bankKey1);

        TlMsAcnkSmi3 deletedTlMsAcnkSmi3 = tlMsAcnkSmi3Service.delete(bankKey1);

        return deletedTlMsAcnkSmi3 != null;
    }

    /**
     * @deprecated Use {@link #findTlMsAcnkSmi3s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsAcnkSmi3 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkSmi3> searchTlMsAcnkSmi3sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsAcnkSmi3s list by query filter:{}", (Object) queryFilters);
        return tlMsAcnkSmi3Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAcnkSmi3 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkSmi3> findTlMsAcnkSmi3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAcnkSmi3s list by filter:", query);
        return tlMsAcnkSmi3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAcnkSmi3 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkSmi3> filterTlMsAcnkSmi3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAcnkSmi3s list by filter", query);
        return tlMsAcnkSmi3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsAcnkSmi3s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsAcnkSmi3Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsAcnkSmi3sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsAcnkSmi3.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsAcnkSmi3Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsAcnkSmi3 instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsAcnkSmi3s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsAcnkSmi3s");
		return tlMsAcnkSmi3Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsAcnkSmi3AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsAcnkSmi3Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsAcnkSmi3Service instance
	 */
	protected void setTlMsAcnkSmi3Service(TlMsAcnkSmi3Service service) {
		this.tlMsAcnkSmi3Service = service;
	}

}