/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrIn;


/**
 * ServiceImpl object for domain model class TlTrIn.
 *
 * @see TlTrIn
 */
@Service("AVM2.TlTrInService")
@Validated
@EntityService(entityClass = TlTrIn.class, serviceId = "AVM2")
public class TlTrInServiceImpl implements TlTrInService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrInServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrInDao")
    private WMGenericDao<TlTrIn, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrIn, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrIn create(TlTrIn tlTrIn) {
        LOGGER.debug("Creating a new TlTrIn with information: {}", tlTrIn);

        TlTrIn tlTrInCreated = this.wmGenericDao.create(tlTrIn);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrInCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrIn getById(Integer tltrinId) {
        LOGGER.debug("Finding TlTrIn by id: {}", tltrinId);
        return this.wmGenericDao.findById(tltrinId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrIn findById(Integer tltrinId) {
        LOGGER.debug("Finding TlTrIn by id: {}", tltrinId);
        try {
            return this.wmGenericDao.findById(tltrinId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrIn found with id: {}", tltrinId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrIn> findByMultipleIds(List<Integer> tltrinIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrIns by ids: {}", tltrinIds);

        return this.wmGenericDao.findByMultipleIds(tltrinIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrIn update(TlTrIn tlTrIn) {
        LOGGER.debug("Updating TlTrIn with information: {}", tlTrIn);

        this.wmGenericDao.update(tlTrIn);
        this.wmGenericDao.refresh(tlTrIn);

        return tlTrIn;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrIn partialUpdate(Integer tltrinId, Map<String, Object>tlTrInPatch) {
        LOGGER.debug("Partially Updating the TlTrIn with id: {}", tltrinId);

        TlTrIn tlTrIn = getById(tltrinId);

        try {
            ObjectReader tlTrInReader = this.objectMapper.reader().forType(TlTrIn.class).withValueToUpdate(tlTrIn);
            tlTrIn = tlTrInReader.readValue(this.objectMapper.writeValueAsString(tlTrInPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrInPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrIn = update(tlTrIn);

        return tlTrIn;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrIn delete(Integer tltrinId) {
        LOGGER.debug("Deleting TlTrIn with id: {}", tltrinId);
        TlTrIn deleted = this.wmGenericDao.findById(tltrinId);
        if (deleted == null) {
            LOGGER.debug("No TlTrIn found with id: {}", tltrinId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrIn.class.getSimpleName(), tltrinId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrIn tlTrIn) {
        LOGGER.debug("Deleting TlTrIn with {}", tlTrIn);
        this.wmGenericDao.delete(tlTrIn);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrIn> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrIns");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrIn> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrIns");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrIn to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrIn to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}