/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VDataVendor;
import id.co.aio.procure_to_pay.avm2.service.VDataVendorService;


/**
 * Controller object for domain model class VDataVendor.
 * @see VDataVendor
 */
@RestController("AVM2.VDataVendorController")
@Api(value = "VDataVendorController", description = "Exposes APIs to work with VDataVendor resource.")
@RequestMapping("/AVM2/VDataVendor")
public class VDataVendorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VDataVendorController.class);

    @Autowired
	@Qualifier("AVM2.VDataVendorService")
	private VDataVendorService vDataVendorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VDataVendor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VDataVendor createVDataVendor(@RequestBody VDataVendor vdataVendor) {
		LOGGER.debug("Create VDataVendor with information: {}" , vdataVendor);

		vdataVendor = vDataVendorService.create(vdataVendor);
		LOGGER.debug("Created VDataVendor with information: {}" , vdataVendor);

	    return vdataVendor;
	}

    @ApiOperation(value = "Returns the VDataVendor instance associated with the given id.")
    @RequestMapping(value = "/{email:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VDataVendor getVDataVendor(@PathVariable("email") String email) {
        LOGGER.debug("Getting VDataVendor with id: {}" , email);

        VDataVendor foundVDataVendor = vDataVendorService.getById(email);
        LOGGER.debug("VDataVendor details with id: {}" , foundVDataVendor);

        return foundVDataVendor;
    }

    @ApiOperation(value = "Updates the VDataVendor instance associated with the given id.")
    @RequestMapping(value = "/{email:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VDataVendor editVDataVendor(@PathVariable("email") String email, @RequestBody VDataVendor vdataVendor) {
        LOGGER.debug("Editing VDataVendor with id: {}" , vdataVendor.getEmail());

        vdataVendor.setEmail(email);
        vdataVendor = vDataVendorService.update(vdataVendor);
        LOGGER.debug("VDataVendor details with id: {}" , vdataVendor);

        return vdataVendor;
    }
    
    @ApiOperation(value = "Partially updates the VDataVendor instance associated with the given id.")
    @RequestMapping(value = "/{email:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VDataVendor patchVDataVendor(@PathVariable("email") String email, @RequestBody @MapTo(VDataVendor.class) Map<String, Object> vdataVendorPatch) {
        LOGGER.debug("Partially updating VDataVendor with id: {}" , email);

        VDataVendor vdataVendor = vDataVendorService.partialUpdate(email, vdataVendorPatch);
        LOGGER.debug("VDataVendor details after partial update: {}" , vdataVendor);

        return vdataVendor;
    }

    @ApiOperation(value = "Deletes the VDataVendor instance associated with the given id.")
    @RequestMapping(value = "/{email:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVDataVendor(@PathVariable("email") String email) {
        LOGGER.debug("Deleting VDataVendor with id: {}" , email);

        VDataVendor deletedVDataVendor = vDataVendorService.delete(email);

        return deletedVDataVendor != null;
    }

    /**
     * @deprecated Use {@link #findVDataVendors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VDataVendor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VDataVendor> searchVDataVendorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VDataVendors list by query filter:{}", (Object) queryFilters);
        return vDataVendorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VDataVendor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VDataVendor> findVDataVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VDataVendors list by filter:", query);
        return vDataVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VDataVendor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VDataVendor> filterVDataVendors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VDataVendors list by filter", query);
        return vDataVendorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVDataVendors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vDataVendorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVDataVendorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VDataVendor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vDataVendorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VDataVendor instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVDataVendors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VDataVendors");
		return vDataVendorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVDataVendorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vDataVendorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VDataVendorService instance
	 */
	protected void setVDataVendorService(VDataVendorService service) {
		this.vDataVendorService = service;
	}

}