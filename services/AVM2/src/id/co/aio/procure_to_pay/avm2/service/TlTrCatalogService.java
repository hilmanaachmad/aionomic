/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrCatalog;

/**
 * Service object for domain model class {@link TlTrCatalog}.
 */
public interface TlTrCatalogService {

    /**
     * Creates a new TlTrCatalog. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrCatalog if any.
     *
     * @param tlTrCatalog Details of the TlTrCatalog to be created; value cannot be null.
     * @return The newly created TlTrCatalog.
     */
    TlTrCatalog create(@Valid TlTrCatalog tlTrCatalog);


	/**
     * Returns TlTrCatalog by given id if exists.
     *
     * @param tltrcatalogId The id of the TlTrCatalog to get; value cannot be null.
     * @return TlTrCatalog associated with the given tltrcatalogId.
	 * @throws EntityNotFoundException If no TlTrCatalog is found.
     */
    TlTrCatalog getById(Integer tltrcatalogId);

    /**
     * Find and return the TlTrCatalog by given id if exists, returns null otherwise.
     *
     * @param tltrcatalogId The id of the TlTrCatalog to get; value cannot be null.
     * @return TlTrCatalog associated with the given tltrcatalogId.
     */
    TlTrCatalog findById(Integer tltrcatalogId);

	/**
     * Find and return the list of TlTrCatalogs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tltrcatalogIds The id's of the TlTrCatalog to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlTrCatalogs associated with the given tltrcatalogIds.
     */
    List<TlTrCatalog> findByMultipleIds(List<Integer> tltrcatalogIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlTrCatalog. It replaces all fields of the existing TlTrCatalog with the given tlTrCatalog.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrCatalog if any.
     *
     * @param tlTrCatalog The details of the TlTrCatalog to be updated; value cannot be null.
     * @return The updated TlTrCatalog.
     * @throws EntityNotFoundException if no TlTrCatalog is found with given input.
     */
    TlTrCatalog update(@Valid TlTrCatalog tlTrCatalog);


    /**
     * Partially updates the details of an existing TlTrCatalog. It updates only the
     * fields of the existing TlTrCatalog which are passed in the tlTrCatalogPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlTrCatalog if any.
     *
     * @param tltrcatalogId The id of the TlTrCatalog to be deleted; value cannot be null.
     * @param tlTrCatalogPatch The partial data of TlTrCatalog which is supposed to be updated; value cannot be null.
     * @return The updated TlTrCatalog.
     * @throws EntityNotFoundException if no TlTrCatalog is found with given input.
     */
    TlTrCatalog partialUpdate(Integer tltrcatalogId, Map<String, Object> tlTrCatalogPatch);

    /**
     * Deletes an existing TlTrCatalog with the given id.
     *
     * @param tltrcatalogId The id of the TlTrCatalog to be deleted; value cannot be null.
     * @return The deleted TlTrCatalog.
     * @throws EntityNotFoundException if no TlTrCatalog found with the given id.
     */
    TlTrCatalog delete(Integer tltrcatalogId);

    /**
     * Deletes an existing TlTrCatalog with the given object.
     *
     * @param tlTrCatalog The instance of the TlTrCatalog to be deleted; value cannot be null.
     */
    void delete(TlTrCatalog tlTrCatalog);

    /**
     * Find all TlTrCatalogs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrCatalogs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlTrCatalog> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlTrCatalogs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlTrCatalogs.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlTrCatalog> findAll(String query, Pageable pageable);

    /**
     * Exports all TlTrCatalogs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlTrCatalogs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlTrCatalogs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlTrCatalog.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}