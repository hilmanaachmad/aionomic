/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.PhpMsLogin;
import id.co.aio.procure_to_pay.avm2.service.PhpMsLoginService;


/**
 * Controller object for domain model class PhpMsLogin.
 * @see PhpMsLogin
 */
@RestController("AVM2.PhpMsLoginController")
@Api(value = "PhpMsLoginController", description = "Exposes APIs to work with PhpMsLogin resource.")
@RequestMapping("/AVM2/PhpMsLogin")
public class PhpMsLoginController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PhpMsLoginController.class);

    @Autowired
	@Qualifier("AVM2.PhpMsLoginService")
	private PhpMsLoginService phpMsLoginService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PhpMsLogin instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PhpMsLogin createPhpMsLogin(@RequestBody PhpMsLogin phpMsLogin) {
		LOGGER.debug("Create PhpMsLogin with information: {}" , phpMsLogin);

		phpMsLogin = phpMsLoginService.create(phpMsLogin);
		LOGGER.debug("Created PhpMsLogin with information: {}" , phpMsLogin);

	    return phpMsLogin;
	}

    @ApiOperation(value = "Returns the PhpMsLogin instance associated with the given id.")
    @RequestMapping(value = "/{lgNik:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PhpMsLogin getPhpMsLogin(@PathVariable("lgNik") String lgNik) {
        LOGGER.debug("Getting PhpMsLogin with id: {}" , lgNik);

        PhpMsLogin foundPhpMsLogin = phpMsLoginService.getById(lgNik);
        LOGGER.debug("PhpMsLogin details with id: {}" , foundPhpMsLogin);

        return foundPhpMsLogin;
    }

    @ApiOperation(value = "Updates the PhpMsLogin instance associated with the given id.")
    @RequestMapping(value = "/{lgNik:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PhpMsLogin editPhpMsLogin(@PathVariable("lgNik") String lgNik, @RequestBody PhpMsLogin phpMsLogin) {
        LOGGER.debug("Editing PhpMsLogin with id: {}" , phpMsLogin.getLgNik());

        phpMsLogin.setLgNik(lgNik);
        phpMsLogin = phpMsLoginService.update(phpMsLogin);
        LOGGER.debug("PhpMsLogin details with id: {}" , phpMsLogin);

        return phpMsLogin;
    }
    
    @ApiOperation(value = "Partially updates the PhpMsLogin instance associated with the given id.")
    @RequestMapping(value = "/{lgNik:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PhpMsLogin patchPhpMsLogin(@PathVariable("lgNik") String lgNik, @RequestBody @MapTo(PhpMsLogin.class) Map<String, Object> phpMsLoginPatch) {
        LOGGER.debug("Partially updating PhpMsLogin with id: {}" , lgNik);

        PhpMsLogin phpMsLogin = phpMsLoginService.partialUpdate(lgNik, phpMsLoginPatch);
        LOGGER.debug("PhpMsLogin details after partial update: {}" , phpMsLogin);

        return phpMsLogin;
    }

    @ApiOperation(value = "Deletes the PhpMsLogin instance associated with the given id.")
    @RequestMapping(value = "/{lgNik:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePhpMsLogin(@PathVariable("lgNik") String lgNik) {
        LOGGER.debug("Deleting PhpMsLogin with id: {}" , lgNik);

        PhpMsLogin deletedPhpMsLogin = phpMsLoginService.delete(lgNik);

        return deletedPhpMsLogin != null;
    }

    /**
     * @deprecated Use {@link #findPhpMsLogins(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PhpMsLogin instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PhpMsLogin> searchPhpMsLoginsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PhpMsLogins list by query filter:{}", (Object) queryFilters);
        return phpMsLoginService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PhpMsLogin instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PhpMsLogin> findPhpMsLogins(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PhpMsLogins list by filter:", query);
        return phpMsLoginService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PhpMsLogin instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PhpMsLogin> filterPhpMsLogins(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PhpMsLogins list by filter", query);
        return phpMsLoginService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPhpMsLogins(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return phpMsLoginService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPhpMsLoginsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PhpMsLogin.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> phpMsLoginService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PhpMsLogin instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPhpMsLogins( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PhpMsLogins");
		return phpMsLoginService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPhpMsLoginAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return phpMsLoginService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PhpMsLoginService instance
	 */
	protected void setPhpMsLoginService(PhpMsLoginService service) {
		this.phpMsLoginService = service;
	}

}