/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTrRect;
import id.co.aio.procure_to_pay.avm2.service.TlTrRectService;


/**
 * Controller object for domain model class TlTrRect.
 * @see TlTrRect
 */
@RestController("AVM2.TlTrRectController")
@Api(value = "TlTrRectController", description = "Exposes APIs to work with TlTrRect resource.")
@RequestMapping("/AVM2/TlTrRect")
public class TlTrRectController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrRectController.class);

    @Autowired
	@Qualifier("AVM2.TlTrRectService")
	private TlTrRectService tlTrRectService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTrRect instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrRect createTlTrRect(@RequestBody TlTrRect tlTrRect) {
		LOGGER.debug("Create TlTrRect with information: {}" , tlTrRect);

		tlTrRect = tlTrRectService.create(tlTrRect);
		LOGGER.debug("Created TlTrRect with information: {}" , tlTrRect);

	    return tlTrRect;
	}

    @ApiOperation(value = "Returns the TlTrRect instance associated with the given id.")
    @RequestMapping(value = "/{abIdrect:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrRect getTlTrRect(@PathVariable("abIdrect") Integer abIdrect) {
        LOGGER.debug("Getting TlTrRect with id: {}" , abIdrect);

        TlTrRect foundTlTrRect = tlTrRectService.getById(abIdrect);
        LOGGER.debug("TlTrRect details with id: {}" , foundTlTrRect);

        return foundTlTrRect;
    }

    @ApiOperation(value = "Updates the TlTrRect instance associated with the given id.")
    @RequestMapping(value = "/{abIdrect:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrRect editTlTrRect(@PathVariable("abIdrect") Integer abIdrect, @RequestBody TlTrRect tlTrRect) {
        LOGGER.debug("Editing TlTrRect with id: {}" , tlTrRect.getAbIdrect());

        tlTrRect.setAbIdrect(abIdrect);
        tlTrRect = tlTrRectService.update(tlTrRect);
        LOGGER.debug("TlTrRect details with id: {}" , tlTrRect);

        return tlTrRect;
    }
    
    @ApiOperation(value = "Partially updates the TlTrRect instance associated with the given id.")
    @RequestMapping(value = "/{abIdrect:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrRect patchTlTrRect(@PathVariable("abIdrect") Integer abIdrect, @RequestBody @MapTo(TlTrRect.class) Map<String, Object> tlTrRectPatch) {
        LOGGER.debug("Partially updating TlTrRect with id: {}" , abIdrect);

        TlTrRect tlTrRect = tlTrRectService.partialUpdate(abIdrect, tlTrRectPatch);
        LOGGER.debug("TlTrRect details after partial update: {}" , tlTrRect);

        return tlTrRect;
    }

    @ApiOperation(value = "Deletes the TlTrRect instance associated with the given id.")
    @RequestMapping(value = "/{abIdrect:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTrRect(@PathVariable("abIdrect") Integer abIdrect) {
        LOGGER.debug("Deleting TlTrRect with id: {}" , abIdrect);

        TlTrRect deletedTlTrRect = tlTrRectService.delete(abIdrect);

        return deletedTlTrRect != null;
    }

    /**
     * @deprecated Use {@link #findTlTrRects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTrRect instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrRect> searchTlTrRectsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTrRects list by query filter:{}", (Object) queryFilters);
        return tlTrRectService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrRect instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrRect> findTlTrRects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrRects list by filter:", query);
        return tlTrRectService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrRect instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrRect> filterTlTrRects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrRects list by filter", query);
        return tlTrRectService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTrRects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTrRectService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTrRectsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTrRect.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTrRectService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTrRect instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTrRects( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTrRects");
		return tlTrRectService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTrRectAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTrRectService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTrRectService instance
	 */
	protected void setTlTrRectService(TlTrRectService service) {
		this.tlTrRectService = service;
	}

}