/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrDoor;


/**
 * ServiceImpl object for domain model class TlTrDoor.
 *
 * @see TlTrDoor
 */
@Service("AVM2.TlTrDoorService")
@Validated
@EntityService(entityClass = TlTrDoor.class, serviceId = "AVM2")
public class TlTrDoorServiceImpl implements TlTrDoorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrDoorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrDoorDao")
    private WMGenericDao<TlTrDoor, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrDoor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrDoor create(TlTrDoor tlTrDoor) {
        LOGGER.debug("Creating a new TlTrDoor with information: {}", tlTrDoor);

        TlTrDoor tlTrDoorCreated = this.wmGenericDao.create(tlTrDoor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrDoorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrDoor getById(Integer tltrdoorId) {
        LOGGER.debug("Finding TlTrDoor by id: {}", tltrdoorId);
        return this.wmGenericDao.findById(tltrdoorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrDoor findById(Integer tltrdoorId) {
        LOGGER.debug("Finding TlTrDoor by id: {}", tltrdoorId);
        try {
            return this.wmGenericDao.findById(tltrdoorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrDoor found with id: {}", tltrdoorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrDoor> findByMultipleIds(List<Integer> tltrdoorIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrDoors by ids: {}", tltrdoorIds);

        return this.wmGenericDao.findByMultipleIds(tltrdoorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrDoor update(TlTrDoor tlTrDoor) {
        LOGGER.debug("Updating TlTrDoor with information: {}", tlTrDoor);

        this.wmGenericDao.update(tlTrDoor);
        this.wmGenericDao.refresh(tlTrDoor);

        return tlTrDoor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrDoor partialUpdate(Integer tltrdoorId, Map<String, Object>tlTrDoorPatch) {
        LOGGER.debug("Partially Updating the TlTrDoor with id: {}", tltrdoorId);

        TlTrDoor tlTrDoor = getById(tltrdoorId);

        try {
            ObjectReader tlTrDoorReader = this.objectMapper.reader().forType(TlTrDoor.class).withValueToUpdate(tlTrDoor);
            tlTrDoor = tlTrDoorReader.readValue(this.objectMapper.writeValueAsString(tlTrDoorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrDoorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrDoor = update(tlTrDoor);

        return tlTrDoor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrDoor delete(Integer tltrdoorId) {
        LOGGER.debug("Deleting TlTrDoor with id: {}", tltrdoorId);
        TlTrDoor deleted = this.wmGenericDao.findById(tltrdoorId);
        if (deleted == null) {
            LOGGER.debug("No TlTrDoor found with id: {}", tltrdoorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrDoor.class.getSimpleName(), tltrdoorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrDoor tlTrDoor) {
        LOGGER.debug("Deleting TlTrDoor with {}", tlTrDoor);
        this.wmGenericDao.delete(tlTrDoor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrDoor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrDoors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrDoor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrDoors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrDoor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrDoor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}