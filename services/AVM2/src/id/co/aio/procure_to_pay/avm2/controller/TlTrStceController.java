/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlTrStce;
import id.co.aio.procure_to_pay.avm2.TlTrStceId;
import id.co.aio.procure_to_pay.avm2.service.TlTrStceService;


/**
 * Controller object for domain model class TlTrStce.
 * @see TlTrStce
 */
@RestController("AVM2.TlTrStceController")
@Api(value = "TlTrStceController", description = "Exposes APIs to work with TlTrStce resource.")
@RequestMapping("/AVM2/TlTrStce")
public class TlTrStceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrStceController.class);

    @Autowired
	@Qualifier("AVM2.TlTrStceService")
	private TlTrStceService tlTrStceService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlTrStce instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrStce createTlTrStce(@RequestBody TlTrStce tlTrStce) {
		LOGGER.debug("Create TlTrStce with information: {}" , tlTrStce);

		tlTrStce = tlTrStceService.create(tlTrStce);
		LOGGER.debug("Created TlTrStce with information: {}" , tlTrStce);

	    return tlTrStce;
	}

    @ApiOperation(value = "Returns the TlTrStce instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrStce getTlTrStce(@RequestParam("abIdst") Integer abIdst, @RequestParam("abIdin") Integer abIdin) {

        TlTrStceId tltrstceId = new TlTrStceId();
        tltrstceId.setAbIdst(abIdst);
        tltrstceId.setAbIdin(abIdin);

        LOGGER.debug("Getting TlTrStce with id: {}" , tltrstceId);
        TlTrStce tlTrStce = tlTrStceService.getById(tltrstceId);
        LOGGER.debug("TlTrStce details with id: {}" , tlTrStce);

        return tlTrStce;
    }



    @ApiOperation(value = "Updates the TlTrStce instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrStce editTlTrStce(@RequestParam("abIdst") Integer abIdst, @RequestParam("abIdin") Integer abIdin, @RequestBody TlTrStce tlTrStce) {

        tlTrStce.setAbIdst(abIdst);
        tlTrStce.setAbIdin(abIdin);

        LOGGER.debug("TlTrStce details with id is updated with: {}" , tlTrStce);

        return tlTrStceService.update(tlTrStce);
    }

	@ApiOperation(value = "Partially updates the  TlTrStce instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlTrStce patchTlTrStce(@RequestParam("abIdst") Integer abIdst, @RequestParam("abIdin") Integer abIdin, @RequestBody @MapTo(TlTrStce.class) Map<String, Object> tlTrStcePatch) {

        TlTrStceId tltrstceId = new TlTrStceId();
        tltrstceId.setAbIdst(abIdst);
        tltrstceId.setAbIdin(abIdin);
        LOGGER.debug("Partially updating TlTrStce with id: {}" , tltrstceId);

        TlTrStce tlTrStce = tlTrStceService.partialUpdate(tltrstceId, tlTrStcePatch);
        LOGGER.debug("TlTrStce details after partial update: {}" , tlTrStce);

        return tlTrStce;
    }


    @ApiOperation(value = "Deletes the TlTrStce instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlTrStce(@RequestParam("abIdst") Integer abIdst, @RequestParam("abIdin") Integer abIdin) {

        TlTrStceId tltrstceId = new TlTrStceId();
        tltrstceId.setAbIdst(abIdst);
        tltrstceId.setAbIdin(abIdin);

        LOGGER.debug("Deleting TlTrStce with id: {}" , tltrstceId);
        TlTrStce tlTrStce = tlTrStceService.delete(tltrstceId);

        return tlTrStce != null;
    }


    /**
     * @deprecated Use {@link #findTlTrStces(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlTrStce instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrStce> searchTlTrStcesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlTrStces list by query filter:{}", (Object) queryFilters);
        return tlTrStceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrStce instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrStce> findTlTrStces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrStces list by filter:", query);
        return tlTrStceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlTrStce instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlTrStce> filterTlTrStces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlTrStces list by filter", query);
        return tlTrStceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlTrStces(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlTrStceService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlTrStcesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlTrStce.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlTrStceService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlTrStce instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlTrStces( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlTrStces");
		return tlTrStceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlTrStceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlTrStceService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlTrStceService instance
	 */
	protected void setTlTrStceService(TlTrStceService service) {
		this.tlTrStceService = service;
	}

}