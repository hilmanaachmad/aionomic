/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsCategory;


/**
 * ServiceImpl object for domain model class TlMsCategory.
 *
 * @see TlMsCategory
 */
@Service("AVM2.TlMsCategoryService")
@Validated
@EntityService(entityClass = TlMsCategory.class, serviceId = "AVM2")
public class TlMsCategoryServiceImpl implements TlMsCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCategoryServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsCategoryDao")
    private WMGenericDao<TlMsCategory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsCategory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCategory create(TlMsCategory tlMsCategory) {
        LOGGER.debug("Creating a new TlMsCategory with information: {}", tlMsCategory);

        TlMsCategory tlMsCategoryCreated = this.wmGenericDao.create(tlMsCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsCategoryCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCategory getById(Integer tlmscategoryId) {
        LOGGER.debug("Finding TlMsCategory by id: {}", tlmscategoryId);
        return this.wmGenericDao.findById(tlmscategoryId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsCategory findById(Integer tlmscategoryId) {
        LOGGER.debug("Finding TlMsCategory by id: {}", tlmscategoryId);
        try {
            return this.wmGenericDao.findById(tlmscategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsCategory found with id: {}", tlmscategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsCategory> findByMultipleIds(List<Integer> tlmscategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsCategories by ids: {}", tlmscategoryIds);

        return this.wmGenericDao.findByMultipleIds(tlmscategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsCategory update(TlMsCategory tlMsCategory) {
        LOGGER.debug("Updating TlMsCategory with information: {}", tlMsCategory);

        this.wmGenericDao.update(tlMsCategory);
        this.wmGenericDao.refresh(tlMsCategory);

        return tlMsCategory;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCategory partialUpdate(Integer tlmscategoryId, Map<String, Object>tlMsCategoryPatch) {
        LOGGER.debug("Partially Updating the TlMsCategory with id: {}", tlmscategoryId);

        TlMsCategory tlMsCategory = getById(tlmscategoryId);

        try {
            ObjectReader tlMsCategoryReader = this.objectMapper.reader().forType(TlMsCategory.class).withValueToUpdate(tlMsCategory);
            tlMsCategory = tlMsCategoryReader.readValue(this.objectMapper.writeValueAsString(tlMsCategoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsCategoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsCategory = update(tlMsCategory);

        return tlMsCategory;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsCategory delete(Integer tlmscategoryId) {
        LOGGER.debug("Deleting TlMsCategory with id: {}", tlmscategoryId);
        TlMsCategory deleted = this.wmGenericDao.findById(tlmscategoryId);
        if (deleted == null) {
            LOGGER.debug("No TlMsCategory found with id: {}", tlmscategoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsCategory.class.getSimpleName(), tlmscategoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsCategory tlMsCategory) {
        LOGGER.debug("Deleting TlMsCategory with {}", tlMsCategory);
        this.wmGenericDao.delete(tlMsCategory);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}