/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsReOld;

/**
 * Service object for domain model class {@link TlMsReOld}.
 */
public interface TlMsReOldService {

    /**
     * Creates a new TlMsReOld. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsReOld if any.
     *
     * @param tlMsReOld Details of the TlMsReOld to be created; value cannot be null.
     * @return The newly created TlMsReOld.
     */
    TlMsReOld create(@Valid TlMsReOld tlMsReOld);


	/**
     * Returns TlMsReOld by given id if exists.
     *
     * @param tlmsreoldId The id of the TlMsReOld to get; value cannot be null.
     * @return TlMsReOld associated with the given tlmsreoldId.
	 * @throws EntityNotFoundException If no TlMsReOld is found.
     */
    TlMsReOld getById(String tlmsreoldId);

    /**
     * Find and return the TlMsReOld by given id if exists, returns null otherwise.
     *
     * @param tlmsreoldId The id of the TlMsReOld to get; value cannot be null.
     * @return TlMsReOld associated with the given tlmsreoldId.
     */
    TlMsReOld findById(String tlmsreoldId);

	/**
     * Find and return the list of TlMsReOlds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsreoldIds The id's of the TlMsReOld to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsReOlds associated with the given tlmsreoldIds.
     */
    List<TlMsReOld> findByMultipleIds(List<String> tlmsreoldIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsReOld. It replaces all fields of the existing TlMsReOld with the given tlMsReOld.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsReOld if any.
     *
     * @param tlMsReOld The details of the TlMsReOld to be updated; value cannot be null.
     * @return The updated TlMsReOld.
     * @throws EntityNotFoundException if no TlMsReOld is found with given input.
     */
    TlMsReOld update(@Valid TlMsReOld tlMsReOld);


    /**
     * Partially updates the details of an existing TlMsReOld. It updates only the
     * fields of the existing TlMsReOld which are passed in the tlMsReOldPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsReOld if any.
     *
     * @param tlmsreoldId The id of the TlMsReOld to be deleted; value cannot be null.
     * @param tlMsReOldPatch The partial data of TlMsReOld which is supposed to be updated; value cannot be null.
     * @return The updated TlMsReOld.
     * @throws EntityNotFoundException if no TlMsReOld is found with given input.
     */
    TlMsReOld partialUpdate(String tlmsreoldId, Map<String, Object> tlMsReOldPatch);

    /**
     * Deletes an existing TlMsReOld with the given id.
     *
     * @param tlmsreoldId The id of the TlMsReOld to be deleted; value cannot be null.
     * @return The deleted TlMsReOld.
     * @throws EntityNotFoundException if no TlMsReOld found with the given id.
     */
    TlMsReOld delete(String tlmsreoldId);

    /**
     * Deletes an existing TlMsReOld with the given object.
     *
     * @param tlMsReOld The instance of the TlMsReOld to be deleted; value cannot be null.
     */
    void delete(TlMsReOld tlMsReOld);

    /**
     * Find all TlMsReOlds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsReOlds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsReOld> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsReOlds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsReOlds.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsReOld> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsReOlds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsReOlds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsReOlds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsReOld.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}