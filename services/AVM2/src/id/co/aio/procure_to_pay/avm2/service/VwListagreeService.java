/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VwListagree;

/**
 * Service object for domain model class {@link VwListagree}.
 */
public interface VwListagreeService {

    /**
     * Creates a new VwListagree. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VwListagree if any.
     *
     * @param vwListagree Details of the VwListagree to be created; value cannot be null.
     * @return The newly created VwListagree.
     */
    VwListagree create(@Valid VwListagree vwListagree);


	/**
     * Returns VwListagree by given id if exists.
     *
     * @param vwlistagreeId The id of the VwListagree to get; value cannot be null.
     * @return VwListagree associated with the given vwlistagreeId.
	 * @throws EntityNotFoundException If no VwListagree is found.
     */
    VwListagree getById(Long vwlistagreeId);

    /**
     * Find and return the VwListagree by given id if exists, returns null otherwise.
     *
     * @param vwlistagreeId The id of the VwListagree to get; value cannot be null.
     * @return VwListagree associated with the given vwlistagreeId.
     */
    VwListagree findById(Long vwlistagreeId);

	/**
     * Find and return the list of VwListagrees by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vwlistagreeIds The id's of the VwListagree to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VwListagrees associated with the given vwlistagreeIds.
     */
    List<VwListagree> findByMultipleIds(List<Long> vwlistagreeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VwListagree. It replaces all fields of the existing VwListagree with the given vwListagree.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VwListagree if any.
     *
     * @param vwListagree The details of the VwListagree to be updated; value cannot be null.
     * @return The updated VwListagree.
     * @throws EntityNotFoundException if no VwListagree is found with given input.
     */
    VwListagree update(@Valid VwListagree vwListagree);


    /**
     * Partially updates the details of an existing VwListagree. It updates only the
     * fields of the existing VwListagree which are passed in the vwListagreePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VwListagree if any.
     *
     * @param vwlistagreeId The id of the VwListagree to be deleted; value cannot be null.
     * @param vwListagreePatch The partial data of VwListagree which is supposed to be updated; value cannot be null.
     * @return The updated VwListagree.
     * @throws EntityNotFoundException if no VwListagree is found with given input.
     */
    VwListagree partialUpdate(Long vwlistagreeId, Map<String, Object> vwListagreePatch);

    /**
     * Deletes an existing VwListagree with the given id.
     *
     * @param vwlistagreeId The id of the VwListagree to be deleted; value cannot be null.
     * @return The deleted VwListagree.
     * @throws EntityNotFoundException if no VwListagree found with the given id.
     */
    VwListagree delete(Long vwlistagreeId);

    /**
     * Deletes an existing VwListagree with the given object.
     *
     * @param vwListagree The instance of the VwListagree to be deleted; value cannot be null.
     */
    void delete(VwListagree vwListagree);

    /**
     * Find all VwListagrees matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VwListagrees.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VwListagree> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VwListagrees matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VwListagrees.
     *
     * @see Pageable
     * @see Page
     */
    Page<VwListagree> findAll(String query, Pageable pageable);

    /**
     * Exports all VwListagrees matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VwListagrees matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VwListagrees in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VwListagree.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}