/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrDoak;


/**
 * ServiceImpl object for domain model class TlTrDoak.
 *
 * @see TlTrDoak
 */
@Service("AVM2.TlTrDoakService")
@Validated
@EntityService(entityClass = TlTrDoak.class, serviceId = "AVM2")
public class TlTrDoakServiceImpl implements TlTrDoakService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrDoakServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrDoakDao")
    private WMGenericDao<TlTrDoak, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrDoak, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrDoak create(TlTrDoak tlTrDoak) {
        LOGGER.debug("Creating a new TlTrDoak with information: {}", tlTrDoak);

        TlTrDoak tlTrDoakCreated = this.wmGenericDao.create(tlTrDoak);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrDoakCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrDoak getById(Integer tltrdoakId) {
        LOGGER.debug("Finding TlTrDoak by id: {}", tltrdoakId);
        return this.wmGenericDao.findById(tltrdoakId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrDoak findById(Integer tltrdoakId) {
        LOGGER.debug("Finding TlTrDoak by id: {}", tltrdoakId);
        try {
            return this.wmGenericDao.findById(tltrdoakId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrDoak found with id: {}", tltrdoakId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrDoak> findByMultipleIds(List<Integer> tltrdoakIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrDoaks by ids: {}", tltrdoakIds);

        return this.wmGenericDao.findByMultipleIds(tltrdoakIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrDoak update(TlTrDoak tlTrDoak) {
        LOGGER.debug("Updating TlTrDoak with information: {}", tlTrDoak);

        this.wmGenericDao.update(tlTrDoak);
        this.wmGenericDao.refresh(tlTrDoak);

        return tlTrDoak;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrDoak partialUpdate(Integer tltrdoakId, Map<String, Object>tlTrDoakPatch) {
        LOGGER.debug("Partially Updating the TlTrDoak with id: {}", tltrdoakId);

        TlTrDoak tlTrDoak = getById(tltrdoakId);

        try {
            ObjectReader tlTrDoakReader = this.objectMapper.reader().forType(TlTrDoak.class).withValueToUpdate(tlTrDoak);
            tlTrDoak = tlTrDoakReader.readValue(this.objectMapper.writeValueAsString(tlTrDoakPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrDoakPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrDoak = update(tlTrDoak);

        return tlTrDoak;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrDoak delete(Integer tltrdoakId) {
        LOGGER.debug("Deleting TlTrDoak with id: {}", tltrdoakId);
        TlTrDoak deleted = this.wmGenericDao.findById(tltrdoakId);
        if (deleted == null) {
            LOGGER.debug("No TlTrDoak found with id: {}", tltrdoakId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrDoak.class.getSimpleName(), tltrdoakId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrDoak tlTrDoak) {
        LOGGER.debug("Deleting TlTrDoak with {}", tlTrDoak);
        this.wmGenericDao.delete(tlTrDoak);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrDoak> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrDoaks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrDoak> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrDoaks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrDoak to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrDoak to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}