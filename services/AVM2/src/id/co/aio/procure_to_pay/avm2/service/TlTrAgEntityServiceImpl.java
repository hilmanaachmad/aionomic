/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrAgEntity;


/**
 * ServiceImpl object for domain model class TlTrAgEntity.
 *
 * @see TlTrAgEntity
 */
@Service("AVM2.TlTrAgEntityService")
@Validated
@EntityService(entityClass = TlTrAgEntity.class, serviceId = "AVM2")
public class TlTrAgEntityServiceImpl implements TlTrAgEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrAgEntityServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrAgEntityDao")
    private WMGenericDao<TlTrAgEntity, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrAgEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAgEntity create(TlTrAgEntity tlTrAgEntity) {
        LOGGER.debug("Creating a new TlTrAgEntity with information: {}", tlTrAgEntity);

        TlTrAgEntity tlTrAgEntityCreated = this.wmGenericDao.create(tlTrAgEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrAgEntityCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrAgEntity getById(Integer tltragentityId) {
        LOGGER.debug("Finding TlTrAgEntity by id: {}", tltragentityId);
        return this.wmGenericDao.findById(tltragentityId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrAgEntity findById(Integer tltragentityId) {
        LOGGER.debug("Finding TlTrAgEntity by id: {}", tltragentityId);
        try {
            return this.wmGenericDao.findById(tltragentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrAgEntity found with id: {}", tltragentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrAgEntity> findByMultipleIds(List<Integer> tltragentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrAgEntities by ids: {}", tltragentityIds);

        return this.wmGenericDao.findByMultipleIds(tltragentityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrAgEntity update(TlTrAgEntity tlTrAgEntity) {
        LOGGER.debug("Updating TlTrAgEntity with information: {}", tlTrAgEntity);

        this.wmGenericDao.update(tlTrAgEntity);
        this.wmGenericDao.refresh(tlTrAgEntity);

        return tlTrAgEntity;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAgEntity partialUpdate(Integer tltragentityId, Map<String, Object>tlTrAgEntityPatch) {
        LOGGER.debug("Partially Updating the TlTrAgEntity with id: {}", tltragentityId);

        TlTrAgEntity tlTrAgEntity = getById(tltragentityId);

        try {
            ObjectReader tlTrAgEntityReader = this.objectMapper.reader().forType(TlTrAgEntity.class).withValueToUpdate(tlTrAgEntity);
            tlTrAgEntity = tlTrAgEntityReader.readValue(this.objectMapper.writeValueAsString(tlTrAgEntityPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrAgEntityPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrAgEntity = update(tlTrAgEntity);

        return tlTrAgEntity;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAgEntity delete(Integer tltragentityId) {
        LOGGER.debug("Deleting TlTrAgEntity with id: {}", tltragentityId);
        TlTrAgEntity deleted = this.wmGenericDao.findById(tltragentityId);
        if (deleted == null) {
            LOGGER.debug("No TlTrAgEntity found with id: {}", tltragentityId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrAgEntity.class.getSimpleName(), tltragentityId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrAgEntity tlTrAgEntity) {
        LOGGER.debug("Deleting TlTrAgEntity with {}", tlTrAgEntity);
        this.wmGenericDao.delete(tlTrAgEntity);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrAgEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrAgEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrAgEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrAgEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrAgEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrAgEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}