/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsDe;
import id.co.aio.procure_to_pay.avm2.service.TlMsDeService;


/**
 * Controller object for domain model class TlMsDe.
 * @see TlMsDe
 */
@RestController("AVM2.TlMsDeController")
@Api(value = "TlMsDeController", description = "Exposes APIs to work with TlMsDe resource.")
@RequestMapping("/AVM2/TlMsDe")
public class TlMsDeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsDeController.class);

    @Autowired
	@Qualifier("AVM2.TlMsDeService")
	private TlMsDeService tlMsDeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsDe instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDe createTlMsDe(@RequestBody TlMsDe tlMsDe) {
		LOGGER.debug("Create TlMsDe with information: {}" , tlMsDe);

		tlMsDe = tlMsDeService.create(tlMsDe);
		LOGGER.debug("Created TlMsDe with information: {}" , tlMsDe);

	    return tlMsDe;
	}

    @ApiOperation(value = "Returns the TlMsDe instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDe getTlMsDe(@PathVariable("id") Long id) {
        LOGGER.debug("Getting TlMsDe with id: {}" , id);

        TlMsDe foundTlMsDe = tlMsDeService.getById(id);
        LOGGER.debug("TlMsDe details with id: {}" , foundTlMsDe);

        return foundTlMsDe;
    }

    @ApiOperation(value = "Updates the TlMsDe instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDe editTlMsDe(@PathVariable("id") Long id, @RequestBody TlMsDe tlMsDe) {
        LOGGER.debug("Editing TlMsDe with id: {}" , tlMsDe.getId());

        tlMsDe.setId(id);
        tlMsDe = tlMsDeService.update(tlMsDe);
        LOGGER.debug("TlMsDe details with id: {}" , tlMsDe);

        return tlMsDe;
    }
    
    @ApiOperation(value = "Partially updates the TlMsDe instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsDe patchTlMsDe(@PathVariable("id") Long id, @RequestBody @MapTo(TlMsDe.class) Map<String, Object> tlMsDePatch) {
        LOGGER.debug("Partially updating TlMsDe with id: {}" , id);

        TlMsDe tlMsDe = tlMsDeService.partialUpdate(id, tlMsDePatch);
        LOGGER.debug("TlMsDe details after partial update: {}" , tlMsDe);

        return tlMsDe;
    }

    @ApiOperation(value = "Deletes the TlMsDe instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsDe(@PathVariable("id") Long id) {
        LOGGER.debug("Deleting TlMsDe with id: {}" , id);

        TlMsDe deletedTlMsDe = tlMsDeService.delete(id);

        return deletedTlMsDe != null;
    }

    /**
     * @deprecated Use {@link #findTlMsDes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsDe instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsDe> searchTlMsDesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsDes list by query filter:{}", (Object) queryFilters);
        return tlMsDeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsDe instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsDe> findTlMsDes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsDes list by filter:", query);
        return tlMsDeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsDe instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsDe> filterTlMsDes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsDes list by filter", query);
        return tlMsDeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsDes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsDeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsDesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsDe.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsDeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsDe instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsDes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsDes");
		return tlMsDeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsDeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsDeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsDeService instance
	 */
	protected void setTlMsDeService(TlMsDeService service) {
		this.tlMsDeService = service;
	}

}