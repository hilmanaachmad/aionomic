/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsPuonTemp;


/**
 * ServiceImpl object for domain model class TlMsPuonTemp.
 *
 * @see TlMsPuonTemp
 */
@Service("AVM2.TlMsPuonTempService")
@Validated
@EntityService(entityClass = TlMsPuonTemp.class, serviceId = "AVM2")
public class TlMsPuonTempServiceImpl implements TlMsPuonTempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsPuonTempServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsPuonTempDao")
    private WMGenericDao<TlMsPuonTemp, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsPuonTemp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuonTemp create(TlMsPuonTemp tlMsPuonTemp) {
        LOGGER.debug("Creating a new TlMsPuonTemp with information: {}", tlMsPuonTemp);

        TlMsPuonTemp tlMsPuonTempCreated = this.wmGenericDao.create(tlMsPuonTemp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsPuonTempCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsPuonTemp getById(Integer tlmspuontempId) {
        LOGGER.debug("Finding TlMsPuonTemp by id: {}", tlmspuontempId);
        return this.wmGenericDao.findById(tlmspuontempId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsPuonTemp findById(Integer tlmspuontempId) {
        LOGGER.debug("Finding TlMsPuonTemp by id: {}", tlmspuontempId);
        try {
            return this.wmGenericDao.findById(tlmspuontempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsPuonTemp found with id: {}", tlmspuontempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsPuonTemp> findByMultipleIds(List<Integer> tlmspuontempIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsPuonTemps by ids: {}", tlmspuontempIds);

        return this.wmGenericDao.findByMultipleIds(tlmspuontempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsPuonTemp update(TlMsPuonTemp tlMsPuonTemp) {
        LOGGER.debug("Updating TlMsPuonTemp with information: {}", tlMsPuonTemp);

        this.wmGenericDao.update(tlMsPuonTemp);
        this.wmGenericDao.refresh(tlMsPuonTemp);

        return tlMsPuonTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuonTemp partialUpdate(Integer tlmspuontempId, Map<String, Object>tlMsPuonTempPatch) {
        LOGGER.debug("Partially Updating the TlMsPuonTemp with id: {}", tlmspuontempId);

        TlMsPuonTemp tlMsPuonTemp = getById(tlmspuontempId);

        try {
            ObjectReader tlMsPuonTempReader = this.objectMapper.reader().forType(TlMsPuonTemp.class).withValueToUpdate(tlMsPuonTemp);
            tlMsPuonTemp = tlMsPuonTempReader.readValue(this.objectMapper.writeValueAsString(tlMsPuonTempPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsPuonTempPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsPuonTemp = update(tlMsPuonTemp);

        return tlMsPuonTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsPuonTemp delete(Integer tlmspuontempId) {
        LOGGER.debug("Deleting TlMsPuonTemp with id: {}", tlmspuontempId);
        TlMsPuonTemp deleted = this.wmGenericDao.findById(tlmspuontempId);
        if (deleted == null) {
            LOGGER.debug("No TlMsPuonTemp found with id: {}", tlmspuontempId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsPuonTemp.class.getSimpleName(), tlmspuontempId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsPuonTemp tlMsPuonTemp) {
        LOGGER.debug("Deleting TlMsPuonTemp with {}", tlMsPuonTemp);
        this.wmGenericDao.delete(tlMsPuonTemp);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsPuonTemp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsPuonTemps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsPuonTemp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsPuonTemps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsPuonTemp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsPuonTemp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}