/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrReak;
import id.co.aio.procure_to_pay.avm2.TlTrReakId;


/**
 * ServiceImpl object for domain model class TlTrReak.
 *
 * @see TlTrReak
 */
@Service("AVM2.TlTrReakService")
@Validated
@EntityService(entityClass = TlTrReak.class, serviceId = "AVM2")
public class TlTrReakServiceImpl implements TlTrReakService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrReakServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrReakDao")
    private WMGenericDao<TlTrReak, TlTrReakId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrReak, TlTrReakId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrReak create(TlTrReak tlTrReak) {
        LOGGER.debug("Creating a new TlTrReak with information: {}", tlTrReak);

        TlTrReak tlTrReakCreated = this.wmGenericDao.create(tlTrReak);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrReakCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrReak getById(TlTrReakId tltrreakId) {
        LOGGER.debug("Finding TlTrReak by id: {}", tltrreakId);
        return this.wmGenericDao.findById(tltrreakId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrReak findById(TlTrReakId tltrreakId) {
        LOGGER.debug("Finding TlTrReak by id: {}", tltrreakId);
        try {
            return this.wmGenericDao.findById(tltrreakId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrReak found with id: {}", tltrreakId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrReak> findByMultipleIds(List<TlTrReakId> tltrreakIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrReaks by ids: {}", tltrreakIds);

        return this.wmGenericDao.findByMultipleIds(tltrreakIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrReak update(TlTrReak tlTrReak) {
        LOGGER.debug("Updating TlTrReak with information: {}", tlTrReak);

        this.wmGenericDao.update(tlTrReak);
        this.wmGenericDao.refresh(tlTrReak);

        return tlTrReak;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrReak partialUpdate(TlTrReakId tltrreakId, Map<String, Object>tlTrReakPatch) {
        LOGGER.debug("Partially Updating the TlTrReak with id: {}", tltrreakId);

        TlTrReak tlTrReak = getById(tltrreakId);

        try {
            ObjectReader tlTrReakReader = this.objectMapper.reader().forType(TlTrReak.class).withValueToUpdate(tlTrReak);
            tlTrReak = tlTrReakReader.readValue(this.objectMapper.writeValueAsString(tlTrReakPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrReakPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrReak = update(tlTrReak);

        return tlTrReak;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrReak delete(TlTrReakId tltrreakId) {
        LOGGER.debug("Deleting TlTrReak with id: {}", tltrreakId);
        TlTrReak deleted = this.wmGenericDao.findById(tltrreakId);
        if (deleted == null) {
            LOGGER.debug("No TlTrReak found with id: {}", tltrreakId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrReak.class.getSimpleName(), tltrreakId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrReak tlTrReak) {
        LOGGER.debug("Deleting TlTrReak with {}", tlTrReak);
        this.wmGenericDao.delete(tlTrReak);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrReak> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrReaks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrReak> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrReaks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrReak to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrReak to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}