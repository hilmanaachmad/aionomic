/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VDataTaxOverseas;


/**
 * ServiceImpl object for domain model class VDataTaxOverseas.
 *
 * @see VDataTaxOverseas
 */
@Service("AVM2.VDataTaxOverseasService")
@Validated
@EntityService(entityClass = VDataTaxOverseas.class, serviceId = "AVM2")
public class VDataTaxOverseasServiceImpl implements VDataTaxOverseasService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VDataTaxOverseasServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VDataTaxOverseasDao")
    private WMGenericDao<VDataTaxOverseas, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VDataTaxOverseas, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataTaxOverseas create(VDataTaxOverseas vdataTaxOverseas) {
        LOGGER.debug("Creating a new VDataTaxOverseas with information: {}", vdataTaxOverseas);

        VDataTaxOverseas vdataTaxOverseasCreated = this.wmGenericDao.create(vdataTaxOverseas);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vdataTaxOverseasCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataTaxOverseas getById(Integer vdatataxoverseasId) {
        LOGGER.debug("Finding VDataTaxOverseas by id: {}", vdatataxoverseasId);
        return this.wmGenericDao.findById(vdatataxoverseasId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VDataTaxOverseas findById(Integer vdatataxoverseasId) {
        LOGGER.debug("Finding VDataTaxOverseas by id: {}", vdatataxoverseasId);
        try {
            return this.wmGenericDao.findById(vdatataxoverseasId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VDataTaxOverseas found with id: {}", vdatataxoverseasId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VDataTaxOverseas> findByMultipleIds(List<Integer> vdatataxoverseasIds, boolean orderedReturn) {
        LOGGER.debug("Finding VDataTaxOverseas by ids: {}", vdatataxoverseasIds);

        return this.wmGenericDao.findByMultipleIds(vdatataxoverseasIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VDataTaxOverseas update(VDataTaxOverseas vdataTaxOverseas) {
        LOGGER.debug("Updating VDataTaxOverseas with information: {}", vdataTaxOverseas);

        this.wmGenericDao.update(vdataTaxOverseas);
        this.wmGenericDao.refresh(vdataTaxOverseas);

        return vdataTaxOverseas;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataTaxOverseas partialUpdate(Integer vdatataxoverseasId, Map<String, Object>vdataTaxOverseasPatch) {
        LOGGER.debug("Partially Updating the VDataTaxOverseas with id: {}", vdatataxoverseasId);

        VDataTaxOverseas vdataTaxOverseas = getById(vdatataxoverseasId);

        try {
            ObjectReader vdataTaxOverseasReader = this.objectMapper.reader().forType(VDataTaxOverseas.class).withValueToUpdate(vdataTaxOverseas);
            vdataTaxOverseas = vdataTaxOverseasReader.readValue(this.objectMapper.writeValueAsString(vdataTaxOverseasPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vdataTaxOverseasPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vdataTaxOverseas = update(vdataTaxOverseas);

        return vdataTaxOverseas;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VDataTaxOverseas delete(Integer vdatataxoverseasId) {
        LOGGER.debug("Deleting VDataTaxOverseas with id: {}", vdatataxoverseasId);
        VDataTaxOverseas deleted = this.wmGenericDao.findById(vdatataxoverseasId);
        if (deleted == null) {
            LOGGER.debug("No VDataTaxOverseas found with id: {}", vdatataxoverseasId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VDataTaxOverseas.class.getSimpleName(), vdatataxoverseasId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VDataTaxOverseas vdataTaxOverseas) {
        LOGGER.debug("Deleting VDataTaxOverseas with {}", vdataTaxOverseas);
        this.wmGenericDao.delete(vdataTaxOverseas);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataTaxOverseas> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VDataTaxOverseas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VDataTaxOverseas> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VDataTaxOverseas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataTaxOverseas to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VDataTaxOverseas to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}