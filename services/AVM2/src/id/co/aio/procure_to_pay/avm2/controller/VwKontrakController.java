/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VwKontrak;
import id.co.aio.procure_to_pay.avm2.service.VwKontrakService;


/**
 * Controller object for domain model class VwKontrak.
 * @see VwKontrak
 */
@RestController("AVM2.VwKontrakController")
@Api(value = "VwKontrakController", description = "Exposes APIs to work with VwKontrak resource.")
@RequestMapping("/AVM2/VwKontrak")
public class VwKontrakController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwKontrakController.class);

    @Autowired
	@Qualifier("AVM2.VwKontrakService")
	private VwKontrakService vwKontrakService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VwKontrak instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrak createVwKontrak(@RequestBody VwKontrak vwKontrak) {
		LOGGER.debug("Create VwKontrak with information: {}" , vwKontrak);

		vwKontrak = vwKontrakService.create(vwKontrak);
		LOGGER.debug("Created VwKontrak with information: {}" , vwKontrak);

	    return vwKontrak;
	}

    @ApiOperation(value = "Returns the VwKontrak instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrak getVwKontrak(@PathVariable("abNaor") String abNaor) {
        LOGGER.debug("Getting VwKontrak with id: {}" , abNaor);

        VwKontrak foundVwKontrak = vwKontrakService.getById(abNaor);
        LOGGER.debug("VwKontrak details with id: {}" , foundVwKontrak);

        return foundVwKontrak;
    }

    @ApiOperation(value = "Updates the VwKontrak instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrak editVwKontrak(@PathVariable("abNaor") String abNaor, @RequestBody VwKontrak vwKontrak) {
        LOGGER.debug("Editing VwKontrak with id: {}" , vwKontrak.getAbNaor());

        vwKontrak.setAbNaor(abNaor);
        vwKontrak = vwKontrakService.update(vwKontrak);
        LOGGER.debug("VwKontrak details with id: {}" , vwKontrak);

        return vwKontrak;
    }
    
    @ApiOperation(value = "Partially updates the VwKontrak instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwKontrak patchVwKontrak(@PathVariable("abNaor") String abNaor, @RequestBody @MapTo(VwKontrak.class) Map<String, Object> vwKontrakPatch) {
        LOGGER.debug("Partially updating VwKontrak with id: {}" , abNaor);

        VwKontrak vwKontrak = vwKontrakService.partialUpdate(abNaor, vwKontrakPatch);
        LOGGER.debug("VwKontrak details after partial update: {}" , vwKontrak);

        return vwKontrak;
    }

    @ApiOperation(value = "Deletes the VwKontrak instance associated with the given id.")
    @RequestMapping(value = "/{abNaor:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVwKontrak(@PathVariable("abNaor") String abNaor) {
        LOGGER.debug("Deleting VwKontrak with id: {}" , abNaor);

        VwKontrak deletedVwKontrak = vwKontrakService.delete(abNaor);

        return deletedVwKontrak != null;
    }

    /**
     * @deprecated Use {@link #findVwKontraks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VwKontrak instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwKontrak> searchVwKontraksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VwKontraks list by query filter:{}", (Object) queryFilters);
        return vwKontrakService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwKontrak instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwKontrak> findVwKontraks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwKontraks list by filter:", query);
        return vwKontrakService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwKontrak instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwKontrak> filterVwKontraks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwKontraks list by filter", query);
        return vwKontrakService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVwKontraks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vwKontrakService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVwKontraksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VwKontrak.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vwKontrakService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VwKontrak instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVwKontraks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VwKontraks");
		return vwKontrakService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVwKontrakAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vwKontrakService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VwKontrakService instance
	 */
	protected void setVwKontrakService(VwKontrakService service) {
		this.vwKontrakService = service;
	}

}