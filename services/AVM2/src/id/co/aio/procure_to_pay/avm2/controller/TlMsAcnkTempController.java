/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkTemp;
import id.co.aio.procure_to_pay.avm2.service.TlMsAcnkTempService;


/**
 * Controller object for domain model class TlMsAcnkTemp.
 * @see TlMsAcnkTemp
 */
@RestController("AVM2.TlMsAcnkTempController")
@Api(value = "TlMsAcnkTempController", description = "Exposes APIs to work with TlMsAcnkTemp resource.")
@RequestMapping("/AVM2/TlMsAcnkTemp")
public class TlMsAcnkTempController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAcnkTempController.class);

    @Autowired
	@Qualifier("AVM2.TlMsAcnkTempService")
	private TlMsAcnkTempService tlMsAcnkTempService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsAcnkTemp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkTemp createTlMsAcnkTemp(@RequestBody TlMsAcnkTemp tlMsAcnkTemp) {
		LOGGER.debug("Create TlMsAcnkTemp with information: {}" , tlMsAcnkTemp);

		tlMsAcnkTemp = tlMsAcnkTempService.create(tlMsAcnkTemp);
		LOGGER.debug("Created TlMsAcnkTemp with information: {}" , tlMsAcnkTemp);

	    return tlMsAcnkTemp;
	}

    @ApiOperation(value = "Returns the TlMsAcnkTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdng:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkTemp getTlMsAcnkTemp(@PathVariable("abIdng") Integer abIdng) {
        LOGGER.debug("Getting TlMsAcnkTemp with id: {}" , abIdng);

        TlMsAcnkTemp foundTlMsAcnkTemp = tlMsAcnkTempService.getById(abIdng);
        LOGGER.debug("TlMsAcnkTemp details with id: {}" , foundTlMsAcnkTemp);

        return foundTlMsAcnkTemp;
    }

    @ApiOperation(value = "Updates the TlMsAcnkTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdng:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkTemp editTlMsAcnkTemp(@PathVariable("abIdng") Integer abIdng, @RequestBody TlMsAcnkTemp tlMsAcnkTemp) {
        LOGGER.debug("Editing TlMsAcnkTemp with id: {}" , tlMsAcnkTemp.getAbIdng());

        tlMsAcnkTemp.setAbIdng(abIdng);
        tlMsAcnkTemp = tlMsAcnkTempService.update(tlMsAcnkTemp);
        LOGGER.debug("TlMsAcnkTemp details with id: {}" , tlMsAcnkTemp);

        return tlMsAcnkTemp;
    }
    
    @ApiOperation(value = "Partially updates the TlMsAcnkTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdng:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsAcnkTemp patchTlMsAcnkTemp(@PathVariable("abIdng") Integer abIdng, @RequestBody @MapTo(TlMsAcnkTemp.class) Map<String, Object> tlMsAcnkTempPatch) {
        LOGGER.debug("Partially updating TlMsAcnkTemp with id: {}" , abIdng);

        TlMsAcnkTemp tlMsAcnkTemp = tlMsAcnkTempService.partialUpdate(abIdng, tlMsAcnkTempPatch);
        LOGGER.debug("TlMsAcnkTemp details after partial update: {}" , tlMsAcnkTemp);

        return tlMsAcnkTemp;
    }

    @ApiOperation(value = "Deletes the TlMsAcnkTemp instance associated with the given id.")
    @RequestMapping(value = "/{abIdng:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsAcnkTemp(@PathVariable("abIdng") Integer abIdng) {
        LOGGER.debug("Deleting TlMsAcnkTemp with id: {}" , abIdng);

        TlMsAcnkTemp deletedTlMsAcnkTemp = tlMsAcnkTempService.delete(abIdng);

        return deletedTlMsAcnkTemp != null;
    }

    /**
     * @deprecated Use {@link #findTlMsAcnkTemps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsAcnkTemp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkTemp> searchTlMsAcnkTempsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsAcnkTemps list by query filter:{}", (Object) queryFilters);
        return tlMsAcnkTempService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAcnkTemp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkTemp> findTlMsAcnkTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAcnkTemps list by filter:", query);
        return tlMsAcnkTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsAcnkTemp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsAcnkTemp> filterTlMsAcnkTemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsAcnkTemps list by filter", query);
        return tlMsAcnkTempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsAcnkTemps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsAcnkTempService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsAcnkTempsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsAcnkTemp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsAcnkTempService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsAcnkTemp instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsAcnkTemps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsAcnkTemps");
		return tlMsAcnkTempService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsAcnkTempAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsAcnkTempService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsAcnkTempService instance
	 */
	protected void setTlMsAcnkTempService(TlMsAcnkTempService service) {
		this.tlMsAcnkTempService = service;
	}

}