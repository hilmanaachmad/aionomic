/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TableVendor;

/**
 * Service object for domain model class {@link TableVendor}.
 */
public interface TableVendorService {

    /**
     * Creates a new TableVendor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TableVendor if any.
     *
     * @param tableVendor Details of the TableVendor to be created; value cannot be null.
     * @return The newly created TableVendor.
     */
    TableVendor create(@Valid TableVendor tableVendor);


	/**
     * Returns TableVendor by given id if exists.
     *
     * @param tablevendorId The id of the TableVendor to get; value cannot be null.
     * @return TableVendor associated with the given tablevendorId.
	 * @throws EntityNotFoundException If no TableVendor is found.
     */
    TableVendor getById(Integer tablevendorId);

    /**
     * Find and return the TableVendor by given id if exists, returns null otherwise.
     *
     * @param tablevendorId The id of the TableVendor to get; value cannot be null.
     * @return TableVendor associated with the given tablevendorId.
     */
    TableVendor findById(Integer tablevendorId);

	/**
     * Find and return the list of TableVendors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tablevendorIds The id's of the TableVendor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TableVendors associated with the given tablevendorIds.
     */
    List<TableVendor> findByMultipleIds(List<Integer> tablevendorIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TableVendor. It replaces all fields of the existing TableVendor with the given tableVendor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TableVendor if any.
     *
     * @param tableVendor The details of the TableVendor to be updated; value cannot be null.
     * @return The updated TableVendor.
     * @throws EntityNotFoundException if no TableVendor is found with given input.
     */
    TableVendor update(@Valid TableVendor tableVendor);


    /**
     * Partially updates the details of an existing TableVendor. It updates only the
     * fields of the existing TableVendor which are passed in the tableVendorPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TableVendor if any.
     *
     * @param tablevendorId The id of the TableVendor to be deleted; value cannot be null.
     * @param tableVendorPatch The partial data of TableVendor which is supposed to be updated; value cannot be null.
     * @return The updated TableVendor.
     * @throws EntityNotFoundException if no TableVendor is found with given input.
     */
    TableVendor partialUpdate(Integer tablevendorId, Map<String, Object> tableVendorPatch);

    /**
     * Deletes an existing TableVendor with the given id.
     *
     * @param tablevendorId The id of the TableVendor to be deleted; value cannot be null.
     * @return The deleted TableVendor.
     * @throws EntityNotFoundException if no TableVendor found with the given id.
     */
    TableVendor delete(Integer tablevendorId);

    /**
     * Deletes an existing TableVendor with the given object.
     *
     * @param tableVendor The instance of the TableVendor to be deleted; value cannot be null.
     */
    void delete(TableVendor tableVendor);

    /**
     * Find all TableVendors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TableVendors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TableVendor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TableVendors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TableVendors.
     *
     * @see Pageable
     * @see Page
     */
    Page<TableVendor> findAll(String query, Pageable pageable);

    /**
     * Exports all TableVendors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TableVendors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TableVendors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TableVendor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}