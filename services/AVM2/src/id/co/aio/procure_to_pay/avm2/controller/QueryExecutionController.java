/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import id.co.aio.procure_to_pay.avm2.service.AVM2QueryExecutorService;
import id.co.aio.procure_to_pay.avm2.models.query.*;

@RestController(value = "AVM2.QueryExecutionController")
@RequestMapping("/AVM2/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private AVM2QueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/qUpdateStatusForgot", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update status forgot user data")
    public IntegerWrapper executeQUpdateStatusForgot(@Valid @RequestBody QupdateStatusForgotRequest qupdateStatusForgotRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateStatusForgot");
        Integer _result = queryService.executeQUpdateStatusForgot(qupdateStatusForgotRequest);
        LOGGER.debug("got the result for named query: qUpdateStatusForgot, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetForgotUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data from tl_ms_forgot_user")
    public Page<QgetForgotUserResponse> executeQGetForgotUser(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetForgotUser");
        Page<QgetForgotUserResponse> _result = queryService.executeQGetForgotUser(pageable);
        LOGGER.debug("got the result for named query: qGetForgotUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetForgotUser")
    @RequestMapping(value = "/queries/qGetForgotUser/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetForgotUser(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetForgotUser");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetForgotUser";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetForgotUser( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qGetDataBank", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get data from v_dataBank")
    public Page<QgetDataBankResponse> executeQGetDataBank(@RequestParam(value = "userName") String userName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetDataBank");
        Page<QgetDataBankResponse> _result = queryService.executeQGetDataBank(userName, pageable);
        LOGGER.debug("got the result for named query: qGetDataBank, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetDataBank")
    @RequestMapping(value = "/queries/qGetDataBank/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetDataBank(@RequestParam(value = "userName") String userName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetDataBank");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetDataBank";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetDataBank(userName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertCertidom", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert certificate domicilie to tl_tr_door")
    public IntegerWrapper executeQInsertCertidom(@Valid @RequestBody QinsertCertidomRequest qinsertCertidomRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertCertidom");
        Integer _result = queryService.executeQInsertCertidom(qinsertCertidomRequest);
        LOGGER.debug("got the result for named query: qInsertCertidom, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertTaxOverseasTemp", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data  to tl_ms_ta_temp")
    public IntegerWrapper executeQInsertTaxOverseasTemp(@Valid @RequestBody QinsertTaxOverseasTempRequest qinsertTaxOverseasTempRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertTaxOverseasTemp");
        Integer _result = queryService.executeQInsertTaxOverseasTemp(qinsertTaxOverseasTempRequest);
        LOGGER.debug("got the result for named query: qInsertTaxOverseasTemp, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getVendroDataByName", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data vendor by name")
    public Page<GetVendroDataByNameResponse> executeGetVendroDataByName(@RequestParam(value = "vendorName") String vendorName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getVendroDataByName");
        Page<GetVendroDataByNameResponse> _result = queryService.executeGetVendroDataByName(vendorName, pageable);
        LOGGER.debug("got the result for named query: getVendroDataByName, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getVendroDataByName")
    @RequestMapping(value = "/queries/getVendroDataByName/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetVendroDataByName(@RequestParam(value = "vendorName") String vendorName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getVendroDataByName");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getVendroDataByName";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetVendroDataByName(vendorName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qGetTaxType", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "gel all data from tl_ms_tape")
    public Page<QgetTaxTypeResponse> executeQGetTaxType(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetTaxType");
        Page<QgetTaxTypeResponse> _result = queryService.executeQGetTaxType(pageable);
        LOGGER.debug("got the result for named query: qGetTaxType, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetTaxType")
    @RequestMapping(value = "/queries/qGetTaxType/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetTaxType(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetTaxType");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetTaxType";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetTaxType( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qCheckUserVendor", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qCheckUserVendor")
    public Page<QcheckUserVendorResponse> executeQCheckUserVendor(@RequestParam(value = "username") String username, @RequestParam(value = "password") String password, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qCheckUserVendor");
        Page<QcheckUserVendorResponse> _result = queryService.executeQCheckUserVendor(username, password, pageable);
        LOGGER.debug("got the result for named query: qCheckUserVendor, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qCheckUserVendor")
    @RequestMapping(value = "/queries/qCheckUserVendor/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQCheckUserVendor(@RequestParam(value = "username") String username, @RequestParam(value = "password") String password, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qCheckUserVendor");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qCheckUserVendor";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQCheckUserVendor(username, password,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getNpwpVendor", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get data vendor by npwp")
    public Page<GetNpwpVendorResponse> executeGetNpwpVendor(@RequestParam(value = "Npwp") String npwp, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getNpwpVendor");
        Page<GetNpwpVendorResponse> _result = queryService.executeGetNpwpVendor(npwp, pageable);
        LOGGER.debug("got the result for named query: getNpwpVendor, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getNpwpVendor")
    @RequestMapping(value = "/queries/getNpwpVendor/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetNpwpVendor(@RequestParam(value = "Npwp") String npwp, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getNpwpVendor");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getNpwpVendor";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetNpwpVendor(npwp,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getVendorDataByNames", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data vendor by names")
    public Page<GetVendorDataByNamesResponse> executeGetVendorDataByNames(@RequestParam(value = "vendorName") String vendorName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getVendorDataByNames");
        Page<GetVendorDataByNamesResponse> _result = queryService.executeGetVendorDataByNames(vendorName, pageable);
        LOGGER.debug("got the result for named query: getVendorDataByNames, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getVendorDataByNames")
    @RequestMapping(value = "/queries/getVendorDataByNames/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetVendorDataByNames(@RequestParam(value = "vendorName") String vendorName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getVendorDataByNames");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getVendorDataByNames";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetVendorDataByNames(vendorName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getVendorData", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get vendor data")
    public Page<GetVendorDataResponse> executeGetVendorData(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getVendorData");
        Page<GetVendorDataResponse> _result = queryService.executeGetVendorData(pageable);
        LOGGER.debug("got the result for named query: getVendorData, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getVendorData")
    @RequestMapping(value = "/queries/getVendorData/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetVendorData(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getVendorData");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getVendorData";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetVendorData( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdateExemptionFile", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update file exemption")
    public IntegerWrapper executeQUpdateExemptionFile(@Valid @RequestBody QupdateExemptionFileRequest qupdateExemptionFileRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateExemptionFile");
        Integer _result = queryService.executeQUpdateExemptionFile(qupdateExemptionFileRequest);
        LOGGER.debug("got the result for named query: qUpdateExemptionFile, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertSupDoc", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert sup doc into tl_tr_door")
    public IntegerWrapper executeQInsertSupDoc(@Valid @RequestBody QinsertSupDocRequest qinsertSupDocRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertSupDoc");
        Integer _result = queryService.executeQInsertSupDoc(qinsertSupDocRequest);
        LOGGER.debug("got the result for named query: qInsertSupDoc, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateVendorOverseas", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data vendor overseas")
    public IntegerWrapper executeQUpdateVendorOverseas(@Valid @RequestBody QupdateVendorOverseasRequest qupdateVendorOverseasRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateVendorOverseas");
        Integer _result = queryService.executeQUpdateVendorOverseas(qupdateVendorOverseasRequest);
        LOGGER.debug("got the result for named query: qUpdateVendorOverseas, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetBankInfo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get data bank information for input column")
    public Page<QgetBankInfoResponse> executeQGetBankInfo(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetBankInfo");
        Page<QgetBankInfoResponse> _result = queryService.executeQGetBankInfo(pageable);
        LOGGER.debug("got the result for named query: qGetBankInfo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetBankInfo")
    @RequestMapping(value = "/queries/qGetBankInfo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetBankInfo(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetBankInfo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetBankInfo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetBankInfo( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertTaxTemp", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data to tl_ms_ta_temp")
    public IntegerWrapper executeQInsertTaxTemp(@Valid @RequestBody QinsertTaxTempRequest qinsertTaxTempRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertTaxTemp");
        Integer _result = queryService.executeQInsertTaxTemp(qinsertTaxTempRequest);
        LOGGER.debug("got the result for named query: qInsertTaxTemp, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getVendorDataEmail", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "gel all data vendor by email")
    public Page<GetVendorDataEmailResponse> executeGetVendorDataEmail(@RequestParam(value = "email") String email, @RequestParam(value = "password", required = false) String password, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getVendorDataEmail");
        Page<GetVendorDataEmailResponse> _result = queryService.executeGetVendorDataEmail(email, password, pageable);
        LOGGER.debug("got the result for named query: getVendorDataEmail, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getVendorDataEmail")
    @RequestMapping(value = "/queries/getVendorDataEmail/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetVendorDataEmail(@RequestParam(value = "email") String email, @RequestParam(value = "password", required = false) String password, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getVendorDataEmail");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getVendorDataEmail";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetVendorDataEmail(email, password,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertCertificate", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert certificate exemption to tl_tr_door")
    public IntegerWrapper executeQInsertCertificate(@Valid @RequestBody QinsertCertificateRequest qinsertCertificateRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertCertificate");
        Integer _result = queryService.executeQInsertCertificate(qinsertCertificateRequest);
        LOGGER.debug("got the result for named query: qInsertCertificate, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertVendorOverseas", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data vendor overseas to tl_ms_ve")
    public IntegerWrapper executeQInsertVendorOverseas(@Valid @RequestBody QinsertVendorOverseasRequest qinsertVendorOverseasRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertVendorOverseas");
        Integer _result = queryService.executeQInsertVendorOverseas(qinsertVendorOverseasRequest);
        LOGGER.debug("got the result for named query: qInsertVendorOverseas, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qMaxVendor", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "count max id on tl_ms_ve_konf")
    public Page<QmaxVendorResponse> executeQMaxVendor(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qMaxVendor");
        Page<QmaxVendorResponse> _result = queryService.executeQMaxVendor(pageable);
        LOGGER.debug("got the result for named query: qMaxVendor, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qMaxVendor")
    @RequestMapping(value = "/queries/qMaxVendor/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQMaxVendor(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qMaxVendor");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qMaxVendor";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQMaxVendor( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qCheckUserEmailVen", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qCheckUserEmailVen")
    public Page<QcheckUserEmailVenResponse> executeQCheckUserEmailVen(@RequestParam(value = "username") String username, @RequestParam(value = "email") String email, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qCheckUserEmailVen");
        Page<QcheckUserEmailVenResponse> _result = queryService.executeQCheckUserEmailVen(username, email, pageable);
        LOGGER.debug("got the result for named query: qCheckUserEmailVen, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qCheckUserEmailVen")
    @RequestMapping(value = "/queries/qCheckUserEmailVen/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQCheckUserEmailVen(@RequestParam(value = "username") String username, @RequestParam(value = "email") String email, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qCheckUserEmailVen");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qCheckUserEmailVen";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQCheckUserEmailVen(username, email,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qRfusDelPIC", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "change ab_rfus to 50 when delete PIC")
    public IntegerWrapper executeQRfusDelPIC(@Valid @RequestBody QrfusDelPicRequest qrfusDelPicRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qRfusDelPIC");
        Integer _result = queryService.executeQRfusDelPIC(qrfusDelPicRequest);
        LOGGER.debug("got the result for named query: qRfusDelPIC, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getVendorUme", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get data vendor by username")
    public Page<GetVendorUmeResponse> executeGetVendorUme(@RequestParam(value = "username") String username, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getVendorUme");
        Page<GetVendorUmeResponse> _result = queryService.executeGetVendorUme(username, pageable);
        LOGGER.debug("got the result for named query: getVendorUme, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getVendorUme")
    @RequestMapping(value = "/queries/getVendorUme/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetVendorUme(@RequestParam(value = "username") String username, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getVendorUme");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getVendorUme";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetVendorUme(username,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertNpwp", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert npwp to tl_tr_door")
    public IntegerWrapper executeQInsertNpwp(@Valid @RequestBody QinsertNpwpRequest qinsertNpwpRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertNpwp");
        Integer _result = queryService.executeQInsertNpwp(qinsertNpwpRequest);
        LOGGER.debug("got the result for named query: qInsertNpwp, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertPicTemp", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data to tl_ms_em_temp")
    public IntegerWrapper executeQInsertPicTemp(@Valid @RequestBody QinsertPicTempRequest qinsertPicTempRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertPicTemp");
        Integer _result = queryService.executeQInsertPicTemp(qinsertPicTempRequest);
        LOGGER.debug("got the result for named query: qInsertPicTemp, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateTaxKonf", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data from table tax konf")
    public IntegerWrapper executeQUpdateTaxKonf(@Valid @RequestBody QupdateTaxKonfRequest qupdateTaxKonfRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateTaxKonf");
        Integer _result = queryService.executeQUpdateTaxKonf(qupdateTaxKonfRequest);
        LOGGER.debug("got the result for named query: qUpdateTaxKonf, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetBankInfoKonf", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data from table bank confirmation")
    public Page<QgetBankInfoKonfResponse> executeQGetBankInfoKonf(@RequestParam(value = "sVeCode") String sveCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetBankInfoKonf");
        Page<QgetBankInfoKonfResponse> _result = queryService.executeQGetBankInfoKonf(sveCode, pageable);
        LOGGER.debug("got the result for named query: qGetBankInfoKonf, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetBankInfoKonf")
    @RequestMapping(value = "/queries/qGetBankInfoKonf/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetBankInfoKonf(@RequestParam(value = "sVeCode") String sveCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetBankInfoKonf");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetBankInfoKonf";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetBankInfoKonf(sveCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qDeleteTaxKonf", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete data by id from table tax konfirmasi")
    public IntegerWrapper executeQDeleteTaxKonf(@RequestParam(value = "id") String id, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qDeleteTaxKonf");
        Integer _result = queryService.executeQDeleteTaxKonf(id);
        LOGGER.debug("got the result for named query: qDeleteTaxKonf, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateSppkp", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data sppkp file")
    public IntegerWrapper executeQUpdateSppkp(@Valid @RequestBody QupdateSppkpRequest qupdateSppkpRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateSppkp");
        Integer _result = queryService.executeQUpdateSppkp(qupdateSppkpRequest);
        LOGGER.debug("got the result for named query: qUpdateSppkp, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateNpwpFile", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update file npwp")
    public IntegerWrapper executeQUpdateNpwpFile(@Valid @RequestBody QupdateNpwpFileRequest qupdateNpwpFileRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateNpwpFile");
        Integer _result = queryService.executeQUpdateNpwpFile(qupdateNpwpFileRequest);
        LOGGER.debug("got the result for named query: qUpdateNpwpFile, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetTaxKonf", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "select all data tax from tl_ms_acnk_konf")
    public Page<QgetTaxKonfResponse> executeQGetTaxKonf(@RequestParam(value = "sVeCode") String sveCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetTaxKonf");
        Page<QgetTaxKonfResponse> _result = queryService.executeQGetTaxKonf(sveCode, pageable);
        LOGGER.debug("got the result for named query: qGetTaxKonf, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetTaxKonf")
    @RequestMapping(value = "/queries/qGetTaxKonf/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetTaxKonf(@RequestParam(value = "sVeCode") String sveCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetTaxKonf");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetTaxKonf";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetTaxKonf(sveCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qChangePasswordVen", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qChangePasswordVen")
    public IntegerWrapper executeQChangePasswordVen(@Valid @RequestBody QchangePasswordVenRequest qchangePasswordVenRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qChangePasswordVen");
        Integer _result = queryService.executeQChangePasswordVen(qchangePasswordVenRequest);
        LOGGER.debug("got the result for named query: qChangePasswordVen, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertVendor", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data vendor to tl_ms_ve")
    public IntegerWrapper executeQInsertVendor(@Valid @RequestBody QinsertVendorRequest qinsertVendorRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertVendor");
        Integer _result = queryService.executeQInsertVendor(qinsertVendorRequest);
        LOGGER.debug("got the result for named query: qInsertVendor, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertForgotUser", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data into tabel forgot user")
    public IntegerWrapper executeQInsertForgotUser(@Valid @RequestBody QinsertForgotUserRequest qinsertForgotUserRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertForgotUser");
        Integer _result = queryService.executeQInsertForgotUser(qinsertForgotUserRequest);
        LOGGER.debug("got the result for named query: qInsertForgotUser, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertTax", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data to tl_ms_ta")
    public IntegerWrapper executeQInsertTax(@Valid @RequestBody QinsertTaxRequest qinsertTaxRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertTax");
        Integer _result = queryService.executeQInsertTax(qinsertTaxRequest);
        LOGGER.debug("got the result for named query: qInsertTax, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertBank", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data to tl_ms_acnk")
    public IntegerWrapper executeQInsertBank(@Valid @RequestBody QinsertBankRequest qinsertBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertBank");
        Integer _result = queryService.executeQInsertBank(qinsertBankRequest);
        LOGGER.debug("got the result for named query: qInsertBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getTaxOverseas", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data fron v_dataTaxOverseas")
    public Page<GetTaxOverseasResponse> executeGetTaxOverseas(@RequestParam(value = "userName") String userName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTaxOverseas");
        Page<GetTaxOverseasResponse> _result = queryService.executeGetTaxOverseas(userName, pageable);
        LOGGER.debug("got the result for named query: getTaxOverseas, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTaxOverseas")
    @RequestMapping(value = "/queries/getTaxOverseas/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetTaxOverseas(@RequestParam(value = "userName") String userName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTaxOverseas");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTaxOverseas";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTaxOverseas(userName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdatePic", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data PIC")
    public IntegerWrapper executeQUpdatePic(@Valid @RequestBody QupdatePicRequest qupdatePicRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdatePic");
        Integer _result = queryService.executeQUpdatePic(qupdatePicRequest);
        LOGGER.debug("got the result for named query: qUpdatePic, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qRfusUpdateBank", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "set ab_rfus to 202 when bank update")
    public IntegerWrapper executeQRfusUpdateBank(@Valid @RequestBody QrfusUpdateBankRequest qrfusUpdateBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qRfusUpdateBank");
        Integer _result = queryService.executeQRfusUpdateBank(qrfusUpdateBankRequest);
        LOGGER.debug("got the result for named query: qRfusUpdateBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getIvendorDataOverseas", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data vendor overseas znto")
    public Page<GetIvendorDataOverseasResponse> executeGetIvendorDataOverseas(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getIvendorDataOverseas");
        Page<GetIvendorDataOverseasResponse> _result = queryService.executeGetIvendorDataOverseas(pageable);
        LOGGER.debug("got the result for named query: getIvendorDataOverseas, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getIvendorDataOverseas")
    @RequestMapping(value = "/queries/getIvendorDataOverseas/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetIvendorDataOverseas(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getIvendorDataOverseas");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getIvendorDataOverseas";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetIvendorDataOverseas( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qGetRegion", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data region / provinsi")
    public Page<QgetRegionResponse> executeQGetRegion(@RequestParam(value = "country") String country, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetRegion");
        Page<QgetRegionResponse> _result = queryService.executeQGetRegion(country, pageable);
        LOGGER.debug("got the result for named query: qGetRegion, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetRegion")
    @RequestMapping(value = "/queries/qGetRegion/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetRegion(@RequestParam(value = "country") String country, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetRegion");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetRegion";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetRegion(country,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdateTaxKonfOverseeas", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data tax overseas")
    public IntegerWrapper executeQUpdateTaxKonfOverseeas(@Valid @RequestBody QupdateTaxKonfOverseeasRequest qupdateTaxKonfOverseeasRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateTaxKonfOverseeas");
        Integer _result = queryService.executeQUpdateTaxKonfOverseeas(qupdateTaxKonfOverseeasRequest);
        LOGGER.debug("got the result for named query: qUpdateTaxKonfOverseeas, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetVVendor", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qGetVVendor")
    public Page<QgetVvendorResponse> executeQGetVVendor(@RequestParam(value = "VCode", required = false) String vcode, @RequestParam(value = "VName", required = false) String vname, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetVVendor");
        Page<QgetVvendorResponse> _result = queryService.executeQGetVVendor(vcode, vname, pageable);
        LOGGER.debug("got the result for named query: qGetVVendor, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetVVendor")
    @RequestMapping(value = "/queries/qGetVVendor/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetVVendor(@RequestParam(value = "VCode", required = false) String vcode, @RequestParam(value = "VName", required = false) String vname, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetVVendor");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetVVendor";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetVVendor(vcode, vname,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qGetBankNameByCountry", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all bank name by country code")
    public Page<QgetBankNameByCountryResponse> executeQGetBankNameByCountry(@RequestParam(value = "countryCode") String countryCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetBankNameByCountry");
        Page<QgetBankNameByCountryResponse> _result = queryService.executeQGetBankNameByCountry(countryCode, pageable);
        LOGGER.debug("got the result for named query: qGetBankNameByCountry, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetBankNameByCountry")
    @RequestMapping(value = "/queries/qGetBankNameByCountry/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetBankNameByCountry(@RequestParam(value = "countryCode") String countryCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetBankNameByCountry");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetBankNameByCountry";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetBankNameByCountry(countryCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/svUpdateUserTax", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update username from table tl_ms_ta")
    public IntegerWrapper executeSvUpdateUserTax(@Valid @RequestBody SvUpdateUserTaxRequest svUpdateUserTaxRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: svUpdateUserTax");
        Integer _result = queryService.executeSvUpdateUserTax(svUpdateUserTaxRequest);
        LOGGER.debug("got the result for named query: svUpdateUserTax, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateUserPIC", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update username on tl_ms_em")
    public IntegerWrapper executeQUpdateUserPIC(@Valid @RequestBody QupdateUserPicRequest qupdateUserPicRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateUserPIC");
        Integer _result = queryService.executeQUpdateUserPIC(qupdateUserPicRequest);
        LOGGER.debug("got the result for named query: qUpdateUserPIC, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetDocBank", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get bank document from tl_tr_door")
    public Page<QgetDocBankResponse> executeQGetDocBank(@RequestParam(value = "vendorCode") String vendorCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetDocBank");
        Page<QgetDocBankResponse> _result = queryService.executeQGetDocBank(vendorCode, pageable);
        LOGGER.debug("got the result for named query: qGetDocBank, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetDocBank")
    @RequestMapping(value = "/queries/qGetDocBank/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetDocBank(@RequestParam(value = "vendorCode") String vendorCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetDocBank");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetDocBank";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetDocBank(vendorCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertPIC", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data into table tl_ms_em")
    public IntegerWrapper executeQInsertPIC(@Valid @RequestBody QinsertPicRequest qinsertPicRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertPIC");
        Integer _result = queryService.executeQInsertPIC(qinsertPicRequest);
        LOGGER.debug("got the result for named query: qInsertPIC, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateDataBank", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data bank into tl_ms_acnk_temp")
    public IntegerWrapper executeQUpdateDataBank(@Valid @RequestBody QupdateDataBankRequest qupdateDataBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateDataBank");
        Integer _result = queryService.executeQUpdateDataBank(qupdateDataBankRequest);
        LOGGER.debug("got the result for named query: qUpdateDataBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getVendorDataForgotUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "select all data vendor forgot user by npwp and ktp")
    public Page<GetVendorDataForgotUserResponse> executeGetVendorDataForgotUser(@RequestParam(value = "npwpNumber", required = false) String npwpNumber, @RequestParam(value = "idDirector", required = false) String idDirector, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getVendorDataForgotUser");
        Page<GetVendorDataForgotUserResponse> _result = queryService.executeGetVendorDataForgotUser(npwpNumber, idDirector, pageable);
        LOGGER.debug("got the result for named query: getVendorDataForgotUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getVendorDataForgotUser")
    @RequestMapping(value = "/queries/getVendorDataForgotUser/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetVendorDataForgotUser(@RequestParam(value = "npwpNumber", required = false) String npwpNumber, @RequestParam(value = "idDirector", required = false) String idDirector, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getVendorDataForgotUser");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getVendorDataForgotUser";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetVendorDataForgotUser(npwpNumber, idDirector,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertDocBank", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert  support document bank to tl_tr_door")
    public IntegerWrapper executeQInsertDocBank(@Valid @RequestBody QinsertDocBankRequest qinsertDocBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertDocBank");
        Integer _result = queryService.executeQInsertDocBank(qinsertDocBankRequest);
        LOGGER.debug("got the result for named query: qInsertDocBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/updateIVendorData", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update table view iVendor data by VendorCode")
    public IntegerWrapper executeUpdateIVendorData(@Valid @RequestBody UpdateIvendorDataRequest updateIvendorDataRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateIVendorData");
        Integer _result = queryService.executeUpdateIVendorData(updateIvendorDataRequest);
        LOGGER.debug("got the result for named query: updateIVendorData, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getPic", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data tl_ms_em by ab_coorsa")
    public Page<GetPicResponse> executeGetPic(@RequestParam(value = "userName") String userName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPic");
        Page<GetPicResponse> _result = queryService.executeGetPic(userName, pageable);
        LOGGER.debug("got the result for named query: getPic, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPic")
    @RequestMapping(value = "/queries/getPic/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetPic(@RequestParam(value = "userName") String userName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPic");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPic";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPic(userName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdateDocBank", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data doc bank")
    public IntegerWrapper executeQUpdateDocBank(@Valid @RequestBody QupdateDocBankRequest qupdateDocBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateDocBank");
        Integer _result = queryService.executeQUpdateDocBank(qupdateDocBankRequest);
        LOGGER.debug("got the result for named query: qUpdateDocBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdatePassword", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update password vendor")
    public IntegerWrapper executeQUpdatePassword(@Valid @RequestBody QupdatePasswordRequest qupdatePasswordRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdatePassword");
        Integer _result = queryService.executeQUpdatePassword(qupdatePasswordRequest);
        LOGGER.debug("got the result for named query: qUpdatePassword, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateVendor", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data vendor")
    public IntegerWrapper executeQUpdateVendor(@Valid @RequestBody QupdateVendorRequest qupdateVendorRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateVendor");
        Integer _result = queryService.executeQUpdateVendor(qupdateVendorRequest);
        LOGGER.debug("got the result for named query: qUpdateVendor, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qForgotPassVen", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qForgotPassVen")
    public IntegerWrapper executeQForgotPassVen(@Valid @RequestBody QforgotPassVenRequest qforgotPassVenRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qForgotPassVen");
        Integer _result = queryService.executeQForgotPassVen(qforgotPassVenRequest);
        LOGGER.debug("got the result for named query: qForgotPassVen, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qInsertHistory", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data into tl_hr")
    public IntegerWrapper executeQInsertHistory(@Valid @RequestBody QinsertHistoryRequest qinsertHistoryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertHistory");
        Integer _result = queryService.executeQInsertHistory(qinsertHistoryRequest);
        LOGGER.debug("got the result for named query: qInsertHistory, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateSupDoc", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update data support document")
    public IntegerWrapper executeQUpdateSupDoc(@Valid @RequestBody QupdateSupDocRequest qupdateSupDocRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateSupDoc");
        Integer _result = queryService.executeQUpdateSupDoc(qupdateSupDocRequest);
        LOGGER.debug("got the result for named query: qUpdateSupDoc, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getEmailList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data from tl_ms_notif_email by location")
    public Page<GetEmailListResponse> executeGetEmailList(@RequestParam(value = "puon") String puon, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getEmailList");
        Page<GetEmailListResponse> _result = queryService.executeGetEmailList(puon, pageable);
        LOGGER.debug("got the result for named query: getEmailList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getEmailList")
    @RequestMapping(value = "/queries/getEmailList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetEmailList(@RequestParam(value = "puon") String puon, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getEmailList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getEmailList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetEmailList(puon,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/GRTrackingVendorInfo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GRTrackingVendorInfo")
    public Page<GrtrackingVendorInfoResponse> executeGRTrackingVendorInfo(@RequestParam(value = "vendorcode") String vendorcode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: GRTrackingVendorInfo");
        Page<GrtrackingVendorInfoResponse> _result = queryService.executeGRTrackingVendorInfo(vendorcode, pageable);
        LOGGER.debug("got the result for named query: GRTrackingVendorInfo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query GRTrackingVendorInfo")
    @RequestMapping(value = "/queries/GRTrackingVendorInfo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGRTrackingVendorInfo(@RequestParam(value = "vendorcode") String vendorcode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: GRTrackingVendorInfo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "GRTrackingVendorInfo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGRTrackingVendorInfo(vendorcode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertTaxOverseas", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert data tax overseas to tl_ms_ta")
    public IntegerWrapper executeQInsertTaxOverseas(@Valid @RequestBody QinsertTaxOverseasRequest qinsertTaxOverseasRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertTaxOverseas");
        Integer _result = queryService.executeQInsertTaxOverseas(qinsertTaxOverseasRequest);
        LOGGER.debug("got the result for named query: qInsertTaxOverseas, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetCurrencyData", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data currency")
    public Page<QgetCurrencyDataResponse> executeQGetCurrencyData(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetCurrencyData");
        Page<QgetCurrencyDataResponse> _result = queryService.executeQGetCurrencyData(pageable);
        LOGGER.debug("got the result for named query: qGetCurrencyData, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetCurrencyData")
    @RequestMapping(value = "/queries/qGetCurrencyData/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetCurrencyData(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetCurrencyData");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetCurrencyData";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetCurrencyData( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qInsertSppkp", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert file sppkp")
    public IntegerWrapper executeQInsertSppkp(@Valid @RequestBody QinsertSppkpRequest qinsertSppkpRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qInsertSppkp");
        Integer _result = queryService.executeQInsertSppkp(qinsertSppkpRequest);
        LOGGER.debug("got the result for named query: qInsertSppkp, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/updateVendorData", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Edit Vendor Data")
    public IntegerWrapper executeUpdateVendorData(@Valid @RequestBody UpdateVendorDataRequest updateVendorDataRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateVendorData");
        Integer _result = queryService.executeUpdateVendorData(updateVendorDataRequest);
        LOGGER.debug("got the result for named query: updateVendorData, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetBankNameByBankey", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get bank name by bankKey and countryKey")
    public Page<QgetBankNameByBankeyResponse> executeQGetBankNameByBankey(@RequestParam(value = "countryCode") String countryCode, @RequestParam(value = "bankCode") String bankCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetBankNameByBankey");
        Page<QgetBankNameByBankeyResponse> _result = queryService.executeQGetBankNameByBankey(countryCode, bankCode, pageable);
        LOGGER.debug("got the result for named query: qGetBankNameByBankey, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetBankNameByBankey")
    @RequestMapping(value = "/queries/qGetBankNameByBankey/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetBankNameByBankey(@RequestParam(value = "countryCode") String countryCode, @RequestParam(value = "bankCode") String bankCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetBankNameByBankey");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetBankNameByBankey";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetBankNameByBankey(countryCode, bankCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdateBank", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update table data bank")
    public IntegerWrapper executeQUpdateBank(@Valid @RequestBody QupdateBankRequest qupdateBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateBank");
        Integer _result = queryService.executeQUpdateBank(qupdateBankRequest);
        LOGGER.debug("got the result for named query: qUpdateBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qGetCountyData", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get country data")
    public Page<QgetCountyDataResponse> executeQGetCountyData(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetCountyData");
        Page<QgetCountyDataResponse> _result = queryService.executeQGetCountyData(pageable);
        LOGGER.debug("got the result for named query: qGetCountyData, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetCountyData")
    @RequestMapping(value = "/queries/qGetCountyData/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetCountyData(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetCountyData");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetCountyData";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetCountyData( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qUpdateUserBank", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update username from table tl_ms_acnk")
    public IntegerWrapper executeQUpdateUserBank(@Valid @RequestBody QupdateUserBankRequest qupdateUserBankRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateUserBank");
        Integer _result = queryService.executeQUpdateUserBank(qupdateUserBankRequest);
        LOGGER.debug("got the result for named query: qUpdateUserBank, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qUpdateCertiDom", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update certidom file")
    public IntegerWrapper executeQUpdateCertiDom(@Valid @RequestBody QupdateCertiDomRequest qupdateCertiDomRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qUpdateCertiDom");
        Integer _result = queryService.executeQUpdateCertiDom(qupdateCertiDomRequest);
        LOGGER.debug("got the result for named query: qUpdateCertiDom, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getSupDoc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data from table support document")
    public Page<GetSupDocResponse> executeGetSupDoc(@RequestParam(value = "idVendor") String idVendor, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getSupDoc");
        Page<GetSupDocResponse> _result = queryService.executeGetSupDoc(idVendor, pageable);
        LOGGER.debug("got the result for named query: getSupDoc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getSupDoc")
    @RequestMapping(value = "/queries/getSupDoc/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetSupDoc(@RequestParam(value = "idVendor") String idVendor, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getSupDoc");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getSupDoc";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetSupDoc(idVendor,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getIvendorData", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data from table tl_ms_ve")
    public Page<GetIvendorDataResponse> executeGetIvendorData(@RequestParam(value = "email") String email, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getIvendorData");
        Page<GetIvendorDataResponse> _result = queryService.executeGetIvendorData(email, pageable);
        LOGGER.debug("got the result for named query: getIvendorData, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getIvendorData")
    @RequestMapping(value = "/queries/getIvendorData/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetIvendorData(@RequestParam(value = "email") String email, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getIvendorData");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getIvendorData";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetIvendorData(email,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qDeleteBankKonf", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Delete select row from tabel bank konf")
    public IntegerWrapper executeQDeleteBankKonf(@RequestParam(value = "id") String id, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qDeleteBankKonf");
        Integer _result = queryService.executeQDeleteBankKonf(id);
        LOGGER.debug("got the result for named query: qDeleteBankKonf, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getTax", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get tax data from v_dataTaxLocal by id vendor")
    public Page<GetTaxResponse> executeGetTax(@RequestParam(value = "userName") String userName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTax");
        Page<GetTaxResponse> _result = queryService.executeGetTax(userName, pageable);
        LOGGER.debug("got the result for named query: getTax, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTax")
    @RequestMapping(value = "/queries/getTax/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetTax(@RequestParam(value = "userName") String userName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTax");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTax";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTax(userName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/GetDataVendorByCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetDataVendorbyCode")
    public Page<GetDataVendorByCodeResponse> executeGetDataVendorByCode(@RequestParam(value = "vendor_code") String vendorCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: GetDataVendorByCode");
        Page<GetDataVendorByCodeResponse> _result = queryService.executeGetDataVendorByCode(vendorCode, pageable);
        LOGGER.debug("got the result for named query: GetDataVendorByCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query GetDataVendorByCode")
    @RequestMapping(value = "/queries/GetDataVendorByCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetDataVendorByCode(@RequestParam(value = "vendor_code") String vendorCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetDataVendorByCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "GetDataVendorByCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDataVendorByCode(vendorCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qGetRegIndo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all data region indonesia")
    public Page<QgetRegIndoResponse> executeQGetRegIndo(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qGetRegIndo");
        Page<QgetRegIndoResponse> _result = queryService.executeQGetRegIndo(pageable);
        LOGGER.debug("got the result for named query: qGetRegIndo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qGetRegIndo")
    @RequestMapping(value = "/queries/qGetRegIndo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQGetRegIndo(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qGetRegIndo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qGetRegIndo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQGetRegIndo( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}