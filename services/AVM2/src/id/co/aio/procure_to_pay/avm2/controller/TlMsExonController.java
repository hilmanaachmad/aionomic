/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsExon;
import id.co.aio.procure_to_pay.avm2.service.TlMsExonService;


/**
 * Controller object for domain model class TlMsExon.
 * @see TlMsExon
 */
@RestController("AVM2.TlMsExonController")
@Api(value = "TlMsExonController", description = "Exposes APIs to work with TlMsExon resource.")
@RequestMapping("/AVM2/TlMsExon")
public class TlMsExonController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsExonController.class);

    @Autowired
	@Qualifier("AVM2.TlMsExonService")
	private TlMsExonService tlMsExonService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsExon instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsExon createTlMsExon(@RequestBody TlMsExon tlMsExon) {
		LOGGER.debug("Create TlMsExon with information: {}" , tlMsExon);

		tlMsExon = tlMsExonService.create(tlMsExon);
		LOGGER.debug("Created TlMsExon with information: {}" , tlMsExon);

	    return tlMsExon;
	}

    @ApiOperation(value = "Returns the TlMsExon instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsExon getTlMsExon(@PathVariable("tlId") Integer tlId) {
        LOGGER.debug("Getting TlMsExon with id: {}" , tlId);

        TlMsExon foundTlMsExon = tlMsExonService.getById(tlId);
        LOGGER.debug("TlMsExon details with id: {}" , foundTlMsExon);

        return foundTlMsExon;
    }

    @ApiOperation(value = "Updates the TlMsExon instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsExon editTlMsExon(@PathVariable("tlId") Integer tlId, @RequestBody TlMsExon tlMsExon) {
        LOGGER.debug("Editing TlMsExon with id: {}" , tlMsExon.getTlId());

        tlMsExon.setTlId(tlId);
        tlMsExon = tlMsExonService.update(tlMsExon);
        LOGGER.debug("TlMsExon details with id: {}" , tlMsExon);

        return tlMsExon;
    }
    
    @ApiOperation(value = "Partially updates the TlMsExon instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsExon patchTlMsExon(@PathVariable("tlId") Integer tlId, @RequestBody @MapTo(TlMsExon.class) Map<String, Object> tlMsExonPatch) {
        LOGGER.debug("Partially updating TlMsExon with id: {}" , tlId);

        TlMsExon tlMsExon = tlMsExonService.partialUpdate(tlId, tlMsExonPatch);
        LOGGER.debug("TlMsExon details after partial update: {}" , tlMsExon);

        return tlMsExon;
    }

    @ApiOperation(value = "Deletes the TlMsExon instance associated with the given id.")
    @RequestMapping(value = "/{tlId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsExon(@PathVariable("tlId") Integer tlId) {
        LOGGER.debug("Deleting TlMsExon with id: {}" , tlId);

        TlMsExon deletedTlMsExon = tlMsExonService.delete(tlId);

        return deletedTlMsExon != null;
    }

    /**
     * @deprecated Use {@link #findTlMsExons(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsExon instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsExon> searchTlMsExonsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsExons list by query filter:{}", (Object) queryFilters);
        return tlMsExonService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsExon instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsExon> findTlMsExons(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsExons list by filter:", query);
        return tlMsExonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsExon instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsExon> filterTlMsExons(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsExons list by filter", query);
        return tlMsExonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsExons(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsExonService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsExonsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsExon.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsExonService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsExon instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsExons( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsExons");
		return tlMsExonService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsExonAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsExonService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsExonService instance
	 */
	protected void setTlMsExonService(TlMsExonService service) {
		this.tlMsExonService = service;
	}

}