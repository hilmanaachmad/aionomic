/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VVendor;


/**
 * ServiceImpl object for domain model class VVendor.
 *
 * @see VVendor
 */
@Service("AVM2.VVendorService")
@Validated
@EntityService(entityClass = VVendor.class, serviceId = "AVM2")
public class VVendorServiceImpl implements VVendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VVendorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VVendorDao")
    private WMGenericDao<VVendor, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VVendor, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VVendor create(VVendor vvendor) {
        LOGGER.debug("Creating a new VVendor with information: {}", vvendor);

        VVendor vvendorCreated = this.wmGenericDao.create(vvendor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vvendorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VVendor getById(String vvendorId) {
        LOGGER.debug("Finding VVendor by id: {}", vvendorId);
        return this.wmGenericDao.findById(vvendorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VVendor findById(String vvendorId) {
        LOGGER.debug("Finding VVendor by id: {}", vvendorId);
        try {
            return this.wmGenericDao.findById(vvendorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VVendor found with id: {}", vvendorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VVendor> findByMultipleIds(List<String> vvendorIds, boolean orderedReturn) {
        LOGGER.debug("Finding VVendors by ids: {}", vvendorIds);

        return this.wmGenericDao.findByMultipleIds(vvendorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VVendor update(VVendor vvendor) {
        LOGGER.debug("Updating VVendor with information: {}", vvendor);

        this.wmGenericDao.update(vvendor);
        this.wmGenericDao.refresh(vvendor);

        return vvendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VVendor partialUpdate(String vvendorId, Map<String, Object>vvendorPatch) {
        LOGGER.debug("Partially Updating the VVendor with id: {}", vvendorId);

        VVendor vvendor = getById(vvendorId);

        try {
            ObjectReader vvendorReader = this.objectMapper.reader().forType(VVendor.class).withValueToUpdate(vvendor);
            vvendor = vvendorReader.readValue(this.objectMapper.writeValueAsString(vvendorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vvendorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vvendor = update(vvendor);

        return vvendor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VVendor delete(String vvendorId) {
        LOGGER.debug("Deleting VVendor with id: {}", vvendorId);
        VVendor deleted = this.wmGenericDao.findById(vvendorId);
        if (deleted == null) {
            LOGGER.debug("No VVendor found with id: {}", vvendorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VVendor.class.getSimpleName(), vvendorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VVendor vvendor) {
        LOGGER.debug("Deleting VVendor with {}", vvendor);
        this.wmGenericDao.delete(vvendor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VVendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VVendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VVendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VVendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VVendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VVendor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}