/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VwGratifikasi;
import id.co.aio.procure_to_pay.avm2.service.VwGratifikasiService;


/**
 * Controller object for domain model class VwGratifikasi.
 * @see VwGratifikasi
 */
@RestController("AVM2.VwGratifikasiController")
@Api(value = "VwGratifikasiController", description = "Exposes APIs to work with VwGratifikasi resource.")
@RequestMapping("/AVM2/VwGratifikasi")
public class VwGratifikasiController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwGratifikasiController.class);

    @Autowired
	@Qualifier("AVM2.VwGratifikasiService")
	private VwGratifikasiService vwGratifikasiService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VwGratifikasi instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwGratifikasi createVwGratifikasi(@RequestBody VwGratifikasi vwGratifikasi) {
		LOGGER.debug("Create VwGratifikasi with information: {}" , vwGratifikasi);

		vwGratifikasi = vwGratifikasiService.create(vwGratifikasi);
		LOGGER.debug("Created VwGratifikasi with information: {}" , vwGratifikasi);

	    return vwGratifikasi;
	}

    @ApiOperation(value = "Returns the VwGratifikasi instance associated with the given id.")
    @RequestMapping(value = "/{kodeSap:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwGratifikasi getVwGratifikasi(@PathVariable("kodeSap") String kodeSap) {
        LOGGER.debug("Getting VwGratifikasi with id: {}" , kodeSap);

        VwGratifikasi foundVwGratifikasi = vwGratifikasiService.getById(kodeSap);
        LOGGER.debug("VwGratifikasi details with id: {}" , foundVwGratifikasi);

        return foundVwGratifikasi;
    }

    @ApiOperation(value = "Updates the VwGratifikasi instance associated with the given id.")
    @RequestMapping(value = "/{kodeSap:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwGratifikasi editVwGratifikasi(@PathVariable("kodeSap") String kodeSap, @RequestBody VwGratifikasi vwGratifikasi) {
        LOGGER.debug("Editing VwGratifikasi with id: {}" , vwGratifikasi.getKodeSap());

        vwGratifikasi.setKodeSap(kodeSap);
        vwGratifikasi = vwGratifikasiService.update(vwGratifikasi);
        LOGGER.debug("VwGratifikasi details with id: {}" , vwGratifikasi);

        return vwGratifikasi;
    }
    
    @ApiOperation(value = "Partially updates the VwGratifikasi instance associated with the given id.")
    @RequestMapping(value = "/{kodeSap:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwGratifikasi patchVwGratifikasi(@PathVariable("kodeSap") String kodeSap, @RequestBody @MapTo(VwGratifikasi.class) Map<String, Object> vwGratifikasiPatch) {
        LOGGER.debug("Partially updating VwGratifikasi with id: {}" , kodeSap);

        VwGratifikasi vwGratifikasi = vwGratifikasiService.partialUpdate(kodeSap, vwGratifikasiPatch);
        LOGGER.debug("VwGratifikasi details after partial update: {}" , vwGratifikasi);

        return vwGratifikasi;
    }

    @ApiOperation(value = "Deletes the VwGratifikasi instance associated with the given id.")
    @RequestMapping(value = "/{kodeSap:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVwGratifikasi(@PathVariable("kodeSap") String kodeSap) {
        LOGGER.debug("Deleting VwGratifikasi with id: {}" , kodeSap);

        VwGratifikasi deletedVwGratifikasi = vwGratifikasiService.delete(kodeSap);

        return deletedVwGratifikasi != null;
    }

    /**
     * @deprecated Use {@link #findVwGratifikasis(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VwGratifikasi instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwGratifikasi> searchVwGratifikasisByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VwGratifikasis list by query filter:{}", (Object) queryFilters);
        return vwGratifikasiService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwGratifikasi instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwGratifikasi> findVwGratifikasis(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwGratifikasis list by filter:", query);
        return vwGratifikasiService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwGratifikasi instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwGratifikasi> filterVwGratifikasis(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwGratifikasis list by filter", query);
        return vwGratifikasiService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVwGratifikasis(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vwGratifikasiService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVwGratifikasisAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VwGratifikasi.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vwGratifikasiService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VwGratifikasi instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVwGratifikasis( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VwGratifikasis");
		return vwGratifikasiService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVwGratifikasiAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vwGratifikasiService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VwGratifikasiService instance
	 */
	protected void setVwGratifikasiService(VwGratifikasiService service) {
		this.vwGratifikasiService = service;
	}

}