/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlHrAg;
import id.co.aio.procure_to_pay.avm2.service.TlHrAgService;


/**
 * Controller object for domain model class TlHrAg.
 * @see TlHrAg
 */
@RestController("AVM2.TlHrAgController")
@Api(value = "TlHrAgController", description = "Exposes APIs to work with TlHrAg resource.")
@RequestMapping("/AVM2/TlHrAg")
public class TlHrAgController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlHrAgController.class);

    @Autowired
	@Qualifier("AVM2.TlHrAgService")
	private TlHrAgService tlHrAgService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlHrAg instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHrAg createTlHrAg(@RequestBody TlHrAg tlHrAg) {
		LOGGER.debug("Create TlHrAg with information: {}" , tlHrAg);

		tlHrAg = tlHrAgService.create(tlHrAg);
		LOGGER.debug("Created TlHrAg with information: {}" , tlHrAg);

	    return tlHrAg;
	}

    @ApiOperation(value = "Returns the TlHrAg instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHrAg getTlHrAg(@PathVariable("abIdry") Integer abIdry) {
        LOGGER.debug("Getting TlHrAg with id: {}" , abIdry);

        TlHrAg foundTlHrAg = tlHrAgService.getById(abIdry);
        LOGGER.debug("TlHrAg details with id: {}" , foundTlHrAg);

        return foundTlHrAg;
    }

    @ApiOperation(value = "Updates the TlHrAg instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHrAg editTlHrAg(@PathVariable("abIdry") Integer abIdry, @RequestBody TlHrAg tlHrAg) {
        LOGGER.debug("Editing TlHrAg with id: {}" , tlHrAg.getAbIdry());

        tlHrAg.setAbIdry(abIdry);
        tlHrAg = tlHrAgService.update(tlHrAg);
        LOGGER.debug("TlHrAg details with id: {}" , tlHrAg);

        return tlHrAg;
    }
    
    @ApiOperation(value = "Partially updates the TlHrAg instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlHrAg patchTlHrAg(@PathVariable("abIdry") Integer abIdry, @RequestBody @MapTo(TlHrAg.class) Map<String, Object> tlHrAgPatch) {
        LOGGER.debug("Partially updating TlHrAg with id: {}" , abIdry);

        TlHrAg tlHrAg = tlHrAgService.partialUpdate(abIdry, tlHrAgPatch);
        LOGGER.debug("TlHrAg details after partial update: {}" , tlHrAg);

        return tlHrAg;
    }

    @ApiOperation(value = "Deletes the TlHrAg instance associated with the given id.")
    @RequestMapping(value = "/{abIdry:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlHrAg(@PathVariable("abIdry") Integer abIdry) {
        LOGGER.debug("Deleting TlHrAg with id: {}" , abIdry);

        TlHrAg deletedTlHrAg = tlHrAgService.delete(abIdry);

        return deletedTlHrAg != null;
    }

    /**
     * @deprecated Use {@link #findTlHrAgs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlHrAg instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlHrAg> searchTlHrAgsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlHrAgs list by query filter:{}", (Object) queryFilters);
        return tlHrAgService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlHrAg instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlHrAg> findTlHrAgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlHrAgs list by filter:", query);
        return tlHrAgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlHrAg instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlHrAg> filterTlHrAgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlHrAgs list by filter", query);
        return tlHrAgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlHrAgs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlHrAgService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlHrAgsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlHrAg.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlHrAgService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlHrAg instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlHrAgs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlHrAgs");
		return tlHrAgService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlHrAgAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlHrAgService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlHrAgService instance
	 */
	protected void setTlHrAgService(TlHrAgService service) {
		this.tlHrAgService = service;
	}

}