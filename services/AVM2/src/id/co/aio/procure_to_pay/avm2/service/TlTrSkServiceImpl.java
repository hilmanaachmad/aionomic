/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrSk;


/**
 * ServiceImpl object for domain model class TlTrSk.
 *
 * @see TlTrSk
 */
@Service("AVM2.TlTrSkService")
@Validated
@EntityService(entityClass = TlTrSk.class, serviceId = "AVM2")
public class TlTrSkServiceImpl implements TlTrSkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrSkServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrSkDao")
    private WMGenericDao<TlTrSk, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrSk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrSk create(TlTrSk tlTrSk) {
        LOGGER.debug("Creating a new TlTrSk with information: {}", tlTrSk);

        TlTrSk tlTrSkCreated = this.wmGenericDao.create(tlTrSk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrSkCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrSk getById(Integer tltrskId) {
        LOGGER.debug("Finding TlTrSk by id: {}", tltrskId);
        return this.wmGenericDao.findById(tltrskId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrSk findById(Integer tltrskId) {
        LOGGER.debug("Finding TlTrSk by id: {}", tltrskId);
        try {
            return this.wmGenericDao.findById(tltrskId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrSk found with id: {}", tltrskId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrSk> findByMultipleIds(List<Integer> tltrskIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrSks by ids: {}", tltrskIds);

        return this.wmGenericDao.findByMultipleIds(tltrskIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrSk update(TlTrSk tlTrSk) {
        LOGGER.debug("Updating TlTrSk with information: {}", tlTrSk);

        this.wmGenericDao.update(tlTrSk);
        this.wmGenericDao.refresh(tlTrSk);

        return tlTrSk;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrSk partialUpdate(Integer tltrskId, Map<String, Object>tlTrSkPatch) {
        LOGGER.debug("Partially Updating the TlTrSk with id: {}", tltrskId);

        TlTrSk tlTrSk = getById(tltrskId);

        try {
            ObjectReader tlTrSkReader = this.objectMapper.reader().forType(TlTrSk.class).withValueToUpdate(tlTrSk);
            tlTrSk = tlTrSkReader.readValue(this.objectMapper.writeValueAsString(tlTrSkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrSkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrSk = update(tlTrSk);

        return tlTrSk;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrSk delete(Integer tltrskId) {
        LOGGER.debug("Deleting TlTrSk with id: {}", tltrskId);
        TlTrSk deleted = this.wmGenericDao.findById(tltrskId);
        if (deleted == null) {
            LOGGER.debug("No TlTrSk found with id: {}", tltrskId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrSk.class.getSimpleName(), tltrskId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrSk tlTrSk) {
        LOGGER.debug("Deleting TlTrSk with {}", tlTrSk);
        this.wmGenericDao.delete(tlTrSk);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrSk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrSks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrSk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrSks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrSk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrSk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}