/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAcnkTemp;


/**
 * ServiceImpl object for domain model class TlMsAcnkTemp.
 *
 * @see TlMsAcnkTemp
 */
@Service("AVM2.TlMsAcnkTempService")
@Validated
@EntityService(entityClass = TlMsAcnkTemp.class, serviceId = "AVM2")
public class TlMsAcnkTempServiceImpl implements TlMsAcnkTempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsAcnkTempServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsAcnkTempDao")
    private WMGenericDao<TlMsAcnkTemp, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsAcnkTemp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkTemp create(TlMsAcnkTemp tlMsAcnkTemp) {
        LOGGER.debug("Creating a new TlMsAcnkTemp with information: {}", tlMsAcnkTemp);

        TlMsAcnkTemp tlMsAcnkTempCreated = this.wmGenericDao.create(tlMsAcnkTemp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsAcnkTempCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkTemp getById(Integer tlmsacnktempId) {
        LOGGER.debug("Finding TlMsAcnkTemp by id: {}", tlmsacnktempId);
        return this.wmGenericDao.findById(tlmsacnktempId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkTemp findById(Integer tlmsacnktempId) {
        LOGGER.debug("Finding TlMsAcnkTemp by id: {}", tlmsacnktempId);
        try {
            return this.wmGenericDao.findById(tlmsacnktempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsAcnkTemp found with id: {}", tlmsacnktempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsAcnkTemp> findByMultipleIds(List<Integer> tlmsacnktempIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsAcnkTemps by ids: {}", tlmsacnktempIds);

        return this.wmGenericDao.findByMultipleIds(tlmsacnktempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkTemp update(TlMsAcnkTemp tlMsAcnkTemp) {
        LOGGER.debug("Updating TlMsAcnkTemp with information: {}", tlMsAcnkTemp);

        this.wmGenericDao.update(tlMsAcnkTemp);
        this.wmGenericDao.refresh(tlMsAcnkTemp);

        return tlMsAcnkTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkTemp partialUpdate(Integer tlmsacnktempId, Map<String, Object>tlMsAcnkTempPatch) {
        LOGGER.debug("Partially Updating the TlMsAcnkTemp with id: {}", tlmsacnktempId);

        TlMsAcnkTemp tlMsAcnkTemp = getById(tlmsacnktempId);

        try {
            ObjectReader tlMsAcnkTempReader = this.objectMapper.reader().forType(TlMsAcnkTemp.class).withValueToUpdate(tlMsAcnkTemp);
            tlMsAcnkTemp = tlMsAcnkTempReader.readValue(this.objectMapper.writeValueAsString(tlMsAcnkTempPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsAcnkTempPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsAcnkTemp = update(tlMsAcnkTemp);

        return tlMsAcnkTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsAcnkTemp delete(Integer tlmsacnktempId) {
        LOGGER.debug("Deleting TlMsAcnkTemp with id: {}", tlmsacnktempId);
        TlMsAcnkTemp deleted = this.wmGenericDao.findById(tlmsacnktempId);
        if (deleted == null) {
            LOGGER.debug("No TlMsAcnkTemp found with id: {}", tlmsacnktempId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsAcnkTemp.class.getSimpleName(), tlmsacnktempId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsAcnkTemp tlMsAcnkTemp) {
        LOGGER.debug("Deleting TlMsAcnkTemp with {}", tlMsAcnkTemp);
        this.wmGenericDao.delete(tlMsAcnkTemp);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAcnkTemp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAcnkTemps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsAcnkTemp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsAcnkTemps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAcnkTemp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsAcnkTemp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}