/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VSupDoc;
import id.co.aio.procure_to_pay.avm2.service.VSupDocService;


/**
 * Controller object for domain model class VSupDoc.
 * @see VSupDoc
 */
@RestController("AVM2.VSupDocController")
@Api(value = "VSupDocController", description = "Exposes APIs to work with VSupDoc resource.")
@RequestMapping("/AVM2/VSupDoc")
public class VSupDocController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VSupDocController.class);

    @Autowired
	@Qualifier("AVM2.VSupDocService")
	private VSupDocService vSupDocService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VSupDoc instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VSupDoc createVSupDoc(@RequestBody VSupDoc vsupDoc) {
		LOGGER.debug("Create VSupDoc with information: {}" , vsupDoc);

		vsupDoc = vSupDocService.create(vsupDoc);
		LOGGER.debug("Created VSupDoc with information: {}" , vsupDoc);

	    return vsupDoc;
	}

    @ApiOperation(value = "Returns the VSupDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VSupDoc getVSupDoc(@PathVariable("abIdnt") Integer abIdnt) {
        LOGGER.debug("Getting VSupDoc with id: {}" , abIdnt);

        VSupDoc foundVSupDoc = vSupDocService.getById(abIdnt);
        LOGGER.debug("VSupDoc details with id: {}" , foundVSupDoc);

        return foundVSupDoc;
    }

    @ApiOperation(value = "Updates the VSupDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VSupDoc editVSupDoc(@PathVariable("abIdnt") Integer abIdnt, @RequestBody VSupDoc vsupDoc) {
        LOGGER.debug("Editing VSupDoc with id: {}" , vsupDoc.getAbIdnt());

        vsupDoc.setAbIdnt(abIdnt);
        vsupDoc = vSupDocService.update(vsupDoc);
        LOGGER.debug("VSupDoc details with id: {}" , vsupDoc);

        return vsupDoc;
    }
    
    @ApiOperation(value = "Partially updates the VSupDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VSupDoc patchVSupDoc(@PathVariable("abIdnt") Integer abIdnt, @RequestBody @MapTo(VSupDoc.class) Map<String, Object> vsupDocPatch) {
        LOGGER.debug("Partially updating VSupDoc with id: {}" , abIdnt);

        VSupDoc vsupDoc = vSupDocService.partialUpdate(abIdnt, vsupDocPatch);
        LOGGER.debug("VSupDoc details after partial update: {}" , vsupDoc);

        return vsupDoc;
    }

    @ApiOperation(value = "Deletes the VSupDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVSupDoc(@PathVariable("abIdnt") Integer abIdnt) {
        LOGGER.debug("Deleting VSupDoc with id: {}" , abIdnt);

        VSupDoc deletedVSupDoc = vSupDocService.delete(abIdnt);

        return deletedVSupDoc != null;
    }

    /**
     * @deprecated Use {@link #findVSupDocs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VSupDoc instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VSupDoc> searchVSupDocsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VSupDocs list by query filter:{}", (Object) queryFilters);
        return vSupDocService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VSupDoc instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VSupDoc> findVSupDocs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VSupDocs list by filter:", query);
        return vSupDocService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VSupDoc instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VSupDoc> filterVSupDocs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VSupDocs list by filter", query);
        return vSupDocService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVSupDocs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vSupDocService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVSupDocsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VSupDoc.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vSupDocService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VSupDoc instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVSupDocs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VSupDocs");
		return vSupDocService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVSupDocAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vSupDocService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VSupDocService instance
	 */
	protected void setVSupDocService(VSupDocService service) {
		this.vSupDocService = service;
	}

}