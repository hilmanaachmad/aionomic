/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VNpwpDoc;
import id.co.aio.procure_to_pay.avm2.service.VNpwpDocService;


/**
 * Controller object for domain model class VNpwpDoc.
 * @see VNpwpDoc
 */
@RestController("AVM2.VNpwpDocController")
@Api(value = "VNpwpDocController", description = "Exposes APIs to work with VNpwpDoc resource.")
@RequestMapping("/AVM2/VNpwpDoc")
public class VNpwpDocController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VNpwpDocController.class);

    @Autowired
	@Qualifier("AVM2.VNpwpDocService")
	private VNpwpDocService vNpwpDocService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VNpwpDoc instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VNpwpDoc createVNpwpDoc(@RequestBody VNpwpDoc vnpwpDoc) {
		LOGGER.debug("Create VNpwpDoc with information: {}" , vnpwpDoc);

		vnpwpDoc = vNpwpDocService.create(vnpwpDoc);
		LOGGER.debug("Created VNpwpDoc with information: {}" , vnpwpDoc);

	    return vnpwpDoc;
	}

    @ApiOperation(value = "Returns the VNpwpDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VNpwpDoc getVNpwpDoc(@PathVariable("abIdnt") Integer abIdnt) {
        LOGGER.debug("Getting VNpwpDoc with id: {}" , abIdnt);

        VNpwpDoc foundVNpwpDoc = vNpwpDocService.getById(abIdnt);
        LOGGER.debug("VNpwpDoc details with id: {}" , foundVNpwpDoc);

        return foundVNpwpDoc;
    }

    @ApiOperation(value = "Updates the VNpwpDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VNpwpDoc editVNpwpDoc(@PathVariable("abIdnt") Integer abIdnt, @RequestBody VNpwpDoc vnpwpDoc) {
        LOGGER.debug("Editing VNpwpDoc with id: {}" , vnpwpDoc.getAbIdnt());

        vnpwpDoc.setAbIdnt(abIdnt);
        vnpwpDoc = vNpwpDocService.update(vnpwpDoc);
        LOGGER.debug("VNpwpDoc details with id: {}" , vnpwpDoc);

        return vnpwpDoc;
    }
    
    @ApiOperation(value = "Partially updates the VNpwpDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VNpwpDoc patchVNpwpDoc(@PathVariable("abIdnt") Integer abIdnt, @RequestBody @MapTo(VNpwpDoc.class) Map<String, Object> vnpwpDocPatch) {
        LOGGER.debug("Partially updating VNpwpDoc with id: {}" , abIdnt);

        VNpwpDoc vnpwpDoc = vNpwpDocService.partialUpdate(abIdnt, vnpwpDocPatch);
        LOGGER.debug("VNpwpDoc details after partial update: {}" , vnpwpDoc);

        return vnpwpDoc;
    }

    @ApiOperation(value = "Deletes the VNpwpDoc instance associated with the given id.")
    @RequestMapping(value = "/{abIdnt:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVNpwpDoc(@PathVariable("abIdnt") Integer abIdnt) {
        LOGGER.debug("Deleting VNpwpDoc with id: {}" , abIdnt);

        VNpwpDoc deletedVNpwpDoc = vNpwpDocService.delete(abIdnt);

        return deletedVNpwpDoc != null;
    }

    /**
     * @deprecated Use {@link #findVNpwpDocs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VNpwpDoc instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VNpwpDoc> searchVNpwpDocsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VNpwpDocs list by query filter:{}", (Object) queryFilters);
        return vNpwpDocService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VNpwpDoc instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VNpwpDoc> findVNpwpDocs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VNpwpDocs list by filter:", query);
        return vNpwpDocService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VNpwpDoc instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VNpwpDoc> filterVNpwpDocs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VNpwpDocs list by filter", query);
        return vNpwpDocService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVNpwpDocs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vNpwpDocService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVNpwpDocsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VNpwpDoc.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vNpwpDocService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VNpwpDoc instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVNpwpDocs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VNpwpDocs");
		return vNpwpDocService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVNpwpDocAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vNpwpDocService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VNpwpDocService instance
	 */
	protected void setVNpwpDocService(VNpwpDocService service) {
		this.vNpwpDocService = service;
	}

}