/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VCertiDom;


/**
 * ServiceImpl object for domain model class VCertiDom.
 *
 * @see VCertiDom
 */
@Service("AVM2.VCertiDomService")
@Validated
@EntityService(entityClass = VCertiDom.class, serviceId = "AVM2")
public class VCertiDomServiceImpl implements VCertiDomService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VCertiDomServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VCertiDomDao")
    private WMGenericDao<VCertiDom, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VCertiDom, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VCertiDom create(VCertiDom vcertiDom) {
        LOGGER.debug("Creating a new VCertiDom with information: {}", vcertiDom);

        VCertiDom vcertiDomCreated = this.wmGenericDao.create(vcertiDom);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vcertiDomCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VCertiDom getById(Integer vcertidomId) {
        LOGGER.debug("Finding VCertiDom by id: {}", vcertidomId);
        return this.wmGenericDao.findById(vcertidomId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VCertiDom findById(Integer vcertidomId) {
        LOGGER.debug("Finding VCertiDom by id: {}", vcertidomId);
        try {
            return this.wmGenericDao.findById(vcertidomId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VCertiDom found with id: {}", vcertidomId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VCertiDom> findByMultipleIds(List<Integer> vcertidomIds, boolean orderedReturn) {
        LOGGER.debug("Finding VCertiDoms by ids: {}", vcertidomIds);

        return this.wmGenericDao.findByMultipleIds(vcertidomIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VCertiDom update(VCertiDom vcertiDom) {
        LOGGER.debug("Updating VCertiDom with information: {}", vcertiDom);

        this.wmGenericDao.update(vcertiDom);
        this.wmGenericDao.refresh(vcertiDom);

        return vcertiDom;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VCertiDom partialUpdate(Integer vcertidomId, Map<String, Object>vcertiDomPatch) {
        LOGGER.debug("Partially Updating the VCertiDom with id: {}", vcertidomId);

        VCertiDom vcertiDom = getById(vcertidomId);

        try {
            ObjectReader vcertiDomReader = this.objectMapper.reader().forType(VCertiDom.class).withValueToUpdate(vcertiDom);
            vcertiDom = vcertiDomReader.readValue(this.objectMapper.writeValueAsString(vcertiDomPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vcertiDomPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vcertiDom = update(vcertiDom);

        return vcertiDom;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VCertiDom delete(Integer vcertidomId) {
        LOGGER.debug("Deleting VCertiDom with id: {}", vcertidomId);
        VCertiDom deleted = this.wmGenericDao.findById(vcertidomId);
        if (deleted == null) {
            LOGGER.debug("No VCertiDom found with id: {}", vcertidomId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VCertiDom.class.getSimpleName(), vcertidomId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VCertiDom vcertiDom) {
        LOGGER.debug("Deleting VCertiDom with {}", vcertiDom);
        this.wmGenericDao.delete(vcertiDom);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VCertiDom> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VCertiDoms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VCertiDom> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VCertiDoms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VCertiDom to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VCertiDom to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}