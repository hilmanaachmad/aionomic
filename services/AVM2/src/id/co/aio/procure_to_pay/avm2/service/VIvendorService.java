/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VIvendor;

/**
 * Service object for domain model class {@link VIvendor}.
 */
public interface VIvendorService {

    /**
     * Creates a new VIvendor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VIvendor if any.
     *
     * @param vivendor Details of the VIvendor to be created; value cannot be null.
     * @return The newly created VIvendor.
     */
    VIvendor create(@Valid VIvendor vivendor);


	/**
     * Returns VIvendor by given id if exists.
     *
     * @param vivendorId The id of the VIvendor to get; value cannot be null.
     * @return VIvendor associated with the given vivendorId.
	 * @throws EntityNotFoundException If no VIvendor is found.
     */
    VIvendor getById(String vivendorId);

    /**
     * Find and return the VIvendor by given id if exists, returns null otherwise.
     *
     * @param vivendorId The id of the VIvendor to get; value cannot be null.
     * @return VIvendor associated with the given vivendorId.
     */
    VIvendor findById(String vivendorId);

	/**
     * Find and return the list of VIvendors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vivendorIds The id's of the VIvendor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VIvendors associated with the given vivendorIds.
     */
    List<VIvendor> findByMultipleIds(List<String> vivendorIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VIvendor. It replaces all fields of the existing VIvendor with the given vivendor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VIvendor if any.
     *
     * @param vivendor The details of the VIvendor to be updated; value cannot be null.
     * @return The updated VIvendor.
     * @throws EntityNotFoundException if no VIvendor is found with given input.
     */
    VIvendor update(@Valid VIvendor vivendor);


    /**
     * Partially updates the details of an existing VIvendor. It updates only the
     * fields of the existing VIvendor which are passed in the vivendorPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VIvendor if any.
     *
     * @param vivendorId The id of the VIvendor to be deleted; value cannot be null.
     * @param vivendorPatch The partial data of VIvendor which is supposed to be updated; value cannot be null.
     * @return The updated VIvendor.
     * @throws EntityNotFoundException if no VIvendor is found with given input.
     */
    VIvendor partialUpdate(String vivendorId, Map<String, Object> vivendorPatch);

    /**
     * Deletes an existing VIvendor with the given id.
     *
     * @param vivendorId The id of the VIvendor to be deleted; value cannot be null.
     * @return The deleted VIvendor.
     * @throws EntityNotFoundException if no VIvendor found with the given id.
     */
    VIvendor delete(String vivendorId);

    /**
     * Deletes an existing VIvendor with the given object.
     *
     * @param vivendor The instance of the VIvendor to be deleted; value cannot be null.
     */
    void delete(VIvendor vivendor);

    /**
     * Find all VIvendors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VIvendors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VIvendor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VIvendors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VIvendors.
     *
     * @see Pageable
     * @see Page
     */
    Page<VIvendor> findAll(String query, Pageable pageable);

    /**
     * Exports all VIvendors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VIvendors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VIvendors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VIvendor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}