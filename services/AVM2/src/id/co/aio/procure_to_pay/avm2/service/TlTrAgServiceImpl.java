/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrAg;


/**
 * ServiceImpl object for domain model class TlTrAg.
 *
 * @see TlTrAg
 */
@Service("AVM2.TlTrAgService")
@Validated
@EntityService(entityClass = TlTrAg.class, serviceId = "AVM2")
public class TlTrAgServiceImpl implements TlTrAgService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrAgServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrAgDao")
    private WMGenericDao<TlTrAg, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrAg, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAg create(TlTrAg tlTrAg) {
        LOGGER.debug("Creating a new TlTrAg with information: {}", tlTrAg);

        TlTrAg tlTrAgCreated = this.wmGenericDao.create(tlTrAg);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrAgCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrAg getById(Integer tltragId) {
        LOGGER.debug("Finding TlTrAg by id: {}", tltragId);
        return this.wmGenericDao.findById(tltragId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrAg findById(Integer tltragId) {
        LOGGER.debug("Finding TlTrAg by id: {}", tltragId);
        try {
            return this.wmGenericDao.findById(tltragId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrAg found with id: {}", tltragId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrAg> findByMultipleIds(List<Integer> tltragIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrAgs by ids: {}", tltragIds);

        return this.wmGenericDao.findByMultipleIds(tltragIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrAg update(TlTrAg tlTrAg) {
        LOGGER.debug("Updating TlTrAg with information: {}", tlTrAg);

        this.wmGenericDao.update(tlTrAg);
        this.wmGenericDao.refresh(tlTrAg);

        return tlTrAg;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAg partialUpdate(Integer tltragId, Map<String, Object>tlTrAgPatch) {
        LOGGER.debug("Partially Updating the TlTrAg with id: {}", tltragId);

        TlTrAg tlTrAg = getById(tltragId);

        try {
            ObjectReader tlTrAgReader = this.objectMapper.reader().forType(TlTrAg.class).withValueToUpdate(tlTrAg);
            tlTrAg = tlTrAgReader.readValue(this.objectMapper.writeValueAsString(tlTrAgPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrAgPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrAg = update(tlTrAg);

        return tlTrAg;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrAg delete(Integer tltragId) {
        LOGGER.debug("Deleting TlTrAg with id: {}", tltragId);
        TlTrAg deleted = this.wmGenericDao.findById(tltragId);
        if (deleted == null) {
            LOGGER.debug("No TlTrAg found with id: {}", tltragId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrAg.class.getSimpleName(), tltragId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrAg tlTrAg) {
        LOGGER.debug("Deleting TlTrAg with {}", tlTrAg);
        this.wmGenericDao.delete(tlTrAg);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrAg> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrAgs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrAg> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrAgs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrAg to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrAg to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}