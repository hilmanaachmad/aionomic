/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsVeKonf;
import id.co.aio.procure_to_pay.avm2.service.TlMsVeKonfService;


/**
 * Controller object for domain model class TlMsVeKonf.
 * @see TlMsVeKonf
 */
@RestController("AVM2.TlMsVeKonfController")
@Api(value = "TlMsVeKonfController", description = "Exposes APIs to work with TlMsVeKonf resource.")
@RequestMapping("/AVM2/TlMsVeKonf")
public class TlMsVeKonfController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsVeKonfController.class);

    @Autowired
	@Qualifier("AVM2.TlMsVeKonfService")
	private TlMsVeKonfService tlMsVeKonfService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsVeKonf instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsVeKonf createTlMsVeKonf(@RequestBody TlMsVeKonf tlMsVeKonf) {
		LOGGER.debug("Create TlMsVeKonf with information: {}" , tlMsVeKonf);

		tlMsVeKonf = tlMsVeKonfService.create(tlMsVeKonf);
		LOGGER.debug("Created TlMsVeKonf with information: {}" , tlMsVeKonf);

	    return tlMsVeKonf;
	}

    @ApiOperation(value = "Returns the TlMsVeKonf instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsVeKonf getTlMsVeKonf(@PathVariable("abCoorsa") String abCoorsa) {
        LOGGER.debug("Getting TlMsVeKonf with id: {}" , abCoorsa);

        TlMsVeKonf foundTlMsVeKonf = tlMsVeKonfService.getById(abCoorsa);
        LOGGER.debug("TlMsVeKonf details with id: {}" , foundTlMsVeKonf);

        return foundTlMsVeKonf;
    }

    @ApiOperation(value = "Updates the TlMsVeKonf instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsVeKonf editTlMsVeKonf(@PathVariable("abCoorsa") String abCoorsa, @RequestBody TlMsVeKonf tlMsVeKonf) {
        LOGGER.debug("Editing TlMsVeKonf with id: {}" , tlMsVeKonf.getAbCoorsa());

        tlMsVeKonf.setAbCoorsa(abCoorsa);
        tlMsVeKonf = tlMsVeKonfService.update(tlMsVeKonf);
        LOGGER.debug("TlMsVeKonf details with id: {}" , tlMsVeKonf);

        return tlMsVeKonf;
    }
    
    @ApiOperation(value = "Partially updates the TlMsVeKonf instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsVeKonf patchTlMsVeKonf(@PathVariable("abCoorsa") String abCoorsa, @RequestBody @MapTo(TlMsVeKonf.class) Map<String, Object> tlMsVeKonfPatch) {
        LOGGER.debug("Partially updating TlMsVeKonf with id: {}" , abCoorsa);

        TlMsVeKonf tlMsVeKonf = tlMsVeKonfService.partialUpdate(abCoorsa, tlMsVeKonfPatch);
        LOGGER.debug("TlMsVeKonf details after partial update: {}" , tlMsVeKonf);

        return tlMsVeKonf;
    }

    @ApiOperation(value = "Deletes the TlMsVeKonf instance associated with the given id.")
    @RequestMapping(value = "/{abCoorsa:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsVeKonf(@PathVariable("abCoorsa") String abCoorsa) {
        LOGGER.debug("Deleting TlMsVeKonf with id: {}" , abCoorsa);

        TlMsVeKonf deletedTlMsVeKonf = tlMsVeKonfService.delete(abCoorsa);

        return deletedTlMsVeKonf != null;
    }

    /**
     * @deprecated Use {@link #findTlMsVeKonfs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsVeKonf instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsVeKonf> searchTlMsVeKonfsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsVeKonfs list by query filter:{}", (Object) queryFilters);
        return tlMsVeKonfService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsVeKonf instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsVeKonf> findTlMsVeKonfs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsVeKonfs list by filter:", query);
        return tlMsVeKonfService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsVeKonf instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsVeKonf> filterTlMsVeKonfs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsVeKonfs list by filter", query);
        return tlMsVeKonfService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsVeKonfs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsVeKonfService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsVeKonfsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsVeKonf.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsVeKonfService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsVeKonf instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsVeKonfs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsVeKonfs");
		return tlMsVeKonfService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsVeKonfAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsVeKonfService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsVeKonfService instance
	 */
	protected void setTlMsVeKonfService(TlMsVeKonfService service) {
		this.tlMsVeKonfService = service;
	}

}