/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsAgpe;

/**
 * Service object for domain model class {@link TlMsAgpe}.
 */
public interface TlMsAgpeService {

    /**
     * Creates a new TlMsAgpe. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAgpe if any.
     *
     * @param tlMsAgpe Details of the TlMsAgpe to be created; value cannot be null.
     * @return The newly created TlMsAgpe.
     */
    TlMsAgpe create(@Valid TlMsAgpe tlMsAgpe);


	/**
     * Returns TlMsAgpe by given id if exists.
     *
     * @param tlmsagpeId The id of the TlMsAgpe to get; value cannot be null.
     * @return TlMsAgpe associated with the given tlmsagpeId.
	 * @throws EntityNotFoundException If no TlMsAgpe is found.
     */
    TlMsAgpe getById(Integer tlmsagpeId);

    /**
     * Find and return the TlMsAgpe by given id if exists, returns null otherwise.
     *
     * @param tlmsagpeId The id of the TlMsAgpe to get; value cannot be null.
     * @return TlMsAgpe associated with the given tlmsagpeId.
     */
    TlMsAgpe findById(Integer tlmsagpeId);

	/**
     * Find and return the list of TlMsAgpes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsagpeIds The id's of the TlMsAgpe to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsAgpes associated with the given tlmsagpeIds.
     */
    List<TlMsAgpe> findByMultipleIds(List<Integer> tlmsagpeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsAgpe. It replaces all fields of the existing TlMsAgpe with the given tlMsAgpe.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAgpe if any.
     *
     * @param tlMsAgpe The details of the TlMsAgpe to be updated; value cannot be null.
     * @return The updated TlMsAgpe.
     * @throws EntityNotFoundException if no TlMsAgpe is found with given input.
     */
    TlMsAgpe update(@Valid TlMsAgpe tlMsAgpe);


    /**
     * Partially updates the details of an existing TlMsAgpe. It updates only the
     * fields of the existing TlMsAgpe which are passed in the tlMsAgpePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsAgpe if any.
     *
     * @param tlmsagpeId The id of the TlMsAgpe to be deleted; value cannot be null.
     * @param tlMsAgpePatch The partial data of TlMsAgpe which is supposed to be updated; value cannot be null.
     * @return The updated TlMsAgpe.
     * @throws EntityNotFoundException if no TlMsAgpe is found with given input.
     */
    TlMsAgpe partialUpdate(Integer tlmsagpeId, Map<String, Object> tlMsAgpePatch);

    /**
     * Deletes an existing TlMsAgpe with the given id.
     *
     * @param tlmsagpeId The id of the TlMsAgpe to be deleted; value cannot be null.
     * @return The deleted TlMsAgpe.
     * @throws EntityNotFoundException if no TlMsAgpe found with the given id.
     */
    TlMsAgpe delete(Integer tlmsagpeId);

    /**
     * Deletes an existing TlMsAgpe with the given object.
     *
     * @param tlMsAgpe The instance of the TlMsAgpe to be deleted; value cannot be null.
     */
    void delete(TlMsAgpe tlMsAgpe);

    /**
     * Find all TlMsAgpes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAgpes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsAgpe> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsAgpes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsAgpes.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsAgpe> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsAgpes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsAgpes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsAgpes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsAgpe.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}