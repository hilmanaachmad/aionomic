/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.VVendorMiro;
import id.co.aio.procure_to_pay.avm2.VVendorMiroId;
import id.co.aio.procure_to_pay.avm2.service.VVendorMiroService;


/**
 * Controller object for domain model class VVendorMiro.
 * @see VVendorMiro
 */
@RestController("AVM2.VVendorMiroController")
@Api(value = "VVendorMiroController", description = "Exposes APIs to work with VVendorMiro resource.")
@RequestMapping("/AVM2/VVendorMiro")
public class VVendorMiroController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VVendorMiroController.class);

    @Autowired
	@Qualifier("AVM2.VVendorMiroService")
	private VVendorMiroService vVendorMiroService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VVendorMiro instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorMiro createVVendorMiro(@RequestBody VVendorMiro vvendorMiro) {
		LOGGER.debug("Create VVendorMiro with information: {}" , vvendorMiro);

		vvendorMiro = vVendorMiroService.create(vvendorMiro);
		LOGGER.debug("Created VVendorMiro with information: {}" , vvendorMiro);

	    return vvendorMiro;
	}

    @ApiOperation(value = "Returns the VVendorMiro instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorMiro getVVendorMiro(@RequestParam("abPuon") String abPuon, @RequestParam("username") String username, @RequestParam("abEmss") String abEmss, @RequestParam("sapcode") String sapcode, @RequestParam("id") Integer id, @RequestParam("abParm") String abParm) {

        VVendorMiroId vvendormiroId = new VVendorMiroId();
        vvendormiroId.setAbPuon(abPuon);
        vvendormiroId.setUsername(username);
        vvendormiroId.setAbEmss(abEmss);
        vvendormiroId.setSapcode(sapcode);
        vvendormiroId.setId(id);
        vvendormiroId.setAbParm(abParm);

        LOGGER.debug("Getting VVendorMiro with id: {}" , vvendormiroId);
        VVendorMiro vvendorMiro = vVendorMiroService.getById(vvendormiroId);
        LOGGER.debug("VVendorMiro details with id: {}" , vvendorMiro);

        return vvendorMiro;
    }



    @ApiOperation(value = "Updates the VVendorMiro instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorMiro editVVendorMiro(@RequestParam("abPuon") String abPuon, @RequestParam("username") String username, @RequestParam("abEmss") String abEmss, @RequestParam("sapcode") String sapcode, @RequestParam("id") Integer id, @RequestParam("abParm") String abParm, @RequestBody VVendorMiro vvendorMiro) {

        vvendorMiro.setAbPuon(abPuon);
        vvendorMiro.setUsername(username);
        vvendorMiro.setAbEmss(abEmss);
        vvendorMiro.setSapcode(sapcode);
        vvendorMiro.setId(id);
        vvendorMiro.setAbParm(abParm);

        LOGGER.debug("VVendorMiro details with id is updated with: {}" , vvendorMiro);

        return vVendorMiroService.update(vvendorMiro);
    }

	@ApiOperation(value = "Partially updates the  VVendorMiro instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VVendorMiro patchVVendorMiro(@RequestParam("abPuon") String abPuon, @RequestParam("username") String username, @RequestParam("abEmss") String abEmss, @RequestParam("sapcode") String sapcode, @RequestParam("id") Integer id, @RequestParam("abParm") String abParm, @RequestBody @MapTo(VVendorMiro.class) Map<String, Object> vvendorMiroPatch) {

        VVendorMiroId vvendormiroId = new VVendorMiroId();
        vvendormiroId.setAbPuon(abPuon);
        vvendormiroId.setUsername(username);
        vvendormiroId.setAbEmss(abEmss);
        vvendormiroId.setSapcode(sapcode);
        vvendormiroId.setId(id);
        vvendormiroId.setAbParm(abParm);
        LOGGER.debug("Partially updating VVendorMiro with id: {}" , vvendormiroId);

        VVendorMiro vvendorMiro = vVendorMiroService.partialUpdate(vvendormiroId, vvendorMiroPatch);
        LOGGER.debug("VVendorMiro details after partial update: {}" , vvendorMiro);

        return vvendorMiro;
    }


    @ApiOperation(value = "Deletes the VVendorMiro instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVVendorMiro(@RequestParam("abPuon") String abPuon, @RequestParam("username") String username, @RequestParam("abEmss") String abEmss, @RequestParam("sapcode") String sapcode, @RequestParam("id") Integer id, @RequestParam("abParm") String abParm) {

        VVendorMiroId vvendormiroId = new VVendorMiroId();
        vvendormiroId.setAbPuon(abPuon);
        vvendormiroId.setUsername(username);
        vvendormiroId.setAbEmss(abEmss);
        vvendormiroId.setSapcode(sapcode);
        vvendormiroId.setId(id);
        vvendormiroId.setAbParm(abParm);

        LOGGER.debug("Deleting VVendorMiro with id: {}" , vvendormiroId);
        VVendorMiro vvendorMiro = vVendorMiroService.delete(vvendormiroId);

        return vvendorMiro != null;
    }


    /**
     * @deprecated Use {@link #findVVendorMiros(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VVendorMiro instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendorMiro> searchVVendorMirosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VVendorMiros list by query filter:{}", (Object) queryFilters);
        return vVendorMiroService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VVendorMiro instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendorMiro> findVVendorMiros(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VVendorMiros list by filter:", query);
        return vVendorMiroService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VVendorMiro instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VVendorMiro> filterVVendorMiros(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VVendorMiros list by filter", query);
        return vVendorMiroService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVVendorMiros(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vVendorMiroService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVVendorMirosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VVendorMiro.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vVendorMiroService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VVendorMiro instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVVendorMiros( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VVendorMiros");
		return vVendorMiroService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVVendorMiroAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vVendorMiroService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VVendorMiroService instance
	 */
	protected void setVVendorMiroService(VVendorMiroService service) {
		this.vVendorMiroService = service;
	}

}