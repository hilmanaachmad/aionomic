/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.avm2.TlMsCategory;
import id.co.aio.procure_to_pay.avm2.service.TlMsCategoryService;


/**
 * Controller object for domain model class TlMsCategory.
 * @see TlMsCategory
 */
@RestController("AVM2.TlMsCategoryController")
@Api(value = "TlMsCategoryController", description = "Exposes APIs to work with TlMsCategory resource.")
@RequestMapping("/AVM2/TlMsCategory")
public class TlMsCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsCategoryController.class);

    @Autowired
	@Qualifier("AVM2.TlMsCategoryService")
	private TlMsCategoryService tlMsCategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TlMsCategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCategory createTlMsCategory(@RequestBody TlMsCategory tlMsCategory) {
		LOGGER.debug("Create TlMsCategory with information: {}" , tlMsCategory);

		tlMsCategory = tlMsCategoryService.create(tlMsCategory);
		LOGGER.debug("Created TlMsCategory with information: {}" , tlMsCategory);

	    return tlMsCategory;
	}

    @ApiOperation(value = "Returns the TlMsCategory instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCategory getTlMsCategory(@PathVariable("caId") Integer caId) {
        LOGGER.debug("Getting TlMsCategory with id: {}" , caId);

        TlMsCategory foundTlMsCategory = tlMsCategoryService.getById(caId);
        LOGGER.debug("TlMsCategory details with id: {}" , foundTlMsCategory);

        return foundTlMsCategory;
    }

    @ApiOperation(value = "Updates the TlMsCategory instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCategory editTlMsCategory(@PathVariable("caId") Integer caId, @RequestBody TlMsCategory tlMsCategory) {
        LOGGER.debug("Editing TlMsCategory with id: {}" , tlMsCategory.getCaId());

        tlMsCategory.setCaId(caId);
        tlMsCategory = tlMsCategoryService.update(tlMsCategory);
        LOGGER.debug("TlMsCategory details with id: {}" , tlMsCategory);

        return tlMsCategory;
    }
    
    @ApiOperation(value = "Partially updates the TlMsCategory instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TlMsCategory patchTlMsCategory(@PathVariable("caId") Integer caId, @RequestBody @MapTo(TlMsCategory.class) Map<String, Object> tlMsCategoryPatch) {
        LOGGER.debug("Partially updating TlMsCategory with id: {}" , caId);

        TlMsCategory tlMsCategory = tlMsCategoryService.partialUpdate(caId, tlMsCategoryPatch);
        LOGGER.debug("TlMsCategory details after partial update: {}" , tlMsCategory);

        return tlMsCategory;
    }

    @ApiOperation(value = "Deletes the TlMsCategory instance associated with the given id.")
    @RequestMapping(value = "/{caId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTlMsCategory(@PathVariable("caId") Integer caId) {
        LOGGER.debug("Deleting TlMsCategory with id: {}" , caId);

        TlMsCategory deletedTlMsCategory = tlMsCategoryService.delete(caId);

        return deletedTlMsCategory != null;
    }

    /**
     * @deprecated Use {@link #findTlMsCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TlMsCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsCategory> searchTlMsCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TlMsCategories list by query filter:{}", (Object) queryFilters);
        return tlMsCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsCategory> findTlMsCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsCategories list by filter:", query);
        return tlMsCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TlMsCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TlMsCategory> filterTlMsCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TlMsCategories list by filter", query);
        return tlMsCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTlMsCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tlMsCategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTlMsCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TlMsCategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tlMsCategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TlMsCategory instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTlMsCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TlMsCategories");
		return tlMsCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTlMsCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tlMsCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TlMsCategoryService instance
	 */
	protected void setTlMsCategoryService(TlMsCategoryService service) {
		this.tlMsCategoryService = service;
	}

}