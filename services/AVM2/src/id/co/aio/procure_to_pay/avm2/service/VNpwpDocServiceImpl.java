/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VNpwpDoc;


/**
 * ServiceImpl object for domain model class VNpwpDoc.
 *
 * @see VNpwpDoc
 */
@Service("AVM2.VNpwpDocService")
@Validated
@EntityService(entityClass = VNpwpDoc.class, serviceId = "AVM2")
public class VNpwpDocServiceImpl implements VNpwpDocService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VNpwpDocServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VNpwpDocDao")
    private WMGenericDao<VNpwpDoc, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VNpwpDoc, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VNpwpDoc create(VNpwpDoc vnpwpDoc) {
        LOGGER.debug("Creating a new VNpwpDoc with information: {}", vnpwpDoc);

        VNpwpDoc vnpwpDocCreated = this.wmGenericDao.create(vnpwpDoc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vnpwpDocCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VNpwpDoc getById(Integer vnpwpdocId) {
        LOGGER.debug("Finding VNpwpDoc by id: {}", vnpwpdocId);
        return this.wmGenericDao.findById(vnpwpdocId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VNpwpDoc findById(Integer vnpwpdocId) {
        LOGGER.debug("Finding VNpwpDoc by id: {}", vnpwpdocId);
        try {
            return this.wmGenericDao.findById(vnpwpdocId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VNpwpDoc found with id: {}", vnpwpdocId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VNpwpDoc> findByMultipleIds(List<Integer> vnpwpdocIds, boolean orderedReturn) {
        LOGGER.debug("Finding VNpwpDocs by ids: {}", vnpwpdocIds);

        return this.wmGenericDao.findByMultipleIds(vnpwpdocIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VNpwpDoc update(VNpwpDoc vnpwpDoc) {
        LOGGER.debug("Updating VNpwpDoc with information: {}", vnpwpDoc);

        this.wmGenericDao.update(vnpwpDoc);
        this.wmGenericDao.refresh(vnpwpDoc);

        return vnpwpDoc;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VNpwpDoc partialUpdate(Integer vnpwpdocId, Map<String, Object>vnpwpDocPatch) {
        LOGGER.debug("Partially Updating the VNpwpDoc with id: {}", vnpwpdocId);

        VNpwpDoc vnpwpDoc = getById(vnpwpdocId);

        try {
            ObjectReader vnpwpDocReader = this.objectMapper.reader().forType(VNpwpDoc.class).withValueToUpdate(vnpwpDoc);
            vnpwpDoc = vnpwpDocReader.readValue(this.objectMapper.writeValueAsString(vnpwpDocPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vnpwpDocPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vnpwpDoc = update(vnpwpDoc);

        return vnpwpDoc;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VNpwpDoc delete(Integer vnpwpdocId) {
        LOGGER.debug("Deleting VNpwpDoc with id: {}", vnpwpdocId);
        VNpwpDoc deleted = this.wmGenericDao.findById(vnpwpdocId);
        if (deleted == null) {
            LOGGER.debug("No VNpwpDoc found with id: {}", vnpwpdocId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VNpwpDoc.class.getSimpleName(), vnpwpdocId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VNpwpDoc vnpwpDoc) {
        LOGGER.debug("Deleting VNpwpDoc with {}", vnpwpDoc);
        this.wmGenericDao.delete(vnpwpDoc);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VNpwpDoc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VNpwpDocs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VNpwpDoc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VNpwpDocs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VNpwpDoc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VNpwpDoc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}