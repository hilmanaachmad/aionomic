/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsLo;

/**
 * Service object for domain model class {@link TlMsLo}.
 */
public interface TlMsLoService {

    /**
     * Creates a new TlMsLo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsLo if any.
     *
     * @param tlMsLo Details of the TlMsLo to be created; value cannot be null.
     * @return The newly created TlMsLo.
     */
    TlMsLo create(@Valid TlMsLo tlMsLo);


	/**
     * Returns TlMsLo by given id if exists.
     *
     * @param tlmsloId The id of the TlMsLo to get; value cannot be null.
     * @return TlMsLo associated with the given tlmsloId.
	 * @throws EntityNotFoundException If no TlMsLo is found.
     */
    TlMsLo getById(String tlmsloId);

    /**
     * Find and return the TlMsLo by given id if exists, returns null otherwise.
     *
     * @param tlmsloId The id of the TlMsLo to get; value cannot be null.
     * @return TlMsLo associated with the given tlmsloId.
     */
    TlMsLo findById(String tlmsloId);

	/**
     * Find and return the list of TlMsLos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tlmsloIds The id's of the TlMsLo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TlMsLos associated with the given tlmsloIds.
     */
    List<TlMsLo> findByMultipleIds(List<String> tlmsloIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TlMsLo. It replaces all fields of the existing TlMsLo with the given tlMsLo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsLo if any.
     *
     * @param tlMsLo The details of the TlMsLo to be updated; value cannot be null.
     * @return The updated TlMsLo.
     * @throws EntityNotFoundException if no TlMsLo is found with given input.
     */
    TlMsLo update(@Valid TlMsLo tlMsLo);


    /**
     * Partially updates the details of an existing TlMsLo. It updates only the
     * fields of the existing TlMsLo which are passed in the tlMsLoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TlMsLo if any.
     *
     * @param tlmsloId The id of the TlMsLo to be deleted; value cannot be null.
     * @param tlMsLoPatch The partial data of TlMsLo which is supposed to be updated; value cannot be null.
     * @return The updated TlMsLo.
     * @throws EntityNotFoundException if no TlMsLo is found with given input.
     */
    TlMsLo partialUpdate(String tlmsloId, Map<String, Object> tlMsLoPatch);

    /**
     * Deletes an existing TlMsLo with the given id.
     *
     * @param tlmsloId The id of the TlMsLo to be deleted; value cannot be null.
     * @return The deleted TlMsLo.
     * @throws EntityNotFoundException if no TlMsLo found with the given id.
     */
    TlMsLo delete(String tlmsloId);

    /**
     * Deletes an existing TlMsLo with the given object.
     *
     * @param tlMsLo The instance of the TlMsLo to be deleted; value cannot be null.
     */
    void delete(TlMsLo tlMsLo);

    /**
     * Find all TlMsLos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsLos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TlMsLo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TlMsLos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TlMsLos.
     *
     * @see Pageable
     * @see Page
     */
    Page<TlMsLo> findAll(String query, Pageable pageable);

    /**
     * Exports all TlMsLos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TlMsLos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TlMsLos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TlMsLo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}