/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrCatalog;


/**
 * ServiceImpl object for domain model class TlTrCatalog.
 *
 * @see TlTrCatalog
 */
@Service("AVM2.TlTrCatalogService")
@Validated
@EntityService(entityClass = TlTrCatalog.class, serviceId = "AVM2")
public class TlTrCatalogServiceImpl implements TlTrCatalogService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrCatalogServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrCatalogDao")
    private WMGenericDao<TlTrCatalog, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrCatalog, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrCatalog create(TlTrCatalog tlTrCatalog) {
        LOGGER.debug("Creating a new TlTrCatalog with information: {}", tlTrCatalog);

        TlTrCatalog tlTrCatalogCreated = this.wmGenericDao.create(tlTrCatalog);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrCatalogCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrCatalog getById(Integer tltrcatalogId) {
        LOGGER.debug("Finding TlTrCatalog by id: {}", tltrcatalogId);
        return this.wmGenericDao.findById(tltrcatalogId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrCatalog findById(Integer tltrcatalogId) {
        LOGGER.debug("Finding TlTrCatalog by id: {}", tltrcatalogId);
        try {
            return this.wmGenericDao.findById(tltrcatalogId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrCatalog found with id: {}", tltrcatalogId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrCatalog> findByMultipleIds(List<Integer> tltrcatalogIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrCatalogs by ids: {}", tltrcatalogIds);

        return this.wmGenericDao.findByMultipleIds(tltrcatalogIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrCatalog update(TlTrCatalog tlTrCatalog) {
        LOGGER.debug("Updating TlTrCatalog with information: {}", tlTrCatalog);

        this.wmGenericDao.update(tlTrCatalog);
        this.wmGenericDao.refresh(tlTrCatalog);

        return tlTrCatalog;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrCatalog partialUpdate(Integer tltrcatalogId, Map<String, Object>tlTrCatalogPatch) {
        LOGGER.debug("Partially Updating the TlTrCatalog with id: {}", tltrcatalogId);

        TlTrCatalog tlTrCatalog = getById(tltrcatalogId);

        try {
            ObjectReader tlTrCatalogReader = this.objectMapper.reader().forType(TlTrCatalog.class).withValueToUpdate(tlTrCatalog);
            tlTrCatalog = tlTrCatalogReader.readValue(this.objectMapper.writeValueAsString(tlTrCatalogPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrCatalogPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrCatalog = update(tlTrCatalog);

        return tlTrCatalog;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrCatalog delete(Integer tltrcatalogId) {
        LOGGER.debug("Deleting TlTrCatalog with id: {}", tltrcatalogId);
        TlTrCatalog deleted = this.wmGenericDao.findById(tltrcatalogId);
        if (deleted == null) {
            LOGGER.debug("No TlTrCatalog found with id: {}", tltrcatalogId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrCatalog.class.getSimpleName(), tltrcatalogId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrCatalog tlTrCatalog) {
        LOGGER.debug("Deleting TlTrCatalog with {}", tlTrCatalog);
        this.wmGenericDao.delete(tlTrCatalog);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrCatalog> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrCatalogs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrCatalog> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrCatalogs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrCatalog to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrCatalog to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}