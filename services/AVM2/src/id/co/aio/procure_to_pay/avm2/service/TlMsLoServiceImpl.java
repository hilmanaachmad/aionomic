/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsLo;


/**
 * ServiceImpl object for domain model class TlMsLo.
 *
 * @see TlMsLo
 */
@Service("AVM2.TlMsLoService")
@Validated
@EntityService(entityClass = TlMsLo.class, serviceId = "AVM2")
public class TlMsLoServiceImpl implements TlMsLoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsLoServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsLoDao")
    private WMGenericDao<TlMsLo, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsLo, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLo create(TlMsLo tlMsLo) {
        LOGGER.debug("Creating a new TlMsLo with information: {}", tlMsLo);

        TlMsLo tlMsLoCreated = this.wmGenericDao.create(tlMsLo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsLoCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsLo getById(String tlmsloId) {
        LOGGER.debug("Finding TlMsLo by id: {}", tlmsloId);
        return this.wmGenericDao.findById(tlmsloId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsLo findById(String tlmsloId) {
        LOGGER.debug("Finding TlMsLo by id: {}", tlmsloId);
        try {
            return this.wmGenericDao.findById(tlmsloId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsLo found with id: {}", tlmsloId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsLo> findByMultipleIds(List<String> tlmsloIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsLos by ids: {}", tlmsloIds);

        return this.wmGenericDao.findByMultipleIds(tlmsloIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsLo update(TlMsLo tlMsLo) {
        LOGGER.debug("Updating TlMsLo with information: {}", tlMsLo);

        this.wmGenericDao.update(tlMsLo);
        this.wmGenericDao.refresh(tlMsLo);

        return tlMsLo;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLo partialUpdate(String tlmsloId, Map<String, Object>tlMsLoPatch) {
        LOGGER.debug("Partially Updating the TlMsLo with id: {}", tlmsloId);

        TlMsLo tlMsLo = getById(tlmsloId);

        try {
            ObjectReader tlMsLoReader = this.objectMapper.reader().forType(TlMsLo.class).withValueToUpdate(tlMsLo);
            tlMsLo = tlMsLoReader.readValue(this.objectMapper.writeValueAsString(tlMsLoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsLoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsLo = update(tlMsLo);

        return tlMsLo;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsLo delete(String tlmsloId) {
        LOGGER.debug("Deleting TlMsLo with id: {}", tlmsloId);
        TlMsLo deleted = this.wmGenericDao.findById(tlmsloId);
        if (deleted == null) {
            LOGGER.debug("No TlMsLo found with id: {}", tlmsloId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsLo.class.getSimpleName(), tlmsloId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsLo tlMsLo) {
        LOGGER.debug("Deleting TlMsLo with {}", tlMsLo);
        this.wmGenericDao.delete(tlMsLo);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsLo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsLos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsLo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsLos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsLo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsLo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}