/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTaTemp;


/**
 * ServiceImpl object for domain model class TlTaTemp.
 *
 * @see TlTaTemp
 */
@Service("AVM2.TlTaTempService")
@Validated
@EntityService(entityClass = TlTaTemp.class, serviceId = "AVM2")
public class TlTaTempServiceImpl implements TlTaTempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTaTempServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTaTempDao")
    private WMGenericDao<TlTaTemp, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTaTemp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTaTemp create(TlTaTemp tlTaTemp) {
        LOGGER.debug("Creating a new TlTaTemp with information: {}", tlTaTemp);

        TlTaTemp tlTaTempCreated = this.wmGenericDao.create(tlTaTemp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTaTempCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTaTemp getById(Integer tltatempId) {
        LOGGER.debug("Finding TlTaTemp by id: {}", tltatempId);
        return this.wmGenericDao.findById(tltatempId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTaTemp findById(Integer tltatempId) {
        LOGGER.debug("Finding TlTaTemp by id: {}", tltatempId);
        try {
            return this.wmGenericDao.findById(tltatempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTaTemp found with id: {}", tltatempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTaTemp> findByMultipleIds(List<Integer> tltatempIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTaTemps by ids: {}", tltatempIds);

        return this.wmGenericDao.findByMultipleIds(tltatempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTaTemp update(TlTaTemp tlTaTemp) {
        LOGGER.debug("Updating TlTaTemp with information: {}", tlTaTemp);

        this.wmGenericDao.update(tlTaTemp);
        this.wmGenericDao.refresh(tlTaTemp);

        return tlTaTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTaTemp partialUpdate(Integer tltatempId, Map<String, Object>tlTaTempPatch) {
        LOGGER.debug("Partially Updating the TlTaTemp with id: {}", tltatempId);

        TlTaTemp tlTaTemp = getById(tltatempId);

        try {
            ObjectReader tlTaTempReader = this.objectMapper.reader().forType(TlTaTemp.class).withValueToUpdate(tlTaTemp);
            tlTaTemp = tlTaTempReader.readValue(this.objectMapper.writeValueAsString(tlTaTempPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTaTempPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTaTemp = update(tlTaTemp);

        return tlTaTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTaTemp delete(Integer tltatempId) {
        LOGGER.debug("Deleting TlTaTemp with id: {}", tltatempId);
        TlTaTemp deleted = this.wmGenericDao.findById(tltatempId);
        if (deleted == null) {
            LOGGER.debug("No TlTaTemp found with id: {}", tltatempId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTaTemp.class.getSimpleName(), tltatempId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTaTemp tlTaTemp) {
        LOGGER.debug("Deleting TlTaTemp with {}", tlTaTemp);
        this.wmGenericDao.delete(tlTaTemp);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTaTemp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTaTemps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTaTemp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTaTemps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTaTemp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTaTemp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}