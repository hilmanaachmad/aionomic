/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlTrCaor;


/**
 * ServiceImpl object for domain model class TlTrCaor.
 *
 * @see TlTrCaor
 */
@Service("AVM2.TlTrCaorService")
@Validated
@EntityService(entityClass = TlTrCaor.class, serviceId = "AVM2")
public class TlTrCaorServiceImpl implements TlTrCaorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlTrCaorServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlTrCaorDao")
    private WMGenericDao<TlTrCaor, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlTrCaor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrCaor create(TlTrCaor tlTrCaor) {
        LOGGER.debug("Creating a new TlTrCaor with information: {}", tlTrCaor);

        TlTrCaor tlTrCaorCreated = this.wmGenericDao.create(tlTrCaor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlTrCaorCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrCaor getById(Integer tltrcaorId) {
        LOGGER.debug("Finding TlTrCaor by id: {}", tltrcaorId);
        return this.wmGenericDao.findById(tltrcaorId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlTrCaor findById(Integer tltrcaorId) {
        LOGGER.debug("Finding TlTrCaor by id: {}", tltrcaorId);
        try {
            return this.wmGenericDao.findById(tltrcaorId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlTrCaor found with id: {}", tltrcaorId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlTrCaor> findByMultipleIds(List<Integer> tltrcaorIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlTrCaors by ids: {}", tltrcaorIds);

        return this.wmGenericDao.findByMultipleIds(tltrcaorIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlTrCaor update(TlTrCaor tlTrCaor) {
        LOGGER.debug("Updating TlTrCaor with information: {}", tlTrCaor);

        this.wmGenericDao.update(tlTrCaor);
        this.wmGenericDao.refresh(tlTrCaor);

        return tlTrCaor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrCaor partialUpdate(Integer tltrcaorId, Map<String, Object>tlTrCaorPatch) {
        LOGGER.debug("Partially Updating the TlTrCaor with id: {}", tltrcaorId);

        TlTrCaor tlTrCaor = getById(tltrcaorId);

        try {
            ObjectReader tlTrCaorReader = this.objectMapper.reader().forType(TlTrCaor.class).withValueToUpdate(tlTrCaor);
            tlTrCaor = tlTrCaorReader.readValue(this.objectMapper.writeValueAsString(tlTrCaorPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlTrCaorPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlTrCaor = update(tlTrCaor);

        return tlTrCaor;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlTrCaor delete(Integer tltrcaorId) {
        LOGGER.debug("Deleting TlTrCaor with id: {}", tltrcaorId);
        TlTrCaor deleted = this.wmGenericDao.findById(tltrcaorId);
        if (deleted == null) {
            LOGGER.debug("No TlTrCaor found with id: {}", tltrcaorId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlTrCaor.class.getSimpleName(), tltrcaorId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlTrCaor tlTrCaor) {
        LOGGER.debug("Deleting TlTrCaor with {}", tlTrCaor);
        this.wmGenericDao.delete(tlTrCaor);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrCaor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlTrCaors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlTrCaor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlTrCaors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrCaor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlTrCaor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}