/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.VSppkpDoc;


/**
 * ServiceImpl object for domain model class VSppkpDoc.
 *
 * @see VSppkpDoc
 */
@Service("AVM2.VSppkpDocService")
@Validated
@EntityService(entityClass = VSppkpDoc.class, serviceId = "AVM2")
public class VSppkpDocServiceImpl implements VSppkpDocService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VSppkpDocServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.VSppkpDocDao")
    private WMGenericDao<VSppkpDoc, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VSppkpDoc, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VSppkpDoc create(VSppkpDoc vsppkpDoc) {
        LOGGER.debug("Creating a new VSppkpDoc with information: {}", vsppkpDoc);

        VSppkpDoc vsppkpDocCreated = this.wmGenericDao.create(vsppkpDoc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vsppkpDocCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VSppkpDoc getById(Integer vsppkpdocId) {
        LOGGER.debug("Finding VSppkpDoc by id: {}", vsppkpdocId);
        return this.wmGenericDao.findById(vsppkpdocId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public VSppkpDoc findById(Integer vsppkpdocId) {
        LOGGER.debug("Finding VSppkpDoc by id: {}", vsppkpdocId);
        try {
            return this.wmGenericDao.findById(vsppkpdocId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VSppkpDoc found with id: {}", vsppkpdocId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<VSppkpDoc> findByMultipleIds(List<Integer> vsppkpdocIds, boolean orderedReturn) {
        LOGGER.debug("Finding VSppkpDocs by ids: {}", vsppkpdocIds);

        return this.wmGenericDao.findByMultipleIds(vsppkpdocIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public VSppkpDoc update(VSppkpDoc vsppkpDoc) {
        LOGGER.debug("Updating VSppkpDoc with information: {}", vsppkpDoc);

        this.wmGenericDao.update(vsppkpDoc);
        this.wmGenericDao.refresh(vsppkpDoc);

        return vsppkpDoc;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VSppkpDoc partialUpdate(Integer vsppkpdocId, Map<String, Object>vsppkpDocPatch) {
        LOGGER.debug("Partially Updating the VSppkpDoc with id: {}", vsppkpdocId);

        VSppkpDoc vsppkpDoc = getById(vsppkpdocId);

        try {
            ObjectReader vsppkpDocReader = this.objectMapper.reader().forType(VSppkpDoc.class).withValueToUpdate(vsppkpDoc);
            vsppkpDoc = vsppkpDocReader.readValue(this.objectMapper.writeValueAsString(vsppkpDocPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vsppkpDocPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vsppkpDoc = update(vsppkpDoc);

        return vsppkpDoc;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public VSppkpDoc delete(Integer vsppkpdocId) {
        LOGGER.debug("Deleting VSppkpDoc with id: {}", vsppkpdocId);
        VSppkpDoc deleted = this.wmGenericDao.findById(vsppkpdocId);
        if (deleted == null) {
            LOGGER.debug("No VSppkpDoc found with id: {}", vsppkpdocId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VSppkpDoc.class.getSimpleName(), vsppkpdocId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(VSppkpDoc vsppkpDoc) {
        LOGGER.debug("Deleting VSppkpDoc with {}", vsppkpDoc);
        this.wmGenericDao.delete(vsppkpDoc);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VSppkpDoc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VSppkpDocs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<VSppkpDoc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VSppkpDocs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table VSppkpDoc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table VSppkpDoc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}