/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.avm2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.avm2.TlMsTaTemp;


/**
 * ServiceImpl object for domain model class TlMsTaTemp.
 *
 * @see TlMsTaTemp
 */
@Service("AVM2.TlMsTaTempService")
@Validated
@EntityService(entityClass = TlMsTaTemp.class, serviceId = "AVM2")
public class TlMsTaTempServiceImpl implements TlMsTaTempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TlMsTaTempServiceImpl.class);


    @Autowired
    @Qualifier("AVM2.TlMsTaTempDao")
    private WMGenericDao<TlMsTaTemp, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TlMsTaTemp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsTaTemp create(TlMsTaTemp tlMsTaTemp) {
        LOGGER.debug("Creating a new TlMsTaTemp with information: {}", tlMsTaTemp);

        TlMsTaTemp tlMsTaTempCreated = this.wmGenericDao.create(tlMsTaTemp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tlMsTaTempCreated);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsTaTemp getById(Integer tlmstatempId) {
        LOGGER.debug("Finding TlMsTaTemp by id: {}", tlmstatempId);
        return this.wmGenericDao.findById(tlmstatempId);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public TlMsTaTemp findById(Integer tlmstatempId) {
        LOGGER.debug("Finding TlMsTaTemp by id: {}", tlmstatempId);
        try {
            return this.wmGenericDao.findById(tlmstatempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TlMsTaTemp found with id: {}", tlmstatempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public List<TlMsTaTemp> findByMultipleIds(List<Integer> tlmstatempIds, boolean orderedReturn) {
        LOGGER.debug("Finding TlMsTaTemps by ids: {}", tlmstatempIds);

        return this.wmGenericDao.findByMultipleIds(tlmstatempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AVM2TransactionManager")
    @Override
    public TlMsTaTemp update(TlMsTaTemp tlMsTaTemp) {
        LOGGER.debug("Updating TlMsTaTemp with information: {}", tlMsTaTemp);

        this.wmGenericDao.update(tlMsTaTemp);
        this.wmGenericDao.refresh(tlMsTaTemp);

        return tlMsTaTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsTaTemp partialUpdate(Integer tlmstatempId, Map<String, Object>tlMsTaTempPatch) {
        LOGGER.debug("Partially Updating the TlMsTaTemp with id: {}", tlmstatempId);

        TlMsTaTemp tlMsTaTemp = getById(tlmstatempId);

        try {
            ObjectReader tlMsTaTempReader = this.objectMapper.reader().forType(TlMsTaTemp.class).withValueToUpdate(tlMsTaTemp);
            tlMsTaTemp = tlMsTaTempReader.readValue(this.objectMapper.writeValueAsString(tlMsTaTempPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tlMsTaTempPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tlMsTaTemp = update(tlMsTaTemp);

        return tlMsTaTemp;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public TlMsTaTemp delete(Integer tlmstatempId) {
        LOGGER.debug("Deleting TlMsTaTemp with id: {}", tlmstatempId);
        TlMsTaTemp deleted = this.wmGenericDao.findById(tlmstatempId);
        if (deleted == null) {
            LOGGER.debug("No TlMsTaTemp found with id: {}", tlmstatempId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TlMsTaTemp.class.getSimpleName(), tlmstatempId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AVM2TransactionManager")
    @Override
    public void delete(TlMsTaTemp tlMsTaTemp) {
        LOGGER.debug("Deleting TlMsTaTemp with {}", tlMsTaTemp);
        this.wmGenericDao.delete(tlMsTaTemp);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsTaTemp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TlMsTaTemps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<TlMsTaTemp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TlMsTaTemps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsTaTemp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AVM2 for table TlMsTaTemp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AVM2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}