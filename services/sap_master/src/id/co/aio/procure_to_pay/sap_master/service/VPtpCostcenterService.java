/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpCostcenter;
import id.co.aio.procure_to_pay.sap_master.VPtpCostcenterId;

/**
 * Service object for domain model class {@link VPtpCostcenter}.
 */
public interface VPtpCostcenterService {

    /**
     * Creates a new VPtpCostcenter. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCostcenter if any.
     *
     * @param vptpCostcenter Details of the VPtpCostcenter to be created; value cannot be null.
     * @return The newly created VPtpCostcenter.
     */
    VPtpCostcenter create(@Valid VPtpCostcenter vptpCostcenter);


	/**
     * Returns VPtpCostcenter by given id if exists.
     *
     * @param vptpcostcenterId The id of the VPtpCostcenter to get; value cannot be null.
     * @return VPtpCostcenter associated with the given vptpcostcenterId.
	 * @throws EntityNotFoundException If no VPtpCostcenter is found.
     */
    VPtpCostcenter getById(VPtpCostcenterId vptpcostcenterId);

    /**
     * Find and return the VPtpCostcenter by given id if exists, returns null otherwise.
     *
     * @param vptpcostcenterId The id of the VPtpCostcenter to get; value cannot be null.
     * @return VPtpCostcenter associated with the given vptpcostcenterId.
     */
    VPtpCostcenter findById(VPtpCostcenterId vptpcostcenterId);

	/**
     * Find and return the list of VPtpCostcenters by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vptpcostcenterIds The id's of the VPtpCostcenter to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPtpCostcenters associated with the given vptpcostcenterIds.
     */
    List<VPtpCostcenter> findByMultipleIds(List<VPtpCostcenterId> vptpcostcenterIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPtpCostcenter. It replaces all fields of the existing VPtpCostcenter with the given vptpCostcenter.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCostcenter if any.
     *
     * @param vptpCostcenter The details of the VPtpCostcenter to be updated; value cannot be null.
     * @return The updated VPtpCostcenter.
     * @throws EntityNotFoundException if no VPtpCostcenter is found with given input.
     */
    VPtpCostcenter update(@Valid VPtpCostcenter vptpCostcenter);


    /**
     * Partially updates the details of an existing VPtpCostcenter. It updates only the
     * fields of the existing VPtpCostcenter which are passed in the vptpCostcenterPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCostcenter if any.
     *
     * @param vptpcostcenterId The id of the VPtpCostcenter to be deleted; value cannot be null.
     * @param vptpCostcenterPatch The partial data of VPtpCostcenter which is supposed to be updated; value cannot be null.
     * @return The updated VPtpCostcenter.
     * @throws EntityNotFoundException if no VPtpCostcenter is found with given input.
     */
    VPtpCostcenter partialUpdate(VPtpCostcenterId vptpcostcenterId, Map<String, Object> vptpCostcenterPatch);

    /**
     * Deletes an existing VPtpCostcenter with the given id.
     *
     * @param vptpcostcenterId The id of the VPtpCostcenter to be deleted; value cannot be null.
     * @return The deleted VPtpCostcenter.
     * @throws EntityNotFoundException if no VPtpCostcenter found with the given id.
     */
    VPtpCostcenter delete(VPtpCostcenterId vptpcostcenterId);

    /**
     * Deletes an existing VPtpCostcenter with the given object.
     *
     * @param vptpCostcenter The instance of the VPtpCostcenter to be deleted; value cannot be null.
     */
    void delete(VPtpCostcenter vptpCostcenter);

    /**
     * Find all VPtpCostcenters matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPtpCostcenters.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPtpCostcenter> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPtpCostcenters matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPtpCostcenters.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPtpCostcenter> findAll(String query, Pageable pageable);

    /**
     * Exports all VPtpCostcenters matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPtpCostcenters matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPtpCostcenters in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPtpCostcenter.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}