/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.VPtpMaterialGroup;
import id.co.aio.procure_to_pay.sap_master.VPtpMaterialGroupId;
import id.co.aio.procure_to_pay.sap_master.service.VPtpMaterialGroupService;


/**
 * Controller object for domain model class VPtpMaterialGroup.
 * @see VPtpMaterialGroup
 */
@RestController("sap_master.VPtpMaterialGroupController")
@Api(value = "VPtpMaterialGroupController", description = "Exposes APIs to work with VPtpMaterialGroup resource.")
@RequestMapping("/sap_master/VPtpMaterialGroup")
public class VPtpMaterialGroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpMaterialGroupController.class);

    @Autowired
	@Qualifier("sap_master.VPtpMaterialGroupService")
	private VPtpMaterialGroupService vPtpMaterialGroupService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPtpMaterialGroup instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpMaterialGroup createVPtpMaterialGroup(@RequestBody VPtpMaterialGroup vptpMaterialGroup) {
		LOGGER.debug("Create VPtpMaterialGroup with information: {}" , vptpMaterialGroup);

		vptpMaterialGroup = vPtpMaterialGroupService.create(vptpMaterialGroup);
		LOGGER.debug("Created VPtpMaterialGroup with information: {}" , vptpMaterialGroup);

	    return vptpMaterialGroup;
	}

    @ApiOperation(value = "Returns the VPtpMaterialGroup instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpMaterialGroup getVPtpMaterialGroup(@RequestParam("authGroup") String authGroup, @RequestParam("materialGroupDesc60") String materialGroupDesc60, @RequestParam("materialGroup") String materialGroup, @RequestParam("materialGroupDesc") String materialGroupDesc) {

        VPtpMaterialGroupId vptpmaterialgroupId = new VPtpMaterialGroupId();
        vptpmaterialgroupId.setAuthGroup(authGroup);
        vptpmaterialgroupId.setMaterialGroupDesc60(materialGroupDesc60);
        vptpmaterialgroupId.setMaterialGroup(materialGroup);
        vptpmaterialgroupId.setMaterialGroupDesc(materialGroupDesc);

        LOGGER.debug("Getting VPtpMaterialGroup with id: {}" , vptpmaterialgroupId);
        VPtpMaterialGroup vptpMaterialGroup = vPtpMaterialGroupService.getById(vptpmaterialgroupId);
        LOGGER.debug("VPtpMaterialGroup details with id: {}" , vptpMaterialGroup);

        return vptpMaterialGroup;
    }



    @ApiOperation(value = "Updates the VPtpMaterialGroup instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpMaterialGroup editVPtpMaterialGroup(@RequestParam("authGroup") String authGroup, @RequestParam("materialGroupDesc60") String materialGroupDesc60, @RequestParam("materialGroup") String materialGroup, @RequestParam("materialGroupDesc") String materialGroupDesc, @RequestBody VPtpMaterialGroup vptpMaterialGroup) {

        vptpMaterialGroup.setAuthGroup(authGroup);
        vptpMaterialGroup.setMaterialGroupDesc60(materialGroupDesc60);
        vptpMaterialGroup.setMaterialGroup(materialGroup);
        vptpMaterialGroup.setMaterialGroupDesc(materialGroupDesc);

        LOGGER.debug("VPtpMaterialGroup details with id is updated with: {}" , vptpMaterialGroup);

        return vPtpMaterialGroupService.update(vptpMaterialGroup);
    }

	@ApiOperation(value = "Partially updates the  VPtpMaterialGroup instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpMaterialGroup patchVPtpMaterialGroup(@RequestParam("authGroup") String authGroup, @RequestParam("materialGroupDesc60") String materialGroupDesc60, @RequestParam("materialGroup") String materialGroup, @RequestParam("materialGroupDesc") String materialGroupDesc, @RequestBody @MapTo(VPtpMaterialGroup.class) Map<String, Object> vptpMaterialGroupPatch) {

        VPtpMaterialGroupId vptpmaterialgroupId = new VPtpMaterialGroupId();
        vptpmaterialgroupId.setAuthGroup(authGroup);
        vptpmaterialgroupId.setMaterialGroupDesc60(materialGroupDesc60);
        vptpmaterialgroupId.setMaterialGroup(materialGroup);
        vptpmaterialgroupId.setMaterialGroupDesc(materialGroupDesc);
        LOGGER.debug("Partially updating VPtpMaterialGroup with id: {}" , vptpmaterialgroupId);

        VPtpMaterialGroup vptpMaterialGroup = vPtpMaterialGroupService.partialUpdate(vptpmaterialgroupId, vptpMaterialGroupPatch);
        LOGGER.debug("VPtpMaterialGroup details after partial update: {}" , vptpMaterialGroup);

        return vptpMaterialGroup;
    }


    @ApiOperation(value = "Deletes the VPtpMaterialGroup instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPtpMaterialGroup(@RequestParam("authGroup") String authGroup, @RequestParam("materialGroupDesc60") String materialGroupDesc60, @RequestParam("materialGroup") String materialGroup, @RequestParam("materialGroupDesc") String materialGroupDesc) {

        VPtpMaterialGroupId vptpmaterialgroupId = new VPtpMaterialGroupId();
        vptpmaterialgroupId.setAuthGroup(authGroup);
        vptpmaterialgroupId.setMaterialGroupDesc60(materialGroupDesc60);
        vptpmaterialgroupId.setMaterialGroup(materialGroup);
        vptpmaterialgroupId.setMaterialGroupDesc(materialGroupDesc);

        LOGGER.debug("Deleting VPtpMaterialGroup with id: {}" , vptpmaterialgroupId);
        VPtpMaterialGroup vptpMaterialGroup = vPtpMaterialGroupService.delete(vptpmaterialgroupId);

        return vptpMaterialGroup != null;
    }


    /**
     * @deprecated Use {@link #findVPtpMaterialGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPtpMaterialGroup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpMaterialGroup> searchVPtpMaterialGroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPtpMaterialGroups list by query filter:{}", (Object) queryFilters);
        return vPtpMaterialGroupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpMaterialGroup instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpMaterialGroup> findVPtpMaterialGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpMaterialGroups list by filter:", query);
        return vPtpMaterialGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpMaterialGroup instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpMaterialGroup> filterVPtpMaterialGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpMaterialGroups list by filter", query);
        return vPtpMaterialGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPtpMaterialGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPtpMaterialGroupService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPtpMaterialGroupsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPtpMaterialGroup.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPtpMaterialGroupService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPtpMaterialGroup instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPtpMaterialGroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPtpMaterialGroups");
		return vPtpMaterialGroupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPtpMaterialGroupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPtpMaterialGroupService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPtpMaterialGroupService instance
	 */
	protected void setVPtpMaterialGroupService(VPtpMaterialGroupService service) {
		this.vPtpMaterialGroupService = service;
	}

}