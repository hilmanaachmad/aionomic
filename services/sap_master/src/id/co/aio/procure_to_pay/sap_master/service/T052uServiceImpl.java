/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T052u;
import id.co.aio.procure_to_pay.sap_master.T052uId;


/**
 * ServiceImpl object for domain model class T052u.
 *
 * @see T052u
 */
@Service("sap_master.T052uService")
@Validated
@EntityService(entityClass = T052u.class, serviceId = "sap_master")
public class T052uServiceImpl implements T052uService {

    private static final Logger LOGGER = LoggerFactory.getLogger(T052uServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.T052uDao")
    private WMGenericDao<T052u, T052uId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<T052u, T052uId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T052u create(T052u t052u) {
        LOGGER.debug("Creating a new T052u with information: {}", t052u);

        T052u t052uCreated = this.wmGenericDao.create(t052u);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(t052uCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T052u getById(T052uId t052uId) {
        LOGGER.debug("Finding T052u by id: {}", t052uId);
        return this.wmGenericDao.findById(t052uId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T052u findById(T052uId t052uId) {
        LOGGER.debug("Finding T052u by id: {}", t052uId);
        try {
            return this.wmGenericDao.findById(t052uId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No T052u found with id: {}", t052uId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<T052u> findByMultipleIds(List<T052uId> t052uIds, boolean orderedReturn) {
        LOGGER.debug("Finding T052us by ids: {}", t052uIds);

        return this.wmGenericDao.findByMultipleIds(t052uIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public T052u update(T052u t052u) {
        LOGGER.debug("Updating T052u with information: {}", t052u);

        this.wmGenericDao.update(t052u);
        this.wmGenericDao.refresh(t052u);

        return t052u;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T052u partialUpdate(T052uId t052uId, Map<String, Object>t052uPatch) {
        LOGGER.debug("Partially Updating the T052u with id: {}", t052uId);

        T052u t052u = getById(t052uId);

        try {
            ObjectReader t052uReader = this.objectMapper.reader().forType(T052u.class).withValueToUpdate(t052u);
            t052u = t052uReader.readValue(this.objectMapper.writeValueAsString(t052uPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", t052uPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        t052u = update(t052u);

        return t052u;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T052u delete(T052uId t052uId) {
        LOGGER.debug("Deleting T052u with id: {}", t052uId);
        T052u deleted = this.wmGenericDao.findById(t052uId);
        if (deleted == null) {
            LOGGER.debug("No T052u found with id: {}", t052uId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), T052u.class.getSimpleName(), t052uId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(T052u t052u) {
        LOGGER.debug("Deleting T052u with {}", t052u);
        this.wmGenericDao.delete(t052u);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T052u> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all T052us");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T052u> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all T052us");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table T052u to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table T052u to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
