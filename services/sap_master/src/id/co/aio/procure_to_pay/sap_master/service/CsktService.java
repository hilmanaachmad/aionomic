/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.Cskt;
import id.co.aio.procure_to_pay.sap_master.CsktId;

/**
 * Service object for domain model class {@link Cskt}.
 */
public interface CsktService {

    /**
     * Creates a new Cskt. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cskt if any.
     *
     * @param cskt Details of the Cskt to be created; value cannot be null.
     * @return The newly created Cskt.
     */
    Cskt create(@Valid Cskt cskt);


	/**
     * Returns Cskt by given id if exists.
     *
     * @param csktId The id of the Cskt to get; value cannot be null.
     * @return Cskt associated with the given csktId.
	 * @throws EntityNotFoundException If no Cskt is found.
     */
    Cskt getById(CsktId csktId);

    /**
     * Find and return the Cskt by given id if exists, returns null otherwise.
     *
     * @param csktId The id of the Cskt to get; value cannot be null.
     * @return Cskt associated with the given csktId.
     */
    Cskt findById(CsktId csktId);

	/**
     * Find and return the list of Cskts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param csktIds The id's of the Cskt to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Cskts associated with the given csktIds.
     */
    List<Cskt> findByMultipleIds(List<CsktId> csktIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Cskt. It replaces all fields of the existing Cskt with the given cskt.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cskt if any.
     *
     * @param cskt The details of the Cskt to be updated; value cannot be null.
     * @return The updated Cskt.
     * @throws EntityNotFoundException if no Cskt is found with given input.
     */
    Cskt update(@Valid Cskt cskt);


    /**
     * Partially updates the details of an existing Cskt. It updates only the
     * fields of the existing Cskt which are passed in the csktPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cskt if any.
     *
     * @param csktId The id of the Cskt to be deleted; value cannot be null.
     * @param csktPatch The partial data of Cskt which is supposed to be updated; value cannot be null.
     * @return The updated Cskt.
     * @throws EntityNotFoundException if no Cskt is found with given input.
     */
    Cskt partialUpdate(CsktId csktId, Map<String, Object> csktPatch);

    /**
     * Deletes an existing Cskt with the given id.
     *
     * @param csktId The id of the Cskt to be deleted; value cannot be null.
     * @return The deleted Cskt.
     * @throws EntityNotFoundException if no Cskt found with the given id.
     */
    Cskt delete(CsktId csktId);

    /**
     * Deletes an existing Cskt with the given object.
     *
     * @param cskt The instance of the Cskt to be deleted; value cannot be null.
     */
    void delete(Cskt cskt);

    /**
     * Find all Cskts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Cskts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Cskt> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Cskts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Cskts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Cskt> findAll(String query, Pageable pageable);

    /**
     * Exports all Cskts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Cskts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Cskts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Cskt.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}