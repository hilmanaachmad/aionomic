/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.Skat;
import id.co.aio.procure_to_pay.sap_master.SkatId;


/**
 * ServiceImpl object for domain model class Skat.
 *
 * @see Skat
 */
@Service("sap_master.SkatService")
@Validated
@EntityService(entityClass = Skat.class, serviceId = "sap_master")
public class SkatServiceImpl implements SkatService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SkatServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.SkatDao")
    private WMGenericDao<Skat, SkatId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Skat, SkatId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public Skat create(Skat skat) {
        LOGGER.debug("Creating a new Skat with information: {}", skat);

        Skat skatCreated = this.wmGenericDao.create(skat);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(skatCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Skat getById(SkatId skatId) {
        LOGGER.debug("Finding Skat by id: {}", skatId);
        return this.wmGenericDao.findById(skatId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Skat findById(SkatId skatId) {
        LOGGER.debug("Finding Skat by id: {}", skatId);
        try {
            return this.wmGenericDao.findById(skatId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Skat found with id: {}", skatId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<Skat> findByMultipleIds(List<SkatId> skatIds, boolean orderedReturn) {
        LOGGER.debug("Finding Skats by ids: {}", skatIds);

        return this.wmGenericDao.findByMultipleIds(skatIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public Skat update(Skat skat) {
        LOGGER.debug("Updating Skat with information: {}", skat);

        this.wmGenericDao.update(skat);
        this.wmGenericDao.refresh(skat);

        return skat;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public Skat partialUpdate(SkatId skatId, Map<String, Object>skatPatch) {
        LOGGER.debug("Partially Updating the Skat with id: {}", skatId);

        Skat skat = getById(skatId);

        try {
            ObjectReader skatReader = this.objectMapper.reader().forType(Skat.class).withValueToUpdate(skat);
            skat = skatReader.readValue(this.objectMapper.writeValueAsString(skatPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", skatPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        skat = update(skat);

        return skat;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public Skat delete(SkatId skatId) {
        LOGGER.debug("Deleting Skat with id: {}", skatId);
        Skat deleted = this.wmGenericDao.findById(skatId);
        if (deleted == null) {
            LOGGER.debug("No Skat found with id: {}", skatId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Skat.class.getSimpleName(), skatId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(Skat skat) {
        LOGGER.debug("Deleting Skat with {}", skat);
        this.wmGenericDao.delete(skat);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Skat> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Skats");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Skat> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Skats");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table Skat to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table Skat to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
