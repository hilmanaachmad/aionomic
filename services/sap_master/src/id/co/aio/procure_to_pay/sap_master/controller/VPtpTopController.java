/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.VPtpTop;
import id.co.aio.procure_to_pay.sap_master.VPtpTopId;
import id.co.aio.procure_to_pay.sap_master.service.VPtpTopService;


/**
 * Controller object for domain model class VPtpTop.
 * @see VPtpTop
 */
@RestController("sap_master.VPtpTopController")
@Api(value = "VPtpTopController", description = "Exposes APIs to work with VPtpTop resource.")
@RequestMapping("/sap_master/VPtpTop")
public class VPtpTopController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpTopController.class);

    @Autowired
	@Qualifier("sap_master.VPtpTopService")
	private VPtpTopService vPtpTopService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPtpTop instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpTop createVPtpTop(@RequestBody VPtpTop vptpTop) {
		LOGGER.debug("Create VPtpTop with information: {}" , vptpTop);

		vptpTop = vPtpTopService.create(vptpTop);
		LOGGER.debug("Created VPtpTop with information: {}" , vptpTop);

	    return vptpTop;
	}

    @ApiOperation(value = "Returns the VPtpTop instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpTop getVPtpTop(@RequestParam("text1") String text1, @RequestParam("numberOfDays") Short numberOfDays, @RequestParam("topDescription") String topDescription, @RequestParam("paymentTermCode") String paymentTermCode) {

        VPtpTopId vptptopId = new VPtpTopId();
        vptptopId.setText1(text1);
        vptptopId.setNumberOfDays(numberOfDays);
        vptptopId.setTopDescription(topDescription);
        vptptopId.setPaymentTermCode(paymentTermCode);

        LOGGER.debug("Getting VPtpTop with id: {}" , vptptopId);
        VPtpTop vptpTop = vPtpTopService.getById(vptptopId);
        LOGGER.debug("VPtpTop details with id: {}" , vptpTop);

        return vptpTop;
    }



    @ApiOperation(value = "Updates the VPtpTop instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpTop editVPtpTop(@RequestParam("text1") String text1, @RequestParam("numberOfDays") Short numberOfDays, @RequestParam("topDescription") String topDescription, @RequestParam("paymentTermCode") String paymentTermCode, @RequestBody VPtpTop vptpTop) {

        vptpTop.setText1(text1);
        vptpTop.setNumberOfDays(numberOfDays);
        vptpTop.setTopDescription(topDescription);
        vptpTop.setPaymentTermCode(paymentTermCode);

        LOGGER.debug("VPtpTop details with id is updated with: {}" , vptpTop);

        return vPtpTopService.update(vptpTop);
    }

	@ApiOperation(value = "Partially updates the  VPtpTop instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpTop patchVPtpTop(@RequestParam("text1") String text1, @RequestParam("numberOfDays") Short numberOfDays, @RequestParam("topDescription") String topDescription, @RequestParam("paymentTermCode") String paymentTermCode, @RequestBody @MapTo(VPtpTop.class) Map<String, Object> vptpTopPatch) {

        VPtpTopId vptptopId = new VPtpTopId();
        vptptopId.setText1(text1);
        vptptopId.setNumberOfDays(numberOfDays);
        vptptopId.setTopDescription(topDescription);
        vptptopId.setPaymentTermCode(paymentTermCode);
        LOGGER.debug("Partially updating VPtpTop with id: {}" , vptptopId);

        VPtpTop vptpTop = vPtpTopService.partialUpdate(vptptopId, vptpTopPatch);
        LOGGER.debug("VPtpTop details after partial update: {}" , vptpTop);

        return vptpTop;
    }


    @ApiOperation(value = "Deletes the VPtpTop instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPtpTop(@RequestParam("text1") String text1, @RequestParam("numberOfDays") Short numberOfDays, @RequestParam("topDescription") String topDescription, @RequestParam("paymentTermCode") String paymentTermCode) {

        VPtpTopId vptptopId = new VPtpTopId();
        vptptopId.setText1(text1);
        vptptopId.setNumberOfDays(numberOfDays);
        vptptopId.setTopDescription(topDescription);
        vptptopId.setPaymentTermCode(paymentTermCode);

        LOGGER.debug("Deleting VPtpTop with id: {}" , vptptopId);
        VPtpTop vptpTop = vPtpTopService.delete(vptptopId);

        return vptpTop != null;
    }


    /**
     * @deprecated Use {@link #findVPtpTops(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPtpTop instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpTop> searchVPtpTopsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPtpTops list by query filter:{}", (Object) queryFilters);
        return vPtpTopService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpTop instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpTop> findVPtpTops(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpTops list by filter:", query);
        return vPtpTopService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpTop instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpTop> filterVPtpTops(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpTops list by filter", query);
        return vPtpTopService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPtpTops(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPtpTopService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPtpTopsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPtpTop.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPtpTopService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPtpTop instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPtpTops( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPtpTops");
		return vPtpTopService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPtpTopAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPtpTopService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPtpTopService instance
	 */
	protected void setVPtpTopService(VPtpTopService service) {
		this.vPtpTopService = service;
	}

}