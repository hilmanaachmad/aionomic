/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import id.co.aio.procure_to_pay.sap_master.service.Sap_masterQueryExecutorService;
import id.co.aio.procure_to_pay.sap_master.models.query.*;

@RestController(value = "Sap_master.QueryExecutionController")
@RequestMapping("/sap_master/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Sap_masterQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/getCurrencyByCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get currency by code")
    public Page<GetCurrencyByCodeResponse> executeGetCurrencyByCode(@RequestParam(value = "currs", required = false) String currs, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCurrencyByCode");
        Page<GetCurrencyByCodeResponse> _result = queryService.executeGetCurrencyByCode(currs, pageable);
        LOGGER.debug("got the result for named query: getCurrencyByCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getCurrencyByCode")
    @RequestMapping(value = "/queries/getCurrencyByCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetCurrencyByCode(@RequestParam(value = "currs", required = false) String currs, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCurrencyByCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getCurrencyByCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetCurrencyByCode(currs,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getCurrencyPRLineItem", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get currency to IDR for Line Item PR")
    public Page<GetCurrencyPrlineItemResponse> executeGetCurrencyPRLineItem(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCurrencyPRLineItem");
        Page<GetCurrencyPrlineItemResponse> _result = queryService.executeGetCurrencyPRLineItem(pageable);
        LOGGER.debug("got the result for named query: getCurrencyPRLineItem, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getCurrencyPRLineItem")
    @RequestMapping(value = "/queries/getCurrencyPRLineItem/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetCurrencyPRLineItem(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCurrencyPRLineItem");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getCurrencyPRLineItem";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetCurrencyPRLineItem( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getTOP", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTOP")
    public Page<GetTopResponse> executeGetTOP(@RequestParam(value = "top") String top, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTOP");
        Page<GetTopResponse> _result = queryService.executeGetTOP(top, pageable);
        LOGGER.debug("got the result for named query: getTOP, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTOP")
    @RequestMapping(value = "/queries/getTOP/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetTOP(@RequestParam(value = "top") String top, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTOP");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTOP";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTOP(top,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}