/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpUom;
import id.co.aio.procure_to_pay.sap_master.VPtpUomId;


/**
 * ServiceImpl object for domain model class VPtpUom.
 *
 * @see VPtpUom
 */
@Service("sap_master.VPtpUomService")
@Validated
@EntityService(entityClass = VPtpUom.class, serviceId = "sap_master")
public class VPtpUomServiceImpl implements VPtpUomService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpUomServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpUomDao")
    private WMGenericDao<VPtpUom, VPtpUomId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpUom, VPtpUomId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpUom create(VPtpUom vptpUom) {
        LOGGER.debug("Creating a new VPtpUom with information: {}", vptpUom);

        VPtpUom vptpUomCreated = this.wmGenericDao.create(vptpUom);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpUomCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpUom getById(VPtpUomId vptpuomId) {
        LOGGER.debug("Finding VPtpUom by id: {}", vptpuomId);
        return this.wmGenericDao.findById(vptpuomId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpUom findById(VPtpUomId vptpuomId) {
        LOGGER.debug("Finding VPtpUom by id: {}", vptpuomId);
        try {
            return this.wmGenericDao.findById(vptpuomId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpUom found with id: {}", vptpuomId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpUom> findByMultipleIds(List<VPtpUomId> vptpuomIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpUoms by ids: {}", vptpuomIds);

        return this.wmGenericDao.findByMultipleIds(vptpuomIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpUom update(VPtpUom vptpUom) {
        LOGGER.debug("Updating VPtpUom with information: {}", vptpUom);

        this.wmGenericDao.update(vptpUom);
        this.wmGenericDao.refresh(vptpUom);

        return vptpUom;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpUom partialUpdate(VPtpUomId vptpuomId, Map<String, Object>vptpUomPatch) {
        LOGGER.debug("Partially Updating the VPtpUom with id: {}", vptpuomId);

        VPtpUom vptpUom = getById(vptpuomId);

        try {
            ObjectReader vptpUomReader = this.objectMapper.reader().forType(VPtpUom.class).withValueToUpdate(vptpUom);
            vptpUom = vptpUomReader.readValue(this.objectMapper.writeValueAsString(vptpUomPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpUomPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpUom = update(vptpUom);

        return vptpUom;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpUom delete(VPtpUomId vptpuomId) {
        LOGGER.debug("Deleting VPtpUom with id: {}", vptpuomId);
        VPtpUom deleted = this.wmGenericDao.findById(vptpuomId);
        if (deleted == null) {
            LOGGER.debug("No VPtpUom found with id: {}", vptpuomId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpUom.class.getSimpleName(), vptpuomId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpUom vptpUom) {
        LOGGER.debug("Deleting VPtpUom with {}", vptpUom);
        this.wmGenericDao.delete(vptpUom);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpUom> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpUoms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpUom> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpUoms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpUom to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpUom to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
