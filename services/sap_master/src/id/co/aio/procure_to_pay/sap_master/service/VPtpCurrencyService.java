/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpCurrency;
import id.co.aio.procure_to_pay.sap_master.VPtpCurrencyId;

/**
 * Service object for domain model class {@link VPtpCurrency}.
 */
public interface VPtpCurrencyService {

    /**
     * Creates a new VPtpCurrency. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCurrency if any.
     *
     * @param vptpCurrency Details of the VPtpCurrency to be created; value cannot be null.
     * @return The newly created VPtpCurrency.
     */
    VPtpCurrency create(@Valid VPtpCurrency vptpCurrency);


	/**
     * Returns VPtpCurrency by given id if exists.
     *
     * @param vptpcurrencyId The id of the VPtpCurrency to get; value cannot be null.
     * @return VPtpCurrency associated with the given vptpcurrencyId.
	 * @throws EntityNotFoundException If no VPtpCurrency is found.
     */
    VPtpCurrency getById(VPtpCurrencyId vptpcurrencyId);

    /**
     * Find and return the VPtpCurrency by given id if exists, returns null otherwise.
     *
     * @param vptpcurrencyId The id of the VPtpCurrency to get; value cannot be null.
     * @return VPtpCurrency associated with the given vptpcurrencyId.
     */
    VPtpCurrency findById(VPtpCurrencyId vptpcurrencyId);

	/**
     * Find and return the list of VPtpCurrencies by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vptpcurrencyIds The id's of the VPtpCurrency to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPtpCurrencies associated with the given vptpcurrencyIds.
     */
    List<VPtpCurrency> findByMultipleIds(List<VPtpCurrencyId> vptpcurrencyIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPtpCurrency. It replaces all fields of the existing VPtpCurrency with the given vptpCurrency.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCurrency if any.
     *
     * @param vptpCurrency The details of the VPtpCurrency to be updated; value cannot be null.
     * @return The updated VPtpCurrency.
     * @throws EntityNotFoundException if no VPtpCurrency is found with given input.
     */
    VPtpCurrency update(@Valid VPtpCurrency vptpCurrency);


    /**
     * Partially updates the details of an existing VPtpCurrency. It updates only the
     * fields of the existing VPtpCurrency which are passed in the vptpCurrencyPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCurrency if any.
     *
     * @param vptpcurrencyId The id of the VPtpCurrency to be deleted; value cannot be null.
     * @param vptpCurrencyPatch The partial data of VPtpCurrency which is supposed to be updated; value cannot be null.
     * @return The updated VPtpCurrency.
     * @throws EntityNotFoundException if no VPtpCurrency is found with given input.
     */
    VPtpCurrency partialUpdate(VPtpCurrencyId vptpcurrencyId, Map<String, Object> vptpCurrencyPatch);

    /**
     * Deletes an existing VPtpCurrency with the given id.
     *
     * @param vptpcurrencyId The id of the VPtpCurrency to be deleted; value cannot be null.
     * @return The deleted VPtpCurrency.
     * @throws EntityNotFoundException if no VPtpCurrency found with the given id.
     */
    VPtpCurrency delete(VPtpCurrencyId vptpcurrencyId);

    /**
     * Deletes an existing VPtpCurrency with the given object.
     *
     * @param vptpCurrency The instance of the VPtpCurrency to be deleted; value cannot be null.
     */
    void delete(VPtpCurrency vptpCurrency);

    /**
     * Find all VPtpCurrencies matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPtpCurrencies.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPtpCurrency> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPtpCurrencies matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPtpCurrencies.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPtpCurrency> findAll(String query, Pageable pageable);

    /**
     * Exports all VPtpCurrencies matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPtpCurrencies matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPtpCurrencies in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPtpCurrency.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}