/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpPurchOrg;
import id.co.aio.procure_to_pay.sap_master.VPtpPurchOrgId;


/**
 * ServiceImpl object for domain model class VPtpPurchOrg.
 *
 * @see VPtpPurchOrg
 */
@Service("sap_master.VPtpPurchOrgService")
@Validated
@EntityService(entityClass = VPtpPurchOrg.class, serviceId = "sap_master")
public class VPtpPurchOrgServiceImpl implements VPtpPurchOrgService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpPurchOrgServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpPurchOrgDao")
    private WMGenericDao<VPtpPurchOrg, VPtpPurchOrgId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpPurchOrg, VPtpPurchOrgId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpPurchOrg create(VPtpPurchOrg vptpPurchOrg) {
        LOGGER.debug("Creating a new VPtpPurchOrg with information: {}", vptpPurchOrg);

        VPtpPurchOrg vptpPurchOrgCreated = this.wmGenericDao.create(vptpPurchOrg);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpPurchOrgCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpPurchOrg getById(VPtpPurchOrgId vptppurchorgId) {
        LOGGER.debug("Finding VPtpPurchOrg by id: {}", vptppurchorgId);
        return this.wmGenericDao.findById(vptppurchorgId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpPurchOrg findById(VPtpPurchOrgId vptppurchorgId) {
        LOGGER.debug("Finding VPtpPurchOrg by id: {}", vptppurchorgId);
        try {
            return this.wmGenericDao.findById(vptppurchorgId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpPurchOrg found with id: {}", vptppurchorgId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpPurchOrg> findByMultipleIds(List<VPtpPurchOrgId> vptppurchorgIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpPurchOrgs by ids: {}", vptppurchorgIds);

        return this.wmGenericDao.findByMultipleIds(vptppurchorgIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpPurchOrg update(VPtpPurchOrg vptpPurchOrg) {
        LOGGER.debug("Updating VPtpPurchOrg with information: {}", vptpPurchOrg);

        this.wmGenericDao.update(vptpPurchOrg);
        this.wmGenericDao.refresh(vptpPurchOrg);

        return vptpPurchOrg;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpPurchOrg partialUpdate(VPtpPurchOrgId vptppurchorgId, Map<String, Object>vptpPurchOrgPatch) {
        LOGGER.debug("Partially Updating the VPtpPurchOrg with id: {}", vptppurchorgId);

        VPtpPurchOrg vptpPurchOrg = getById(vptppurchorgId);

        try {
            ObjectReader vptpPurchOrgReader = this.objectMapper.reader().forType(VPtpPurchOrg.class).withValueToUpdate(vptpPurchOrg);
            vptpPurchOrg = vptpPurchOrgReader.readValue(this.objectMapper.writeValueAsString(vptpPurchOrgPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpPurchOrgPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpPurchOrg = update(vptpPurchOrg);

        return vptpPurchOrg;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpPurchOrg delete(VPtpPurchOrgId vptppurchorgId) {
        LOGGER.debug("Deleting VPtpPurchOrg with id: {}", vptppurchorgId);
        VPtpPurchOrg deleted = this.wmGenericDao.findById(vptppurchorgId);
        if (deleted == null) {
            LOGGER.debug("No VPtpPurchOrg found with id: {}", vptppurchorgId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpPurchOrg.class.getSimpleName(), vptppurchorgId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpPurchOrg vptpPurchOrg) {
        LOGGER.debug("Deleting VPtpPurchOrg with {}", vptpPurchOrg);
        this.wmGenericDao.delete(vptpPurchOrg);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpPurchOrg> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpPurchOrgs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpPurchOrg> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpPurchOrgs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpPurchOrg to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpPurchOrg to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
