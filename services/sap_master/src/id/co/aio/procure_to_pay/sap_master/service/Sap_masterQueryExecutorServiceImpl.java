/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import id.co.aio.procure_to_pay.sap_master.models.query.*;

@Service
public class Sap_masterQueryExecutorServiceImpl implements Sap_masterQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Sap_masterQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("sap_masterWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "sap_masterTransactionManager", readOnly = true)
    @Override
    public Page<GetCurrencyByCodeResponse> executeGetCurrencyByCode(String currs, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("currs", currs);

        return queryExecutor.executeNamedQuery("getCurrencyByCode", params, GetCurrencyByCodeResponse.class, pageable);
    }

    @Transactional(value = "sap_masterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetCurrencyByCode(String currs, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("currs", currs);

        QueryProcedureInput<GetCurrencyByCodeResponse> queryInput = new QueryProcedureInput<>("getCurrencyByCode", params, GetCurrencyByCodeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "sap_masterTransactionManager", readOnly = true)
    @Override
    public Page<GetCurrencyPrlineItemResponse> executeGetCurrencyPRLineItem(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getCurrencyPRLineItem", params, GetCurrencyPrlineItemResponse.class, pageable);
    }

    @Transactional(value = "sap_masterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetCurrencyPRLineItem(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetCurrencyPrlineItemResponse> queryInput = new QueryProcedureInput<>("getCurrencyPRLineItem", params, GetCurrencyPrlineItemResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "sap_masterTransactionManager", readOnly = true)
    @Override
    public Page<GetTopResponse> executeGetTOP(String top, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("top", top);

        return queryExecutor.executeNamedQuery("getTOP", params, GetTopResponse.class, pageable);
    }

    @Transactional(value = "sap_masterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTOP(String top, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("top", top);

        QueryProcedureInput<GetTopResponse> queryInput = new QueryProcedureInput<>("getTOP", params, GetTopResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}