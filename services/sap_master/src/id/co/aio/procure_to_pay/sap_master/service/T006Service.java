/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T006;
import id.co.aio.procure_to_pay.sap_master.T006Id;

/**
 * Service object for domain model class {@link T006}.
 */
public interface T006Service {

    /**
     * Creates a new T006. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on T006 if any.
     *
     * @param t006 Details of the T006 to be created; value cannot be null.
     * @return The newly created T006.
     */
    T006 create(@Valid T006 t006);


	/**
     * Returns T006 by given id if exists.
     *
     * @param t006Id The id of the T006 to get; value cannot be null.
     * @return T006 associated with the given t006Id.
	 * @throws EntityNotFoundException If no T006 is found.
     */
    T006 getById(T006Id t006Id);

    /**
     * Find and return the T006 by given id if exists, returns null otherwise.
     *
     * @param t006Id The id of the T006 to get; value cannot be null.
     * @return T006 associated with the given t006Id.
     */
    T006 findById(T006Id t006Id);

	/**
     * Find and return the list of T006s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param t006Ids The id's of the T006 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return T006s associated with the given t006Ids.
     */
    List<T006> findByMultipleIds(List<T006Id> t006Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing T006. It replaces all fields of the existing T006 with the given t006.
     *
     * This method overrides the input field values using Server side or database managed properties defined on T006 if any.
     *
     * @param t006 The details of the T006 to be updated; value cannot be null.
     * @return The updated T006.
     * @throws EntityNotFoundException if no T006 is found with given input.
     */
    T006 update(@Valid T006 t006);


    /**
     * Partially updates the details of an existing T006. It updates only the
     * fields of the existing T006 which are passed in the t006Patch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on T006 if any.
     *
     * @param t006Id The id of the T006 to be deleted; value cannot be null.
     * @param t006Patch The partial data of T006 which is supposed to be updated; value cannot be null.
     * @return The updated T006.
     * @throws EntityNotFoundException if no T006 is found with given input.
     */
    T006 partialUpdate(T006Id t006Id, Map<String, Object> t006Patch);

    /**
     * Deletes an existing T006 with the given id.
     *
     * @param t006Id The id of the T006 to be deleted; value cannot be null.
     * @return The deleted T006.
     * @throws EntityNotFoundException if no T006 found with the given id.
     */
    T006 delete(T006Id t006Id);

    /**
     * Deletes an existing T006 with the given object.
     *
     * @param t006 The instance of the T006 to be deleted; value cannot be null.
     */
    void delete(T006 t006);

    /**
     * Find all T006s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching T006s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<T006> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all T006s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching T006s.
     *
     * @see Pageable
     * @see Page
     */
    Page<T006> findAll(String query, Pageable pageable);

    /**
     * Exports all T006s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all T006s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the T006s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the T006.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}