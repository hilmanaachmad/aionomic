/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T024e;


/**
 * ServiceImpl object for domain model class T024e.
 *
 * @see T024e
 */
@Service("sap_master.T024eService")
@Validated
@EntityService(entityClass = T024e.class, serviceId = "sap_master")
public class T024eServiceImpl implements T024eService {

    private static final Logger LOGGER = LoggerFactory.getLogger(T024eServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.T024eDao")
    private WMGenericDao<T024e, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<T024e, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T024e create(T024e t024e) {
        LOGGER.debug("Creating a new T024e with information: {}", t024e);

        T024e t024eCreated = this.wmGenericDao.create(t024e);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(t024eCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T024e getById(String t024eId) {
        LOGGER.debug("Finding T024e by id: {}", t024eId);
        return this.wmGenericDao.findById(t024eId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T024e findById(String t024eId) {
        LOGGER.debug("Finding T024e by id: {}", t024eId);
        try {
            return this.wmGenericDao.findById(t024eId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No T024e found with id: {}", t024eId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<T024e> findByMultipleIds(List<String> t024eIds, boolean orderedReturn) {
        LOGGER.debug("Finding T024es by ids: {}", t024eIds);

        return this.wmGenericDao.findByMultipleIds(t024eIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public T024e update(T024e t024e) {
        LOGGER.debug("Updating T024e with information: {}", t024e);

        this.wmGenericDao.update(t024e);
        this.wmGenericDao.refresh(t024e);

        return t024e;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T024e partialUpdate(String t024eId, Map<String, Object>t024ePatch) {
        LOGGER.debug("Partially Updating the T024e with id: {}", t024eId);

        T024e t024e = getById(t024eId);

        try {
            ObjectReader t024eReader = this.objectMapper.reader().forType(T024e.class).withValueToUpdate(t024e);
            t024e = t024eReader.readValue(this.objectMapper.writeValueAsString(t024ePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", t024ePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        t024e = update(t024e);

        return t024e;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T024e delete(String t024eId) {
        LOGGER.debug("Deleting T024e with id: {}", t024eId);
        T024e deleted = this.wmGenericDao.findById(t024eId);
        if (deleted == null) {
            LOGGER.debug("No T024e found with id: {}", t024eId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), T024e.class.getSimpleName(), t024eId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(T024e t024e) {
        LOGGER.debug("Deleting T024e with {}", t024e);
        this.wmGenericDao.delete(t024e);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T024e> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all T024es");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T024e> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all T024es");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table T024e to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table T024e to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
