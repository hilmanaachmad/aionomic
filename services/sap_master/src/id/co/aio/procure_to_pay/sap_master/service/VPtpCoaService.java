/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpCoa;
import id.co.aio.procure_to_pay.sap_master.VPtpCoaId;

/**
 * Service object for domain model class {@link VPtpCoa}.
 */
public interface VPtpCoaService {

    /**
     * Creates a new VPtpCoa. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCoa if any.
     *
     * @param vptpCoa Details of the VPtpCoa to be created; value cannot be null.
     * @return The newly created VPtpCoa.
     */
    VPtpCoa create(@Valid VPtpCoa vptpCoa);


	/**
     * Returns VPtpCoa by given id if exists.
     *
     * @param vptpcoaId The id of the VPtpCoa to get; value cannot be null.
     * @return VPtpCoa associated with the given vptpcoaId.
	 * @throws EntityNotFoundException If no VPtpCoa is found.
     */
    VPtpCoa getById(VPtpCoaId vptpcoaId);

    /**
     * Find and return the VPtpCoa by given id if exists, returns null otherwise.
     *
     * @param vptpcoaId The id of the VPtpCoa to get; value cannot be null.
     * @return VPtpCoa associated with the given vptpcoaId.
     */
    VPtpCoa findById(VPtpCoaId vptpcoaId);

	/**
     * Find and return the list of VPtpCoas by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vptpcoaIds The id's of the VPtpCoa to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VPtpCoas associated with the given vptpcoaIds.
     */
    List<VPtpCoa> findByMultipleIds(List<VPtpCoaId> vptpcoaIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VPtpCoa. It replaces all fields of the existing VPtpCoa with the given vptpCoa.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCoa if any.
     *
     * @param vptpCoa The details of the VPtpCoa to be updated; value cannot be null.
     * @return The updated VPtpCoa.
     * @throws EntityNotFoundException if no VPtpCoa is found with given input.
     */
    VPtpCoa update(@Valid VPtpCoa vptpCoa);


    /**
     * Partially updates the details of an existing VPtpCoa. It updates only the
     * fields of the existing VPtpCoa which are passed in the vptpCoaPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VPtpCoa if any.
     *
     * @param vptpcoaId The id of the VPtpCoa to be deleted; value cannot be null.
     * @param vptpCoaPatch The partial data of VPtpCoa which is supposed to be updated; value cannot be null.
     * @return The updated VPtpCoa.
     * @throws EntityNotFoundException if no VPtpCoa is found with given input.
     */
    VPtpCoa partialUpdate(VPtpCoaId vptpcoaId, Map<String, Object> vptpCoaPatch);

    /**
     * Deletes an existing VPtpCoa with the given id.
     *
     * @param vptpcoaId The id of the VPtpCoa to be deleted; value cannot be null.
     * @return The deleted VPtpCoa.
     * @throws EntityNotFoundException if no VPtpCoa found with the given id.
     */
    VPtpCoa delete(VPtpCoaId vptpcoaId);

    /**
     * Deletes an existing VPtpCoa with the given object.
     *
     * @param vptpCoa The instance of the VPtpCoa to be deleted; value cannot be null.
     */
    void delete(VPtpCoa vptpCoa);

    /**
     * Find all VPtpCoas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPtpCoas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VPtpCoa> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VPtpCoas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VPtpCoas.
     *
     * @see Pageable
     * @see Page
     */
    Page<VPtpCoa> findAll(String query, Pageable pageable);

    /**
     * Exports all VPtpCoas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VPtpCoas matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VPtpCoas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VPtpCoa.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}