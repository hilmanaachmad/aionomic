/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.T052u;
import id.co.aio.procure_to_pay.sap_master.T052uId;
import id.co.aio.procure_to_pay.sap_master.service.T052uService;


/**
 * Controller object for domain model class T052u.
 * @see T052u
 */
@RestController("sap_master.T052uController")
@Api(value = "T052uController", description = "Exposes APIs to work with T052u resource.")
@RequestMapping("/sap_master/T052u")
public class T052uController {

    private static final Logger LOGGER = LoggerFactory.getLogger(T052uController.class);

    @Autowired
	@Qualifier("sap_master.T052uService")
	private T052uService t052uService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new T052u instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T052u createT052u(@RequestBody T052u t052u) {
		LOGGER.debug("Create T052u with information: {}" , t052u);

		t052u = t052uService.create(t052u);
		LOGGER.debug("Created T052u with information: {}" , t052u);

	    return t052u;
	}

    @ApiOperation(value = "Returns the T052u instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T052u getT052u(@RequestParam("ztagg") Byte ztagg, @RequestParam("zterm") String zterm) {

        T052uId t052uId = new T052uId();
        t052uId.setZtagg(ztagg);
        t052uId.setZterm(zterm);

        LOGGER.debug("Getting T052u with id: {}" , t052uId);
        T052u t052u = t052uService.getById(t052uId);
        LOGGER.debug("T052u details with id: {}" , t052u);

        return t052u;
    }



    @ApiOperation(value = "Updates the T052u instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T052u editT052u(@RequestParam("ztagg") Byte ztagg, @RequestParam("zterm") String zterm, @RequestBody T052u t052u) {

        t052u.setZtagg(ztagg);
        t052u.setZterm(zterm);

        LOGGER.debug("T052u details with id is updated with: {}" , t052u);

        return t052uService.update(t052u);
    }

	@ApiOperation(value = "Partially updates the  T052u instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T052u patchT052u(@RequestParam("ztagg") Byte ztagg, @RequestParam("zterm") String zterm, @RequestBody @MapTo(T052u.class) Map<String, Object> t052uPatch) {

        T052uId t052uId = new T052uId();
        t052uId.setZtagg(ztagg);
        t052uId.setZterm(zterm);
        LOGGER.debug("Partially updating T052u with id: {}" , t052uId);

        T052u t052u = t052uService.partialUpdate(t052uId, t052uPatch);
        LOGGER.debug("T052u details after partial update: {}" , t052u);

        return t052u;
    }


    @ApiOperation(value = "Deletes the T052u instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteT052u(@RequestParam("ztagg") Byte ztagg, @RequestParam("zterm") String zterm) {

        T052uId t052uId = new T052uId();
        t052uId.setZtagg(ztagg);
        t052uId.setZterm(zterm);

        LOGGER.debug("Deleting T052u with id: {}" , t052uId);
        T052u t052u = t052uService.delete(t052uId);

        return t052u != null;
    }


    /**
     * @deprecated Use {@link #findT052us(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of T052u instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T052u> searchT052usByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering T052us list by query filter:{}", (Object) queryFilters);
        return t052uService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T052u instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T052u> findT052us(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T052us list by filter:", query);
        return t052uService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T052u instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T052u> filterT052us(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T052us list by filter", query);
        return t052uService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportT052us(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return t052uService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportT052usAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = T052u.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> t052uService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of T052u instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countT052us( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting T052us");
		return t052uService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getT052uAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return t052uService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service T052uService instance
	 */
	protected void setT052uService(T052uService service) {
		this.t052uService = service;
	}

}