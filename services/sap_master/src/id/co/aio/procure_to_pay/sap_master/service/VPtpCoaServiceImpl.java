/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpCoa;
import id.co.aio.procure_to_pay.sap_master.VPtpCoaId;


/**
 * ServiceImpl object for domain model class VPtpCoa.
 *
 * @see VPtpCoa
 */
@Service("sap_master.VPtpCoaService")
@Validated
@EntityService(entityClass = VPtpCoa.class, serviceId = "sap_master")
public class VPtpCoaServiceImpl implements VPtpCoaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpCoaServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpCoaDao")
    private WMGenericDao<VPtpCoa, VPtpCoaId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpCoa, VPtpCoaId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCoa create(VPtpCoa vptpCoa) {
        LOGGER.debug("Creating a new VPtpCoa with information: {}", vptpCoa);

        VPtpCoa vptpCoaCreated = this.wmGenericDao.create(vptpCoa);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpCoaCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpCoa getById(VPtpCoaId vptpcoaId) {
        LOGGER.debug("Finding VPtpCoa by id: {}", vptpcoaId);
        return this.wmGenericDao.findById(vptpcoaId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpCoa findById(VPtpCoaId vptpcoaId) {
        LOGGER.debug("Finding VPtpCoa by id: {}", vptpcoaId);
        try {
            return this.wmGenericDao.findById(vptpcoaId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpCoa found with id: {}", vptpcoaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpCoa> findByMultipleIds(List<VPtpCoaId> vptpcoaIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpCoas by ids: {}", vptpcoaIds);

        return this.wmGenericDao.findByMultipleIds(vptpcoaIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpCoa update(VPtpCoa vptpCoa) {
        LOGGER.debug("Updating VPtpCoa with information: {}", vptpCoa);

        this.wmGenericDao.update(vptpCoa);
        this.wmGenericDao.refresh(vptpCoa);

        return vptpCoa;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCoa partialUpdate(VPtpCoaId vptpcoaId, Map<String, Object>vptpCoaPatch) {
        LOGGER.debug("Partially Updating the VPtpCoa with id: {}", vptpcoaId);

        VPtpCoa vptpCoa = getById(vptpcoaId);

        try {
            ObjectReader vptpCoaReader = this.objectMapper.reader().forType(VPtpCoa.class).withValueToUpdate(vptpCoa);
            vptpCoa = vptpCoaReader.readValue(this.objectMapper.writeValueAsString(vptpCoaPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpCoaPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpCoa = update(vptpCoa);

        return vptpCoa;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCoa delete(VPtpCoaId vptpcoaId) {
        LOGGER.debug("Deleting VPtpCoa with id: {}", vptpcoaId);
        VPtpCoa deleted = this.wmGenericDao.findById(vptpcoaId);
        if (deleted == null) {
            LOGGER.debug("No VPtpCoa found with id: {}", vptpcoaId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpCoa.class.getSimpleName(), vptpcoaId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpCoa vptpCoa) {
        LOGGER.debug("Deleting VPtpCoa with {}", vptpCoa);
        this.wmGenericDao.delete(vptpCoa);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpCoa> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpCoas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpCoa> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpCoas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpCoa to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpCoa to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
