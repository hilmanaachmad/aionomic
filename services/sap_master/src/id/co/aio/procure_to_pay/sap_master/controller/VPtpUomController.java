/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.VPtpUom;
import id.co.aio.procure_to_pay.sap_master.VPtpUomId;
import id.co.aio.procure_to_pay.sap_master.service.VPtpUomService;


/**
 * Controller object for domain model class VPtpUom.
 * @see VPtpUom
 */
@RestController("sap_master.VPtpUomController")
@Api(value = "VPtpUomController", description = "Exposes APIs to work with VPtpUom resource.")
@RequestMapping("/sap_master/VPtpUom")
public class VPtpUomController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpUomController.class);

    @Autowired
	@Qualifier("sap_master.VPtpUomService")
	private VPtpUomService vPtpUomService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPtpUom instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpUom createVPtpUom(@RequestBody VPtpUom vptpUom) {
		LOGGER.debug("Create VPtpUom with information: {}" , vptpUom);

		vptpUom = vPtpUomService.create(vptpUom);
		LOGGER.debug("Created VPtpUom with information: {}" , vptpUom);

	    return vptpUom;
	}

    @ApiOperation(value = "Returns the VPtpUom instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpUom getVPtpUom(@RequestParam("uomChar10") String uomChar10, @RequestParam("uom") String uom, @RequestParam("uomChar3") String uomChar3, @RequestParam("uomChar30") String uomChar30, @RequestParam("uomChar6") String uomChar6) {

        VPtpUomId vptpuomId = new VPtpUomId();
        vptpuomId.setUomChar10(uomChar10);
        vptpuomId.setUom(uom);
        vptpuomId.setUomChar3(uomChar3);
        vptpuomId.setUomChar30(uomChar30);
        vptpuomId.setUomChar6(uomChar6);

        LOGGER.debug("Getting VPtpUom with id: {}" , vptpuomId);
        VPtpUom vptpUom = vPtpUomService.getById(vptpuomId);
        LOGGER.debug("VPtpUom details with id: {}" , vptpUom);

        return vptpUom;
    }



    @ApiOperation(value = "Updates the VPtpUom instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpUom editVPtpUom(@RequestParam("uomChar10") String uomChar10, @RequestParam("uom") String uom, @RequestParam("uomChar3") String uomChar3, @RequestParam("uomChar30") String uomChar30, @RequestParam("uomChar6") String uomChar6, @RequestBody VPtpUom vptpUom) {

        vptpUom.setUomChar10(uomChar10);
        vptpUom.setUom(uom);
        vptpUom.setUomChar3(uomChar3);
        vptpUom.setUomChar30(uomChar30);
        vptpUom.setUomChar6(uomChar6);

        LOGGER.debug("VPtpUom details with id is updated with: {}" , vptpUom);

        return vPtpUomService.update(vptpUom);
    }

	@ApiOperation(value = "Partially updates the  VPtpUom instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpUom patchVPtpUom(@RequestParam("uomChar10") String uomChar10, @RequestParam("uom") String uom, @RequestParam("uomChar3") String uomChar3, @RequestParam("uomChar30") String uomChar30, @RequestParam("uomChar6") String uomChar6, @RequestBody @MapTo(VPtpUom.class) Map<String, Object> vptpUomPatch) {

        VPtpUomId vptpuomId = new VPtpUomId();
        vptpuomId.setUomChar10(uomChar10);
        vptpuomId.setUom(uom);
        vptpuomId.setUomChar3(uomChar3);
        vptpuomId.setUomChar30(uomChar30);
        vptpuomId.setUomChar6(uomChar6);
        LOGGER.debug("Partially updating VPtpUom with id: {}" , vptpuomId);

        VPtpUom vptpUom = vPtpUomService.partialUpdate(vptpuomId, vptpUomPatch);
        LOGGER.debug("VPtpUom details after partial update: {}" , vptpUom);

        return vptpUom;
    }


    @ApiOperation(value = "Deletes the VPtpUom instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPtpUom(@RequestParam("uomChar10") String uomChar10, @RequestParam("uom") String uom, @RequestParam("uomChar3") String uomChar3, @RequestParam("uomChar30") String uomChar30, @RequestParam("uomChar6") String uomChar6) {

        VPtpUomId vptpuomId = new VPtpUomId();
        vptpuomId.setUomChar10(uomChar10);
        vptpuomId.setUom(uom);
        vptpuomId.setUomChar3(uomChar3);
        vptpuomId.setUomChar30(uomChar30);
        vptpuomId.setUomChar6(uomChar6);

        LOGGER.debug("Deleting VPtpUom with id: {}" , vptpuomId);
        VPtpUom vptpUom = vPtpUomService.delete(vptpuomId);

        return vptpUom != null;
    }


    /**
     * @deprecated Use {@link #findVPtpUoms(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPtpUom instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpUom> searchVPtpUomsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPtpUoms list by query filter:{}", (Object) queryFilters);
        return vPtpUomService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpUom instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpUom> findVPtpUoms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpUoms list by filter:", query);
        return vPtpUomService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpUom instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpUom> filterVPtpUoms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpUoms list by filter", query);
        return vPtpUomService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPtpUoms(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPtpUomService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPtpUomsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPtpUom.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPtpUomService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPtpUom instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPtpUoms( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPtpUoms");
		return vPtpUomService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPtpUomAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPtpUomService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPtpUomService instance
	 */
	protected void setVPtpUomService(VPtpUomService service) {
		this.vPtpUomService = service;
	}

}