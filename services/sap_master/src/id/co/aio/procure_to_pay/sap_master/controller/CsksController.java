/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.Csks;
import id.co.aio.procure_to_pay.sap_master.CsksId;
import id.co.aio.procure_to_pay.sap_master.service.CsksService;


/**
 * Controller object for domain model class Csks.
 * @see Csks
 */
@RestController("sap_master.CsksController")
@Api(value = "CsksController", description = "Exposes APIs to work with Csks resource.")
@RequestMapping("/sap_master/Csks")
public class CsksController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CsksController.class);

    @Autowired
	@Qualifier("sap_master.CsksService")
	private CsksService csksService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Csks instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Csks createCsks(@RequestBody Csks csks) {
		LOGGER.debug("Create Csks with information: {}" , csks);

		csks = csksService.create(csks);
		LOGGER.debug("Created Csks with information: {}" , csks);

	    return csks;
	}

    @ApiOperation(value = "Returns the Csks instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Csks getCsks(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs) {

        CsksId csksId = new CsksId();
        csksId.setKostl(kostl);
        csksId.setDatbi(datbi);
        csksId.setKokrs(kokrs);

        LOGGER.debug("Getting Csks with id: {}" , csksId);
        Csks csks = csksService.getById(csksId);
        LOGGER.debug("Csks details with id: {}" , csks);

        return csks;
    }



    @ApiOperation(value = "Updates the Csks instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Csks editCsks(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs, @RequestBody Csks csks) {

        csks.setKostl(kostl);
        csks.setDatbi(datbi);
        csks.setKokrs(kokrs);

        LOGGER.debug("Csks details with id is updated with: {}" , csks);

        return csksService.update(csks);
    }

	@ApiOperation(value = "Partially updates the  Csks instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Csks patchCsks(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs, @RequestBody @MapTo(Csks.class) Map<String, Object> csksPatch) {

        CsksId csksId = new CsksId();
        csksId.setKostl(kostl);
        csksId.setDatbi(datbi);
        csksId.setKokrs(kokrs);
        LOGGER.debug("Partially updating Csks with id: {}" , csksId);

        Csks csks = csksService.partialUpdate(csksId, csksPatch);
        LOGGER.debug("Csks details after partial update: {}" , csks);

        return csks;
    }


    @ApiOperation(value = "Deletes the Csks instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCsks(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs) {

        CsksId csksId = new CsksId();
        csksId.setKostl(kostl);
        csksId.setDatbi(datbi);
        csksId.setKokrs(kokrs);

        LOGGER.debug("Deleting Csks with id: {}" , csksId);
        Csks csks = csksService.delete(csksId);

        return csks != null;
    }


    /**
     * @deprecated Use {@link #findCsks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Csks instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csks> searchCsksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Csks list by query filter:{}", (Object) queryFilters);
        return csksService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Csks instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csks> findCsks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Csks list by filter:", query);
        return csksService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Csks instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csks> filterCsks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Csks list by filter", query);
        return csksService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCsks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return csksService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCsksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Csks.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> csksService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Csks instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCsks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Csks");
		return csksService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCsksAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return csksService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CsksService instance
	 */
	protected void setCsksService(CsksService service) {
		this.csksService = service;
	}

}