/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.Tcurr;
import id.co.aio.procure_to_pay.sap_master.TcurrId;


/**
 * ServiceImpl object for domain model class Tcurr.
 *
 * @see Tcurr
 */
@Service("sap_master.TcurrService")
@Validated
@EntityService(entityClass = Tcurr.class, serviceId = "sap_master")
public class TcurrServiceImpl implements TcurrService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TcurrServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.TcurrDao")
    private WMGenericDao<Tcurr, TcurrId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Tcurr, TcurrId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public Tcurr create(Tcurr tcurrInstance) {
        LOGGER.debug("Creating a new Tcurr with information: {}", tcurrInstance);

        Tcurr tcurrInstanceCreated = this.wmGenericDao.create(tcurrInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tcurrInstanceCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Tcurr getById(TcurrId tcurrId) {
        LOGGER.debug("Finding Tcurr by id: {}", tcurrId);
        return this.wmGenericDao.findById(tcurrId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Tcurr findById(TcurrId tcurrId) {
        LOGGER.debug("Finding Tcurr by id: {}", tcurrId);
        try {
            return this.wmGenericDao.findById(tcurrId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Tcurr found with id: {}", tcurrId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<Tcurr> findByMultipleIds(List<TcurrId> tcurrIds, boolean orderedReturn) {
        LOGGER.debug("Finding Tcurrs by ids: {}", tcurrIds);

        return this.wmGenericDao.findByMultipleIds(tcurrIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public Tcurr update(Tcurr tcurrInstance) {
        LOGGER.debug("Updating Tcurr with information: {}", tcurrInstance);

        this.wmGenericDao.update(tcurrInstance);
        this.wmGenericDao.refresh(tcurrInstance);

        return tcurrInstance;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public Tcurr partialUpdate(TcurrId tcurrId, Map<String, Object>tcurrInstancePatch) {
        LOGGER.debug("Partially Updating the Tcurr with id: {}", tcurrId);

        Tcurr tcurrInstance = getById(tcurrId);

        try {
            ObjectReader tcurrInstanceReader = this.objectMapper.reader().forType(Tcurr.class).withValueToUpdate(tcurrInstance);
            tcurrInstance = tcurrInstanceReader.readValue(this.objectMapper.writeValueAsString(tcurrInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tcurrInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        tcurrInstance = update(tcurrInstance);

        return tcurrInstance;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public Tcurr delete(TcurrId tcurrId) {
        LOGGER.debug("Deleting Tcurr with id: {}", tcurrId);
        Tcurr deleted = this.wmGenericDao.findById(tcurrId);
        if (deleted == null) {
            LOGGER.debug("No Tcurr found with id: {}", tcurrId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Tcurr.class.getSimpleName(), tcurrId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(Tcurr tcurrInstance) {
        LOGGER.debug("Deleting Tcurr with {}", tcurrInstance);
        this.wmGenericDao.delete(tcurrInstance);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Tcurr> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Tcurrs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Tcurr> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Tcurrs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table Tcurr to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table Tcurr to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
