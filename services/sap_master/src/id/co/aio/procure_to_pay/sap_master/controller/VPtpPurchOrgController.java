/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.VPtpPurchOrg;
import id.co.aio.procure_to_pay.sap_master.VPtpPurchOrgId;
import id.co.aio.procure_to_pay.sap_master.service.VPtpPurchOrgService;


/**
 * Controller object for domain model class VPtpPurchOrg.
 * @see VPtpPurchOrg
 */
@RestController("sap_master.VPtpPurchOrgController")
@Api(value = "VPtpPurchOrgController", description = "Exposes APIs to work with VPtpPurchOrg resource.")
@RequestMapping("/sap_master/VPtpPurchOrg")
public class VPtpPurchOrgController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpPurchOrgController.class);

    @Autowired
	@Qualifier("sap_master.VPtpPurchOrgService")
	private VPtpPurchOrgService vPtpPurchOrgService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPtpPurchOrg instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpPurchOrg createVPtpPurchOrg(@RequestBody VPtpPurchOrg vptpPurchOrg) {
		LOGGER.debug("Create VPtpPurchOrg with information: {}" , vptpPurchOrg);

		vptpPurchOrg = vPtpPurchOrgService.create(vptpPurchOrg);
		LOGGER.debug("Created VPtpPurchOrg with information: {}" , vptpPurchOrg);

	    return vptpPurchOrg;
	}

    @ApiOperation(value = "Returns the VPtpPurchOrg instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpPurchOrg getVPtpPurchOrg(@RequestParam("purchOrg") String purchOrg, @RequestParam("purchOrgDesc") String purchOrgDesc) {

        VPtpPurchOrgId vptppurchorgId = new VPtpPurchOrgId();
        vptppurchorgId.setPurchOrg(purchOrg);
        vptppurchorgId.setPurchOrgDesc(purchOrgDesc);

        LOGGER.debug("Getting VPtpPurchOrg with id: {}" , vptppurchorgId);
        VPtpPurchOrg vptpPurchOrg = vPtpPurchOrgService.getById(vptppurchorgId);
        LOGGER.debug("VPtpPurchOrg details with id: {}" , vptpPurchOrg);

        return vptpPurchOrg;
    }



    @ApiOperation(value = "Updates the VPtpPurchOrg instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpPurchOrg editVPtpPurchOrg(@RequestParam("purchOrg") String purchOrg, @RequestParam("purchOrgDesc") String purchOrgDesc, @RequestBody VPtpPurchOrg vptpPurchOrg) {

        vptpPurchOrg.setPurchOrg(purchOrg);
        vptpPurchOrg.setPurchOrgDesc(purchOrgDesc);

        LOGGER.debug("VPtpPurchOrg details with id is updated with: {}" , vptpPurchOrg);

        return vPtpPurchOrgService.update(vptpPurchOrg);
    }

	@ApiOperation(value = "Partially updates the  VPtpPurchOrg instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpPurchOrg patchVPtpPurchOrg(@RequestParam("purchOrg") String purchOrg, @RequestParam("purchOrgDesc") String purchOrgDesc, @RequestBody @MapTo(VPtpPurchOrg.class) Map<String, Object> vptpPurchOrgPatch) {

        VPtpPurchOrgId vptppurchorgId = new VPtpPurchOrgId();
        vptppurchorgId.setPurchOrg(purchOrg);
        vptppurchorgId.setPurchOrgDesc(purchOrgDesc);
        LOGGER.debug("Partially updating VPtpPurchOrg with id: {}" , vptppurchorgId);

        VPtpPurchOrg vptpPurchOrg = vPtpPurchOrgService.partialUpdate(vptppurchorgId, vptpPurchOrgPatch);
        LOGGER.debug("VPtpPurchOrg details after partial update: {}" , vptpPurchOrg);

        return vptpPurchOrg;
    }


    @ApiOperation(value = "Deletes the VPtpPurchOrg instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPtpPurchOrg(@RequestParam("purchOrg") String purchOrg, @RequestParam("purchOrgDesc") String purchOrgDesc) {

        VPtpPurchOrgId vptppurchorgId = new VPtpPurchOrgId();
        vptppurchorgId.setPurchOrg(purchOrg);
        vptppurchorgId.setPurchOrgDesc(purchOrgDesc);

        LOGGER.debug("Deleting VPtpPurchOrg with id: {}" , vptppurchorgId);
        VPtpPurchOrg vptpPurchOrg = vPtpPurchOrgService.delete(vptppurchorgId);

        return vptpPurchOrg != null;
    }


    /**
     * @deprecated Use {@link #findVPtpPurchOrgs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPtpPurchOrg instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpPurchOrg> searchVPtpPurchOrgsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPtpPurchOrgs list by query filter:{}", (Object) queryFilters);
        return vPtpPurchOrgService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpPurchOrg instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpPurchOrg> findVPtpPurchOrgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpPurchOrgs list by filter:", query);
        return vPtpPurchOrgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpPurchOrg instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpPurchOrg> filterVPtpPurchOrgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpPurchOrgs list by filter", query);
        return vPtpPurchOrgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPtpPurchOrgs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPtpPurchOrgService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPtpPurchOrgsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPtpPurchOrg.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPtpPurchOrgService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPtpPurchOrg instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPtpPurchOrgs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPtpPurchOrgs");
		return vPtpPurchOrgService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPtpPurchOrgAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPtpPurchOrgService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPtpPurchOrgService instance
	 */
	protected void setVPtpPurchOrgService(VPtpPurchOrgService service) {
		this.vPtpPurchOrgService = service;
	}

}