/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpTop;
import id.co.aio.procure_to_pay.sap_master.VPtpTopId;


/**
 * ServiceImpl object for domain model class VPtpTop.
 *
 * @see VPtpTop
 */
@Service("sap_master.VPtpTopService")
@Validated
@EntityService(entityClass = VPtpTop.class, serviceId = "sap_master")
public class VPtpTopServiceImpl implements VPtpTopService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpTopServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpTopDao")
    private WMGenericDao<VPtpTop, VPtpTopId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpTop, VPtpTopId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpTop create(VPtpTop vptpTop) {
        LOGGER.debug("Creating a new VPtpTop with information: {}", vptpTop);

        VPtpTop vptpTopCreated = this.wmGenericDao.create(vptpTop);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpTopCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpTop getById(VPtpTopId vptptopId) {
        LOGGER.debug("Finding VPtpTop by id: {}", vptptopId);
        return this.wmGenericDao.findById(vptptopId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpTop findById(VPtpTopId vptptopId) {
        LOGGER.debug("Finding VPtpTop by id: {}", vptptopId);
        try {
            return this.wmGenericDao.findById(vptptopId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpTop found with id: {}", vptptopId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpTop> findByMultipleIds(List<VPtpTopId> vptptopIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpTops by ids: {}", vptptopIds);

        return this.wmGenericDao.findByMultipleIds(vptptopIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpTop update(VPtpTop vptpTop) {
        LOGGER.debug("Updating VPtpTop with information: {}", vptpTop);

        this.wmGenericDao.update(vptpTop);
        this.wmGenericDao.refresh(vptpTop);

        return vptpTop;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpTop partialUpdate(VPtpTopId vptptopId, Map<String, Object>vptpTopPatch) {
        LOGGER.debug("Partially Updating the VPtpTop with id: {}", vptptopId);

        VPtpTop vptpTop = getById(vptptopId);

        try {
            ObjectReader vptpTopReader = this.objectMapper.reader().forType(VPtpTop.class).withValueToUpdate(vptpTop);
            vptpTop = vptpTopReader.readValue(this.objectMapper.writeValueAsString(vptpTopPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpTopPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpTop = update(vptpTop);

        return vptpTop;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpTop delete(VPtpTopId vptptopId) {
        LOGGER.debug("Deleting VPtpTop with id: {}", vptptopId);
        VPtpTop deleted = this.wmGenericDao.findById(vptptopId);
        if (deleted == null) {
            LOGGER.debug("No VPtpTop found with id: {}", vptptopId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpTop.class.getSimpleName(), vptptopId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpTop vptpTop) {
        LOGGER.debug("Deleting VPtpTop with {}", vptpTop);
        this.wmGenericDao.delete(vptpTop);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpTop> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpTops");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpTop> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpTops");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpTop to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpTop to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
