/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpCurrency;
import id.co.aio.procure_to_pay.sap_master.VPtpCurrencyId;


/**
 * ServiceImpl object for domain model class VPtpCurrency.
 *
 * @see VPtpCurrency
 */
@Service("sap_master.VPtpCurrencyService")
@Validated
@EntityService(entityClass = VPtpCurrency.class, serviceId = "sap_master")
public class VPtpCurrencyServiceImpl implements VPtpCurrencyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpCurrencyServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpCurrencyDao")
    private WMGenericDao<VPtpCurrency, VPtpCurrencyId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpCurrency, VPtpCurrencyId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCurrency create(VPtpCurrency vptpCurrency) {
        LOGGER.debug("Creating a new VPtpCurrency with information: {}", vptpCurrency);

        VPtpCurrency vptpCurrencyCreated = this.wmGenericDao.create(vptpCurrency);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpCurrencyCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpCurrency getById(VPtpCurrencyId vptpcurrencyId) {
        LOGGER.debug("Finding VPtpCurrency by id: {}", vptpcurrencyId);
        return this.wmGenericDao.findById(vptpcurrencyId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpCurrency findById(VPtpCurrencyId vptpcurrencyId) {
        LOGGER.debug("Finding VPtpCurrency by id: {}", vptpcurrencyId);
        try {
            return this.wmGenericDao.findById(vptpcurrencyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpCurrency found with id: {}", vptpcurrencyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpCurrency> findByMultipleIds(List<VPtpCurrencyId> vptpcurrencyIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpCurrencies by ids: {}", vptpcurrencyIds);

        return this.wmGenericDao.findByMultipleIds(vptpcurrencyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpCurrency update(VPtpCurrency vptpCurrency) {
        LOGGER.debug("Updating VPtpCurrency with information: {}", vptpCurrency);

        this.wmGenericDao.update(vptpCurrency);
        this.wmGenericDao.refresh(vptpCurrency);

        return vptpCurrency;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCurrency partialUpdate(VPtpCurrencyId vptpcurrencyId, Map<String, Object>vptpCurrencyPatch) {
        LOGGER.debug("Partially Updating the VPtpCurrency with id: {}", vptpcurrencyId);

        VPtpCurrency vptpCurrency = getById(vptpcurrencyId);

        try {
            ObjectReader vptpCurrencyReader = this.objectMapper.reader().forType(VPtpCurrency.class).withValueToUpdate(vptpCurrency);
            vptpCurrency = vptpCurrencyReader.readValue(this.objectMapper.writeValueAsString(vptpCurrencyPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpCurrencyPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpCurrency = update(vptpCurrency);

        return vptpCurrency;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCurrency delete(VPtpCurrencyId vptpcurrencyId) {
        LOGGER.debug("Deleting VPtpCurrency with id: {}", vptpcurrencyId);
        VPtpCurrency deleted = this.wmGenericDao.findById(vptpcurrencyId);
        if (deleted == null) {
            LOGGER.debug("No VPtpCurrency found with id: {}", vptpcurrencyId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpCurrency.class.getSimpleName(), vptpcurrencyId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpCurrency vptpCurrency) {
        LOGGER.debug("Deleting VPtpCurrency with {}", vptpCurrency);
        this.wmGenericDao.delete(vptpCurrency);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpCurrency> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpCurrencies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpCurrency> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpCurrencies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpCurrency to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpCurrency to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
