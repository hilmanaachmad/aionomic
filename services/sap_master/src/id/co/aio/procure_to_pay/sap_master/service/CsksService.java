/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.Csks;
import id.co.aio.procure_to_pay.sap_master.CsksId;

/**
 * Service object for domain model class {@link Csks}.
 */
public interface CsksService {

    /**
     * Creates a new Csks. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Csks if any.
     *
     * @param csks Details of the Csks to be created; value cannot be null.
     * @return The newly created Csks.
     */
    Csks create(@Valid Csks csks);


	/**
     * Returns Csks by given id if exists.
     *
     * @param csksId The id of the Csks to get; value cannot be null.
     * @return Csks associated with the given csksId.
	 * @throws EntityNotFoundException If no Csks is found.
     */
    Csks getById(CsksId csksId);

    /**
     * Find and return the Csks by given id if exists, returns null otherwise.
     *
     * @param csksId The id of the Csks to get; value cannot be null.
     * @return Csks associated with the given csksId.
     */
    Csks findById(CsksId csksId);

	/**
     * Find and return the list of Csks by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param csksIds The id's of the Csks to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Csks associated with the given csksIds.
     */
    List<Csks> findByMultipleIds(List<CsksId> csksIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Csks. It replaces all fields of the existing Csks with the given csks.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Csks if any.
     *
     * @param csks The details of the Csks to be updated; value cannot be null.
     * @return The updated Csks.
     * @throws EntityNotFoundException if no Csks is found with given input.
     */
    Csks update(@Valid Csks csks);


    /**
     * Partially updates the details of an existing Csks. It updates only the
     * fields of the existing Csks which are passed in the csksPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Csks if any.
     *
     * @param csksId The id of the Csks to be deleted; value cannot be null.
     * @param csksPatch The partial data of Csks which is supposed to be updated; value cannot be null.
     * @return The updated Csks.
     * @throws EntityNotFoundException if no Csks is found with given input.
     */
    Csks partialUpdate(CsksId csksId, Map<String, Object> csksPatch);

    /**
     * Deletes an existing Csks with the given id.
     *
     * @param csksId The id of the Csks to be deleted; value cannot be null.
     * @return The deleted Csks.
     * @throws EntityNotFoundException if no Csks found with the given id.
     */
    Csks delete(CsksId csksId);

    /**
     * Deletes an existing Csks with the given object.
     *
     * @param csks The instance of the Csks to be deleted; value cannot be null.
     */
    void delete(Csks csks);

    /**
     * Find all Csks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Csks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Csks> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Csks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Csks.
     *
     * @see Pageable
     * @see Page
     */
    Page<Csks> findAll(String query, Pageable pageable);

    /**
     * Exports all Csks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Csks matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Csks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Csks.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}