/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T023t;


/**
 * ServiceImpl object for domain model class T023t.
 *
 * @see T023t
 */
@Service("sap_master.T023tService")
@Validated
@EntityService(entityClass = T023t.class, serviceId = "sap_master")
public class T023tServiceImpl implements T023tService {

    private static final Logger LOGGER = LoggerFactory.getLogger(T023tServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.T023tDao")
    private WMGenericDao<T023t, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<T023t, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T023t create(T023t t023t) {
        LOGGER.debug("Creating a new T023t with information: {}", t023t);

        T023t t023tCreated = this.wmGenericDao.create(t023t);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(t023tCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T023t getById(String t023tId) {
        LOGGER.debug("Finding T023t by id: {}", t023tId);
        return this.wmGenericDao.findById(t023tId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T023t findById(String t023tId) {
        LOGGER.debug("Finding T023t by id: {}", t023tId);
        try {
            return this.wmGenericDao.findById(t023tId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No T023t found with id: {}", t023tId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<T023t> findByMultipleIds(List<String> t023tIds, boolean orderedReturn) {
        LOGGER.debug("Finding T023ts by ids: {}", t023tIds);

        return this.wmGenericDao.findByMultipleIds(t023tIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public T023t update(T023t t023t) {
        LOGGER.debug("Updating T023t with information: {}", t023t);

        this.wmGenericDao.update(t023t);
        this.wmGenericDao.refresh(t023t);

        return t023t;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T023t partialUpdate(String t023tId, Map<String, Object>t023tPatch) {
        LOGGER.debug("Partially Updating the T023t with id: {}", t023tId);

        T023t t023t = getById(t023tId);

        try {
            ObjectReader t023tReader = this.objectMapper.reader().forType(T023t.class).withValueToUpdate(t023t);
            t023t = t023tReader.readValue(this.objectMapper.writeValueAsString(t023tPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", t023tPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        t023t = update(t023t);

        return t023t;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T023t delete(String t023tId) {
        LOGGER.debug("Deleting T023t with id: {}", t023tId);
        T023t deleted = this.wmGenericDao.findById(t023tId);
        if (deleted == null) {
            LOGGER.debug("No T023t found with id: {}", t023tId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), T023t.class.getSimpleName(), t023tId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(T023t t023t) {
        LOGGER.debug("Deleting T023t with {}", t023t);
        this.wmGenericDao.delete(t023t);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T023t> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all T023ts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T023t> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all T023ts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table T023t to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table T023t to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
