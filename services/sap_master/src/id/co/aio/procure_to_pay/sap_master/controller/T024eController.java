/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.T024e;
import id.co.aio.procure_to_pay.sap_master.service.T024eService;


/**
 * Controller object for domain model class T024e.
 * @see T024e
 */
@RestController("sap_master.T024eController")
@Api(value = "T024eController", description = "Exposes APIs to work with T024e resource.")
@RequestMapping("/sap_master/T024e")
public class T024eController {

    private static final Logger LOGGER = LoggerFactory.getLogger(T024eController.class);

    @Autowired
	@Qualifier("sap_master.T024eService")
	private T024eService t024eService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new T024e instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T024e createT024e(@RequestBody T024e t024e) {
		LOGGER.debug("Create T024e with information: {}" , t024e);

		t024e = t024eService.create(t024e);
		LOGGER.debug("Created T024e with information: {}" , t024e);

	    return t024e;
	}

    @ApiOperation(value = "Returns the T024e instance associated with the given id.")
    @RequestMapping(value = "/{ekorg:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T024e getT024e(@PathVariable("ekorg") String ekorg) {
        LOGGER.debug("Getting T024e with id: {}" , ekorg);

        T024e foundT024e = t024eService.getById(ekorg);
        LOGGER.debug("T024e details with id: {}" , foundT024e);

        return foundT024e;
    }

    @ApiOperation(value = "Updates the T024e instance associated with the given id.")
    @RequestMapping(value = "/{ekorg:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T024e editT024e(@PathVariable("ekorg") String ekorg, @RequestBody T024e t024e) {
        LOGGER.debug("Editing T024e with id: {}" , t024e.getEkorg());

        t024e.setEkorg(ekorg);
        t024e = t024eService.update(t024e);
        LOGGER.debug("T024e details with id: {}" , t024e);

        return t024e;
    }
    
    @ApiOperation(value = "Partially updates the T024e instance associated with the given id.")
    @RequestMapping(value = "/{ekorg:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T024e patchT024e(@PathVariable("ekorg") String ekorg, @RequestBody @MapTo(T024e.class) Map<String, Object> t024ePatch) {
        LOGGER.debug("Partially updating T024e with id: {}" , ekorg);

        T024e t024e = t024eService.partialUpdate(ekorg, t024ePatch);
        LOGGER.debug("T024e details after partial update: {}" , t024e);

        return t024e;
    }

    @ApiOperation(value = "Deletes the T024e instance associated with the given id.")
    @RequestMapping(value = "/{ekorg:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteT024e(@PathVariable("ekorg") String ekorg) {
        LOGGER.debug("Deleting T024e with id: {}" , ekorg);

        T024e deletedT024e = t024eService.delete(ekorg);

        return deletedT024e != null;
    }

    /**
     * @deprecated Use {@link #findT024es(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of T024e instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T024e> searchT024esByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering T024es list by query filter:{}", (Object) queryFilters);
        return t024eService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T024e instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T024e> findT024es(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T024es list by filter:", query);
        return t024eService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T024e instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T024e> filterT024es(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T024es list by filter", query);
        return t024eService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportT024es(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return t024eService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportT024esAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = T024e.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> t024eService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of T024e instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countT024es( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting T024es");
		return t024eService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getT024eAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return t024eService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service T024eService instance
	 */
	protected void setT024eService(T024eService service) {
		this.t024eService = service;
	}

}