/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.Tcurr;
import id.co.aio.procure_to_pay.sap_master.TcurrId;

/**
 * Service object for domain model class {@link Tcurr}.
 */
public interface TcurrService {

    /**
     * Creates a new Tcurr. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Tcurr if any.
     *
     * @param tcurrInstance Details of the Tcurr to be created; value cannot be null.
     * @return The newly created Tcurr.
     */
    Tcurr create(@Valid Tcurr tcurrInstance);


	/**
     * Returns Tcurr by given id if exists.
     *
     * @param tcurrId The id of the Tcurr to get; value cannot be null.
     * @return Tcurr associated with the given tcurrId.
	 * @throws EntityNotFoundException If no Tcurr is found.
     */
    Tcurr getById(TcurrId tcurrId);

    /**
     * Find and return the Tcurr by given id if exists, returns null otherwise.
     *
     * @param tcurrId The id of the Tcurr to get; value cannot be null.
     * @return Tcurr associated with the given tcurrId.
     */
    Tcurr findById(TcurrId tcurrId);

	/**
     * Find and return the list of Tcurrs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tcurrIds The id's of the Tcurr to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Tcurrs associated with the given tcurrIds.
     */
    List<Tcurr> findByMultipleIds(List<TcurrId> tcurrIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Tcurr. It replaces all fields of the existing Tcurr with the given tcurrInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Tcurr if any.
     *
     * @param tcurrInstance The details of the Tcurr to be updated; value cannot be null.
     * @return The updated Tcurr.
     * @throws EntityNotFoundException if no Tcurr is found with given input.
     */
    Tcurr update(@Valid Tcurr tcurrInstance);


    /**
     * Partially updates the details of an existing Tcurr. It updates only the
     * fields of the existing Tcurr which are passed in the tcurrInstancePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Tcurr if any.
     *
     * @param tcurrId The id of the Tcurr to be deleted; value cannot be null.
     * @param tcurrInstancePatch The partial data of Tcurr which is supposed to be updated; value cannot be null.
     * @return The updated Tcurr.
     * @throws EntityNotFoundException if no Tcurr is found with given input.
     */
    Tcurr partialUpdate(TcurrId tcurrId, Map<String, Object> tcurrInstancePatch);

    /**
     * Deletes an existing Tcurr with the given id.
     *
     * @param tcurrId The id of the Tcurr to be deleted; value cannot be null.
     * @return The deleted Tcurr.
     * @throws EntityNotFoundException if no Tcurr found with the given id.
     */
    Tcurr delete(TcurrId tcurrId);

    /**
     * Deletes an existing Tcurr with the given object.
     *
     * @param tcurrInstance The instance of the Tcurr to be deleted; value cannot be null.
     */
    void delete(Tcurr tcurrInstance);

    /**
     * Find all Tcurrs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Tcurrs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Tcurr> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Tcurrs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Tcurrs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Tcurr> findAll(String query, Pageable pageable);

    /**
     * Exports all Tcurrs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Tcurrs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Tcurrs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Tcurr.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}