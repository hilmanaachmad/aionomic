/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpCostcenter;
import id.co.aio.procure_to_pay.sap_master.VPtpCostcenterId;


/**
 * ServiceImpl object for domain model class VPtpCostcenter.
 *
 * @see VPtpCostcenter
 */
@Service("sap_master.VPtpCostcenterService")
@Validated
@EntityService(entityClass = VPtpCostcenter.class, serviceId = "sap_master")
public class VPtpCostcenterServiceImpl implements VPtpCostcenterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpCostcenterServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpCostcenterDao")
    private WMGenericDao<VPtpCostcenter, VPtpCostcenterId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpCostcenter, VPtpCostcenterId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCostcenter create(VPtpCostcenter vptpCostcenter) {
        LOGGER.debug("Creating a new VPtpCostcenter with information: {}", vptpCostcenter);

        VPtpCostcenter vptpCostcenterCreated = this.wmGenericDao.create(vptpCostcenter);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpCostcenterCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpCostcenter getById(VPtpCostcenterId vptpcostcenterId) {
        LOGGER.debug("Finding VPtpCostcenter by id: {}", vptpcostcenterId);
        return this.wmGenericDao.findById(vptpcostcenterId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpCostcenter findById(VPtpCostcenterId vptpcostcenterId) {
        LOGGER.debug("Finding VPtpCostcenter by id: {}", vptpcostcenterId);
        try {
            return this.wmGenericDao.findById(vptpcostcenterId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpCostcenter found with id: {}", vptpcostcenterId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpCostcenter> findByMultipleIds(List<VPtpCostcenterId> vptpcostcenterIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpCostcenters by ids: {}", vptpcostcenterIds);

        return this.wmGenericDao.findByMultipleIds(vptpcostcenterIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpCostcenter update(VPtpCostcenter vptpCostcenter) {
        LOGGER.debug("Updating VPtpCostcenter with information: {}", vptpCostcenter);

        this.wmGenericDao.update(vptpCostcenter);
        this.wmGenericDao.refresh(vptpCostcenter);

        return vptpCostcenter;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCostcenter partialUpdate(VPtpCostcenterId vptpcostcenterId, Map<String, Object>vptpCostcenterPatch) {
        LOGGER.debug("Partially Updating the VPtpCostcenter with id: {}", vptpcostcenterId);

        VPtpCostcenter vptpCostcenter = getById(vptpcostcenterId);

        try {
            ObjectReader vptpCostcenterReader = this.objectMapper.reader().forType(VPtpCostcenter.class).withValueToUpdate(vptpCostcenter);
            vptpCostcenter = vptpCostcenterReader.readValue(this.objectMapper.writeValueAsString(vptpCostcenterPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpCostcenterPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpCostcenter = update(vptpCostcenter);

        return vptpCostcenter;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpCostcenter delete(VPtpCostcenterId vptpcostcenterId) {
        LOGGER.debug("Deleting VPtpCostcenter with id: {}", vptpcostcenterId);
        VPtpCostcenter deleted = this.wmGenericDao.findById(vptpcostcenterId);
        if (deleted == null) {
            LOGGER.debug("No VPtpCostcenter found with id: {}", vptpcostcenterId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpCostcenter.class.getSimpleName(), vptpcostcenterId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpCostcenter vptpCostcenter) {
        LOGGER.debug("Deleting VPtpCostcenter with {}", vptpCostcenter);
        this.wmGenericDao.delete(vptpCostcenter);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpCostcenter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpCostcenters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpCostcenter> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpCostcenters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpCostcenter to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpCostcenter to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
