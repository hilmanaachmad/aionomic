/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.VPtpCoa;
import id.co.aio.procure_to_pay.sap_master.VPtpCoaId;
import id.co.aio.procure_to_pay.sap_master.service.VPtpCoaService;


/**
 * Controller object for domain model class VPtpCoa.
 * @see VPtpCoa
 */
@RestController("sap_master.VPtpCoaController")
@Api(value = "VPtpCoaController", description = "Exposes APIs to work with VPtpCoa resource.")
@RequestMapping("/sap_master/VPtpCoa")
public class VPtpCoaController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpCoaController.class);

    @Autowired
	@Qualifier("sap_master.VPtpCoaService")
	private VPtpCoaService vPtpCoaService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VPtpCoa instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpCoa createVPtpCoa(@RequestBody VPtpCoa vptpCoa) {
		LOGGER.debug("Create VPtpCoa with information: {}" , vptpCoa);

		vptpCoa = vPtpCoaService.create(vptpCoa);
		LOGGER.debug("Created VPtpCoa with information: {}" , vptpCoa);

	    return vptpCoa;
	}

    @ApiOperation(value = "Returns the VPtpCoa instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpCoa getVPtpCoa(@RequestParam("glNumber") String glNumber, @RequestParam("coa") String coa, @RequestParam("glShortText") String glShortText, @RequestParam("glLongText") String glLongText) {

        VPtpCoaId vptpcoaId = new VPtpCoaId();
        vptpcoaId.setGlNumber(glNumber);
        vptpcoaId.setCoa(coa);
        vptpcoaId.setGlShortText(glShortText);
        vptpcoaId.setGlLongText(glLongText);

        LOGGER.debug("Getting VPtpCoa with id: {}" , vptpcoaId);
        VPtpCoa vptpCoa = vPtpCoaService.getById(vptpcoaId);
        LOGGER.debug("VPtpCoa details with id: {}" , vptpCoa);

        return vptpCoa;
    }



    @ApiOperation(value = "Updates the VPtpCoa instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpCoa editVPtpCoa(@RequestParam("glNumber") String glNumber, @RequestParam("coa") String coa, @RequestParam("glShortText") String glShortText, @RequestParam("glLongText") String glLongText, @RequestBody VPtpCoa vptpCoa) {

        vptpCoa.setGlNumber(glNumber);
        vptpCoa.setCoa(coa);
        vptpCoa.setGlShortText(glShortText);
        vptpCoa.setGlLongText(glLongText);

        LOGGER.debug("VPtpCoa details with id is updated with: {}" , vptpCoa);

        return vPtpCoaService.update(vptpCoa);
    }

	@ApiOperation(value = "Partially updates the  VPtpCoa instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VPtpCoa patchVPtpCoa(@RequestParam("glNumber") String glNumber, @RequestParam("coa") String coa, @RequestParam("glShortText") String glShortText, @RequestParam("glLongText") String glLongText, @RequestBody @MapTo(VPtpCoa.class) Map<String, Object> vptpCoaPatch) {

        VPtpCoaId vptpcoaId = new VPtpCoaId();
        vptpcoaId.setGlNumber(glNumber);
        vptpcoaId.setCoa(coa);
        vptpcoaId.setGlShortText(glShortText);
        vptpcoaId.setGlLongText(glLongText);
        LOGGER.debug("Partially updating VPtpCoa with id: {}" , vptpcoaId);

        VPtpCoa vptpCoa = vPtpCoaService.partialUpdate(vptpcoaId, vptpCoaPatch);
        LOGGER.debug("VPtpCoa details after partial update: {}" , vptpCoa);

        return vptpCoa;
    }


    @ApiOperation(value = "Deletes the VPtpCoa instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVPtpCoa(@RequestParam("glNumber") String glNumber, @RequestParam("coa") String coa, @RequestParam("glShortText") String glShortText, @RequestParam("glLongText") String glLongText) {

        VPtpCoaId vptpcoaId = new VPtpCoaId();
        vptpcoaId.setGlNumber(glNumber);
        vptpcoaId.setCoa(coa);
        vptpcoaId.setGlShortText(glShortText);
        vptpcoaId.setGlLongText(glLongText);

        LOGGER.debug("Deleting VPtpCoa with id: {}" , vptpcoaId);
        VPtpCoa vptpCoa = vPtpCoaService.delete(vptpcoaId);

        return vptpCoa != null;
    }


    /**
     * @deprecated Use {@link #findVPtpCoas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VPtpCoa instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpCoa> searchVPtpCoasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VPtpCoas list by query filter:{}", (Object) queryFilters);
        return vPtpCoaService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpCoa instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpCoa> findVPtpCoas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpCoas list by filter:", query);
        return vPtpCoaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VPtpCoa instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VPtpCoa> filterVPtpCoas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VPtpCoas list by filter", query);
        return vPtpCoaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVPtpCoas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vPtpCoaService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVPtpCoasAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VPtpCoa.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vPtpCoaService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VPtpCoa instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVPtpCoas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VPtpCoas");
		return vPtpCoaService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVPtpCoaAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vPtpCoaService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VPtpCoaService instance
	 */
	protected void setVPtpCoaService(VPtpCoaService service) {
		this.vPtpCoaService = service;
	}

}