/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.T006;
import id.co.aio.procure_to_pay.sap_master.T006Id;
import id.co.aio.procure_to_pay.sap_master.service.T006Service;


/**
 * Controller object for domain model class T006.
 * @see T006
 */
@RestController("sap_master.T006Controller")
@Api(value = "T006Controller", description = "Exposes APIs to work with T006 resource.")
@RequestMapping("/sap_master/T006")
public class T006Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(T006Controller.class);

    @Autowired
	@Qualifier("sap_master.T006Service")
	private T006Service t006Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new T006 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T006 createT006(@RequestBody T006 t006) {
		LOGGER.debug("Create T006 with information: {}" , t006);

		t006 = t006Service.create(t006);
		LOGGER.debug("Created T006 with information: {}" , t006);

	    return t006;
	}

    @ApiOperation(value = "Returns the T006 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T006 getT006(@RequestParam("msehi") String msehi, @RequestParam("mseh3") String mseh3, @RequestParam("mseh6") String mseh6) {

        T006Id t006Id = new T006Id();
        t006Id.setMsehi(msehi);
        t006Id.setMseh3(mseh3);
        t006Id.setMseh6(mseh6);

        LOGGER.debug("Getting T006 with id: {}" , t006Id);
        T006 t006 = t006Service.getById(t006Id);
        LOGGER.debug("T006 details with id: {}" , t006);

        return t006;
    }



    @ApiOperation(value = "Updates the T006 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T006 editT006(@RequestParam("msehi") String msehi, @RequestParam("mseh3") String mseh3, @RequestParam("mseh6") String mseh6, @RequestBody T006 t006) {

        t006.setMsehi(msehi);
        t006.setMseh3(mseh3);
        t006.setMseh6(mseh6);

        LOGGER.debug("T006 details with id is updated with: {}" , t006);

        return t006Service.update(t006);
    }

	@ApiOperation(value = "Partially updates the  T006 instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T006 patchT006(@RequestParam("msehi") String msehi, @RequestParam("mseh3") String mseh3, @RequestParam("mseh6") String mseh6, @RequestBody @MapTo(T006.class) Map<String, Object> t006Patch) {

        T006Id t006Id = new T006Id();
        t006Id.setMsehi(msehi);
        t006Id.setMseh3(mseh3);
        t006Id.setMseh6(mseh6);
        LOGGER.debug("Partially updating T006 with id: {}" , t006Id);

        T006 t006 = t006Service.partialUpdate(t006Id, t006Patch);
        LOGGER.debug("T006 details after partial update: {}" , t006);

        return t006;
    }


    @ApiOperation(value = "Deletes the T006 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteT006(@RequestParam("msehi") String msehi, @RequestParam("mseh3") String mseh3, @RequestParam("mseh6") String mseh6) {

        T006Id t006Id = new T006Id();
        t006Id.setMsehi(msehi);
        t006Id.setMseh3(mseh3);
        t006Id.setMseh6(mseh6);

        LOGGER.debug("Deleting T006 with id: {}" , t006Id);
        T006 t006 = t006Service.delete(t006Id);

        return t006 != null;
    }


    /**
     * @deprecated Use {@link #findT006s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of T006 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T006> searchT006sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering T006s list by query filter:{}", (Object) queryFilters);
        return t006Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T006 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T006> findT006s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T006s list by filter:", query);
        return t006Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T006 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T006> filterT006s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T006s list by filter", query);
        return t006Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportT006s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return t006Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportT006sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = T006.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> t006Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of T006 instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countT006s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting T006s");
		return t006Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getT006AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return t006Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service T006Service instance
	 */
	protected void setT006Service(T006Service service) {
		this.t006Service = service;
	}

}