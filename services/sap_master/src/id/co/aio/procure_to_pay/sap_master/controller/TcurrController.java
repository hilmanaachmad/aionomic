/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.Tcurr;
import id.co.aio.procure_to_pay.sap_master.TcurrId;
import id.co.aio.procure_to_pay.sap_master.service.TcurrService;


/**
 * Controller object for domain model class Tcurr.
 * @see Tcurr
 */
@RestController("sap_master.TcurrController")
@Api(value = "TcurrController", description = "Exposes APIs to work with Tcurr resource.")
@RequestMapping("/sap_master/Tcurr")
public class TcurrController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TcurrController.class);

    @Autowired
	@Qualifier("sap_master.TcurrService")
	private TcurrService tcurrService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Tcurr instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tcurr createTcurr(@RequestBody Tcurr tcurrInstance) {
		LOGGER.debug("Create Tcurr with information: {}" , tcurrInstance);

		tcurrInstance = tcurrService.create(tcurrInstance);
		LOGGER.debug("Created Tcurr with information: {}" , tcurrInstance);

	    return tcurrInstance;
	}

    @ApiOperation(value = "Returns the Tcurr instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tcurr getTcurr(@RequestParam("kurst") String kurst, @RequestParam("fcurr") String fcurr, @RequestParam("tcurr") String tcurr, @RequestParam("gdatu") String gdatu) {

        TcurrId tcurrId = new TcurrId();
        tcurrId.setKurst(kurst);
        tcurrId.setFcurr(fcurr);
        tcurrId.setTcurr(tcurr);
        tcurrId.setGdatu(gdatu);

        LOGGER.debug("Getting Tcurr with id: {}" , tcurrId);
        Tcurr tcurrInstance = tcurrService.getById(tcurrId);
        LOGGER.debug("Tcurr details with id: {}" , tcurrInstance);

        return tcurrInstance;
    }



    @ApiOperation(value = "Updates the Tcurr instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tcurr editTcurr(@RequestParam("kurst") String kurst, @RequestParam("fcurr") String fcurr, @RequestParam("tcurr") String tcurr, @RequestParam("gdatu") String gdatu, @RequestBody Tcurr tcurrInstance) {

        tcurrInstance.setKurst(kurst);
        tcurrInstance.setFcurr(fcurr);
        tcurrInstance.setTcurr(tcurr);
        tcurrInstance.setGdatu(gdatu);

        LOGGER.debug("Tcurr details with id is updated with: {}" , tcurrInstance);

        return tcurrService.update(tcurrInstance);
    }

	@ApiOperation(value = "Partially updates the  Tcurr instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tcurr patchTcurr(@RequestParam("kurst") String kurst, @RequestParam("fcurr") String fcurr, @RequestParam("tcurr") String tcurr, @RequestParam("gdatu") String gdatu, @RequestBody @MapTo(Tcurr.class) Map<String, Object> tcurrInstancePatch) {

        TcurrId tcurrId = new TcurrId();
        tcurrId.setKurst(kurst);
        tcurrId.setFcurr(fcurr);
        tcurrId.setTcurr(tcurr);
        tcurrId.setGdatu(gdatu);
        LOGGER.debug("Partially updating Tcurr with id: {}" , tcurrId);

        Tcurr tcurrInstance = tcurrService.partialUpdate(tcurrId, tcurrInstancePatch);
        LOGGER.debug("Tcurr details after partial update: {}" , tcurrInstance);

        return tcurrInstance;
    }


    @ApiOperation(value = "Deletes the Tcurr instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTcurr(@RequestParam("kurst") String kurst, @RequestParam("fcurr") String fcurr, @RequestParam("tcurr") String tcurr, @RequestParam("gdatu") String gdatu) {

        TcurrId tcurrId = new TcurrId();
        tcurrId.setKurst(kurst);
        tcurrId.setFcurr(fcurr);
        tcurrId.setTcurr(tcurr);
        tcurrId.setGdatu(gdatu);

        LOGGER.debug("Deleting Tcurr with id: {}" , tcurrId);
        Tcurr tcurrInstance = tcurrService.delete(tcurrId);

        return tcurrInstance != null;
    }


    /**
     * @deprecated Use {@link #findTcurrs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Tcurr instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tcurr> searchTcurrsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Tcurrs list by query filter:{}", (Object) queryFilters);
        return tcurrService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tcurr instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tcurr> findTcurrs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Tcurrs list by filter:", query);
        return tcurrService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tcurr instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tcurr> filterTcurrs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Tcurrs list by filter", query);
        return tcurrService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTcurrs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tcurrService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTcurrsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Tcurr.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tcurrService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Tcurr instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTcurrs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Tcurrs");
		return tcurrService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTcurrAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tcurrService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TcurrService instance
	 */
	protected void setTcurrService(TcurrService service) {
		this.tcurrService = service;
	}

}