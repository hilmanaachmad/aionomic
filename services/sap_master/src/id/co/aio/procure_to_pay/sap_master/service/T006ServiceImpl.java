/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T006;
import id.co.aio.procure_to_pay.sap_master.T006Id;


/**
 * ServiceImpl object for domain model class T006.
 *
 * @see T006
 */
@Service("sap_master.T006Service")
@Validated
@EntityService(entityClass = T006.class, serviceId = "sap_master")
public class T006ServiceImpl implements T006Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(T006ServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.T006Dao")
    private WMGenericDao<T006, T006Id> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<T006, T006Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T006 create(T006 t006) {
        LOGGER.debug("Creating a new T006 with information: {}", t006);

        T006 t006Created = this.wmGenericDao.create(t006);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(t006Created);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T006 getById(T006Id t006Id) {
        LOGGER.debug("Finding T006 by id: {}", t006Id);
        return this.wmGenericDao.findById(t006Id);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T006 findById(T006Id t006Id) {
        LOGGER.debug("Finding T006 by id: {}", t006Id);
        try {
            return this.wmGenericDao.findById(t006Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No T006 found with id: {}", t006Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<T006> findByMultipleIds(List<T006Id> t006Ids, boolean orderedReturn) {
        LOGGER.debug("Finding T006s by ids: {}", t006Ids);

        return this.wmGenericDao.findByMultipleIds(t006Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public T006 update(T006 t006) {
        LOGGER.debug("Updating T006 with information: {}", t006);

        this.wmGenericDao.update(t006);
        this.wmGenericDao.refresh(t006);

        return t006;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T006 partialUpdate(T006Id t006Id, Map<String, Object>t006Patch) {
        LOGGER.debug("Partially Updating the T006 with id: {}", t006Id);

        T006 t006 = getById(t006Id);

        try {
            ObjectReader t006Reader = this.objectMapper.reader().forType(T006.class).withValueToUpdate(t006);
            t006 = t006Reader.readValue(this.objectMapper.writeValueAsString(t006Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", t006Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        t006 = update(t006);

        return t006;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T006 delete(T006Id t006Id) {
        LOGGER.debug("Deleting T006 with id: {}", t006Id);
        T006 deleted = this.wmGenericDao.findById(t006Id);
        if (deleted == null) {
            LOGGER.debug("No T006 found with id: {}", t006Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), T006.class.getSimpleName(), t006Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(T006 t006) {
        LOGGER.debug("Deleting T006 with {}", t006);
        this.wmGenericDao.delete(t006);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T006> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all T006s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T006> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all T006s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table T006 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table T006 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
