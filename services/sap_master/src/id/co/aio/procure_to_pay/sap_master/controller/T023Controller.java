/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.T023;
import id.co.aio.procure_to_pay.sap_master.service.T023Service;


/**
 * Controller object for domain model class T023.
 * @see T023
 */
@RestController("sap_master.T023Controller")
@Api(value = "T023Controller", description = "Exposes APIs to work with T023 resource.")
@RequestMapping("/sap_master/T023")
public class T023Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(T023Controller.class);

    @Autowired
	@Qualifier("sap_master.T023Service")
	private T023Service t023Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new T023 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T023 createT023(@RequestBody T023 t023) {
		LOGGER.debug("Create T023 with information: {}" , t023);

		t023 = t023Service.create(t023);
		LOGGER.debug("Created T023 with information: {}" , t023);

	    return t023;
	}

    @ApiOperation(value = "Returns the T023 instance associated with the given id.")
    @RequestMapping(value = "/{matkl:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T023 getT023(@PathVariable("matkl") String matkl) {
        LOGGER.debug("Getting T023 with id: {}" , matkl);

        T023 foundT023 = t023Service.getById(matkl);
        LOGGER.debug("T023 details with id: {}" , foundT023);

        return foundT023;
    }

    @ApiOperation(value = "Updates the T023 instance associated with the given id.")
    @RequestMapping(value = "/{matkl:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T023 editT023(@PathVariable("matkl") String matkl, @RequestBody T023 t023) {
        LOGGER.debug("Editing T023 with id: {}" , t023.getMatkl());

        t023.setMatkl(matkl);
        t023 = t023Service.update(t023);
        LOGGER.debug("T023 details with id: {}" , t023);

        return t023;
    }
    
    @ApiOperation(value = "Partially updates the T023 instance associated with the given id.")
    @RequestMapping(value = "/{matkl:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public T023 patchT023(@PathVariable("matkl") String matkl, @RequestBody @MapTo(T023.class) Map<String, Object> t023Patch) {
        LOGGER.debug("Partially updating T023 with id: {}" , matkl);

        T023 t023 = t023Service.partialUpdate(matkl, t023Patch);
        LOGGER.debug("T023 details after partial update: {}" , t023);

        return t023;
    }

    @ApiOperation(value = "Deletes the T023 instance associated with the given id.")
    @RequestMapping(value = "/{matkl:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteT023(@PathVariable("matkl") String matkl) {
        LOGGER.debug("Deleting T023 with id: {}" , matkl);

        T023 deletedT023 = t023Service.delete(matkl);

        return deletedT023 != null;
    }

    /**
     * @deprecated Use {@link #findT023s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of T023 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T023> searchT023sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering T023s list by query filter:{}", (Object) queryFilters);
        return t023Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T023 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T023> findT023s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T023s list by filter:", query);
        return t023Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of T023 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<T023> filterT023s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering T023s list by filter", query);
        return t023Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportT023s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return t023Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportT023sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = T023.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> t023Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of T023 instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countT023s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting T023s");
		return t023Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getT023AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return t023Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service T023Service instance
	 */
	protected void setT023Service(T023Service service) {
		this.t023Service = service;
	}

}