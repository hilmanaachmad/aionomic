/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T052;
import id.co.aio.procure_to_pay.sap_master.T052Id;


/**
 * ServiceImpl object for domain model class T052.
 *
 * @see T052
 */
@Service("sap_master.T052Service")
@Validated
@EntityService(entityClass = T052.class, serviceId = "sap_master")
public class T052ServiceImpl implements T052Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(T052ServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.T052Dao")
    private WMGenericDao<T052, T052Id> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<T052, T052Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T052 create(T052 t052) {
        LOGGER.debug("Creating a new T052 with information: {}", t052);

        T052 t052Created = this.wmGenericDao.create(t052);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(t052Created);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T052 getById(T052Id t052Id) {
        LOGGER.debug("Finding T052 by id: {}", t052Id);
        return this.wmGenericDao.findById(t052Id);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T052 findById(T052Id t052Id) {
        LOGGER.debug("Finding T052 by id: {}", t052Id);
        try {
            return this.wmGenericDao.findById(t052Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No T052 found with id: {}", t052Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<T052> findByMultipleIds(List<T052Id> t052Ids, boolean orderedReturn) {
        LOGGER.debug("Finding T052s by ids: {}", t052Ids);

        return this.wmGenericDao.findByMultipleIds(t052Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public T052 update(T052 t052) {
        LOGGER.debug("Updating T052 with information: {}", t052);

        this.wmGenericDao.update(t052);
        this.wmGenericDao.refresh(t052);

        return t052;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T052 partialUpdate(T052Id t052Id, Map<String, Object>t052Patch) {
        LOGGER.debug("Partially Updating the T052 with id: {}", t052Id);

        T052 t052 = getById(t052Id);

        try {
            ObjectReader t052Reader = this.objectMapper.reader().forType(T052.class).withValueToUpdate(t052);
            t052 = t052Reader.readValue(this.objectMapper.writeValueAsString(t052Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", t052Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        t052 = update(t052);

        return t052;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T052 delete(T052Id t052Id) {
        LOGGER.debug("Deleting T052 with id: {}", t052Id);
        T052 deleted = this.wmGenericDao.findById(t052Id);
        if (deleted == null) {
            LOGGER.debug("No T052 found with id: {}", t052Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), T052.class.getSimpleName(), t052Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(T052 t052) {
        LOGGER.debug("Deleting T052 with {}", t052);
        this.wmGenericDao.delete(t052);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T052> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all T052s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T052> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all T052s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table T052 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table T052 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
