/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.T023;


/**
 * ServiceImpl object for domain model class T023.
 *
 * @see T023
 */
@Service("sap_master.T023Service")
@Validated
@EntityService(entityClass = T023.class, serviceId = "sap_master")
public class T023ServiceImpl implements T023Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(T023ServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.T023Dao")
    private WMGenericDao<T023, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<T023, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T023 create(T023 t023) {
        LOGGER.debug("Creating a new T023 with information: {}", t023);

        T023 t023Created = this.wmGenericDao.create(t023);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(t023Created);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T023 getById(String t023Id) {
        LOGGER.debug("Finding T023 by id: {}", t023Id);
        return this.wmGenericDao.findById(t023Id);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public T023 findById(String t023Id) {
        LOGGER.debug("Finding T023 by id: {}", t023Id);
        try {
            return this.wmGenericDao.findById(t023Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No T023 found with id: {}", t023Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<T023> findByMultipleIds(List<String> t023Ids, boolean orderedReturn) {
        LOGGER.debug("Finding T023s by ids: {}", t023Ids);

        return this.wmGenericDao.findByMultipleIds(t023Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public T023 update(T023 t023) {
        LOGGER.debug("Updating T023 with information: {}", t023);

        this.wmGenericDao.update(t023);
        this.wmGenericDao.refresh(t023);

        return t023;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T023 partialUpdate(String t023Id, Map<String, Object>t023Patch) {
        LOGGER.debug("Partially Updating the T023 with id: {}", t023Id);

        T023 t023 = getById(t023Id);

        try {
            ObjectReader t023Reader = this.objectMapper.reader().forType(T023.class).withValueToUpdate(t023);
            t023 = t023Reader.readValue(this.objectMapper.writeValueAsString(t023Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", t023Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        t023 = update(t023);

        return t023;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public T023 delete(String t023Id) {
        LOGGER.debug("Deleting T023 with id: {}", t023Id);
        T023 deleted = this.wmGenericDao.findById(t023Id);
        if (deleted == null) {
            LOGGER.debug("No T023 found with id: {}", t023Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), T023.class.getSimpleName(), t023Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(T023 t023) {
        LOGGER.debug("Deleting T023 with {}", t023);
        this.wmGenericDao.delete(t023);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T023> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all T023s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<T023> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all T023s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table T023 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table T023 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
