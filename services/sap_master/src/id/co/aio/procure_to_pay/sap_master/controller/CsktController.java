/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import id.co.aio.procure_to_pay.sap_master.Cskt;
import id.co.aio.procure_to_pay.sap_master.CsktId;
import id.co.aio.procure_to_pay.sap_master.service.CsktService;


/**
 * Controller object for domain model class Cskt.
 * @see Cskt
 */
@RestController("sap_master.CsktController")
@Api(value = "CsktController", description = "Exposes APIs to work with Cskt resource.")
@RequestMapping("/sap_master/Cskt")
public class CsktController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CsktController.class);

    @Autowired
	@Qualifier("sap_master.CsktService")
	private CsktService csktService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Cskt instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cskt createCskt(@RequestBody Cskt cskt) {
		LOGGER.debug("Create Cskt with information: {}" , cskt);

		cskt = csktService.create(cskt);
		LOGGER.debug("Created Cskt with information: {}" , cskt);

	    return cskt;
	}

    @ApiOperation(value = "Returns the Cskt instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cskt getCskt(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs) {

        CsktId csktId = new CsktId();
        csktId.setKostl(kostl);
        csktId.setDatbi(datbi);
        csktId.setKokrs(kokrs);

        LOGGER.debug("Getting Cskt with id: {}" , csktId);
        Cskt cskt = csktService.getById(csktId);
        LOGGER.debug("Cskt details with id: {}" , cskt);

        return cskt;
    }



    @ApiOperation(value = "Updates the Cskt instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cskt editCskt(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs, @RequestBody Cskt cskt) {

        cskt.setKostl(kostl);
        cskt.setDatbi(datbi);
        cskt.setKokrs(kokrs);

        LOGGER.debug("Cskt details with id is updated with: {}" , cskt);

        return csktService.update(cskt);
    }

	@ApiOperation(value = "Partially updates the  Cskt instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cskt patchCskt(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs, @RequestBody @MapTo(Cskt.class) Map<String, Object> csktPatch) {

        CsktId csktId = new CsktId();
        csktId.setKostl(kostl);
        csktId.setDatbi(datbi);
        csktId.setKokrs(kokrs);
        LOGGER.debug("Partially updating Cskt with id: {}" , csktId);

        Cskt cskt = csktService.partialUpdate(csktId, csktPatch);
        LOGGER.debug("Cskt details after partial update: {}" , cskt);

        return cskt;
    }


    @ApiOperation(value = "Deletes the Cskt instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCskt(@RequestParam("kostl") String kostl, @RequestParam("datbi") Date datbi, @RequestParam("kokrs") String kokrs) {

        CsktId csktId = new CsktId();
        csktId.setKostl(kostl);
        csktId.setDatbi(datbi);
        csktId.setKokrs(kokrs);

        LOGGER.debug("Deleting Cskt with id: {}" , csktId);
        Cskt cskt = csktService.delete(csktId);

        return cskt != null;
    }


    /**
     * @deprecated Use {@link #findCskts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Cskt instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cskt> searchCsktsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Cskts list by query filter:{}", (Object) queryFilters);
        return csktService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cskt instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cskt> findCskts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cskts list by filter:", query);
        return csktService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cskt instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cskt> filterCskts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cskts list by filter", query);
        return csktService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCskts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return csktService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCsktsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Cskt.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> csktService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Cskt instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCskts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Cskts");
		return csktService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCsktAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return csktService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CsktService instance
	 */
	protected void setCsktService(CsktService service) {
		this.csktService = service;
	}

}