/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.sap_master.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import id.co.aio.procure_to_pay.sap_master.VPtpMaterialGroup;
import id.co.aio.procure_to_pay.sap_master.VPtpMaterialGroupId;


/**
 * ServiceImpl object for domain model class VPtpMaterialGroup.
 *
 * @see VPtpMaterialGroup
 */
@Service("sap_master.VPtpMaterialGroupService")
@Validated
@EntityService(entityClass = VPtpMaterialGroup.class, serviceId = "sap_master")
public class VPtpMaterialGroupServiceImpl implements VPtpMaterialGroupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VPtpMaterialGroupServiceImpl.class);


    @Autowired
    @Qualifier("sap_master.VPtpMaterialGroupDao")
    private WMGenericDao<VPtpMaterialGroup, VPtpMaterialGroupId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VPtpMaterialGroup, VPtpMaterialGroupId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpMaterialGroup create(VPtpMaterialGroup vptpMaterialGroup) {
        LOGGER.debug("Creating a new VPtpMaterialGroup with information: {}", vptpMaterialGroup);

        VPtpMaterialGroup vptpMaterialGroupCreated = this.wmGenericDao.create(vptpMaterialGroup);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vptpMaterialGroupCreated);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpMaterialGroup getById(VPtpMaterialGroupId vptpmaterialgroupId) {
        LOGGER.debug("Finding VPtpMaterialGroup by id: {}", vptpmaterialgroupId);
        return this.wmGenericDao.findById(vptpmaterialgroupId);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public VPtpMaterialGroup findById(VPtpMaterialGroupId vptpmaterialgroupId) {
        LOGGER.debug("Finding VPtpMaterialGroup by id: {}", vptpmaterialgroupId);
        try {
            return this.wmGenericDao.findById(vptpmaterialgroupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VPtpMaterialGroup found with id: {}", vptpmaterialgroupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public List<VPtpMaterialGroup> findByMultipleIds(List<VPtpMaterialGroupId> vptpmaterialgroupIds, boolean orderedReturn) {
        LOGGER.debug("Finding VPtpMaterialGroups by ids: {}", vptpmaterialgroupIds);

        return this.wmGenericDao.findByMultipleIds(vptpmaterialgroupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sap_masterTransactionManager")
    @Override
    public VPtpMaterialGroup update(VPtpMaterialGroup vptpMaterialGroup) {
        LOGGER.debug("Updating VPtpMaterialGroup with information: {}", vptpMaterialGroup);

        this.wmGenericDao.update(vptpMaterialGroup);
        this.wmGenericDao.refresh(vptpMaterialGroup);

        return vptpMaterialGroup;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpMaterialGroup partialUpdate(VPtpMaterialGroupId vptpmaterialgroupId, Map<String, Object>vptpMaterialGroupPatch) {
        LOGGER.debug("Partially Updating the VPtpMaterialGroup with id: {}", vptpmaterialgroupId);

        VPtpMaterialGroup vptpMaterialGroup = getById(vptpmaterialgroupId);

        try {
            ObjectReader vptpMaterialGroupReader = this.objectMapper.reader().forType(VPtpMaterialGroup.class).withValueToUpdate(vptpMaterialGroup);
            vptpMaterialGroup = vptpMaterialGroupReader.readValue(this.objectMapper.writeValueAsString(vptpMaterialGroupPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vptpMaterialGroupPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vptpMaterialGroup = update(vptpMaterialGroup);

        return vptpMaterialGroup;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public VPtpMaterialGroup delete(VPtpMaterialGroupId vptpmaterialgroupId) {
        LOGGER.debug("Deleting VPtpMaterialGroup with id: {}", vptpmaterialgroupId);
        VPtpMaterialGroup deleted = this.wmGenericDao.findById(vptpmaterialgroupId);
        if (deleted == null) {
            LOGGER.debug("No VPtpMaterialGroup found with id: {}", vptpmaterialgroupId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VPtpMaterialGroup.class.getSimpleName(), vptpmaterialgroupId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sap_masterTransactionManager")
    @Override
    public void delete(VPtpMaterialGroup vptpMaterialGroup) {
        LOGGER.debug("Deleting VPtpMaterialGroup with {}", vptpMaterialGroup);
        this.wmGenericDao.delete(vptpMaterialGroup);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpMaterialGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VPtpMaterialGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<VPtpMaterialGroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VPtpMaterialGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpMaterialGroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sap_master for table VPtpMaterialGroup to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sap_masterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
