/*Copyright (c) 2020-2021 aio.co.id All Rights Reserved.
 This software is the confidential and proprietary information of aio.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with aio.co.id*/
package id.co.aio.procure_to_pay.aio_xspeed_user.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import id.co.aio.procure_to_pay.aio_xspeed_user.models.query.*;

@Service
public class Aio_xspeed_userQueryExecutorServiceImpl implements Aio_xspeed_userQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Aio_xspeed_userQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("aio_xspeed_userWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "aio_xspeed_userTransactionManager", readOnly = true)
    @Override
    public Page<QgetEmployeeSupervisorResponse> executeQGetEmployeeSupervisor(String nik, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("nik", nik);

        return queryExecutor.executeNamedQuery("qGetEmployeeSupervisor", params, QgetEmployeeSupervisorResponse.class, pageable);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetEmployeeSupervisor(String nik, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("nik", nik);

        QueryProcedureInput<QgetEmployeeSupervisorResponse> queryInput = new QueryProcedureInput<>("qGetEmployeeSupervisor", params, QgetEmployeeSupervisorResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", readOnly = true)
    @Override
    public Page<QgetAllUserResponse> executeQGetAllUser(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qGetAllUser", params, QgetAllUserResponse.class, pageable);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQGetAllUser(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<QgetAllUserResponse> queryInput = new QueryProcedureInput<>("qGetAllUser", params, QgetAllUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", readOnly = true)
    @Override
    public Page<GetEmployeeDataResponse> executeGetEmployeeData(String nik, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("nik", nik);

        return queryExecutor.executeNamedQuery("getEmployeeData", params, GetEmployeeDataResponse.class, pageable);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetEmployeeData(String nik, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("nik", nik);

        QueryProcedureInput<GetEmployeeDataResponse> queryInput = new QueryProcedureInput<>("getEmployeeData", params, GetEmployeeDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager")
    @Override
    public Integer executeQChangePassEmpl(QchangePassEmplRequest qchangePassEmplRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("password", qchangePassEmplRequest.getPassword());
        params.put("nik", qchangePassEmplRequest.getNik());

        return queryExecutor.executeNamedQueryForUpdate("qChangePassEmpl", params);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager")
    @Override
    public Integer executeQForgotPassEmp(QforgotPassEmpRequest qforgotPassEmpRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("password", qforgotPassEmpRequest.getPassword());
        params.put("username", qforgotPassEmpRequest.getUsername());
        params.put("email", qforgotPassEmpRequest.getEmail());

        return queryExecutor.executeNamedQueryForUpdate("qForgotPassEmp", params);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", readOnly = true)
    @Override
    public Page<QcheckUserNikPassResponse> executeQCheckUserNikPass(String nik, String password, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("nik", nik);
        params.put("password", password);

        return queryExecutor.executeNamedQuery("qCheckUserNikPass", params, QcheckUserNikPassResponse.class, pageable);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQCheckUserNikPass(String nik, String password, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("nik", nik);
        params.put("password", password);

        QueryProcedureInput<QcheckUserNikPassResponse> queryInput = new QueryProcedureInput<>("qCheckUserNikPass", params, QcheckUserNikPassResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", readOnly = true)
    @Override
    public Page<QcheckUserEmailNikResponse> executeQCheckUserEmailNik(String email, String nik, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("email", email);
        params.put("nik", nik);

        return queryExecutor.executeNamedQuery("qCheckUserEmailNik", params, QcheckUserEmailNikResponse.class, pageable);
    }

    @Transactional(value = "aio_xspeed_userTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQCheckUserEmailNik(String email, String nik, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("email", email);
        params.put("nik", nik);

        QueryProcedureInput<QcheckUserEmailNikResponse> queryInput = new QueryProcedureInput<>("qCheckUserEmailNik", params, QcheckUserEmailNikResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}